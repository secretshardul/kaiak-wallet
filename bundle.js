// Version: 1.0.1 - March 16, 2021 13:19:13
(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var runtime = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	!(function(global) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime =  module.exports ;

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };
	})(
	  // In sloppy mode, unbound `this` refers to the global object, fallback to
	  // Function constructor if we're in global strict mode. That is sadly a form
	  // of indirect eval which violates Content Security Policy.
	  (function() {
	    return this || (typeof self === "object" && self);
	  })() || Function("return this")()
	);
	});

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g = (function() {
	  return this || (typeof self === "object" && self);
	})() || Function("return this")();

	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;

	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;

	var runtimeModule = runtime;

	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}

	var regenerator = runtimeModule;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	var asyncToGenerator = _asyncToGenerator;

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var classCallCheck = _classCallCheck;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized;

	var setPrototypeOf = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	});

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf(subClass, superClass);
	}

	var inherits = _inherits;

	var _typeof_1 = createCommonjsModule(function (module) {
	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function _typeof(obj) {
	  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return _typeof2(obj);
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;
	});

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	var possibleConstructorReturn = _possibleConstructorReturn;

	var getPrototypeOf = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;
	});

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var arrayWithHoles = _arrayWithHoles;

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	var iterableToArrayLimit = _iterableToArrayLimit;

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var nonIterableRest = _nonIterableRest;

	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
	}

	var slicedToArray = _slicedToArray;

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	var superPropBase = _superPropBase;

	var get = createCommonjsModule(function (module) {
	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    module.exports = _get = Reflect.get;
	  } else {
	    module.exports = _get = function _get(target, property, receiver) {
	      var base = superPropBase(target, property);
	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	module.exports = _get;
	});

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	var isNativeFunction = _isNativeFunction;

	var construct = createCommonjsModule(function (module) {
	function isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (isNativeReflectConstruct()) {
	    module.exports = _construct = Reflect.construct;
	  } else {
	    module.exports = _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	module.exports = _construct;
	});

	var wrapNativeSuper = createCommonjsModule(function (module) {
	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return construct(Class, arguments, getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return setPrototypeOf(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	module.exports = _wrapNativeSuper;
	});

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }
	}

	var arrayWithoutHoles = _arrayWithoutHoles;

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	var iterableToArray = _iterableToArray;

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	var nonIterableSpread = _nonIterableSpread;

	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
	}

	var toConsumableArray = _toConsumableArray;

	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function noop() {}

	var identity = function identity(x) {
	  return x;
	};

	function assign(tar, src) {
	  // @ts-ignore
	  for (var k in src) {
	    tar[k] = src[k];
	  }

	  return tar;
	}

	function add_location(element, file, line, column, _char) {
	  element.__svelte_meta = {
	    loc: {
	      file: file,
	      line: line,
	      column: column,
	      "char": _char
	    }
	  };
	}

	function run(fn) {
	  return fn();
	}

	function blank_object() {
	  return Object.create(null);
	}

	function run_all(fns) {
	  fns.forEach(run);
	}

	function is_function(thing) {
	  return typeof thing === 'function';
	}

	function safe_not_equal(a, b) {
	  return a != a ? b == b : a !== b || a && _typeof_1(a) === 'object' || typeof a === 'function';
	}

	function is_empty(obj) {
	  return Object.keys(obj).length === 0;
	}

	function create_slot(definition, ctx, $$scope, fn) {
	  if (definition) {
	    var slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
	    return definition[0](slot_ctx);
	  }
	}

	function get_slot_context(definition, ctx, $$scope, fn) {
	  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
	}

	function get_slot_changes(definition, $$scope, dirty, fn) {
	  if (definition[2] && fn) {
	    var lets = definition[2](fn(dirty));

	    if ($$scope.dirty === undefined) {
	      return lets;
	    }

	    if (_typeof_1(lets) === 'object') {
	      var merged = [];
	      var len = Math.max($$scope.dirty.length, lets.length);

	      for (var i = 0; i < len; i += 1) {
	        merged[i] = $$scope.dirty[i] | lets[i];
	      }

	      return merged;
	    }

	    return $$scope.dirty | lets;
	  }

	  return $$scope.dirty;
	}

	function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
	  var slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);

	  if (slot_changes) {
	    var slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
	    slot.p(slot_context, slot_changes);
	  }
	}

	var is_client = typeof window !== 'undefined';
	var now = is_client ? function () {
	  return window.performance.now();
	} : function () {
	  return Date.now();
	};
	var raf = is_client ? function (cb) {
	  return requestAnimationFrame(cb);
	} : noop; // used internally for testing

	var tasks = new Set();

	function run_tasks(now) {
	  tasks.forEach(function (task) {
	    if (!task.c(now)) {
	      tasks["delete"](task);
	      task.f();
	    }
	  });
	  if (tasks.size !== 0) raf(run_tasks);
	}
	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 */


	function loop(callback) {
	  var task;
	  if (tasks.size === 0) raf(run_tasks);
	  return {
	    promise: new Promise(function (fulfill) {
	      tasks.add(task = {
	        c: callback,
	        f: fulfill
	      });
	    }),
	    abort: function abort() {
	      tasks["delete"](task);
	    }
	  };
	}

	function append(target, node) {
	  target.appendChild(node);
	}

	function insert(target, node, anchor) {
	  target.insertBefore(node, anchor || null);
	}

	function detach(node) {
	  node.parentNode.removeChild(node);
	}

	function destroy_each(iterations, detaching) {
	  for (var i = 0; i < iterations.length; i += 1) {
	    if (iterations[i]) iterations[i].d(detaching);
	  }
	}

	function element(name) {
	  return document.createElement(name);
	}

	function svg_element(name) {
	  return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	function text(data) {
	  return document.createTextNode(data);
	}

	function space() {
	  return text(' ');
	}

	function empty() {
	  return text('');
	}

	function listen(node, event, handler, options) {
	  node.addEventListener(event, handler, options);
	  return function () {
	    return node.removeEventListener(event, handler, options);
	  };
	}

	function attr(node, attribute, value) {
	  if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
	}

	function children(element) {
	  return Array.from(element.childNodes);
	}

	function set_input_value(input, value) {
	  input.value = value == null ? '' : value;
	}

	function set_style(node, key, value, important) {
	  node.style.setProperty(key, value, important ? 'important' : '');
	}

	function toggle_class(element, name, toggle) {
	  element.classList[toggle ? 'add' : 'remove'](name);
	}

	function custom_event(type, detail) {
	  var e = document.createEvent('CustomEvent');
	  e.initCustomEvent(type, false, false, detail);
	  return e;
	}

	var active_docs = new Set();
	var active = 0; // https://github.com/darkskyapp/string-hash/blob/master/index.js

	function hash(str) {
	  var hash = 5381;
	  var i = str.length;

	  while (i--) {
	    hash = (hash << 5) - hash ^ str.charCodeAt(i);
	  }

	  return hash >>> 0;
	}

	function create_rule(node, a, b, duration, delay, ease, fn) {
	  var uid = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
	  var step = 16.666 / duration;
	  var keyframes = '{\n';

	  for (var p = 0; p <= 1; p += step) {
	    var t = a + (b - a) * ease(p);
	    keyframes += p * 100 + "%{".concat(fn(t, 1 - t), "}\n");
	  }

	  var rule = keyframes + "100% {".concat(fn(b, 1 - b), "}\n}");
	  var name = "__svelte_".concat(hash(rule), "_").concat(uid);
	  var doc = node.ownerDocument;
	  active_docs.add(doc);
	  var stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
	  var current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});

	  if (!current_rules[name]) {
	    current_rules[name] = true;
	    stylesheet.insertRule("@keyframes ".concat(name, " ").concat(rule), stylesheet.cssRules.length);
	  }

	  var animation = node.style.animation || '';
	  node.style.animation = "".concat(animation ? "".concat(animation, ", ") : '').concat(name, " ").concat(duration, "ms linear ").concat(delay, "ms 1 both");
	  active += 1;
	  return name;
	}

	function delete_rule(node, name) {
	  var previous = (node.style.animation || '').split(', ');
	  var next = previous.filter(name ? function (anim) {
	    return anim.indexOf(name) < 0;
	  } // remove specific animation
	  : function (anim) {
	    return anim.indexOf('__svelte') === -1;
	  } // remove all Svelte animations
	  );
	  var deleted = previous.length - next.length;

	  if (deleted) {
	    node.style.animation = next.join(', ');
	    active -= deleted;
	    if (!active) clear_rules();
	  }
	}

	function clear_rules() {
	  raf(function () {
	    if (active) return;
	    active_docs.forEach(function (doc) {
	      var stylesheet = doc.__svelte_stylesheet;
	      var i = stylesheet.cssRules.length;

	      while (i--) {
	        stylesheet.deleteRule(i);
	      }

	      doc.__svelte_rules = {};
	    });
	    active_docs.clear();
	  });
	}

	var current_component;

	function set_current_component(component) {
	  current_component = component;
	}

	function get_current_component() {
	  if (!current_component) throw new Error('Function called outside component initialization');
	  return current_component;
	}

	function onMount(fn) {
	  get_current_component().$$.on_mount.push(fn);
	}

	function afterUpdate(fn) {
	  get_current_component().$$.after_update.push(fn);
	}

	function onDestroy(fn) {
	  get_current_component().$$.on_destroy.push(fn);
	}
	// shorthand events, or if we want to implement
	// a real bubbling mechanism


	function bubble(component, event) {
	  var callbacks = component.$$.callbacks[event.type];

	  if (callbacks) {
	    callbacks.slice().forEach(function (fn) {
	      return fn(event);
	    });
	  }
	}

	var dirty_components = [];
	var binding_callbacks = [];
	var render_callbacks = [];
	var flush_callbacks = [];
	var resolved_promise = Promise.resolve();
	var update_scheduled = false;

	function schedule_update() {
	  if (!update_scheduled) {
	    update_scheduled = true;
	    resolved_promise.then(flush);
	  }
	}

	function add_render_callback(fn) {
	  render_callbacks.push(fn);
	}

	function add_flush_callback(fn) {
	  flush_callbacks.push(fn);
	}

	var flushing = false;
	var seen_callbacks = new Set();

	function flush() {
	  if (flushing) return;
	  flushing = true;

	  do {
	    // first, call beforeUpdate functions
	    // and update components
	    for (var i = 0; i < dirty_components.length; i += 1) {
	      var component = dirty_components[i];
	      set_current_component(component);
	      update(component.$$);
	    }

	    set_current_component(null);
	    dirty_components.length = 0;

	    while (binding_callbacks.length) {
	      binding_callbacks.pop()();
	    } // then, once components are updated, call
	    // afterUpdate functions. This may cause
	    // subsequent updates...


	    for (var _i = 0; _i < render_callbacks.length; _i += 1) {
	      var callback = render_callbacks[_i];

	      if (!seen_callbacks.has(callback)) {
	        // ...so guard against infinite loops
	        seen_callbacks.add(callback);
	        callback();
	      }
	    }

	    render_callbacks.length = 0;
	  } while (dirty_components.length);

	  while (flush_callbacks.length) {
	    flush_callbacks.pop()();
	  }

	  update_scheduled = false;
	  flushing = false;
	  seen_callbacks.clear();
	}

	function update($$) {
	  if ($$.fragment !== null) {
	    $$.update();
	    run_all($$.before_update);
	    var dirty = $$.dirty;
	    $$.dirty = [-1];
	    $$.fragment && $$.fragment.p($$.ctx, dirty);
	    $$.after_update.forEach(add_render_callback);
	  }
	}

	var promise;

	function wait() {
	  if (!promise) {
	    promise = Promise.resolve();
	    promise.then(function () {
	      promise = null;
	    });
	  }

	  return promise;
	}

	function dispatch(node, direction, kind) {
	  node.dispatchEvent(custom_event("".concat(direction ? 'intro' : 'outro').concat(kind)));
	}

	var outroing = new Set();
	var outros;

	function group_outros() {
	  outros = {
	    r: 0,
	    c: [],
	    p: outros // parent group

	  };
	}

	function check_outros() {
	  if (!outros.r) {
	    run_all(outros.c);
	  }

	  outros = outros.p;
	}

	function transition_in(block, local) {
	  if (block && block.i) {
	    outroing["delete"](block);
	    block.i(local);
	  }
	}

	function transition_out(block, local, detach, callback) {
	  if (block && block.o) {
	    if (outroing.has(block)) return;
	    outroing.add(block);
	    outros.c.push(function () {
	      outroing["delete"](block);

	      if (callback) {
	        if (detach) block.d(1);
	        callback();
	      }
	    });
	    block.o(local);
	  }
	}

	var null_transition = {
	  duration: 0
	};

	function create_out_transition(node, fn, params) {
	  var config = fn(node, params);
	  var running = true;
	  var animation_name;
	  var group = outros;
	  group.r += 1;

	  function go() {
	    var _ref2 = config || null_transition,
	        _ref2$delay = _ref2.delay,
	        delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
	        _ref2$duration = _ref2.duration,
	        duration = _ref2$duration === void 0 ? 300 : _ref2$duration,
	        _ref2$easing = _ref2.easing,
	        easing = _ref2$easing === void 0 ? identity : _ref2$easing,
	        _ref2$tick = _ref2.tick,
	        tick = _ref2$tick === void 0 ? noop : _ref2$tick,
	        css = _ref2.css;

	    if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
	    var start_time = now() + delay;
	    var end_time = start_time + duration;
	    add_render_callback(function () {
	      return dispatch(node, false, 'start');
	    });
	    loop(function (now) {
	      if (running) {
	        if (now >= end_time) {
	          tick(0, 1);
	          dispatch(node, false, 'end');

	          if (! --group.r) {
	            // this will result in `end()` being called,
	            // so we don't need to clean up here
	            run_all(group.c);
	          }

	          return false;
	        }

	        if (now >= start_time) {
	          var t = easing((now - start_time) / duration);
	          tick(1 - t, t);
	        }
	      }

	      return running;
	    });
	  }

	  if (is_function(config)) {
	    wait().then(function () {
	      // @ts-ignore
	      config = config();
	      go();
	    });
	  } else {
	    go();
	  }

	  return {
	    end: function end(reset) {
	      if (reset && config.tick) {
	        config.tick(1, 0);
	      }

	      if (running) {
	        if (animation_name) delete_rule(node, animation_name);
	        running = false;
	      }
	    }
	  };
	}

	var globals = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : global;

	function bind(component, name, callback) {
	  var index = component.$$.props[name];

	  if (index !== undefined) {
	    component.$$.bound[index] = callback;
	    callback(component.$$.ctx[index]);
	  }
	}

	function create_component(block) {
	  block && block.c();
	}

	function mount_component(component, target, anchor) {
	  var _component$$$ = component.$$,
	      fragment = _component$$$.fragment,
	      on_mount = _component$$$.on_mount,
	      on_destroy = _component$$$.on_destroy,
	      after_update = _component$$$.after_update;
	  fragment && fragment.m(target, anchor); // onMount happens before the initial afterUpdate

	  add_render_callback(function () {
	    var new_on_destroy = on_mount.map(run).filter(is_function);

	    if (on_destroy) {
	      on_destroy.push.apply(on_destroy, toConsumableArray(new_on_destroy));
	    } else {
	      // Edge case - component was destroyed immediately,
	      // most likely as a result of a binding initialising
	      run_all(new_on_destroy);
	    }

	    component.$$.on_mount = [];
	  });
	  after_update.forEach(add_render_callback);
	}

	function destroy_component(component, detaching) {
	  var $$ = component.$$;

	  if ($$.fragment !== null) {
	    run_all($$.on_destroy);
	    $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
	    // preserve final state?)

	    $$.on_destroy = $$.fragment = null;
	    $$.ctx = [];
	  }
	}

	function make_dirty(component, i) {
	  if (component.$$.dirty[0] === -1) {
	    dirty_components.push(component);
	    schedule_update();
	    component.$$.dirty.fill(0);
	  }

	  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
	}

	function init(component, options, instance, create_fragment, not_equal, props) {
	  var dirty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [-1];
	  var parent_component = current_component;
	  set_current_component(component);
	  var prop_values = options.props || {};
	  var $$ = component.$$ = {
	    fragment: null,
	    ctx: null,
	    // state
	    props: props,
	    update: noop,
	    not_equal: not_equal,
	    bound: blank_object(),
	    // lifecycle
	    on_mount: [],
	    on_destroy: [],
	    before_update: [],
	    after_update: [],
	    context: new Map(parent_component ? parent_component.$$.context : []),
	    // everything else
	    callbacks: blank_object(),
	    dirty: dirty,
	    skip_bound: false
	  };
	  var ready = false;
	  $$.ctx = instance ? instance(component, prop_values, function (i, ret) {
	    var value = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : ret;

	    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
	      if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
	      if (ready) make_dirty(component, i);
	    }

	    return ret;
	  }) : [];
	  $$.update();
	  ready = true;
	  run_all($$.before_update); // `false` as a special case of no DOM component

	  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

	  if (options.target) {
	    if (options.hydrate) {
	      var nodes = children(options.target); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

	      $$.fragment && $$.fragment.l(nodes);
	      nodes.forEach(detach);
	    } else {
	      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	      $$.fragment && $$.fragment.c();
	    }

	    if (options.intro) transition_in(component.$$.fragment);
	    mount_component(component, options.target, options.anchor);
	    flush();
	  }

	  set_current_component(parent_component);
	}
	/**
	 * Base class for Svelte components. Used when dev=false.
	 */


	var SvelteComponent = /*#__PURE__*/function () {
	  function SvelteComponent() {
	    classCallCheck(this, SvelteComponent);
	  }

	  createClass(SvelteComponent, [{
	    key: "$destroy",
	    value: function $destroy() {
	      destroy_component(this, 1);
	      this.$destroy = noop;
	    }
	  }, {
	    key: "$on",
	    value: function $on(type, callback) {
	      var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
	      callbacks.push(callback);
	      return function () {
	        var index = callbacks.indexOf(callback);
	        if (index !== -1) callbacks.splice(index, 1);
	      };
	    }
	  }, {
	    key: "$set",
	    value: function $set($$props) {
	      if (this.$$set && !is_empty($$props)) {
	        this.$$.skip_bound = true;
	        this.$$set($$props);
	        this.$$.skip_bound = false;
	      }
	    }
	  }]);

	  return SvelteComponent;
	}();

	function dispatch_dev(type, detail) {
	  document.dispatchEvent(custom_event(type, Object.assign({
	    version: '3.31.2'
	  }, detail)));
	}

	function append_dev(target, node) {
	  dispatch_dev('SvelteDOMInsert', {
	    target: target,
	    node: node
	  });
	  append(target, node);
	}

	function insert_dev(target, node, anchor) {
	  dispatch_dev('SvelteDOMInsert', {
	    target: target,
	    node: node,
	    anchor: anchor
	  });
	  insert(target, node, anchor);
	}

	function detach_dev(node) {
	  dispatch_dev('SvelteDOMRemove', {
	    node: node
	  });
	  detach(node);
	}

	function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
	  var modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
	  if (has_prevent_default) modifiers.push('preventDefault');
	  if (has_stop_propagation) modifiers.push('stopPropagation');
	  dispatch_dev('SvelteDOMAddEventListener', {
	    node: node,
	    event: event,
	    handler: handler,
	    modifiers: modifiers
	  });
	  var dispose = listen(node, event, handler, options);
	  return function () {
	    dispatch_dev('SvelteDOMRemoveEventListener', {
	      node: node,
	      event: event,
	      handler: handler,
	      modifiers: modifiers
	    });
	    dispose();
	  };
	}

	function attr_dev(node, attribute, value) {
	  attr(node, attribute, value);
	  if (value == null) dispatch_dev('SvelteDOMRemoveAttribute', {
	    node: node,
	    attribute: attribute
	  });else dispatch_dev('SvelteDOMSetAttribute', {
	    node: node,
	    attribute: attribute,
	    value: value
	  });
	}

	function prop_dev(node, property, value) {
	  node[property] = value;
	  dispatch_dev('SvelteDOMSetProperty', {
	    node: node,
	    property: property,
	    value: value
	  });
	}

	function set_data_dev(text, data) {
	  data = '' + data;
	  if (text.wholeText === data) return;
	  dispatch_dev('SvelteDOMSetData', {
	    node: text,
	    data: data
	  });
	  text.data = data;
	}

	function validate_each_argument(arg) {
	  if (typeof arg !== 'string' && !(arg && _typeof_1(arg) === 'object' && 'length' in arg)) {
	    var msg = '{#each} only iterates over array-like objects.';

	    if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
	      msg += ' You can use a spread to convert this iterable into an array.';
	    }

	    throw new Error(msg);
	  }
	}

	function validate_slots(name, slot, keys) {
	  for (var _i2 = 0, _Object$keys = Object.keys(slot); _i2 < _Object$keys.length; _i2++) {
	    var slot_key = _Object$keys[_i2];

	    if (!~keys.indexOf(slot_key)) {
	      console.warn("<".concat(name, "> received an unexpected slot \"").concat(slot_key, "\"."));
	    }
	  }
	}
	/**
	 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
	 */


	var SvelteComponentDev = /*#__PURE__*/function (_SvelteComponent) {
	  inherits(SvelteComponentDev, _SvelteComponent);

	  var _super2 = _createSuper(SvelteComponentDev);

	  function SvelteComponentDev(options) {
	    classCallCheck(this, SvelteComponentDev);

	    if (!options || !options.target && !options.$$inline) {
	      throw new Error("'target' is a required option");
	    }

	    return _super2.call(this);
	  }

	  createClass(SvelteComponentDev, [{
	    key: "$destroy",
	    value: function $destroy() {
	      get(getPrototypeOf(SvelteComponentDev.prototype), "$destroy", this).call(this);

	      this.$destroy = function () {
	        console.warn('Component was already destroyed'); // eslint-disable-line no-console
	      };
	    }
	  }, {
	    key: "$capture_state",
	    value: function $capture_state() {}
	  }, {
	    key: "$inject_state",
	    value: function $inject_state() {}
	  }]);

	  return SvelteComponentDev;
	}(SvelteComponent);

	var subscriber_queue = [];
	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 * @param {*=}value initial value
	 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
	 */


	function writable(value) {
	  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	  var stop;
	  var subscribers = [];

	  function set(new_value) {
	    if (safe_not_equal(value, new_value)) {
	      value = new_value;

	      if (stop) {
	        // store is ready
	        var run_queue = !subscriber_queue.length;

	        for (var i = 0; i < subscribers.length; i += 1) {
	          var s = subscribers[i];
	          s[1]();
	          subscriber_queue.push(s, value);
	        }

	        if (run_queue) {
	          for (var _i = 0; _i < subscriber_queue.length; _i += 2) {
	            subscriber_queue[_i][0](subscriber_queue[_i + 1]);
	          }

	          subscriber_queue.length = 0;
	        }
	      }
	    }
	  }

	  function update(fn) {
	    set(fn(value));
	  }

	  function subscribe(run) {
	    var invalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	    var subscriber = [run, invalidate];
	    subscribers.push(subscriber);

	    if (subscribers.length === 1) {
	      stop = start(set) || noop;
	    }

	    run(value);
	    return function () {
	      var index = subscribers.indexOf(subscriber);

	      if (index !== -1) {
	        subscribers.splice(index, 1);
	      }

	      if (subscribers.length === 0) {
	        stop();
	        stop = null;
	      }
	    };
	  }

	  return {
	    set: set,
	    update: update,
	    subscribe: subscribe
	  };
	}

	var START_STATE = {
	  menu: 'splash',
	  accountAction: undefined,
	  onboardState: undefined,
	  setupAction: undefined
	};

	/** Handles navigation */

	var navigationStore = writable(START_STATE);
	/** Controls global toast */

	var toastStore = writable({
	  languageId: null
	});

	function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file = "src/components/List.svelte";

	function create_fragment(ctx) {
	  var ul;
	  var current;
	  var default_slot_template =
	  /*#slots*/
	  ctx[1]["default"];
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[0], null);
	  var block = {
	    c: function create() {
	      ul = element("ul");
	      if (default_slot) default_slot.c();
	      attr_dev(ul, "class", "kui-list svelte-1i4l3ss");
	      add_location(ul, file, 11, 0, 148);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, ul, anchor);

	      if (default_slot) {
	        default_slot.m(ul, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        1) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[0], dirty, null, null);
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(ul);
	      if (default_slot) default_slot.d(detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("List", slots, ['default']);
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<List> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	  };

	  return [$$scope, slots];
	}

	var List = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(List, _SvelteComponentDev);

	  var _super = _createSuper$1(List);

	  function List(options) {
	    var _this;

	    classCallCheck(this, List);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance, create_fragment, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "List",
	      options: options,
	      id: create_fragment.name
	    });
	    return _this;
	  }

	  return List;
	}(SvelteComponentDev);

	function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$1 = "src/components/list/ListItem.svelte";

	function create_fragment$1(ctx) {
	  var li;
	  var div;
	  var current;
	  var mounted;
	  var dispose;
	  var default_slot_template =
	  /*#slots*/
	  ctx[1]["default"];
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[0], null);
	  var block = {
	    c: function create() {
	      li = element("li");
	      div = element("div");
	      if (default_slot) default_slot.c();
	      attr_dev(div, "class", "kui-list-cont");
	      add_location(div, file$1, 17, 4, 319);
	      attr_dev(li, "tabindex", "1");
	      attr_dev(li, "class", "navigation svelte-1jrlxp2");
	      add_location(li, file$1, 16, 0, 269);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      append_dev(li, div);

	      if (default_slot) {
	        default_slot.m(div, null);
	      }

	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(li, "click",
	        /*click_handler*/
	        ctx[2], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        1) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[0], dirty, null, null);
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      if (default_slot) default_slot.d(detaching);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$1.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$1($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("ListItem", slots, ['default']);
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<ListItem> was created with unknown prop '".concat(key, "'"));
	  });

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	  };

	  return [$$scope, slots, click_handler];
	}

	var ListItem = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(ListItem, _SvelteComponentDev);

	  var _super = _createSuper$2(ListItem);

	  function ListItem(options) {
	    var _this;

	    classCallCheck(this, ListItem);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$1, create_fragment$1, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "ListItem",
	      options: options,
	      id: create_fragment$1.name
	    });
	    return _this;
	  }

	  return ListItem;
	}(SvelteComponentDev);

	function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$2 = "src/components/list/Primary.svelte"; // (17:0) <ListItem on:click>

	function create_default_slot(ctx) {
	  var p;
	  var t;
	  var block = {
	    c: function create() {
	      p = element("p");
	      t = text(
	      /*primaryText*/
	      ctx[1]);
	      attr_dev(p, "class", "kui-pri svelte-150fhri");
	      attr_dev(p, "data-l10n-id",
	      /*primaryLanguageId*/
	      ctx[0]);
	      add_location(p, file$2, 17, 4, 372);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p, anchor);
	      append_dev(p, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*primaryText*/
	      2) set_data_dev(t,
	      /*primaryText*/
	      ctx[1]);

	      if (dirty &
	      /*primaryLanguageId*/
	      1) {
	        attr_dev(p, "data-l10n-id",
	        /*primaryLanguageId*/
	        ctx[0]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot.name,
	    type: "slot",
	    source: "(17:0) <ListItem on:click>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$2(ctx) {
	  var listitem;
	  var current;
	  listitem = new ListItem({
	    props: {
	      $$slots: {
	        "default": [create_default_slot]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  listitem.$on("click",
	  /*click_handler*/
	  ctx[2]);
	  var block = {
	    c: function create() {
	      create_component(listitem.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(listitem, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var listitem_changes = {};

	      if (dirty &
	      /*$$scope, primaryLanguageId, primaryText*/
	      11) {
	        listitem_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      listitem.$set(listitem_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(listitem.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(listitem.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(listitem, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$2.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$2($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Primary", slots, []);
	  var primaryLanguageId = $$props.primaryLanguageId;
	  var primaryText = $$props.primaryText;
	  var writable_props = ["primaryLanguageId", "primaryText"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Primary> was created with unknown prop '".concat(key, "'"));
	  });

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("primaryLanguageId" in $$props) $$invalidate(0, primaryLanguageId = $$props.primaryLanguageId);
	    if ("primaryText" in $$props) $$invalidate(1, primaryText = $$props.primaryText);
	  };

	  $$self.$capture_state = function () {
	    return {
	      ListItem: ListItem,
	      primaryLanguageId: primaryLanguageId,
	      primaryText: primaryText
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("primaryLanguageId" in $$props) $$invalidate(0, primaryLanguageId = $$props.primaryLanguageId);
	    if ("primaryText" in $$props) $$invalidate(1, primaryText = $$props.primaryText);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [primaryLanguageId, primaryText, click_handler];
	}

	var Primary = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Primary, _SvelteComponentDev);

	  var _super = _createSuper$3(Primary);

	  function Primary(options) {
	    var _this;

	    classCallCheck(this, Primary);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$2, create_fragment$2, safe_not_equal, {
	      primaryLanguageId: 0,
	      primaryText: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Primary",
	      options: options,
	      id: create_fragment$2.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*primaryLanguageId*/
	    ctx[0] === undefined && !("primaryLanguageId" in props)) {
	      console.warn("<Primary> was created without expected prop 'primaryLanguageId'");
	    }

	    if (
	    /*primaryText*/
	    ctx[1] === undefined && !("primaryText" in props)) {
	      console.warn("<Primary> was created without expected prop 'primaryText'");
	    }

	    return _this;
	  }

	  createClass(Primary, [{
	    key: "primaryLanguageId",
	    get: function get() {
	      throw new Error("<Primary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Primary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "primaryText",
	    get: function get() {
	      throw new Error("<Primary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Primary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Primary;
	}(SvelteComponentDev);

	function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$3 = "src/components/Content.svelte"; // (30:0) {#if !fullscreen}

	function create_if_block(ctx) {
	  var div;
	  var h1;
	  var t;
	  var block = {
	    c: function create() {
	      div = element("div");
	      h1 = element("h1");
	      t = text(
	      /*title*/
	      ctx[1]);
	      attr_dev(h1, "class", "kui-h1 svelte-1fpk7fr");
	      attr_dev(h1, "data-l10n-id",
	      /*titleKey*/
	      ctx[0]);
	      add_location(h1, file$3, 31, 8, 616);
	      attr_dev(div, "class", "kui-header svelte-1fpk7fr");
	      add_location(div, file$3, 30, 4, 583);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, h1);
	      append_dev(h1, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*title*/
	      2) set_data_dev(t,
	      /*title*/
	      ctx[1]);

	      if (dirty &
	      /*titleKey*/
	      1) {
	        attr_dev(h1, "data-l10n-id",
	        /*titleKey*/
	        ctx[0]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block.name,
	    type: "if",
	    source: "(30:0) {#if !fullscreen}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$3(ctx) {
	  var t;
	  var div;
	  var current;
	  var if_block = !
	  /*fullscreen*/
	  ctx[2] && create_if_block(ctx);
	  var default_slot_template =
	  /*#slots*/
	  ctx[4]["default"];
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[3], null);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      t = space();
	      div = element("div");
	      if (default_slot) default_slot.c();
	      attr_dev(div, "class", "kui-content-area svelte-1fpk7fr");
	      add_location(div, file$3, 34, 0, 689);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, t, anchor);
	      insert_dev(target, div, anchor);

	      if (default_slot) {
	        default_slot.m(div, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!
	      /*fullscreen*/
	      ctx[2]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block(ctx);
	          if_block.c();
	          if_block.m(t.parentNode, t);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        8) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[3], dirty, null, null);
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(t);
	      if (detaching) detach_dev(div);
	      if (default_slot) default_slot.d(detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$3.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$3($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Content", slots, ['default']);
	  var titleKey = $$props.titleKey;
	  var title = $$props.title;
	  var _$$props$fullscreen = $$props.fullscreen,
	      fullscreen = _$$props$fullscreen === void 0 ? false : _$$props$fullscreen;
	  var writable_props = ["titleKey", "title", "fullscreen"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Content> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("titleKey" in $$props) $$invalidate(0, titleKey = $$props.titleKey);
	    if ("title" in $$props) $$invalidate(1, title = $$props.title);
	    if ("fullscreen" in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
	    if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	  };

	  $$self.$capture_state = function () {
	    return {
	      titleKey: titleKey,
	      title: title,
	      fullscreen: fullscreen
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("titleKey" in $$props) $$invalidate(0, titleKey = $$props.titleKey);
	    if ("title" in $$props) $$invalidate(1, title = $$props.title);
	    if ("fullscreen" in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [titleKey, title, fullscreen, $$scope, slots];
	}

	var Content = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Content, _SvelteComponentDev);

	  var _super = _createSuper$4(Content);

	  function Content(options) {
	    var _this;

	    classCallCheck(this, Content);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$3, create_fragment$3, safe_not_equal, {
	      titleKey: 0,
	      title: 1,
	      fullscreen: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Content",
	      options: options,
	      id: create_fragment$3.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*titleKey*/
	    ctx[0] === undefined && !("titleKey" in props)) {
	      console.warn("<Content> was created without expected prop 'titleKey'");
	    }

	    if (
	    /*title*/
	    ctx[1] === undefined && !("title" in props)) {
	      console.warn("<Content> was created without expected prop 'title'");
	    }

	    return _this;
	  }

	  createClass(Content, [{
	    key: "titleKey",
	    get: function get() {
	      throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "title",
	    get: function get() {
	      throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "fullscreen",
	    get: function get() {
	      throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Content;
	}(SvelteComponentDev);

	function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$4 = "src/components/list/WithSecondary.svelte"; // (23:0) <ListItem on:click>

	function create_default_slot$1(ctx) {
	  var p0;
	  var t0;
	  var t1;
	  var p1;
	  var t2;
	  var block = {
	    c: function create() {
	      p0 = element("p");
	      t0 = text(
	      /*primaryText*/
	      ctx[1]);
	      t1 = space();
	      p1 = element("p");
	      t2 = text(
	      /*secondaryText*/
	      ctx[3]);
	      attr_dev(p0, "class", "kui-pri svelte-1tir0dp");
	      attr_dev(p0, "data-l10n-id",
	      /*primaryLanguageId*/
	      ctx[0]);
	      add_location(p0, file$4, 23, 4, 502);
	      attr_dev(p1, "class", "kui-sec svelte-1tir0dp");
	      attr_dev(p1, "data-l10n-id",
	      /*secondaryLanguageId*/
	      ctx[2]);
	      add_location(p1, file$4, 24, 4, 578);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p0, anchor);
	      append_dev(p0, t0);
	      insert_dev(target, t1, anchor);
	      insert_dev(target, p1, anchor);
	      append_dev(p1, t2);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*primaryText*/
	      2) set_data_dev(t0,
	      /*primaryText*/
	      ctx[1]);

	      if (dirty &
	      /*primaryLanguageId*/
	      1) {
	        attr_dev(p0, "data-l10n-id",
	        /*primaryLanguageId*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*secondaryText*/
	      8) set_data_dev(t2,
	      /*secondaryText*/
	      ctx[3]);

	      if (dirty &
	      /*secondaryLanguageId*/
	      4) {
	        attr_dev(p1, "data-l10n-id",
	        /*secondaryLanguageId*/
	        ctx[2]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p0);
	      if (detaching) detach_dev(t1);
	      if (detaching) detach_dev(p1);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$1.name,
	    type: "slot",
	    source: "(23:0) <ListItem on:click>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$4(ctx) {
	  var listitem;
	  var current;
	  listitem = new ListItem({
	    props: {
	      $$slots: {
	        "default": [create_default_slot$1]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  listitem.$on("click",
	  /*click_handler*/
	  ctx[4]);
	  var block = {
	    c: function create() {
	      create_component(listitem.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(listitem, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var listitem_changes = {};

	      if (dirty &
	      /*$$scope, secondaryLanguageId, secondaryText, primaryLanguageId, primaryText*/
	      47) {
	        listitem_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      listitem.$set(listitem_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(listitem.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(listitem.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(listitem, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$4.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$4($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("WithSecondary", slots, []);
	  var primaryLanguageId = $$props.primaryLanguageId;
	  var primaryText = $$props.primaryText;
	  var secondaryLanguageId = $$props.secondaryLanguageId;
	  var secondaryText = $$props.secondaryText;
	  var writable_props = ["primaryLanguageId", "primaryText", "secondaryLanguageId", "secondaryText"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<WithSecondary> was created with unknown prop '".concat(key, "'"));
	  });

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("primaryLanguageId" in $$props) $$invalidate(0, primaryLanguageId = $$props.primaryLanguageId);
	    if ("primaryText" in $$props) $$invalidate(1, primaryText = $$props.primaryText);
	    if ("secondaryLanguageId" in $$props) $$invalidate(2, secondaryLanguageId = $$props.secondaryLanguageId);
	    if ("secondaryText" in $$props) $$invalidate(3, secondaryText = $$props.secondaryText);
	  };

	  $$self.$capture_state = function () {
	    return {
	      ListItem: ListItem,
	      primaryLanguageId: primaryLanguageId,
	      primaryText: primaryText,
	      secondaryLanguageId: secondaryLanguageId,
	      secondaryText: secondaryText
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("primaryLanguageId" in $$props) $$invalidate(0, primaryLanguageId = $$props.primaryLanguageId);
	    if ("primaryText" in $$props) $$invalidate(1, primaryText = $$props.primaryText);
	    if ("secondaryLanguageId" in $$props) $$invalidate(2, secondaryLanguageId = $$props.secondaryLanguageId);
	    if ("secondaryText" in $$props) $$invalidate(3, secondaryText = $$props.secondaryText);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [primaryLanguageId, primaryText, secondaryLanguageId, secondaryText, click_handler];
	}

	var WithSecondary = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(WithSecondary, _SvelteComponentDev);

	  var _super = _createSuper$5(WithSecondary);

	  function WithSecondary(options) {
	    var _this;

	    classCallCheck(this, WithSecondary);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$4, create_fragment$4, safe_not_equal, {
	      primaryLanguageId: 0,
	      primaryText: 1,
	      secondaryLanguageId: 2,
	      secondaryText: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "WithSecondary",
	      options: options,
	      id: create_fragment$4.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*primaryLanguageId*/
	    ctx[0] === undefined && !("primaryLanguageId" in props)) {
	      console.warn("<WithSecondary> was created without expected prop 'primaryLanguageId'");
	    }

	    if (
	    /*primaryText*/
	    ctx[1] === undefined && !("primaryText" in props)) {
	      console.warn("<WithSecondary> was created without expected prop 'primaryText'");
	    }

	    if (
	    /*secondaryLanguageId*/
	    ctx[2] === undefined && !("secondaryLanguageId" in props)) {
	      console.warn("<WithSecondary> was created without expected prop 'secondaryLanguageId'");
	    }

	    if (
	    /*secondaryText*/
	    ctx[3] === undefined && !("secondaryText" in props)) {
	      console.warn("<WithSecondary> was created without expected prop 'secondaryText'");
	    }

	    return _this;
	  }

	  createClass(WithSecondary, [{
	    key: "primaryLanguageId",
	    get: function get() {
	      throw new Error("<WithSecondary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<WithSecondary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "primaryText",
	    get: function get() {
	      throw new Error("<WithSecondary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<WithSecondary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "secondaryLanguageId",
	    get: function get() {
	      throw new Error("<WithSecondary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<WithSecondary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "secondaryText",
	    get: function get() {
	      throw new Error("<WithSecondary>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<WithSecondary>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return WithSecondary;
	}(SvelteComponentDev);

	var Navigation = /*#__PURE__*/function () {
	  function Navigation(elements) {
	    classCallCheck(this, Navigation);

	    this.current = 0;
	    this.targetElement = null;
	    this.elements = [];
	    this.selectedElement = null;

	    if (elements.length > 0) {
	      this.elements = elements;
	    }
	  }

	  createClass(Navigation, [{
	    key: "focus",
	    value: function focus() {
	      if (this.elements.length > 0) {
	        this.targetElement = this.elements[this.current];
	        this.targetElement.focus();
	        this.selectedElement = this.targetElement;
	        this.selectedElement.scrollIntoView(false);
	      }
	    }
	  }, {
	    key: "up",
	    value: function up() {
	      if (this.elements.length > 0) {
	        var prev = this.current - 1;

	        if (prev >= 0) {
	          this.current--;
	        } else {
	          this.current = this.elements.length - 1;
	        }

	        this.focus();
	        return true;
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "down",
	    value: function down() {
	      if (this.elements.length > 0) {
	        var next = this.current + 1;

	        if (next < this.elements.length) {
	          this.current++;
	          this.targetElement = this.elements[this.current];
	        } else {
	          this.current = 0;
	        }

	        this.focus();
	        return true;
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "selection",
	    value: function selection() {
	      return this.selectedElement instanceof HTMLElement ? this.selectedElement : null;
	    }
	  }, {
	    key: "inputSelection",
	    value: function inputSelection() {
	      return this.selectedElement instanceof HTMLInputElement || this.selectedElement instanceof HTMLTextAreaElement ? this.selectedElement : null;
	    }
	  }, {
	    key: "navigatesInInputField",
	    value: function navigatesInInputField() {
	      return this.inputSelection() !== null;
	    }
	  }, {
	    key: "preventBackspaceInInputField",
	    value: function preventBackspaceInInputField() {
	      return this.inputSelection() ? this.inputSelection().selectionStart !== 0 : false;
	    }
	  }, {
	    key: "isClickableElement",
	    value: function isClickableElement() {
	      return this.selectedElement && (this.selectedElement instanceof HTMLButtonElement || this.selectedElement instanceof HTMLLIElement || this.selectedElement instanceof HTMLAnchorElement) && this.selectedElement.click !== undefined;
	    }
	  }]);

	  return Navigation;
	}();

	function clearSoftwareKeys() {
	  softwareKeysStore.set({
	    leftKey: undefined,
	    middleKey: undefined,
	    rightKey: undefined
	  });
	}
	function setSoftwareKeys(state) {
	  softwareKeysStore.set(state);
	}
	var SOFT_KEY_SELECT = {
	  languageId: 'select-button',
	  onClick: function () {
	    var _onClick2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              return _context2.abrupt("return", clickSelection());

	            case 1:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    function onClick() {
	      return _onClick2.apply(this, arguments);
	    }

	    return onClick;
	  }()
	};
	/** Sets software / menu keys */

	var softwareKeysStore = writable({});

	var NavigationStack = /*#__PURE__*/function () {
	  function NavigationStack() {
	    classCallCheck(this, NavigationStack);

	    this.data = [];
	    this.top = 0;
	    this.data = [];
	    this.top = 0;
	    navigationStore.set(START_STATE);
	  }

	  createClass(NavigationStack, [{
	    key: "push",
	    value: function push(state) {
	      this.data[this.top] = state;
	      this.top = this.top + 1;
	      navigationStore.set(state);
	    } // eslint-disable-next-line no-unused-vars

	  }, {
	    key: "pushOn",
	    value: function pushOn(patcher) {
	      var current = this.peek();
	      this.push(patcher(current));
	    }
	  }, {
	    key: "length",
	    value: function length() {
	      return this.top;
	    }
	  }, {
	    key: "peek",
	    value: function peek() {
	      return this.data[this.top - 1];
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty() {
	      return this.top === 0;
	    }
	  }, {
	    key: "pop",
	    value: function pop() {
	      if (!this.isEmpty()) {
	        this.top = this.top - 1;
	        var popped = this.data.pop();
	        navigationStore.set(this.peek());
	        return popped;
	      } else {
	        return undefined;
	      }
	    }
	  }, {
	    key: "print",
	    value: function print() {
	      var top = this.top - 1;

	      while (top >= 0) {
	        // print upto 0th index
	        console.log(this.data[top]);
	        top--;
	      }
	    }
	  }, {
	    key: "reverse",
	    value: function reverse() {
	      this.stackReverse(this.top - 1);
	    }
	  }, {
	    key: "stackReverse",
	    value: function stackReverse(index) {
	      if (index != 0) {
	        this.stackReverse(index - 1);
	      }

	      console.log(this.data[index]);
	    }
	  }]);

	  return NavigationStack;
	}();

	var secureWebstore = createCommonjsModule(function (module, exports) {
	!function(t,e){module.exports=e();}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function u(t){try{a(n.next(t));}catch(t){i(t);}}function s(t){try{a(n.throw(t));}catch(t){i(t);}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e);}))).then(u,s);}a((n=n.apply(t,e||[])).next());}))},o=this&&this.__generator||function(t,e){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u);}catch(t){i=[6,t],n=0;}finally{r=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return {next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e._idb=e.Store=void 0;var u=r(1),s=r(2),a=function(){function t(t,e){if(this.storeName=t,this.passphrase=e,!t||!e)throw new Error("Store name and passphrase required");this.store=new u.Store(t,t);}return Object.defineProperty(t.prototype,"key",{get:function(){if(!this._key)throw new Error("Master key not initialized");return this._key},enumerable:!1,configurable:!0}),t.prototype.init=function(){return n(this,void 0,void 0,(function(){var t,e,r,n=this;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),[4,u.get("__key",this.store)];case 1:return (t=o.sent())?[3,4]:[4,s.genEncryptedMasterKey(this.passphrase)];case 2:return t=o.sent(),[4,u.set("__key",t,this.store)];case 3:o.sent(),o.label=4;case 4:return this.encMasterKey=t,e=this,[4,s.decryptMasterKey(this.passphrase,this.encMasterKey)];case 5:return e._key=o.sent(),window.addEventListener("freeze",(function(){n.close();})),[3,7];case 6:throw r=o.sent(),new Error(r.message);case 7:return [2]}}))}))},t.prototype.updatePassphrase=function(t,e){return n(this,void 0,void 0,(function(){var r,n;return o(this,(function(o){switch(o.label){case 0:if(o.trys.push([0,3,,4]),!this.encMasterKey)throw new Error("No password to update set");return [4,s.updatePassphraseKey(t,e,this.encMasterKey)];case 1:return r=o.sent(),[4,u.set("__key",r,this.store)];case 2:return o.sent(),this.encMasterKey=r,[3,4];case 3:throw n=o.sent(),new Error(n.message);case 4:return [2]}}))}))},t.prototype.set=function(t,e){return n(this,void 0,void 0,(function(){return o(this,(function(r){switch(r.label){case 0:return [4,s.encrypt(this.key,e)];case 1:return e=r.sent(),[2,u.set(t,e,this.store)]}}))}))},t.prototype.get=function(t){return n(this,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return [4,u.get(t,this.store)];case 1:return (e=r.sent())?[4,s.decrypt(this.key,e)]:[2,e];case 2:return [2,r.sent()]}}))}))},t.prototype.del=function(t){return u.del(t,this.store)},t.prototype.keys=function(){return n(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return [4,u.keys(this.store)];case 1:return [2,t.sent().filter((function(t){return "__key"!==t}))]}}))}))},t.prototype.clear=function(){return u.clear(this.store)},t.prototype.close=function(){return u.close(this.store)},t.prototype.destroy=function(){var t=this;return new Promise((function(e,r){t.close();var n=window.indexedDB.deleteDatabase(t.storeName);n.onsuccess=function(t){e(t);},n.onerror=function(t){r(t);};}))},t.prototype.export=function(){return n(this,void 0,void 0,(function(){var t,e,r,n,s,a,f,c,h;return o(this,(function(o){switch(o.label){case 0:return t={},[4,this.keys()];case 1:if(!(e=o.sent()))return [3,9];o.label=2;case 2:o.trys.push([2,7,8,9]),r=i(e),n=r.next(),o.label=3;case 3:return n.done?[3,6]:"string"!=typeof(s=n.value)&&"number"!=typeof s?[3,5]:[4,u.get(s,this.store)];case 4:a=o.sent(),t[s]=a,o.label=5;case 5:return n=r.next(),[3,3];case 6:return [3,9];case 7:return f=o.sent(),c={error:f},[3,9];case 8:try{n&&!n.done&&(h=r.return)&&h.call(r);}finally{if(c)throw c.error}return [7];case 9:return [2,t]}}))}))},t.prototype.import=function(t){return n(this,void 0,void 0,(function(){var e,r,n,s,a,f;return o(this,(function(o){switch(o.label){case 0:if(!t||0===Object.keys(t).length)throw new Error("No data provided");if("[object Object]"!==Object.prototype.toString.call(t))throw new Error("Data must be a valid JSON object");o.label=1;case 1:o.trys.push([1,6,7,8]),e=i(Object.keys(t)),r=e.next(),o.label=2;case 2:return r.done?[3,5]:(n=r.value,[4,u.set(n,t[n],this.store)]);case 3:o.sent(),o.label=4;case 4:return r=e.next(),[3,2];case 5:return [3,8];case 6:return s=o.sent(),a={error:s},[3,8];case 7:try{r&&!r.done&&(f=e.return)&&f.call(e);}finally{if(a)throw a.error}return [7];case 8:return [2]}}))}))},t}();e.Store=a;var f=u;e._idb=f;},function(t,e,r){var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function u(t){try{a(n.next(t));}catch(t){i(t);}}function s(t){try{a(n.throw(t));}catch(t){i(t);}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e);}))).then(u,s);}a((n=n.apply(t,e||[])).next());}))},o=this&&this.__generator||function(t,e){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u);}catch(t){i=[6,t],n=0;}finally{r=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.close=e.keys=e.clear=e.del=e.set=e.get=e.Store=void 0;var i,u=function(){function t(t,e){void 0===t&&(t="keyval-store"),void 0===e&&(e="keyval"),this.storeName=e,this._dbName=t,this._storeName=e,this._init();}return t.prototype._withIDBStore=function(t,e){return n(this,void 0,void 0,(function(){var r,n,i=this;return o(this,(function(o){switch(o.label){case 0:return [4,this._init()];case 1:return r=o.sent(),[4,new Promise((function(o,u){var s=r.transaction(i.storeName,t);s.oncomplete=function(){return o()},s.onabort=s.onerror=function(){return u(s.error)},n=e(s.objectStore(i.storeName));}))];case 2:return o.sent(),[2,n]}}))}))},t.prototype._init=function(){return n(this,void 0,void 0,(function(){var t,e=this;return o(this,(function(r){switch(r.label){case 0:return this._dbp?[2,this._dbp]:(t=this,[4,new Promise((function(t,r){var n=window.indexedDB.open(e._dbName,1);n.onerror=function(){return r(n.error)},n.onsuccess=function(){return t(n.result)},n.onupgradeneeded=function(){n.result.createObjectStore(e._storeName);};}))]);case 1:return t._dbp=r.sent(),this._dbp.onclose=function(){e._dbp=void 0;},this._dbp.onversionchange=function(t){var r;null===t.newVersion&&(console.log("Got delete request for db"),null===(r=e._dbp)||void 0===r||r.close());},[2,this._dbp]}}))}))},t.prototype._close=function(){var t;null===(t=this._dbp)||void 0===t||t.close();},t}();function s(){return i||(i=new u),i}e.Store=u,e.get=function(t,e){return void 0===e&&(e=s()),n(this,void 0,void 0,(function(){return o(this,(function(r){switch(r.label){case 0:return [4,e._withIDBStore("readonly",(function(e){return e.get(t)}))];case 1:return [2,r.sent().result]}}))}))},e.set=function(t,e,r){return void 0===r&&(r=s()),r._withIDBStore("readwrite",(function(r){r.put(e,t);}))},e.del=function(t,e){return void 0===e&&(e=s()),e._withIDBStore("readwrite",(function(e){e.delete(t);}))},e.clear=function(t){return void 0===t&&(t=s()),t._withIDBStore("readwrite",(function(t){t.clear();}))},e.keys=function(t){return void 0===t&&(t=s()),t._withIDBStore("readonly",(function(t){var e=[];return (t.openKeyCursor||t.openCursor).call(t).onsuccess=function(){this.result&&(e.push(this.result.key),this.result.continue());},e}))},e.close=function(t){return void 0===t&&(t=s()),t._close()};},function(t,e,r){t.exports=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){(function(t){var r=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function u(t){try{a(n.next(t));}catch(t){i(t);}}function s(t){try{a(n.throw(t));}catch(t){i(t);}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e);}))).then(u,s);}a((n=n.apply(t,e||[])).next());}))},n=this&&this.__generator||function(t,e){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u);}catch(t){i=[6,t],n=0;}finally{r=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e._genRandomBufferAsStr=e._genRandomBuffer=e.updatePassphraseKey=e.decryptMasterKey=e.genEncryptedMasterKey=e.decryptBuffer=e.encryptBuffer=e.decrypt=e.encrypt=e.exportKey=e.importKey=e.genAESKey=e.verify=e.sign=e.exportPrivateKey=e.exportPublicKey=e.importPrivateKey=e.importPublicKey=e.genKeyPair=e.hash=e.genId=void 0;var o=function(t){if(!t.type||"secret"!==t.type)throw new Error("Invalid key type")},i=function(e){void 0===e&&(e=16);var r=window.crypto.getRandomValues(new Uint8Array(e));return t.from(r)},u=function(t,e){return void 0===t&&(t=16),void 0===e&&(e="hex"),e&&s(e),i(t).toString(e)},s=function(t){if("hex"!==t&&"base64"!==t)throw new Error("Invalid encoding")};e.genId=function(t){return void 0===t&&(t=32),u(Math.floor(t/2))},e.hash=function(e,o,i){return void 0===o&&(o="hex"),void 0===i&&(i="SHA-256"),r(void 0,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return [4,window.crypto.subtle.digest({name:i},"string"==typeof e?t.from(e):e)];case 1:return r=n.sent(),[2,t.from(r).toString(o)]}}))}))},e.genKeyPair=function(t,e){return void 0===t&&(t=!0),void 0===e&&(e="P-256"),window.crypto.subtle.generateKey({name:"ECDSA",namedCurve:e},t,["sign","verify"])},e.importPublicKey=function(e,r,n){return void 0===r&&(r="P-256"),void 0===n&&(n="base64"),window.crypto.subtle.importKey("spki","string"==typeof e?t.from(e,n):e,{name:"ECDSA",namedCurve:r},!0,["verify"])},e.importPrivateKey=function(e,r,n){return void 0===r&&(r="P-256"),void 0===n&&(n="base64"),window.crypto.subtle.importKey("pkcs8","string"==typeof e?t.from(e,n):e,{name:"ECDSA",namedCurve:r},!0,["sign"])},e.exportPublicKey=function(e,o){return void 0===o&&(o="base64"),r(this,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return [4,window.crypto.subtle.exportKey("spki",e)];case 1:return r=n.sent(),[2,"raw"===o?new Uint8Array(r):t.from(r).toString(o)]}}))}))},e.exportPrivateKey=function(e,o){return void 0===o&&(o="base64"),r(this,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return [4,window.crypto.subtle.exportKey("pkcs8",e)];case 1:return r=n.sent(),[2,"raw"===o?new Uint8Array(r):t.from(r).toString(o)]}}))}))},e.sign=function(e,o,i,u){return void 0===i&&(i="base64"),void 0===u&&(u="SHA-256"),r(void 0,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return [4,window.crypto.subtle.sign({name:"ECDSA",hash:{name:u}},e,t.from(JSON.stringify(o)))];case 1:return r=n.sent(),[2,"raw"===i?new Uint8Array(r):t.from(r).toString(i)]}}))}))},e.verify=function(e,o,i,u,s){return void 0===u&&(u="base64"),void 0===s&&(s="SHA-256"),r(void 0,void 0,void 0,(function(){return n(this,(function(r){return [2,window.crypto.subtle.verify({name:"ECDSA",hash:{name:s}},e,t.from(i,u),t.from(JSON.stringify(o)))]}))}))},e.genAESKey=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e="AES-GCM"),void 0===r&&(r=128),window.crypto.subtle.generateKey({name:e,length:r},t,["decrypt","encrypt"])};var a=function(e,r,n){void 0===r&&(r="raw"),void 0===n&&(n="AES-GCM");var o="raw"===r?t.from(e,"base64"):e;return window.crypto.subtle.importKey(r,o,{name:n},!0,["encrypt","decrypt"])};e.importKey=a;var f=function(t,e){return void 0===e&&(e="raw"),r(void 0,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return [4,window.crypto.subtle.exportKey(e,t)];case 1:return r=n.sent(),[2,"raw"===e?new Uint8Array(r):r]}}))}))};e.exportKey=f;var c=function(t,e,o){return r(void 0,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return [4,window.crypto.subtle.encrypt(o,t,e)];case 1:return r=n.sent(),[2,new Uint8Array(r)]}}))}))};e.encryptBuffer=c;var h=function(t,e,o){return r(void 0,void 0,void 0,(function(){var r;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,window.crypto.subtle.decrypt(o,t,e)];case 1:return r=n.sent(),[2,new Uint8Array(r)];case 2:if("Unsupported state or unable to authenticate data"===n.sent().message)throw new Error("Unable to decrypt data");return [3,3];case 3:return [2]}}))}))};e.decryptBuffer=h;var l=function(e,u,s){return void 0===s&&(s="hex"),r(void 0,void 0,void 0,(function(){var r,a,f;return n(this,(function(n){switch(n.label){case 0:return o(e),r={iv:i("AES-GCM"===e.algorithm.name?12:16),plaintext:t.from(JSON.stringify(u))},a={name:e.algorithm.name,iv:r.iv},[4,c(e,r.plaintext,a)];case 1:return f=n.sent(),[2,{ciphertext:t.from(f).toString(s),iv:t.from(r.iv).toString(s)}]}}))}))};e.encrypt=l;var p=function(e,i,u){return void 0===u&&(u="hex"),r(void 0,void 0,void 0,(function(){var r,s,a;return n(this,(function(n){switch(n.label){case 0:o(e),r={ciphertext:t.from(Object.prototype.hasOwnProperty.call(i,"ciphertext")?i.ciphertext:"",u),iv:Object.prototype.hasOwnProperty.call(i,"iv")?t.from(i.iv,u):""},s={name:e.algorithm.name,iv:r.iv},n.label=1;case 1:return n.trys.push([1,3,,4]),[4,h(e,r.ciphertext,s)];case 2:if(void 0===(a=n.sent()))throw new Error;return [2,JSON.parse(t.from(a).toString())];case 3:throw n.sent(),new Error("Unable to decrypt data");case 4:return [2]}}))}))};e.decrypt=p;var y=function(e,o,i,u){return r(void 0,void 0,void 0,(function(){var r,s;return n(this,(function(n){switch(n.label){case 0:return i<1e4&&console.warn("Less than 10000 :("),[4,window.crypto.subtle.importKey("raw","string"==typeof e?t.from(e):e,"PBKDF2",!1,["deriveBits","deriveKey"])];case 1:return r=n.sent(),[4,window.crypto.subtle.deriveBits({name:"PBKDF2",salt:o||new Uint8Array([]),iterations:i||1e5,hash:u||"SHA-256"},r,128)];case 2:return s=n.sent(),[2,new Uint8Array(s)]}}))}))},d=function(e,o,u,s){return void 0===o&&(o=i(16)),void 0===u&&(u=1e5),void 0===s&&(s="SHA-256"),r(void 0,void 0,void 0,(function(){var r,i;return n(this,(function(n){switch(n.label){case 0:return function(t){if("string"!=typeof t||""===t)throw new Error("Not a valid value")}(e),[4,y(e,o,u,s)];case 1:return r=n.sent(),[4,a(r)];case 2:return i=n.sent(),[2,{derivationParams:{salt:t.from(o).toString("hex"),iterations:u,hashAlgo:s},key:i}]}}))}))};e.genEncryptedMasterKey=function(t,e,o,i){return r(void 0,void 0,void 0,(function(){var r,s,a;return n(this,(function(n){switch(n.label){case 0:return [4,d(t,e,o,i)];case 1:return r=n.sent(),s=u(32,"hex"),[4,l(r.key,s)];case 2:return a=n.sent(),[2,{derivationParams:r.derivationParams,encryptedMasterKey:a}]}}))}))},e.updatePassphraseKey=function(e,o,i,u,s,a){return r(void 0,void 0,void 0,(function(){var r,c,h,p,y,w;return n(this,(function(n){switch(n.label){case 0:return [4,v(e,i)];case 1:return r=n.sent(),[4,d(o,u,s,a)];case 2:return c=n.sent(),y=(p=t).from,[4,f(r)];case 3:return h=y.apply(p,[n.sent()]).toString("hex"),[4,l(c.key,h)];case 4:return w=n.sent(),[2,{derivationParams:c.derivationParams,encryptedMasterKey:w}]}}))}))};var v=function(e,o){return r(void 0,void 0,void 0,(function(){var r,i,u,s,f,c,h,l,d,v;return n(this,(function(n){switch(n.label){case 0:if(!o.encryptedMasterKey||!o.derivationParams)throw new Error("Missing properties from master key");return r=o.derivationParams,i=o.encryptedMasterKey,u=r.salt,s=r.iterations,f=r.hashAlgo,c="string"==typeof u?t.from(u,"hex"):u,[4,y(e,c,s,f)];case 1:return h=n.sent(),[4,a(h)];case 2:l=n.sent(),n.label=3;case 3:return n.trys.push([3,5,,6]),[4,p(l,i)];case 4:return d=n.sent(),v=t.from(d,"hex"),[2,window.crypto.subtle.importKey("raw",v,{name:"AES-GCM"},!0,["encrypt","decrypt"])];case 5:throw n.sent(),new Error("Wrong passphrase");case 6:return [2]}}))}))};e.decryptMasterKey=v;var w=i;e._genRandomBuffer=w;var g=u;e._genRandomBufferAsStr=g;}).call(this,r(1).Buffer);},function(t,e,r){(function(t){
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	var n=r(3),o=r(4),i=r(5);function u(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,r){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,r)}function f(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n),a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=l(t,e),t}(t,e,r,n):"string"==typeof e?function(t,e,r){if("string"==typeof r&&""!==r||(r="utf8"),!a.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|y(e,r),o=(t=s(t,n)).write(e,r);return o!==n&&(t=t.slice(0,o)),t}(t,e,r):function(t,e){if(a.isBuffer(e)){var r=0|p(e.length);return 0===(t=s(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return "number"!=typeof e.length||(n=e.length)!=n?s(t,0):l(t,e);if("Buffer"===e.type&&i(e.data))return l(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=s(t,e<0?0:0|p(e)),!a.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=s(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function y(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return L(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return N(t).length;default:if(n)return L(t).length;e=(""+e).toLowerCase(),n=!0;}}function d(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(e>>>=0))return "";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,r);case"utf8":case"utf-8":return R(this,e,r);case"ascii":return x(this,e,r);case"latin1":case"binary":return B(this,e,r);case"base64":return P(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return U(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0;}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n;}function w(t,e,r,n,o){if(0===t.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return -1;r=t.length-1;}else if(r<0){if(!o)return -1;r=0;}if("string"==typeof e&&(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:g(t,e,r,n,o);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):g(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,r,n,o){var i,u=1,s=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return -1;u=2,s/=2,a/=2,r/=2;}function f(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(o){var c=-1;for(i=r;i<s;i++)if(f(t,i)===f(e,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===a)return c*u}else -1!==c&&(i-=i-c),c=-1;}else for(r+a>s&&(r=s-a),i=r;i>=0;i--){for(var h=!0,l=0;l<a;l++)if(f(t,i+l)!==f(e,l)){h=!1;break}if(h)return i}return -1}function b(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var u=0;u<n;++u){var s=parseInt(e.substr(2*u,2),16);if(isNaN(s))return u;t[r+u]=s;}return u}function m(t,e,r,n){return z(L(e,t.length-r),t,r,n)}function _(t,e,r,n){return z(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function E(t,e,r,n){return _(t,e,r,n)}function A(t,e,r,n){return z(N(e),t,r,n)}function S(t,e,r,n){return z(function(t,e){for(var r,n,o,i=[],u=0;u<t.length&&!((e-=2)<0);++u)n=(r=t.charCodeAt(u))>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function P(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function R(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,u,s,a,f=t[o],c=null,h=f>239?4:f>223?3:f>191?2:1;if(o+h<=r)switch(h){case 1:f<128&&(c=f);break;case 2:128==(192&(i=t[o+1]))&&(a=(31&f)<<6|63&i)>127&&(c=a);break;case 3:i=t[o+1],u=t[o+2],128==(192&i)&&128==(192&u)&&(a=(15&f)<<12|(63&i)<<6|63&u)>2047&&(a<55296||a>57343)&&(c=a);break;case 4:i=t[o+1],u=t[o+2],s=t[o+3],128==(192&i)&&128==(192&u)&&128==(192&s)&&(a=(15&f)<<18|(63&i)<<12|(63&u)<<6|63&s)>65535&&a<1114112&&(c=a);}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),o+=h;}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}function x(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function B(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function T(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=j(t[i]);return o}function U(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function O(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function M(t,e,r,n,o,i){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function k(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o);}function I(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255;}function K(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function C(t,e,r,n,i){return i||K(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function Y(t,e,r,n,i){return i||K(t,0,r,8),o.write(t,e,r,n,52,8),r+8}e.Buffer=a,e.SlowBuffer=function(t){return +t!=t&&(t=0),a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return !1}}(),e.kMaxLength=u(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,r){return f(null,t,e,r)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,r){return function(t,e,r,n){return c(e),e<=0?s(t,e):void 0!==r?"string"==typeof n?s(t,e).fill(r,n):s(t,e).fill(r):s(t,e)}(null,t,e,r)},a.allocUnsafe=function(t){return h(null,t)},a.allocUnsafeSlow=function(t){return h(null,t)},a.isBuffer=function(t){return !(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},a.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=a.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var u=t[r];if(!a.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(n,o),o+=u.length;}return n},a.byteLength=y,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):d.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,r,n,o){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return -1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),u=(r>>>=0)-(e>>>=0),s=Math.min(i,u),f=this.slice(n,o),c=t.slice(e,r),h=0;h<s;++h)if(f[h]!==c[h]){i=f[h],u=c[h];break}return i<u?-1:u<i?1:0},a.prototype.includes=function(t,e,r){return -1!==this.indexOf(t,e,r)},a.prototype.indexOf=function(t,e,r){return w(this,t,e,r,!0)},a.prototype.lastIndexOf=function(t,e,r){return w(this,t,e,r,!1)},a.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else {if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return _(this,t,e,r);case"latin1":case"binary":return E(this,t,e,r);case"base64":return A(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0;}},a.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},a.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=a.prototype;else {var o=e-t;r=new a(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t];}return r},a.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||O(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},a.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||O(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},a.prototype.readUInt8=function(t,e){return e||O(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||O(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||O(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||O(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||O(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||O(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||O(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},a.prototype.readInt8=function(t,e){return e||O(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||O(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt16BE=function(t,e){e||O(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt32LE=function(t,e){return e||O(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||O(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||O(t,4,this.length),o.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||O(t,4,this.length),o.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||O(t,8,this.length),o.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||O(t,8,this.length),o.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,r,n){t=+t,e|=0,r|=0,n||M(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},a.prototype.writeUIntBE=function(t,e,r,n){t=+t,e|=0,r|=0,n||M(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},a.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):k(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):k(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):I(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);M(this,t,e,r,o-1,-o);}var i=0,u=1,s=0;for(this[e]=255&t;++i<r&&(u*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/u>>0)-s&255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);M(this,t,e,r,o-1,-o);}var i=r-1,u=1,s=0;for(this[e+i]=255&t;--i>=0&&(u*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/u>>0)-s&255;return e+r},a.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):k(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):k(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):I(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,r){return C(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return C(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return Y(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return Y(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!a.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},a.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!a.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else "number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else {var u=a.isBuffer(t)?t:L(new a(t,n).toString()),s=u.length;for(i=0;i<r-e;++i)this[i+e]=u[i%s];}return this};var D=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function L(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],u=0;u<n;++u){if((r=t.charCodeAt(u))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(u+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320);}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r);}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128);}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return i}function N(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(D,"")).length<2)return "";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}}).call(this,r(2));},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")();}catch(t){"object"==typeof window&&(r=window);}t.exports=r;},function(t,e,r){e.byteLength=function(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=f(t),u=n[0],s=n[1],a=new i(function(t,e,r){return 3*(e+r)/4-r}(0,u,s)),c=0,h=s>0?u-4:u;for(r=0;r<h;r+=4)e=o[t.charCodeAt(r)]<<18|o[t.charCodeAt(r+1)]<<12|o[t.charCodeAt(r+2)]<<6|o[t.charCodeAt(r+3)],a[c++]=e>>16&255,a[c++]=e>>8&255,a[c++]=255&e;return 2===s&&(e=o[t.charCodeAt(r)]<<2|o[t.charCodeAt(r+1)]>>4,a[c++]=255&e),1===s&&(e=o[t.charCodeAt(r)]<<10|o[t.charCodeAt(r+1)]<<4|o[t.charCodeAt(r+2)]>>2,a[c++]=e>>8&255,a[c++]=255&e),a},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],u=0,s=r-o;u<s;u+=16383)i.push(c(t,u,u+16383>s?s:u+16383));return 1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"=")),i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=u.length;s<a;++s)n[s]=u[s],o[u.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return -1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t,e,r){for(var o,i,u=[],s=e;s<r;s+=3)o=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),u.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return u.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63;},function(t,e){e.read=function(t,e,r,n,o){var i,u,s=8*o-n-1,a=(1<<s)-1,f=a>>1,c=-7,h=r?o-1:0,l=r?-1:1,p=t[e+h];for(h+=l,i=p&(1<<-c)-1,p>>=-c,c+=s;c>0;i=256*i+t[e+h],h+=l,c-=8);for(u=i&(1<<-c)-1,i>>=-c,c+=n;c>0;u=256*u+t[e+h],h+=l,c-=8);if(0===i)i=1-f;else {if(i===a)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,n),i-=f;}return (p?-1:1)*u*Math.pow(2,i-n)},e.write=function(t,e,r,n,o,i){var u,s,a,f=8*i-o-1,c=(1<<f)-1,h=c>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,y=n?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-u))<1&&(u--,a*=2),(e+=u+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(s=0,u=c):u+h>=1?(s=(e*a-1)*Math.pow(2,o),u+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,o),u=0));o>=8;t[r+p]=255&s,p+=y,s/=256,o-=8);for(u=u<<o|s,f+=o;f>0;t[r+p]=255&u,p+=y,u/=256,f-=8);t[r+p-y]|=128*d;};},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return "[object Array]"==r.call(t)};}]);}])}));
	//# sourceMappingURL=secure-webstore.js.map
	});

	/*@__PURE__*/getDefaultExportFromCjs(secureWebstore);

	var core = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory();
		}
	}(commonjsGlobal, function () {

		/**
		 * CryptoJS core components.
		 */
		var CryptoJS = CryptoJS || (function (Math, undefined$1) {
		    /*
		     * Local polyfil of Object.create
		     */
		    var create = Object.create || (function () {
		        function F() {}
		        return function (obj) {
		            var subtype;

		            F.prototype = obj;

		            subtype = new F();

		            F.prototype = null;

		            return subtype;
		        };
		    }());

		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = (function () {


		        return {
		            /**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */
		            extend: function (overrides) {
		                // Spawn
		                var subtype = create(this);

		                // Augment
		                if (overrides) {
		                    subtype.mixIn(overrides);
		                }

		                // Create default initializer
		                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
		                    subtype.init = function () {
		                        subtype.$super.init.apply(this, arguments);
		                    };
		                }

		                // Initializer's prototype is the subtype object
		                subtype.init.prototype = subtype;

		                // Reference supertype
		                subtype.$super = this;

		                return subtype;
		            },

		            /**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */
		            create: function () {
		                var instance = this.extend();
		                instance.init.apply(instance, arguments);

		                return instance;
		            },

		            /**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */
		            init: function () {
		            },

		            /**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */
		            mixIn: function (properties) {
		                for (var propertyName in properties) {
		                    if (properties.hasOwnProperty(propertyName)) {
		                        this[propertyName] = properties[propertyName];
		                    }
		                }

		                // IE won't copy toString using the loop above
		                if (properties.hasOwnProperty('toString')) {
		                    this.toString = properties.toString;
		                }
		            },

		            /**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */
		            clone: function () {
		                return this.init.prototype.extend(this);
		            }
		        };
		    }());

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined$1) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 4;
		            }
		        },

		        /**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */
		        toString: function (encoder) {
		            return (encoder || Hex).stringify(this);
		        },

		        /**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */
		        concat: function (wordArray) {
		            // Shortcuts
		            var thisWords = this.words;
		            var thatWords = wordArray.words;
		            var thisSigBytes = this.sigBytes;
		            var thatSigBytes = wordArray.sigBytes;

		            // Clamp excess bits
		            this.clamp();

		            // Concat
		            if (thisSigBytes % 4) {
		                // Copy one byte at a time
		                for (var i = 0; i < thatSigBytes; i++) {
		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
		                }
		            } else {
		                // Copy one word at a time
		                for (var i = 0; i < thatSigBytes; i += 4) {
		                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
		                }
		            }
		            this.sigBytes += thatSigBytes;

		            // Chainable
		            return this;
		        },

		        /**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */
		        clamp: function () {
		            // Shortcuts
		            var words = this.words;
		            var sigBytes = this.sigBytes;

		            // Clamp
		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
		            words.length = Math.ceil(sigBytes / 4);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone.words = this.words.slice(0);

		            return clone;
		        },

		        /**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */
		        random: function (nBytes) {
		            var words = [];

		            var r = (function (m_w) {
		                var m_w = m_w;
		                var m_z = 0x3ade68b1;
		                var mask = 0xffffffff;

		                return function () {
		                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
		                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
		                    var result = ((m_z << 0x10) + m_w) & mask;
		                    result /= 0x100000000;
		                    result += 0.5;
		                    return result * (Math.random() > .5 ? 1 : -1);
		                }
		            });

		            for (var i = 0, rcache; i < nBytes; i += 4) {
		                var _r = r((rcache || Math.random()) * 0x100000000);

		                rcache = _r() * 0x3ade67b7;
		                words.push((_r() * 0x100000000) | 0);
		            }

		            return new WordArray.init(words, nBytes);
		        }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		        /**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var hexChars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                hexChars.push((bite >>> 4).toString(16));
		                hexChars.push((bite & 0x0f).toString(16));
		            }

		            return hexChars.join('');
		        },

		        /**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */
		        parse: function (hexStr) {
		            // Shortcut
		            var hexStrLength = hexStr.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < hexStrLength; i += 2) {
		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
		            }

		            return new WordArray.init(words, hexStrLength / 2);
		        }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		        /**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var latin1Chars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                latin1Chars.push(String.fromCharCode(bite));
		            }

		            return latin1Chars.join('');
		        },

		        /**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */
		        parse: function (latin1Str) {
		            // Shortcut
		            var latin1StrLength = latin1Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < latin1StrLength; i++) {
		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
		            }

		            return new WordArray.init(words, latin1StrLength);
		        }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		        /**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            try {
		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		            } catch (e) {
		                throw new Error('Malformed UTF-8 data');
		            }
		        },

		        /**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */
		        parse: function (utf8Str) {
		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		        }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		        /**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */
		        reset: function () {
		            // Initial values
		            this._data = new WordArray.init();
		            this._nDataBytes = 0;
		        },

		        /**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */
		        _append: function (data) {
		            // Convert string to WordArray, else assume WordArray already
		            if (typeof data == 'string') {
		                data = Utf8.parse(data);
		            }

		            // Append
		            this._data.concat(data);
		            this._nDataBytes += data.sigBytes;
		        },

		        /**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */
		        _process: function (doFlush) {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var dataSigBytes = data.sigBytes;
		            var blockSize = this.blockSize;
		            var blockSizeBytes = blockSize * 4;

		            // Count blocks ready
		            var nBlocksReady = dataSigBytes / blockSizeBytes;
		            if (doFlush) {
		                // Round up to include partial blocks
		                nBlocksReady = Math.ceil(nBlocksReady);
		            } else {
		                // Round down to include only full blocks,
		                // less the number of blocks that must remain in the buffer
		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		            }

		            // Count words ready
		            var nWordsReady = nBlocksReady * blockSize;

		            // Count bytes ready
		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		            // Process blocks
		            if (nWordsReady) {
		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		                    // Perform concrete-algorithm logic
		                    this._doProcessBlock(dataWords, offset);
		                }

		                // Remove processed words
		                var processedWords = dataWords.splice(0, nWordsReady);
		                data.sigBytes -= nBytesReady;
		            }

		            // Return processed words
		            return new WordArray.init(processedWords, nBytesReady);
		        },

		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone._data = this._data.clone();

		            return clone;
		        },

		        _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         */
		        cfg: Base.extend(),

		        /**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */
		        init: function (cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-hasher logic
		            this._doReset();
		        },

		        /**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            // Append
		            this._append(messageUpdate);

		            // Update the hash
		            this._process();

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Final message update
		            if (messageUpdate) {
		                this._append(messageUpdate);
		            }

		            // Perform concrete-hasher logic
		            var hash = this._doFinalize();

		            return hash;
		        },

		        blockSize: 512/32,

		        /**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */
		        _createHelper: function (hasher) {
		            return function (message, cfg) {
		                return new hasher.init(cfg).finalize(message);
		            };
		        },

		        /**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */
		        _createHmacHelper: function (hasher) {
		            return function (message, key) {
		                return new C_algo.HMAC.init(hasher, key).finalize(message);
		            };
		        }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};

		    return C;
		}(Math));


		return CryptoJS;

	}));
	});

	var x64Core = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var X32WordArray = C_lib.WordArray;

		    /**
		     * x64 namespace.
		     */
		    var C_x64 = C.x64 = {};

		    /**
		     * A 64-bit word.
		     */
		    var X64Word = C_x64.Word = Base.extend({
		        /**
		         * Initializes a newly created 64-bit word.
		         *
		         * @param {number} high The high 32 bits.
		         * @param {number} low The low 32 bits.
		         *
		         * @example
		         *
		         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
		         */
		        init: function (high, low) {
		            this.high = high;
		            this.low = low;
		        }

		        /**
		         * Bitwise NOTs this word.
		         *
		         * @return {X64Word} A new x64-Word object after negating.
		         *
		         * @example
		         *
		         *     var negated = x64Word.not();
		         */
		        // not: function () {
		            // var high = ~this.high;
		            // var low = ~this.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ANDs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to AND with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ANDing.
		         *
		         * @example
		         *
		         *     var anded = x64Word.and(anotherX64Word);
		         */
		        // and: function (word) {
		            // var high = this.high & word.high;
		            // var low = this.low & word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise ORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to OR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after ORing.
		         *
		         * @example
		         *
		         *     var ored = x64Word.or(anotherX64Word);
		         */
		        // or: function (word) {
		            // var high = this.high | word.high;
		            // var low = this.low | word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Bitwise XORs this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to XOR with this word.
		         *
		         * @return {X64Word} A new x64-Word object after XORing.
		         *
		         * @example
		         *
		         *     var xored = x64Word.xor(anotherX64Word);
		         */
		        // xor: function (word) {
		            // var high = this.high ^ word.high;
		            // var low = this.low ^ word.low;

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the left.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftL(25);
		         */
		        // shiftL: function (n) {
		            // if (n < 32) {
		                // var high = (this.high << n) | (this.low >>> (32 - n));
		                // var low = this.low << n;
		            // } else {
		                // var high = this.low << (n - 32);
		                // var low = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Shifts this word n bits to the right.
		         *
		         * @param {number} n The number of bits to shift.
		         *
		         * @return {X64Word} A new x64-Word object after shifting.
		         *
		         * @example
		         *
		         *     var shifted = x64Word.shiftR(7);
		         */
		        // shiftR: function (n) {
		            // if (n < 32) {
		                // var low = (this.low >>> n) | (this.high << (32 - n));
		                // var high = this.high >>> n;
		            // } else {
		                // var low = this.high >>> (n - 32);
		                // var high = 0;
		            // }

		            // return X64Word.create(high, low);
		        // },

		        /**
		         * Rotates this word n bits to the left.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotL(25);
		         */
		        // rotL: function (n) {
		            // return this.shiftL(n).or(this.shiftR(64 - n));
		        // },

		        /**
		         * Rotates this word n bits to the right.
		         *
		         * @param {number} n The number of bits to rotate.
		         *
		         * @return {X64Word} A new x64-Word object after rotating.
		         *
		         * @example
		         *
		         *     var rotated = x64Word.rotR(7);
		         */
		        // rotR: function (n) {
		            // return this.shiftR(n).or(this.shiftL(64 - n));
		        // },

		        /**
		         * Adds this word with the passed word.
		         *
		         * @param {X64Word} word The x64-Word to add with this word.
		         *
		         * @return {X64Word} A new x64-Word object after adding.
		         *
		         * @example
		         *
		         *     var added = x64Word.add(anotherX64Word);
		         */
		        // add: function (word) {
		            // var low = (this.low + word.low) | 0;
		            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
		            // var high = (this.high + word.high + carry) | 0;

		            // return X64Word.create(high, low);
		        // }
		    });

		    /**
		     * An array of 64-bit words.
		     *
		     * @property {Array} words The array of CryptoJS.x64.Word objects.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var X64WordArray = C_x64.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create();
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ]);
		         *
		         *     var wordArray = CryptoJS.x64.WordArray.create([
		         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
		         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
		         *     ], 10);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined$1) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 8;
		            }
		        },

		        /**
		         * Converts this 64-bit word array to a 32-bit word array.
		         *
		         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
		         *
		         * @example
		         *
		         *     var x32WordArray = x64WordArray.toX32();
		         */
		        toX32: function () {
		            // Shortcuts
		            var x64Words = this.words;
		            var x64WordsLength = x64Words.length;

		            // Convert
		            var x32Words = [];
		            for (var i = 0; i < x64WordsLength; i++) {
		                var x64Word = x64Words[i];
		                x32Words.push(x64Word.high);
		                x32Words.push(x64Word.low);
		            }

		            return X32WordArray.create(x32Words, this.sigBytes);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {X64WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = x64WordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);

		            // Clone "words" array
		            var words = clone.words = this.words.slice(0);

		            // Clone each X64Word object
		            var wordsLength = words.length;
		            for (var i = 0; i < wordsLength; i++) {
		                words[i] = words[i].clone();
		            }

		            return clone;
		        }
		    });
		}());


		return CryptoJS;

	}));
	});

	var libTypedarrays = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Check if typed arrays are supported
		    if (typeof ArrayBuffer != 'function') {
		        return;
		    }

		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;

		    // Reference original init
		    var superInit = WordArray.init;

		    // Augment WordArray.init to handle typed arrays
		    var subInit = WordArray.init = function (typedArray) {
		        // Convert buffers to uint8
		        if (typedArray instanceof ArrayBuffer) {
		            typedArray = new Uint8Array(typedArray);
		        }

		        // Convert other array views to uint8
		        if (
		            typedArray instanceof Int8Array ||
		            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
		            typedArray instanceof Int16Array ||
		            typedArray instanceof Uint16Array ||
		            typedArray instanceof Int32Array ||
		            typedArray instanceof Uint32Array ||
		            typedArray instanceof Float32Array ||
		            typedArray instanceof Float64Array
		        ) {
		            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
		        }

		        // Handle Uint8Array
		        if (typedArray instanceof Uint8Array) {
		            // Shortcut
		            var typedArrayByteLength = typedArray.byteLength;

		            // Extract bytes
		            var words = [];
		            for (var i = 0; i < typedArrayByteLength; i++) {
		                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
		            }

		            // Initialize this word array
		            superInit.call(this, words, typedArrayByteLength);
		        } else {
		            // Else call normal init
		            superInit.apply(this, arguments);
		        }
		    };

		    subInit.prototype = WordArray;
		}());


		return CryptoJS.lib.WordArray;

	}));
	});

	var encUtf16 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * UTF-16 BE encoding strategy.
		     */
		    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
		        /**
		         * Converts a word array to a UTF-16 BE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 BE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 BE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 BE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    /**
		     * UTF-16 LE encoding strategy.
		     */
		    C_enc.Utf16LE = {
		        /**
		         * Converts a word array to a UTF-16 LE string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-16 LE string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var utf16Chars = [];
		            for (var i = 0; i < sigBytes; i += 2) {
		                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
		                utf16Chars.push(String.fromCharCode(codePoint));
		            }

		            return utf16Chars.join('');
		        },

		        /**
		         * Converts a UTF-16 LE string to a word array.
		         *
		         * @param {string} utf16Str The UTF-16 LE string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
		         */
		        parse: function (utf16Str) {
		            // Shortcut
		            var utf16StrLength = utf16Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < utf16StrLength; i++) {
		                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
		            }

		            return WordArray.create(words, utf16StrLength * 2);
		        }
		    };

		    function swapEndian(word) {
		        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
		    }
		}());


		return CryptoJS.enc.Utf16;

	}));
	});

	var encBase64 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_enc = C.enc;

		    /**
		     * Base64 encoding strategy.
		     */
		    var Base64 = C_enc.Base64 = {
		        /**
		         * Converts a word array to a Base64 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Base64 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;
		            var map = this._map;

		            // Clamp excess bits
		            wordArray.clamp();

		            // Convert
		            var base64Chars = [];
		            for (var i = 0; i < sigBytes; i += 3) {
		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
		                }
		            }

		            // Add padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                while (base64Chars.length % 4) {
		                    base64Chars.push(paddingChar);
		                }
		            }

		            return base64Chars.join('');
		        },

		        /**
		         * Converts a Base64 string to a word array.
		         *
		         * @param {string} base64Str The Base64 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		         */
		        parse: function (base64Str) {
		            // Shortcuts
		            var base64StrLength = base64Str.length;
		            var map = this._map;
		            var reverseMap = this._reverseMap;

		            if (!reverseMap) {
		                    reverseMap = this._reverseMap = [];
		                    for (var j = 0; j < map.length; j++) {
		                        reverseMap[map.charCodeAt(j)] = j;
		                    }
		            }

		            // Ignore padding
		            var paddingChar = map.charAt(64);
		            if (paddingChar) {
		                var paddingIndex = base64Str.indexOf(paddingChar);
		                if (paddingIndex !== -1) {
		                    base64StrLength = paddingIndex;
		                }
		            }

		            // Convert
		            return parseLoop(base64Str, base64StrLength, reverseMap);

		        },

		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		    };

		    function parseLoop(base64Str, base64StrLength, reverseMap) {
		      var words = [];
		      var nBytes = 0;
		      for (var i = 0; i < base64StrLength; i++) {
		          if (i % 4) {
		              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
		              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
		              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
		              nBytes++;
		          }
		      }
		      return WordArray.create(words, nBytes);
		    }
		}());


		return CryptoJS.enc.Base64;

	}));
	});

	var md5 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		        for (var i = 0; i < 64; i++) {
		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
		        }
		    }());

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }

		            // Shortcuts
		            var H = this._hash.words;

		            var M_offset_0  = M[offset + 0];
		            var M_offset_1  = M[offset + 1];
		            var M_offset_2  = M[offset + 2];
		            var M_offset_3  = M[offset + 3];
		            var M_offset_4  = M[offset + 4];
		            var M_offset_5  = M[offset + 5];
		            var M_offset_6  = M[offset + 6];
		            var M_offset_7  = M[offset + 7];
		            var M_offset_8  = M[offset + 8];
		            var M_offset_9  = M[offset + 9];
		            var M_offset_10 = M[offset + 10];
		            var M_offset_11 = M[offset + 11];
		            var M_offset_12 = M[offset + 12];
		            var M_offset_13 = M[offset + 13];
		            var M_offset_14 = M[offset + 14];
		            var M_offset_15 = M[offset + 15];

		            // Working varialbes
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];

		            // Computation
		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		            var nBitsTotalL = nBitsTotal;
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
		            );
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
		            );

		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                // Shortcut
		                var H_i = H[i];

		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    function FF(a, b, c, d, x, s, t) {
		        var n = a + ((b & c) | (~b & d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function GG(a, b, c, d, x, s, t) {
		        var n = a + ((b & d) | (c & ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function HH(a, b, c, d, x, s, t) {
		        var n = a + (b ^ c ^ d) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function II(a, b, c, d, x, s, t) {
		        var n = a + (c ^ (b | ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		}(Math));


		return CryptoJS.MD5;

	}));
	});

	var sha1 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-1 hash algorithm.
		     */
		    var SHA1 = C_algo.SHA1 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476,
		                0xc3d2e1f0
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];

		            // Computation
		            for (var i = 0; i < 80; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
		                    W[i] = (n << 1) | (n >>> 31);
		                }

		                var t = ((a << 5) | (a >>> 27)) + e + W[i];
		                if (i < 20) {
		                    t += ((b & c) | (~b & d)) + 0x5a827999;
		                } else if (i < 40) {
		                    t += (b ^ c ^ d) + 0x6ed9eba1;
		                } else if (i < 60) {
		                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
		                } else /* if (i < 80) */ {
		                    t += (b ^ c ^ d) - 0x359d3e2a;
		                }

		                e = d;
		                d = c;
		                c = (b << 30) | (b >>> 2);
		                b = a;
		                a = t;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */
		    C.SHA1 = Hasher._createHelper(SHA1);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */
		    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
		}());


		return CryptoJS.SHA1;

	}));
	});

	var sha256 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Initialization and round constants tables
		    var H = [];
		    var K = [];

		    // Compute constants
		    (function () {
		        function isPrime(n) {
		            var sqrtN = Math.sqrt(n);
		            for (var factor = 2; factor <= sqrtN; factor++) {
		                if (!(n % factor)) {
		                    return false;
		                }
		            }

		            return true;
		        }

		        function getFractionalBits(n) {
		            return ((n - (n | 0)) * 0x100000000) | 0;
		        }

		        var n = 2;
		        var nPrime = 0;
		        while (nPrime < 64) {
		            if (isPrime(n)) {
		                if (nPrime < 8) {
		                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
		                }
		                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

		                nPrime++;
		            }

		            n++;
		        }
		    }());

		    // Reusable object
		    var W = [];

		    /**
		     * SHA-256 hash algorithm.
		     */
		    var SHA256 = C_algo.SHA256 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init(H.slice(0));
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var H = this._hash.words;

		            // Working variables
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];
		            var e = H[4];
		            var f = H[5];
		            var g = H[6];
		            var h = H[7];

		            // Computation
		            for (var i = 0; i < 64; i++) {
		                if (i < 16) {
		                    W[i] = M[offset + i] | 0;
		                } else {
		                    var gamma0x = W[i - 15];
		                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
		                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
		                                   (gamma0x >>> 3);

		                    var gamma1x = W[i - 2];
		                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
		                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
		                                   (gamma1x >>> 10);

		                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
		                }

		                var ch  = (e & f) ^ (~e & g);
		                var maj = (a & b) ^ (a & c) ^ (b & c);

		                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
		                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

		                var t1 = h + sigma1 + ch + K[i] + W[i];
		                var t2 = sigma0 + maj;

		                h = g;
		                g = f;
		                f = e;
		                e = (d + t1) | 0;
		                d = c;
		                c = b;
		                b = a;
		                a = (t1 + t2) | 0;
		            }

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		            H[4] = (H[4] + e) | 0;
		            H[5] = (H[5] + f) | 0;
		            H[6] = (H[6] + g) | 0;
		            H[7] = (H[7] + h) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Return final computed hash
		            return this._hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA256('message');
		     *     var hash = CryptoJS.SHA256(wordArray);
		     */
		    C.SHA256 = Hasher._createHelper(SHA256);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA256(message, key);
		     */
		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
		}(Math));


		return CryptoJS.SHA256;

	}));
	});

	var sha224 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, sha256);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA256 = C_algo.SHA256;

		    /**
		     * SHA-224 hash algorithm.
		     */
		    var SHA224 = C_algo.SHA224 = SHA256.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
		                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA256._doFinalize.call(this);

		            hash.sigBytes -= 4;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA224('message');
		     *     var hash = CryptoJS.SHA224(wordArray);
		     */
		    C.SHA224 = SHA256._createHelper(SHA224);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA224(message, key);
		     */
		    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
		}());


		return CryptoJS.SHA224;

	}));
	});

	var sha512 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, x64Core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;

		    function X64Word_create() {
		        return X64Word.create.apply(X64Word, arguments);
		    }

		    // Constants
		    var K = [
		        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
		        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
		        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
		        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
		        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
		        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
		        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
		        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
		        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
		        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
		        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
		        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
		        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
		        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
		        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
		        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
		        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
		        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
		        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
		        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
		        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
		        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
		        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
		        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
		        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
		        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
		        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
		        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
		        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
		        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
		        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
		        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
		        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
		        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
		        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
		        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
		        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
		        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
		        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
		        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
		    ];

		    // Reusable objects
		    var W = [];
		    (function () {
		        for (var i = 0; i < 80; i++) {
		            W[i] = X64Word_create();
		        }
		    }());

		    /**
		     * SHA-512 hash algorithm.
		     */
		    var SHA512 = C_algo.SHA512 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
		                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
		                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
		                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var H = this._hash.words;

		            var H0 = H[0];
		            var H1 = H[1];
		            var H2 = H[2];
		            var H3 = H[3];
		            var H4 = H[4];
		            var H5 = H[5];
		            var H6 = H[6];
		            var H7 = H[7];

		            var H0h = H0.high;
		            var H0l = H0.low;
		            var H1h = H1.high;
		            var H1l = H1.low;
		            var H2h = H2.high;
		            var H2l = H2.low;
		            var H3h = H3.high;
		            var H3l = H3.low;
		            var H4h = H4.high;
		            var H4l = H4.low;
		            var H5h = H5.high;
		            var H5l = H5.low;
		            var H6h = H6.high;
		            var H6l = H6.low;
		            var H7h = H7.high;
		            var H7l = H7.low;

		            // Working variables
		            var ah = H0h;
		            var al = H0l;
		            var bh = H1h;
		            var bl = H1l;
		            var ch = H2h;
		            var cl = H2l;
		            var dh = H3h;
		            var dl = H3l;
		            var eh = H4h;
		            var el = H4l;
		            var fh = H5h;
		            var fl = H5l;
		            var gh = H6h;
		            var gl = H6l;
		            var hh = H7h;
		            var hl = H7l;

		            // Rounds
		            for (var i = 0; i < 80; i++) {
		                // Shortcut
		                var Wi = W[i];

		                // Extend message
		                if (i < 16) {
		                    var Wih = Wi.high = M[offset + i * 2]     | 0;
		                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
		                } else {
		                    // Gamma0
		                    var gamma0x  = W[i - 15];
		                    var gamma0xh = gamma0x.high;
		                    var gamma0xl = gamma0x.low;
		                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
		                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

		                    // Gamma1
		                    var gamma1x  = W[i - 2];
		                    var gamma1xh = gamma1x.high;
		                    var gamma1xl = gamma1x.low;
		                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
		                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

		                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
		                    var Wi7  = W[i - 7];
		                    var Wi7h = Wi7.high;
		                    var Wi7l = Wi7.low;

		                    var Wi16  = W[i - 16];
		                    var Wi16h = Wi16.high;
		                    var Wi16l = Wi16.low;

		                    var Wil = gamma0l + Wi7l;
		                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
		                    var Wil = Wil + gamma1l;
		                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
		                    var Wil = Wil + Wi16l;
		                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

		                    Wi.high = Wih;
		                    Wi.low  = Wil;
		                }

		                var chh  = (eh & fh) ^ (~eh & gh);
		                var chl  = (el & fl) ^ (~el & gl);
		                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
		                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

		                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
		                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
		                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
		                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

		                // t1 = h + sigma1 + ch + K[i] + W[i]
		                var Ki  = K[i];
		                var Kih = Ki.high;
		                var Kil = Ki.low;

		                var t1l = hl + sigma1l;
		                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
		                var t1l = t1l + chl;
		                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
		                var t1l = t1l + Kil;
		                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
		                var t1l = t1l + Wil;
		                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

		                // t2 = sigma0 + maj
		                var t2l = sigma0l + majl;
		                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

		                // Update working variables
		                hh = gh;
		                hl = gl;
		                gh = fh;
		                gl = fl;
		                fh = eh;
		                fl = el;
		                el = (dl + t1l) | 0;
		                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
		                dh = ch;
		                dl = cl;
		                ch = bh;
		                cl = bl;
		                bh = ah;
		                bl = al;
		                al = (t1l + t2l) | 0;
		                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
		            }

		            // Intermediate hash value
		            H0l = H0.low  = (H0l + al);
		            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
		            H1l = H1.low  = (H1l + bl);
		            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
		            H2l = H2.low  = (H2l + cl);
		            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
		            H3l = H3.low  = (H3l + dl);
		            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
		            H4l = H4.low  = (H4l + el);
		            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
		            H5l = H5.low  = (H5l + fl);
		            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
		            H6l = H6.low  = (H6l + gl);
		            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
		            H7l = H7.low  = (H7l + hl);
		            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
		            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Convert hash to 32-bit word array before returning
		            var hash = this._hash.toX32();

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        },

		        blockSize: 1024/32
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA512('message');
		     *     var hash = CryptoJS.SHA512(wordArray);
		     */
		    C.SHA512 = Hasher._createHelper(SHA512);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA512(message, key);
		     */
		    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		}());


		return CryptoJS.SHA512;

	}));
	});

	var sha384 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, x64Core, sha512);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var X64WordArray = C_x64.WordArray;
		    var C_algo = C.algo;
		    var SHA512 = C_algo.SHA512;

		    /**
		     * SHA-384 hash algorithm.
		     */
		    var SHA384 = C_algo.SHA384 = SHA512.extend({
		        _doReset: function () {
		            this._hash = new X64WordArray.init([
		                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
		                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
		                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
		                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
		            ]);
		        },

		        _doFinalize: function () {
		            var hash = SHA512._doFinalize.call(this);

		            hash.sigBytes -= 16;

		            return hash;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA384('message');
		     *     var hash = CryptoJS.SHA384(wordArray);
		     */
		    C.SHA384 = SHA512._createHelper(SHA384);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA384(message, key);
		     */
		    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
		}());


		return CryptoJS.SHA384;

	}));
	});

	var sha3 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, x64Core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_x64 = C.x64;
		    var X64Word = C_x64.Word;
		    var C_algo = C.algo;

		    // Constants tables
		    var RHO_OFFSETS = [];
		    var PI_INDEXES  = [];
		    var ROUND_CONSTANTS = [];

		    // Compute Constants
		    (function () {
		        // Compute rho offset constants
		        var x = 1, y = 0;
		        for (var t = 0; t < 24; t++) {
		            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

		            var newX = y % 5;
		            var newY = (2 * x + 3 * y) % 5;
		            x = newX;
		            y = newY;
		        }

		        // Compute pi index constants
		        for (var x = 0; x < 5; x++) {
		            for (var y = 0; y < 5; y++) {
		                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
		            }
		        }

		        // Compute round constants
		        var LFSR = 0x01;
		        for (var i = 0; i < 24; i++) {
		            var roundConstantMsw = 0;
		            var roundConstantLsw = 0;

		            for (var j = 0; j < 7; j++) {
		                if (LFSR & 0x01) {
		                    var bitPosition = (1 << j) - 1;
		                    if (bitPosition < 32) {
		                        roundConstantLsw ^= 1 << bitPosition;
		                    } else /* if (bitPosition >= 32) */ {
		                        roundConstantMsw ^= 1 << (bitPosition - 32);
		                    }
		                }

		                // Compute next LFSR
		                if (LFSR & 0x80) {
		                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
		                    LFSR = (LFSR << 1) ^ 0x71;
		                } else {
		                    LFSR <<= 1;
		                }
		            }

		            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
		        }
		    }());

		    // Reusable objects for temporary values
		    var T = [];
		    (function () {
		        for (var i = 0; i < 25; i++) {
		            T[i] = X64Word.create();
		        }
		    }());

		    /**
		     * SHA-3 hash algorithm.
		     */
		    var SHA3 = C_algo.SHA3 = Hasher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} outputLength
		         *   The desired number of bits in the output hash.
		         *   Only values permitted are: 224, 256, 384, 512.
		         *   Default: 512
		         */
		        cfg: Hasher.cfg.extend({
		            outputLength: 512
		        }),

		        _doReset: function () {
		            var state = this._state = [];
		            for (var i = 0; i < 25; i++) {
		                state[i] = new X64Word.init();
		            }

		            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcuts
		            var state = this._state;
		            var nBlockSizeLanes = this.blockSize / 2;

		            // Absorb
		            for (var i = 0; i < nBlockSizeLanes; i++) {
		                // Shortcuts
		                var M2i  = M[offset + 2 * i];
		                var M2i1 = M[offset + 2 * i + 1];

		                // Swap endian
		                M2i = (
		                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
		                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
		                );
		                M2i1 = (
		                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
		                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
		                );

		                // Absorb message into state
		                var lane = state[i];
		                lane.high ^= M2i1;
		                lane.low  ^= M2i;
		            }

		            // Rounds
		            for (var round = 0; round < 24; round++) {
		                // Theta
		                for (var x = 0; x < 5; x++) {
		                    // Mix column lanes
		                    var tMsw = 0, tLsw = 0;
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        tMsw ^= lane.high;
		                        tLsw ^= lane.low;
		                    }

		                    // Temporary values
		                    var Tx = T[x];
		                    Tx.high = tMsw;
		                    Tx.low  = tLsw;
		                }
		                for (var x = 0; x < 5; x++) {
		                    // Shortcuts
		                    var Tx4 = T[(x + 4) % 5];
		                    var Tx1 = T[(x + 1) % 5];
		                    var Tx1Msw = Tx1.high;
		                    var Tx1Lsw = Tx1.low;

		                    // Mix surrounding columns
		                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
		                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
		                    for (var y = 0; y < 5; y++) {
		                        var lane = state[x + 5 * y];
		                        lane.high ^= tMsw;
		                        lane.low  ^= tLsw;
		                    }
		                }

		                // Rho Pi
		                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
		                    // Shortcuts
		                    var lane = state[laneIndex];
		                    var laneMsw = lane.high;
		                    var laneLsw = lane.low;
		                    var rhoOffset = RHO_OFFSETS[laneIndex];

		                    // Rotate lanes
		                    if (rhoOffset < 32) {
		                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
		                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
		                    } else /* if (rhoOffset >= 32) */ {
		                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
		                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
		                    }

		                    // Transpose lanes
		                    var TPiLane = T[PI_INDEXES[laneIndex]];
		                    TPiLane.high = tMsw;
		                    TPiLane.low  = tLsw;
		                }

		                // Rho pi at x = y = 0
		                var T0 = T[0];
		                var state0 = state[0];
		                T0.high = state0.high;
		                T0.low  = state0.low;

		                // Chi
		                for (var x = 0; x < 5; x++) {
		                    for (var y = 0; y < 5; y++) {
		                        // Shortcuts
		                        var laneIndex = x + 5 * y;
		                        var lane = state[laneIndex];
		                        var TLane = T[laneIndex];
		                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
		                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

		                        // Mix rows
		                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
		                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
		                    }
		                }

		                // Iota
		                var lane = state[0];
		                var roundConstant = ROUND_CONSTANTS[round];
		                lane.high ^= roundConstant.high;
		                lane.low  ^= roundConstant.low;	            }
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;
		            var blockSizeBits = this.blockSize * 32;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
		            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
		            data.sigBytes = dataWords.length * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var state = this._state;
		            var outputLengthBytes = this.cfg.outputLength / 8;
		            var outputLengthLanes = outputLengthBytes / 8;

		            // Squeeze
		            var hashWords = [];
		            for (var i = 0; i < outputLengthLanes; i++) {
		                // Shortcuts
		                var lane = state[i];
		                var laneMsw = lane.high;
		                var laneLsw = lane.low;

		                // Swap endian
		                laneMsw = (
		                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
		                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
		                );
		                laneLsw = (
		                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
		                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
		                );

		                // Squeeze state to retrieve hash
		                hashWords.push(laneLsw);
		                hashWords.push(laneMsw);
		            }

		            // Return final computed hash
		            return new WordArray.init(hashWords, outputLengthBytes);
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);

		            var state = clone._state = this._state.slice(0);
		            for (var i = 0; i < 25; i++) {
		                state[i] = state[i].clone();
		            }

		            return clone;
		        }
		    });

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA3('message');
		     *     var hash = CryptoJS.SHA3(wordArray);
		     */
		    C.SHA3 = Hasher._createHelper(SHA3);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA3(message, key);
		     */
		    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
		}(Math));


		return CryptoJS.SHA3;

	}));
	});

	var ripemd160 = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/** @preserve
		(c) 2012 by Cédric Mesnil. All rights reserved.

		Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var _zl = WordArray.create([
		        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
		        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
		        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
		        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
		        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
		    var _zr = WordArray.create([
		        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
		        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
		        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
		        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
		        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
		    var _sl = WordArray.create([
		         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
		        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
		        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
		          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
		        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
		    var _sr = WordArray.create([
		        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
		        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
		        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
		        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
		        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

		    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
		    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

		    /**
		     * RIPEMD160 hash algorithm.
		     */
		    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
		        _doReset: function () {
		            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
		        },

		        _doProcessBlock: function (M, offset) {

		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                // Swap
		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }
		            // Shortcut
		            var H  = this._hash.words;
		            var hl = _hl.words;
		            var hr = _hr.words;
		            var zl = _zl.words;
		            var zr = _zr.words;
		            var sl = _sl.words;
		            var sr = _sr.words;

		            // Working variables
		            var al, bl, cl, dl, el;
		            var ar, br, cr, dr, er;

		            ar = al = H[0];
		            br = bl = H[1];
		            cr = cl = H[2];
		            dr = dl = H[3];
		            er = el = H[4];
		            // Computation
		            var t;
		            for (var i = 0; i < 80; i += 1) {
		                t = (al +  M[offset+zl[i]])|0;
		                if (i<16){
			            t +=  f1(bl,cl,dl) + hl[0];
		                } else if (i<32) {
			            t +=  f2(bl,cl,dl) + hl[1];
		                } else if (i<48) {
			            t +=  f3(bl,cl,dl) + hl[2];
		                } else if (i<64) {
			            t +=  f4(bl,cl,dl) + hl[3];
		                } else {// if (i<80) {
			            t +=  f5(bl,cl,dl) + hl[4];
		                }
		                t = t|0;
		                t =  rotl(t,sl[i]);
		                t = (t+el)|0;
		                al = el;
		                el = dl;
		                dl = rotl(cl, 10);
		                cl = bl;
		                bl = t;

		                t = (ar + M[offset+zr[i]])|0;
		                if (i<16){
			            t +=  f5(br,cr,dr) + hr[0];
		                } else if (i<32) {
			            t +=  f4(br,cr,dr) + hr[1];
		                } else if (i<48) {
			            t +=  f3(br,cr,dr) + hr[2];
		                } else if (i<64) {
			            t +=  f2(br,cr,dr) + hr[3];
		                } else {// if (i<80) {
			            t +=  f1(br,cr,dr) + hr[4];
		                }
		                t = t|0;
		                t =  rotl(t,sr[i]) ;
		                t = (t+er)|0;
		                ar = er;
		                er = dr;
		                dr = rotl(cr, 10);
		                cr = br;
		                br = t;
		            }
		            // Intermediate hash value
		            t    = (H[1] + cl + dr)|0;
		            H[1] = (H[2] + dl + er)|0;
		            H[2] = (H[3] + el + ar)|0;
		            H[3] = (H[4] + al + br)|0;
		            H[4] = (H[0] + bl + cr)|0;
		            H[0] =  t;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
		            );
		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 5; i++) {
		                // Shortcut
		                var H_i = H[i];

		                // Swap
		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });


		    function f1(x, y, z) {
		        return ((x) ^ (y) ^ (z));

		    }

		    function f2(x, y, z) {
		        return (((x)&(y)) | ((~x)&(z)));
		    }

		    function f3(x, y, z) {
		        return (((x) | (~(y))) ^ (z));
		    }

		    function f4(x, y, z) {
		        return (((x) & (z)) | ((y)&(~(z))));
		    }

		    function f5(x, y, z) {
		        return ((x) ^ ((y) |(~(z))));

		    }

		    function rotl(x,n) {
		        return (x<<n) | (x>>>(32-n));
		    }


		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.RIPEMD160('message');
		     *     var hash = CryptoJS.RIPEMD160(wordArray);
		     */
		    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
		     */
		    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
		}());


		return CryptoJS.RIPEMD160;

	}));
	});

	var hmac = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
		{
			// CommonJS
			module.exports = factory(core);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var C_algo = C.algo;

		    /**
		     * HMAC algorithm.
		     */
		    var HMAC = C_algo.HMAC = Base.extend({
		        /**
		         * Initializes a newly created HMAC.
		         *
		         * @param {Hasher} hasher The hash algorithm to use.
		         * @param {WordArray|string} key The secret key.
		         *
		         * @example
		         *
		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		         */
		        init: function (hasher, key) {
		            // Init hasher
		            hasher = this._hasher = new hasher.init();

		            // Convert string to WordArray, else assume WordArray already
		            if (typeof key == 'string') {
		                key = Utf8.parse(key);
		            }

		            // Shortcuts
		            var hasherBlockSize = hasher.blockSize;
		            var hasherBlockSizeBytes = hasherBlockSize * 4;

		            // Allow arbitrary length keys
		            if (key.sigBytes > hasherBlockSizeBytes) {
		                key = hasher.finalize(key);
		            }

		            // Clamp excess bits
		            key.clamp();

		            // Clone key for inner and outer pads
		            var oKey = this._oKey = key.clone();
		            var iKey = this._iKey = key.clone();

		            // Shortcuts
		            var oKeyWords = oKey.words;
		            var iKeyWords = iKey.words;

		            // XOR keys with pad constants
		            for (var i = 0; i < hasherBlockSize; i++) {
		                oKeyWords[i] ^= 0x5c5c5c5c;
		                iKeyWords[i] ^= 0x36363636;
		            }
		            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this HMAC to its initial state.
		         *
		         * @example
		         *
		         *     hmacHasher.reset();
		         */
		        reset: function () {
		            // Shortcut
		            var hasher = this._hasher;

		            // Reset
		            hasher.reset();
		            hasher.update(this._iKey);
		        },

		        /**
		         * Updates this HMAC with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {HMAC} This HMAC instance.
		         *
		         * @example
		         *
		         *     hmacHasher.update('message');
		         *     hmacHasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            this._hasher.update(messageUpdate);

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the HMAC computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The HMAC.
		         *
		         * @example
		         *
		         *     var hmac = hmacHasher.finalize();
		         *     var hmac = hmacHasher.finalize('message');
		         *     var hmac = hmacHasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Shortcut
		            var hasher = this._hasher;

		            // Compute HMAC
		            var innerHash = hasher.finalize(messageUpdate);
		            hasher.reset();
		            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

		            return hmac;
		        }
		    });
		}());


	}));
	});

	var pbkdf2 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, sha1, hmac);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var SHA1 = C_algo.SHA1;
		    var HMAC = C_algo.HMAC;

		    /**
		     * Password-Based Key Derivation Function 2 algorithm.
		     */
		    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hasher to use. Default: SHA1
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: SHA1,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.PBKDF2.create();
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Computes the Password-Based Key Derivation Function 2.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init HMAC
		            var hmac = HMAC.create(cfg.hasher, password);

		            // Initial values
		            var derivedKey = WordArray.create();
		            var blockIndex = WordArray.create([0x00000001]);

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var blockIndexWords = blockIndex.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                var block = hmac.update(salt).finalize(blockIndex);
		                hmac.reset();

		                // Shortcuts
		                var blockWords = block.words;
		                var blockWordsLength = blockWords.length;

		                // Iterations
		                var intermediate = block;
		                for (var i = 1; i < iterations; i++) {
		                    intermediate = hmac.finalize(intermediate);
		                    hmac.reset();

		                    // Shortcut
		                    var intermediateWords = intermediate.words;

		                    // XOR intermediate with block
		                    for (var j = 0; j < blockWordsLength; j++) {
		                        blockWords[j] ^= intermediateWords[j];
		                    }
		                }

		                derivedKey.concat(block);
		                blockIndexWords[0]++;
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Computes the Password-Based Key Derivation Function 2.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.PBKDF2(password, salt);
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.PBKDF2 = function (password, salt, cfg) {
		        return PBKDF2.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.PBKDF2;

	}));
	});

	var evpkdf = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, sha1, hmac);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var C_algo = C.algo;
		    var MD5 = C_algo.MD5;

		    /**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */
		    var EvpKDF = C_algo.EvpKDF = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */
		        cfg: Base.extend({
		            keySize: 128/32,
		            hasher: MD5,
		            iterations: 1
		        }),

		        /**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.EvpKDF.create();
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		         */
		        init: function (cfg) {
		            this.cfg = this.cfg.extend(cfg);
		        },

		        /**
		         * Derives a key from a password.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */
		        compute: function (password, salt) {
		            // Shortcut
		            var cfg = this.cfg;

		            // Init hasher
		            var hasher = cfg.hasher.create();

		            // Initial values
		            var derivedKey = WordArray.create();

		            // Shortcuts
		            var derivedKeyWords = derivedKey.words;
		            var keySize = cfg.keySize;
		            var iterations = cfg.iterations;

		            // Generate key
		            while (derivedKeyWords.length < keySize) {
		                if (block) {
		                    hasher.update(block);
		                }
		                var block = hasher.update(password).finalize(salt);
		                hasher.reset();

		                // Iterations
		                for (var i = 1; i < iterations; i++) {
		                    block = hasher.finalize(block);
		                    hasher.reset();
		                }

		                derivedKey.concat(block);
		            }
		            derivedKey.sigBytes = keySize * 4;

		            return derivedKey;
		        }
		    });

		    /**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */
		    C.EvpKDF = function (password, salt, cfg) {
		        return EvpKDF.create(cfg).compute(password, salt);
		    };
		}());


		return CryptoJS.EvpKDF;

	}));
	});

	var cipherCore = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, evpkdf);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Cipher core components.
		 */
		CryptoJS.lib.Cipher || (function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var Base = C_lib.Base;
		    var WordArray = C_lib.WordArray;
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		    var C_enc = C.enc;
		    var Utf8 = C_enc.Utf8;
		    var Base64 = C_enc.Base64;
		    var C_algo = C.algo;
		    var EvpKDF = C_algo.EvpKDF;

		    /**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */
		    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {WordArray} iv The IV to use for this operation.
		         */
		        cfg: Base.extend(),

		        /**
		         * Creates this cipher in encryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createEncryptor: function (key, cfg) {
		            return this.create(this._ENC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Creates this cipher in decryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		         */
		        createDecryptor: function (key, cfg) {
		            return this.create(this._DEC_XFORM_MODE, key, cfg);
		        },

		        /**
		         * Initializes a newly created cipher.
		         *
		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		         */
		        init: function (xformMode, key, cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Store transform mode and key
		            this._xformMode = xformMode;
		            this._key = key;

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this cipher to its initial state.
		         *
		         * @example
		         *
		         *     cipher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-cipher logic
		            this._doReset();
		        },

		        /**
		         * Adds data to be encrypted or decrypted.
		         *
		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.process('data');
		         *     var encrypted = cipher.process(wordArray);
		         */
		        process: function (dataUpdate) {
		            // Append
		            this._append(dataUpdate);

		            // Process available blocks
		            return this._process();
		        },

		        /**
		         * Finalizes the encryption or decryption process.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after final processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.finalize();
		         *     var encrypted = cipher.finalize('data');
		         *     var encrypted = cipher.finalize(wordArray);
		         */
		        finalize: function (dataUpdate) {
		            // Final data update
		            if (dataUpdate) {
		                this._append(dataUpdate);
		            }

		            // Perform concrete-cipher logic
		            var finalProcessedData = this._doFinalize();

		            return finalProcessedData;
		        },

		        keySize: 128/32,

		        ivSize: 128/32,

		        _ENC_XFORM_MODE: 1,

		        _DEC_XFORM_MODE: 2,

		        /**
		         * Creates shortcut functions to a cipher's object interface.
		         *
		         * @param {Cipher} cipher The cipher to create a helper for.
		         *
		         * @return {Object} An object with encrypt and decrypt shortcut functions.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		         */
		        _createHelper: (function () {
		            function selectCipherStrategy(key) {
		                if (typeof key == 'string') {
		                    return PasswordBasedCipher;
		                } else {
		                    return SerializableCipher;
		                }
		            }

		            return function (cipher) {
		                return {
		                    encrypt: function (message, key, cfg) {
		                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
		                    },

		                    decrypt: function (ciphertext, key, cfg) {
		                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
		                    }
		                };
		            };
		        }())
		    });

		    /**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */
		    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
		        _doFinalize: function () {
		            // Process partial blocks
		            var finalProcessedBlocks = this._process(!!'flush');

		            return finalProcessedBlocks;
		        },

		        blockSize: 1
		    });

		    /**
		     * Mode namespace.
		     */
		    var C_mode = C.mode = {};

		    /**
		     * Abstract base block cipher mode template.
		     */
		    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
		        /**
		         * Creates this mode for encryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		         */
		        createEncryptor: function (cipher, iv) {
		            return this.Encryptor.create(cipher, iv);
		        },

		        /**
		         * Creates this mode for decryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		         */
		        createDecryptor: function (cipher, iv) {
		            return this.Decryptor.create(cipher, iv);
		        },

		        /**
		         * Initializes a newly created mode.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		         */
		        init: function (cipher, iv) {
		            this._cipher = cipher;
		            this._iv = iv;
		        }
		    });

		    /**
		     * Cipher Block Chaining mode.
		     */
		    var CBC = C_mode.CBC = (function () {
		        /**
		         * Abstract base CBC mode.
		         */
		        var CBC = BlockCipherMode.extend();

		        /**
		         * CBC encryptor.
		         */
		        CBC.Encryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // XOR and encrypt
		                xorBlock.call(this, words, offset, blockSize);
		                cipher.encryptBlock(words, offset);

		                // Remember this block to use with next block
		                this._prevBlock = words.slice(offset, offset + blockSize);
		            }
		        });

		        /**
		         * CBC decryptor.
		         */
		        CBC.Decryptor = CBC.extend({
		            /**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */
		            processBlock: function (words, offset) {
		                // Shortcuts
		                var cipher = this._cipher;
		                var blockSize = cipher.blockSize;

		                // Remember this block to use with next block
		                var thisBlock = words.slice(offset, offset + blockSize);

		                // Decrypt and XOR
		                cipher.decryptBlock(words, offset);
		                xorBlock.call(this, words, offset, blockSize);

		                // This block becomes the previous block
		                this._prevBlock = thisBlock;
		            }
		        });

		        function xorBlock(words, offset, blockSize) {
		            // Shortcut
		            var iv = this._iv;

		            // Choose mixing block
		            if (iv) {
		                var block = iv;

		                // Remove IV for subsequent blocks
		                this._iv = undefined$1;
		            } else {
		                var block = this._prevBlock;
		            }

		            // XOR blocks
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= block[i];
		            }
		        }

		        return CBC;
		    }());

		    /**
		     * Padding namespace.
		     */
		    var C_pad = C.pad = {};

		    /**
		     * PKCS #5/7 padding strategy.
		     */
		    var Pkcs7 = C_pad.Pkcs7 = {
		        /**
		         * Pads data using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to pad.
		         * @param {number} blockSize The multiple that the data should be padded to.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		         */
		        pad: function (data, blockSize) {
		            // Shortcut
		            var blockSizeBytes = blockSize * 4;

		            // Count padding bytes
		            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		            // Create padding word
		            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

		            // Create padding
		            var paddingWords = [];
		            for (var i = 0; i < nPaddingBytes; i += 4) {
		                paddingWords.push(paddingWord);
		            }
		            var padding = WordArray.create(paddingWords, nPaddingBytes);

		            // Add padding
		            data.concat(padding);
		        },

		        /**
		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to unpad.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		         */
		        unpad: function (data) {
		            // Get number of padding bytes from last byte
		            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		            // Remove padding
		            data.sigBytes -= nPaddingBytes;
		        }
		    };

		    /**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */
		    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Mode} mode The block mode to use. Default: CBC
		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		         */
		        cfg: Cipher.cfg.extend({
		            mode: CBC,
		            padding: Pkcs7
		        }),

		        reset: function () {
		            // Reset cipher
		            Cipher.reset.call(this);

		            // Shortcuts
		            var cfg = this.cfg;
		            var iv = cfg.iv;
		            var mode = cfg.mode;

		            // Reset block mode
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                var modeCreator = mode.createEncryptor;
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                var modeCreator = mode.createDecryptor;
		                // Keep at least one block in the buffer for unpadding
		                this._minBufferSize = 1;
		            }

		            if (this._mode && this._mode.__creator == modeCreator) {
		                this._mode.init(this, iv && iv.words);
		            } else {
		                this._mode = modeCreator.call(mode, this, iv && iv.words);
		                this._mode.__creator = modeCreator;
		            }
		        },

		        _doProcessBlock: function (words, offset) {
		            this._mode.processBlock(words, offset);
		        },

		        _doFinalize: function () {
		            // Shortcut
		            var padding = this.cfg.padding;

		            // Finalize
		            if (this._xformMode == this._ENC_XFORM_MODE) {
		                // Pad data
		                padding.pad(this._data, this.blockSize);

		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');
		            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
		                // Process final blocks
		                var finalProcessedBlocks = this._process(!!'flush');

		                // Unpad data
		                padding.unpad(finalProcessedBlocks);
		            }

		            return finalProcessedBlocks;
		        },

		        blockSize: 128/32
		    });

		    /**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */
		    var CipherParams = C_lib.CipherParams = Base.extend({
		        /**
		         * Initializes a newly created cipher params object.
		         *
		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
		         *         ciphertext: ciphertextWordArray,
		         *         key: keyWordArray,
		         *         iv: ivWordArray,
		         *         salt: saltWordArray,
		         *         algorithm: CryptoJS.algo.AES,
		         *         mode: CryptoJS.mode.CBC,
		         *         padding: CryptoJS.pad.PKCS7,
		         *         blockSize: 4,
		         *         formatter: CryptoJS.format.OpenSSL
		         *     });
		         */
		        init: function (cipherParams) {
		            this.mixIn(cipherParams);
		        },

		        /**
		         * Converts this cipher params object to a string.
		         *
		         * @param {Format} formatter (Optional) The formatting strategy to use.
		         *
		         * @return {string} The stringified cipher params.
		         *
		         * @throws Error If neither the formatter nor the default formatter is set.
		         *
		         * @example
		         *
		         *     var string = cipherParams + '';
		         *     var string = cipherParams.toString();
		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		         */
		        toString: function (formatter) {
		            return (formatter || this.formatter).stringify(this);
		        }
		    });

		    /**
		     * Format namespace.
		     */
		    var C_format = C.format = {};

		    /**
		     * OpenSSL formatting strategy.
		     */
		    var OpenSSLFormatter = C_format.OpenSSL = {
		        /**
		         * Converts a cipher params object to an OpenSSL-compatible string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The OpenSSL-compatible string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            // Shortcuts
		            var ciphertext = cipherParams.ciphertext;
		            var salt = cipherParams.salt;

		            // Format
		            if (salt) {
		                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
		            } else {
		                var wordArray = ciphertext;
		            }

		            return wordArray.toString(Base64);
		        },

		        /**
		         * Converts an OpenSSL-compatible string to a cipher params object.
		         *
		         * @param {string} openSSLStr The OpenSSL-compatible string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		         */
		        parse: function (openSSLStr) {
		            // Parse base64
		            var ciphertext = Base64.parse(openSSLStr);

		            // Shortcut
		            var ciphertextWords = ciphertext.words;

		            // Test for salt
		            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
		                // Extract salt
		                var salt = WordArray.create(ciphertextWords.slice(2, 4));

		                // Remove salt from ciphertext
		                ciphertextWords.splice(0, 4);
		                ciphertext.sigBytes -= 16;
		            }

		            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
		        }
		    };

		    /**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */
		    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		         */
		        cfg: Base.extend({
		            format: OpenSSLFormatter
		        }),

		        /**
		         * Encrypts a message.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Encrypt
		            var encryptor = cipher.createEncryptor(key, cfg);
		            var ciphertext = encryptor.finalize(message);

		            // Shortcut
		            var cipherCfg = encryptor.cfg;

		            // Create and return serializable cipher params
		            return CipherParams.create({
		                ciphertext: ciphertext,
		                key: key,
		                iv: cipherCfg.iv,
		                algorithm: cipher,
		                mode: cipherCfg.mode,
		                padding: cipherCfg.padding,
		                blockSize: cipher.blockSize,
		                formatter: cfg.format
		            });
		        },

		        /**
		         * Decrypts serialized ciphertext.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, key, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Decrypt
		            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

		            return plaintext;
		        },

		        /**
		         * Converts serialized ciphertext to CipherParams,
		         * else assumed CipherParams already and returns ciphertext unchanged.
		         *
		         * @param {CipherParams|string} ciphertext The ciphertext.
		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		         *
		         * @return {CipherParams} The unserialized ciphertext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		         */
		        _parse: function (ciphertext, format) {
		            if (typeof ciphertext == 'string') {
		                return format.parse(ciphertext, this);
		            } else {
		                return ciphertext;
		            }
		        }
		    });

		    /**
		     * Key derivation function namespace.
		     */
		    var C_kdf = C.kdf = {};

		    /**
		     * OpenSSL key derivation function.
		     */
		    var OpenSSLKdf = C_kdf.OpenSSL = {
		        /**
		         * Derives a key and IV from a password.
		         *
		         * @param {string} password The password to derive from.
		         * @param {number} keySize The size in words of the key to generate.
		         * @param {number} ivSize The size in words of the IV to generate.
		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		         *
		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		         */
		        execute: function (password, keySize, ivSize, salt) {
		            // Generate random salt
		            if (!salt) {
		                salt = WordArray.random(64/8);
		            }

		            // Derive key and IV
		            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

		            // Separate key and IV
		            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
		            key.sigBytes = keySize * 4;

		            // Return params
		            return CipherParams.create({ key: key, iv: iv, salt: salt });
		        }
		    };

		    /**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */
		    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		         */
		        cfg: SerializableCipher.cfg.extend({
		            kdf: OpenSSLKdf
		        }),

		        /**
		         * Encrypts a message using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        encrypt: function (cipher, message, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Encrypt
		            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

		            // Mix in derived params
		            ciphertext.mixIn(derivedParams);

		            return ciphertext;
		        },

		        /**
		         * Decrypts serialized ciphertext using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		         */
		        decrypt: function (cipher, ciphertext, password, cfg) {
		            // Apply config defaults
		            cfg = this.cfg.extend(cfg);

		            // Convert string to CipherParams
		            ciphertext = this._parse(ciphertext, cfg.format);

		            // Derive key and other params
		            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

		            // Add IV to config
		            cfg.iv = derivedParams.iv;

		            // Decrypt
		            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

		            return plaintext;
		        }
		    });
		}());


	}));
	});

	var modeCfb = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Cipher Feedback block mode.
		 */
		CryptoJS.mode.CFB = (function () {
		    var CFB = CryptoJS.lib.BlockCipherMode.extend();

		    CFB.Encryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // Remember this block to use with next block
		            this._prevBlock = words.slice(offset, offset + blockSize);
		        }
		    });

		    CFB.Decryptor = CFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;

		            // Remember this block to use with next block
		            var thisBlock = words.slice(offset, offset + blockSize);

		            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

		            // This block becomes the previous block
		            this._prevBlock = thisBlock;
		        }
		    });

		    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
		        // Shortcut
		        var iv = this._iv;

		        // Generate keystream
		        if (iv) {
		            var keystream = iv.slice(0);

		            // Remove IV for subsequent blocks
		            this._iv = undefined;
		        } else {
		            var keystream = this._prevBlock;
		        }
		        cipher.encryptBlock(keystream, 0);

		        // Encrypt
		        for (var i = 0; i < blockSize; i++) {
		            words[offset + i] ^= keystream[i];
		        }
		    }

		    return CFB;
		}());


		return CryptoJS.mode.CFB;

	}));
	});

	var modeCtr = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Counter block mode.
		 */
		CryptoJS.mode.CTR = (function () {
		    var CTR = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = CTR.Encryptor = CTR.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Increment counter
		            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTR.Decryptor = Encryptor;

		    return CTR;
		}());


		return CryptoJS.mode.CTR;

	}));
	});

	var modeCtrGladman = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/** @preserve
		 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
		 * derived from CryptoJS.mode.CTR
		 * Jan Hruby jhruby.web@gmail.com
		 */
		CryptoJS.mode.CTRGladman = (function () {
		    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

			function incWord(word)
			{
				if (((word >> 24) & 0xff) === 0xff) { //overflow
				var b1 = (word >> 16)&0xff;
				var b2 = (word >> 8)&0xff;
				var b3 = word & 0xff;

				if (b1 === 0xff) // overflow b1
				{
				b1 = 0;
				if (b2 === 0xff)
				{
					b2 = 0;
					if (b3 === 0xff)
					{
						b3 = 0;
					}
					else
					{
						++b3;
					}
				}
				else
				{
					++b2;
				}
				}
				else
				{
				++b1;
				}

				word = 0;
				word += (b1 << 16);
				word += (b2 << 8);
				word += b3;
				}
				else
				{
				word += (0x01 << 24);
				}
				return word;
			}

			function incCounter(counter)
			{
				if ((counter[0] = incWord(counter[0])) === 0)
				{
					// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
					counter[1] = incWord(counter[1]);
				}
				return counter;
			}

		    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var counter = this._counter;

		            // Generate keystream
		            if (iv) {
		                counter = this._counter = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }

					incCounter(counter);

					var keystream = counter.slice(0);
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    CTRGladman.Decryptor = Encryptor;

		    return CTRGladman;
		}());




		return CryptoJS.mode.CTRGladman;

	}));
	});

	var modeOfb = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Output Feedback block mode.
		 */
		CryptoJS.mode.OFB = (function () {
		    var OFB = CryptoJS.lib.BlockCipherMode.extend();

		    var Encryptor = OFB.Encryptor = OFB.extend({
		        processBlock: function (words, offset) {
		            // Shortcuts
		            var cipher = this._cipher;
		            var blockSize = cipher.blockSize;
		            var iv = this._iv;
		            var keystream = this._keystream;

		            // Generate keystream
		            if (iv) {
		                keystream = this._keystream = iv.slice(0);

		                // Remove IV for subsequent blocks
		                this._iv = undefined;
		            }
		            cipher.encryptBlock(keystream, 0);

		            // Encrypt
		            for (var i = 0; i < blockSize; i++) {
		                words[offset + i] ^= keystream[i];
		            }
		        }
		    });

		    OFB.Decryptor = Encryptor;

		    return OFB;
		}());


		return CryptoJS.mode.OFB;

	}));
	});

	var modeEcb = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Electronic Codebook block mode.
		 */
		CryptoJS.mode.ECB = (function () {
		    var ECB = CryptoJS.lib.BlockCipherMode.extend();

		    ECB.Encryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.encryptBlock(words, offset);
		        }
		    });

		    ECB.Decryptor = ECB.extend({
		        processBlock: function (words, offset) {
		            this._cipher.decryptBlock(words, offset);
		        }
		    });

		    return ECB;
		}());


		return CryptoJS.mode.ECB;

	}));
	});

	var padAnsix923 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * ANSI X.923 padding strategy.
		 */
		CryptoJS.pad.AnsiX923 = {
		    pad: function (data, blockSize) {
		        // Shortcuts
		        var dataSigBytes = data.sigBytes;
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

		        // Compute last byte position
		        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

		        // Pad
		        data.clamp();
		        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
		        data.sigBytes += nPaddingBytes;
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Ansix923;

	}));
	});

	var padIso10126 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * ISO 10126 padding strategy.
		 */
		CryptoJS.pad.Iso10126 = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Count padding bytes
		        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

		        // Pad
		        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
		             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
		    },

		    unpad: function (data) {
		        // Get number of padding bytes from last byte
		        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

		        // Remove padding
		        data.sigBytes -= nPaddingBytes;
		    }
		};


		return CryptoJS.pad.Iso10126;

	}));
	});

	var padIso97971 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * ISO/IEC 9797-1 Padding Method 2.
		 */
		CryptoJS.pad.Iso97971 = {
		    pad: function (data, blockSize) {
		        // Add 0x80 byte
		        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

		        // Zero pad the rest
		        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
		    },

		    unpad: function (data) {
		        // Remove zero padding
		        CryptoJS.pad.ZeroPadding.unpad(data);

		        // Remove one more byte -- the 0x80 byte
		        data.sigBytes--;
		    }
		};


		return CryptoJS.pad.Iso97971;

	}));
	});

	var padZeropadding = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * Zero padding strategy.
		 */
		CryptoJS.pad.ZeroPadding = {
		    pad: function (data, blockSize) {
		        // Shortcut
		        var blockSizeBytes = blockSize * 4;

		        // Pad
		        data.clamp();
		        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
		    },

		    unpad: function (data) {
		        // Shortcut
		        var dataWords = data.words;

		        // Unpad
		        var i = data.sigBytes - 1;
		        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
		            i--;
		        }
		        data.sigBytes = i + 1;
		    }
		};


		return CryptoJS.pad.ZeroPadding;

	}));
	});

	var padNopadding = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		/**
		 * A noop padding strategy.
		 */
		CryptoJS.pad.NoPadding = {
		    pad: function () {
		    },

		    unpad: function () {
		    }
		};


		return CryptoJS.pad.NoPadding;

	}));
	});

	var formatHex = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function (undefined$1) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var CipherParams = C_lib.CipherParams;
		    var C_enc = C.enc;
		    var Hex = C_enc.Hex;
		    var C_format = C.format;

		    var HexFormatter = C_format.Hex = {
		        /**
		         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The hexadecimally encoded string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
		         */
		        stringify: function (cipherParams) {
		            return cipherParams.ciphertext.toString(Hex);
		        },

		        /**
		         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
		         *
		         * @param {string} input The hexadecimally encoded string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
		         */
		        parse: function (input) {
		            var ciphertext = Hex.parse(input);
		            return CipherParams.create({ ciphertext: ciphertext });
		        }
		    };
		}());


		return CryptoJS.format.Hex;

	}));
	});

	var aes = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, encBase64, md5, evpkdf, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Lookup tables
		    var SBOX = [];
		    var INV_SBOX = [];
		    var SUB_MIX_0 = [];
		    var SUB_MIX_1 = [];
		    var SUB_MIX_2 = [];
		    var SUB_MIX_3 = [];
		    var INV_SUB_MIX_0 = [];
		    var INV_SUB_MIX_1 = [];
		    var INV_SUB_MIX_2 = [];
		    var INV_SUB_MIX_3 = [];

		    // Compute lookup tables
		    (function () {
		        // Compute double table
		        var d = [];
		        for (var i = 0; i < 256; i++) {
		            if (i < 128) {
		                d[i] = i << 1;
		            } else {
		                d[i] = (i << 1) ^ 0x11b;
		            }
		        }

		        // Walk GF(2^8)
		        var x = 0;
		        var xi = 0;
		        for (var i = 0; i < 256; i++) {
		            // Compute sbox
		            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
		            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
		            SBOX[x] = sx;
		            INV_SBOX[sx] = x;

		            // Compute multiplication
		            var x2 = d[x];
		            var x4 = d[x2];
		            var x8 = d[x4];

		            // Compute sub bytes, mix columns tables
		            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
		            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
		            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
		            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
		            SUB_MIX_3[x] = t;

		            // Compute inv sub bytes, inv mix columns tables
		            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
		            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
		            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
		            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
		            INV_SUB_MIX_3[sx] = t;

		            // Compute next counter
		            if (!x) {
		                x = xi = 1;
		            } else {
		                x = x2 ^ d[d[d[x8 ^ x2]]];
		                xi ^= d[d[xi]];
		            }
		        }
		    }());

		    // Precomputed Rcon lookup
		    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		    /**
		     * AES block cipher algorithm.
		     */
		    var AES = C_algo.AES = BlockCipher.extend({
		        _doReset: function () {
		            // Skip reset of nRounds has been set before and key did not change
		            if (this._nRounds && this._keyPriorReset === this._key) {
		                return;
		            }

		            // Shortcuts
		            var key = this._keyPriorReset = this._key;
		            var keyWords = key.words;
		            var keySize = key.sigBytes / 4;

		            // Compute number of rounds
		            var nRounds = this._nRounds = keySize + 6;

		            // Compute number of key schedule rows
		            var ksRows = (nRounds + 1) * 4;

		            // Compute key schedule
		            var keySchedule = this._keySchedule = [];
		            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
		                if (ksRow < keySize) {
		                    keySchedule[ksRow] = keyWords[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 1];

		                    if (!(ksRow % keySize)) {
		                        // Rot word
		                        t = (t << 8) | (t >>> 24);

		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

		                        // Mix Rcon
		                        t ^= RCON[(ksRow / keySize) | 0] << 24;
		                    } else if (keySize > 6 && ksRow % keySize == 4) {
		                        // Sub word
		                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
		                    }

		                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
		                }
		            }

		            // Compute inv key schedule
		            var invKeySchedule = this._invKeySchedule = [];
		            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
		                var ksRow = ksRows - invKsRow;

		                if (invKsRow % 4) {
		                    var t = keySchedule[ksRow];
		                } else {
		                    var t = keySchedule[ksRow - 4];
		                }

		                if (invKsRow < 4 || ksRow <= 4) {
		                    invKeySchedule[invKsRow] = t;
		                } else {
		                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
		                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
		                }
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
		        },

		        decryptBlock: function (M, offset) {
		            // Swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;

		            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

		            // Inv swap 2nd and 4th rows
		            var t = M[offset + 1];
		            M[offset + 1] = M[offset + 3];
		            M[offset + 3] = t;
		        },

		        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
		            // Shortcut
		            var nRounds = this._nRounds;

		            // Get input, add round key
		            var s0 = M[offset]     ^ keySchedule[0];
		            var s1 = M[offset + 1] ^ keySchedule[1];
		            var s2 = M[offset + 2] ^ keySchedule[2];
		            var s3 = M[offset + 3] ^ keySchedule[3];

		            // Key schedule row counter
		            var ksRow = 4;

		            // Rounds
		            for (var round = 1; round < nRounds; round++) {
		                // Shift rows, sub bytes, mix columns, add round key
		                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
		                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
		                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
		                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

		                // Update state
		                s0 = t0;
		                s1 = t1;
		                s2 = t2;
		                s3 = t3;
		            }

		            // Shift rows, sub bytes, add round key
		            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
		            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
		            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
		            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

		            // Set output
		            M[offset]     = t0;
		            M[offset + 1] = t1;
		            M[offset + 2] = t2;
		            M[offset + 3] = t3;
		        },

		        keySize: 256/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */
		    C.AES = BlockCipher._createHelper(AES);
		}());


		return CryptoJS.AES;

	}));
	});

	var tripledes = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, encBase64, md5, evpkdf, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var BlockCipher = C_lib.BlockCipher;
		    var C_algo = C.algo;

		    // Permuted Choice 1 constants
		    var PC1 = [
		        57, 49, 41, 33, 25, 17, 9,  1,
		        58, 50, 42, 34, 26, 18, 10, 2,
		        59, 51, 43, 35, 27, 19, 11, 3,
		        60, 52, 44, 36, 63, 55, 47, 39,
		        31, 23, 15, 7,  62, 54, 46, 38,
		        30, 22, 14, 6,  61, 53, 45, 37,
		        29, 21, 13, 5,  28, 20, 12, 4
		    ];

		    // Permuted Choice 2 constants
		    var PC2 = [
		        14, 17, 11, 24, 1,  5,
		        3,  28, 15, 6,  21, 10,
		        23, 19, 12, 4,  26, 8,
		        16, 7,  27, 20, 13, 2,
		        41, 52, 31, 37, 47, 55,
		        30, 40, 51, 45, 33, 48,
		        44, 49, 39, 56, 34, 53,
		        46, 42, 50, 36, 29, 32
		    ];

		    // Cumulative bit shift constants
		    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

		    // SBOXes and round permutation constants
		    var SBOX_P = [
		        {
		            0x0: 0x808200,
		            0x10000000: 0x8000,
		            0x20000000: 0x808002,
		            0x30000000: 0x2,
		            0x40000000: 0x200,
		            0x50000000: 0x808202,
		            0x60000000: 0x800202,
		            0x70000000: 0x800000,
		            0x80000000: 0x202,
		            0x90000000: 0x800200,
		            0xa0000000: 0x8200,
		            0xb0000000: 0x808000,
		            0xc0000000: 0x8002,
		            0xd0000000: 0x800002,
		            0xe0000000: 0x0,
		            0xf0000000: 0x8202,
		            0x8000000: 0x0,
		            0x18000000: 0x808202,
		            0x28000000: 0x8202,
		            0x38000000: 0x8000,
		            0x48000000: 0x808200,
		            0x58000000: 0x200,
		            0x68000000: 0x808002,
		            0x78000000: 0x2,
		            0x88000000: 0x800200,
		            0x98000000: 0x8200,
		            0xa8000000: 0x808000,
		            0xb8000000: 0x800202,
		            0xc8000000: 0x800002,
		            0xd8000000: 0x8002,
		            0xe8000000: 0x202,
		            0xf8000000: 0x800000,
		            0x1: 0x8000,
		            0x10000001: 0x2,
		            0x20000001: 0x808200,
		            0x30000001: 0x800000,
		            0x40000001: 0x808002,
		            0x50000001: 0x8200,
		            0x60000001: 0x200,
		            0x70000001: 0x800202,
		            0x80000001: 0x808202,
		            0x90000001: 0x808000,
		            0xa0000001: 0x800002,
		            0xb0000001: 0x8202,
		            0xc0000001: 0x202,
		            0xd0000001: 0x800200,
		            0xe0000001: 0x8002,
		            0xf0000001: 0x0,
		            0x8000001: 0x808202,
		            0x18000001: 0x808000,
		            0x28000001: 0x800000,
		            0x38000001: 0x200,
		            0x48000001: 0x8000,
		            0x58000001: 0x800002,
		            0x68000001: 0x2,
		            0x78000001: 0x8202,
		            0x88000001: 0x8002,
		            0x98000001: 0x800202,
		            0xa8000001: 0x202,
		            0xb8000001: 0x808200,
		            0xc8000001: 0x800200,
		            0xd8000001: 0x0,
		            0xe8000001: 0x8200,
		            0xf8000001: 0x808002
		        },
		        {
		            0x0: 0x40084010,
		            0x1000000: 0x4000,
		            0x2000000: 0x80000,
		            0x3000000: 0x40080010,
		            0x4000000: 0x40000010,
		            0x5000000: 0x40084000,
		            0x6000000: 0x40004000,
		            0x7000000: 0x10,
		            0x8000000: 0x84000,
		            0x9000000: 0x40004010,
		            0xa000000: 0x40000000,
		            0xb000000: 0x84010,
		            0xc000000: 0x80010,
		            0xd000000: 0x0,
		            0xe000000: 0x4010,
		            0xf000000: 0x40080000,
		            0x800000: 0x40004000,
		            0x1800000: 0x84010,
		            0x2800000: 0x10,
		            0x3800000: 0x40004010,
		            0x4800000: 0x40084010,
		            0x5800000: 0x40000000,
		            0x6800000: 0x80000,
		            0x7800000: 0x40080010,
		            0x8800000: 0x80010,
		            0x9800000: 0x0,
		            0xa800000: 0x4000,
		            0xb800000: 0x40080000,
		            0xc800000: 0x40000010,
		            0xd800000: 0x84000,
		            0xe800000: 0x40084000,
		            0xf800000: 0x4010,
		            0x10000000: 0x0,
		            0x11000000: 0x40080010,
		            0x12000000: 0x40004010,
		            0x13000000: 0x40084000,
		            0x14000000: 0x40080000,
		            0x15000000: 0x10,
		            0x16000000: 0x84010,
		            0x17000000: 0x4000,
		            0x18000000: 0x4010,
		            0x19000000: 0x80000,
		            0x1a000000: 0x80010,
		            0x1b000000: 0x40000010,
		            0x1c000000: 0x84000,
		            0x1d000000: 0x40004000,
		            0x1e000000: 0x40000000,
		            0x1f000000: 0x40084010,
		            0x10800000: 0x84010,
		            0x11800000: 0x80000,
		            0x12800000: 0x40080000,
		            0x13800000: 0x4000,
		            0x14800000: 0x40004000,
		            0x15800000: 0x40084010,
		            0x16800000: 0x10,
		            0x17800000: 0x40000000,
		            0x18800000: 0x40084000,
		            0x19800000: 0x40000010,
		            0x1a800000: 0x40004010,
		            0x1b800000: 0x80010,
		            0x1c800000: 0x0,
		            0x1d800000: 0x4010,
		            0x1e800000: 0x40080010,
		            0x1f800000: 0x84000
		        },
		        {
		            0x0: 0x104,
		            0x100000: 0x0,
		            0x200000: 0x4000100,
		            0x300000: 0x10104,
		            0x400000: 0x10004,
		            0x500000: 0x4000004,
		            0x600000: 0x4010104,
		            0x700000: 0x4010000,
		            0x800000: 0x4000000,
		            0x900000: 0x4010100,
		            0xa00000: 0x10100,
		            0xb00000: 0x4010004,
		            0xc00000: 0x4000104,
		            0xd00000: 0x10000,
		            0xe00000: 0x4,
		            0xf00000: 0x100,
		            0x80000: 0x4010100,
		            0x180000: 0x4010004,
		            0x280000: 0x0,
		            0x380000: 0x4000100,
		            0x480000: 0x4000004,
		            0x580000: 0x10000,
		            0x680000: 0x10004,
		            0x780000: 0x104,
		            0x880000: 0x4,
		            0x980000: 0x100,
		            0xa80000: 0x4010000,
		            0xb80000: 0x10104,
		            0xc80000: 0x10100,
		            0xd80000: 0x4000104,
		            0xe80000: 0x4010104,
		            0xf80000: 0x4000000,
		            0x1000000: 0x4010100,
		            0x1100000: 0x10004,
		            0x1200000: 0x10000,
		            0x1300000: 0x4000100,
		            0x1400000: 0x100,
		            0x1500000: 0x4010104,
		            0x1600000: 0x4000004,
		            0x1700000: 0x0,
		            0x1800000: 0x4000104,
		            0x1900000: 0x4000000,
		            0x1a00000: 0x4,
		            0x1b00000: 0x10100,
		            0x1c00000: 0x4010000,
		            0x1d00000: 0x104,
		            0x1e00000: 0x10104,
		            0x1f00000: 0x4010004,
		            0x1080000: 0x4000000,
		            0x1180000: 0x104,
		            0x1280000: 0x4010100,
		            0x1380000: 0x0,
		            0x1480000: 0x10004,
		            0x1580000: 0x4000100,
		            0x1680000: 0x100,
		            0x1780000: 0x4010004,
		            0x1880000: 0x10000,
		            0x1980000: 0x4010104,
		            0x1a80000: 0x10104,
		            0x1b80000: 0x4000004,
		            0x1c80000: 0x4000104,
		            0x1d80000: 0x4010000,
		            0x1e80000: 0x4,
		            0x1f80000: 0x10100
		        },
		        {
		            0x0: 0x80401000,
		            0x10000: 0x80001040,
		            0x20000: 0x401040,
		            0x30000: 0x80400000,
		            0x40000: 0x0,
		            0x50000: 0x401000,
		            0x60000: 0x80000040,
		            0x70000: 0x400040,
		            0x80000: 0x80000000,
		            0x90000: 0x400000,
		            0xa0000: 0x40,
		            0xb0000: 0x80001000,
		            0xc0000: 0x80400040,
		            0xd0000: 0x1040,
		            0xe0000: 0x1000,
		            0xf0000: 0x80401040,
		            0x8000: 0x80001040,
		            0x18000: 0x40,
		            0x28000: 0x80400040,
		            0x38000: 0x80001000,
		            0x48000: 0x401000,
		            0x58000: 0x80401040,
		            0x68000: 0x0,
		            0x78000: 0x80400000,
		            0x88000: 0x1000,
		            0x98000: 0x80401000,
		            0xa8000: 0x400000,
		            0xb8000: 0x1040,
		            0xc8000: 0x80000000,
		            0xd8000: 0x400040,
		            0xe8000: 0x401040,
		            0xf8000: 0x80000040,
		            0x100000: 0x400040,
		            0x110000: 0x401000,
		            0x120000: 0x80000040,
		            0x130000: 0x0,
		            0x140000: 0x1040,
		            0x150000: 0x80400040,
		            0x160000: 0x80401000,
		            0x170000: 0x80001040,
		            0x180000: 0x80401040,
		            0x190000: 0x80000000,
		            0x1a0000: 0x80400000,
		            0x1b0000: 0x401040,
		            0x1c0000: 0x80001000,
		            0x1d0000: 0x400000,
		            0x1e0000: 0x40,
		            0x1f0000: 0x1000,
		            0x108000: 0x80400000,
		            0x118000: 0x80401040,
		            0x128000: 0x0,
		            0x138000: 0x401000,
		            0x148000: 0x400040,
		            0x158000: 0x80000000,
		            0x168000: 0x80001040,
		            0x178000: 0x40,
		            0x188000: 0x80000040,
		            0x198000: 0x1000,
		            0x1a8000: 0x80001000,
		            0x1b8000: 0x80400040,
		            0x1c8000: 0x1040,
		            0x1d8000: 0x80401000,
		            0x1e8000: 0x400000,
		            0x1f8000: 0x401040
		        },
		        {
		            0x0: 0x80,
		            0x1000: 0x1040000,
		            0x2000: 0x40000,
		            0x3000: 0x20000000,
		            0x4000: 0x20040080,
		            0x5000: 0x1000080,
		            0x6000: 0x21000080,
		            0x7000: 0x40080,
		            0x8000: 0x1000000,
		            0x9000: 0x20040000,
		            0xa000: 0x20000080,
		            0xb000: 0x21040080,
		            0xc000: 0x21040000,
		            0xd000: 0x0,
		            0xe000: 0x1040080,
		            0xf000: 0x21000000,
		            0x800: 0x1040080,
		            0x1800: 0x21000080,
		            0x2800: 0x80,
		            0x3800: 0x1040000,
		            0x4800: 0x40000,
		            0x5800: 0x20040080,
		            0x6800: 0x21040000,
		            0x7800: 0x20000000,
		            0x8800: 0x20040000,
		            0x9800: 0x0,
		            0xa800: 0x21040080,
		            0xb800: 0x1000080,
		            0xc800: 0x20000080,
		            0xd800: 0x21000000,
		            0xe800: 0x1000000,
		            0xf800: 0x40080,
		            0x10000: 0x40000,
		            0x11000: 0x80,
		            0x12000: 0x20000000,
		            0x13000: 0x21000080,
		            0x14000: 0x1000080,
		            0x15000: 0x21040000,
		            0x16000: 0x20040080,
		            0x17000: 0x1000000,
		            0x18000: 0x21040080,
		            0x19000: 0x21000000,
		            0x1a000: 0x1040000,
		            0x1b000: 0x20040000,
		            0x1c000: 0x40080,
		            0x1d000: 0x20000080,
		            0x1e000: 0x0,
		            0x1f000: 0x1040080,
		            0x10800: 0x21000080,
		            0x11800: 0x1000000,
		            0x12800: 0x1040000,
		            0x13800: 0x20040080,
		            0x14800: 0x20000000,
		            0x15800: 0x1040080,
		            0x16800: 0x80,
		            0x17800: 0x21040000,
		            0x18800: 0x40080,
		            0x19800: 0x21040080,
		            0x1a800: 0x0,
		            0x1b800: 0x21000000,
		            0x1c800: 0x1000080,
		            0x1d800: 0x40000,
		            0x1e800: 0x20040000,
		            0x1f800: 0x20000080
		        },
		        {
		            0x0: 0x10000008,
		            0x100: 0x2000,
		            0x200: 0x10200000,
		            0x300: 0x10202008,
		            0x400: 0x10002000,
		            0x500: 0x200000,
		            0x600: 0x200008,
		            0x700: 0x10000000,
		            0x800: 0x0,
		            0x900: 0x10002008,
		            0xa00: 0x202000,
		            0xb00: 0x8,
		            0xc00: 0x10200008,
		            0xd00: 0x202008,
		            0xe00: 0x2008,
		            0xf00: 0x10202000,
		            0x80: 0x10200000,
		            0x180: 0x10202008,
		            0x280: 0x8,
		            0x380: 0x200000,
		            0x480: 0x202008,
		            0x580: 0x10000008,
		            0x680: 0x10002000,
		            0x780: 0x2008,
		            0x880: 0x200008,
		            0x980: 0x2000,
		            0xa80: 0x10002008,
		            0xb80: 0x10200008,
		            0xc80: 0x0,
		            0xd80: 0x10202000,
		            0xe80: 0x202000,
		            0xf80: 0x10000000,
		            0x1000: 0x10002000,
		            0x1100: 0x10200008,
		            0x1200: 0x10202008,
		            0x1300: 0x2008,
		            0x1400: 0x200000,
		            0x1500: 0x10000000,
		            0x1600: 0x10000008,
		            0x1700: 0x202000,
		            0x1800: 0x202008,
		            0x1900: 0x0,
		            0x1a00: 0x8,
		            0x1b00: 0x10200000,
		            0x1c00: 0x2000,
		            0x1d00: 0x10002008,
		            0x1e00: 0x10202000,
		            0x1f00: 0x200008,
		            0x1080: 0x8,
		            0x1180: 0x202000,
		            0x1280: 0x200000,
		            0x1380: 0x10000008,
		            0x1480: 0x10002000,
		            0x1580: 0x2008,
		            0x1680: 0x10202008,
		            0x1780: 0x10200000,
		            0x1880: 0x10202000,
		            0x1980: 0x10200008,
		            0x1a80: 0x2000,
		            0x1b80: 0x202008,
		            0x1c80: 0x200008,
		            0x1d80: 0x0,
		            0x1e80: 0x10000000,
		            0x1f80: 0x10002008
		        },
		        {
		            0x0: 0x100000,
		            0x10: 0x2000401,
		            0x20: 0x400,
		            0x30: 0x100401,
		            0x40: 0x2100401,
		            0x50: 0x0,
		            0x60: 0x1,
		            0x70: 0x2100001,
		            0x80: 0x2000400,
		            0x90: 0x100001,
		            0xa0: 0x2000001,
		            0xb0: 0x2100400,
		            0xc0: 0x2100000,
		            0xd0: 0x401,
		            0xe0: 0x100400,
		            0xf0: 0x2000000,
		            0x8: 0x2100001,
		            0x18: 0x0,
		            0x28: 0x2000401,
		            0x38: 0x2100400,
		            0x48: 0x100000,
		            0x58: 0x2000001,
		            0x68: 0x2000000,
		            0x78: 0x401,
		            0x88: 0x100401,
		            0x98: 0x2000400,
		            0xa8: 0x2100000,
		            0xb8: 0x100001,
		            0xc8: 0x400,
		            0xd8: 0x2100401,
		            0xe8: 0x1,
		            0xf8: 0x100400,
		            0x100: 0x2000000,
		            0x110: 0x100000,
		            0x120: 0x2000401,
		            0x130: 0x2100001,
		            0x140: 0x100001,
		            0x150: 0x2000400,
		            0x160: 0x2100400,
		            0x170: 0x100401,
		            0x180: 0x401,
		            0x190: 0x2100401,
		            0x1a0: 0x100400,
		            0x1b0: 0x1,
		            0x1c0: 0x0,
		            0x1d0: 0x2100000,
		            0x1e0: 0x2000001,
		            0x1f0: 0x400,
		            0x108: 0x100400,
		            0x118: 0x2000401,
		            0x128: 0x2100001,
		            0x138: 0x1,
		            0x148: 0x2000000,
		            0x158: 0x100000,
		            0x168: 0x401,
		            0x178: 0x2100400,
		            0x188: 0x2000001,
		            0x198: 0x2100000,
		            0x1a8: 0x0,
		            0x1b8: 0x2100401,
		            0x1c8: 0x100401,
		            0x1d8: 0x400,
		            0x1e8: 0x2000400,
		            0x1f8: 0x100001
		        },
		        {
		            0x0: 0x8000820,
		            0x1: 0x20000,
		            0x2: 0x8000000,
		            0x3: 0x20,
		            0x4: 0x20020,
		            0x5: 0x8020820,
		            0x6: 0x8020800,
		            0x7: 0x800,
		            0x8: 0x8020000,
		            0x9: 0x8000800,
		            0xa: 0x20800,
		            0xb: 0x8020020,
		            0xc: 0x820,
		            0xd: 0x0,
		            0xe: 0x8000020,
		            0xf: 0x20820,
		            0x80000000: 0x800,
		            0x80000001: 0x8020820,
		            0x80000002: 0x8000820,
		            0x80000003: 0x8000000,
		            0x80000004: 0x8020000,
		            0x80000005: 0x20800,
		            0x80000006: 0x20820,
		            0x80000007: 0x20,
		            0x80000008: 0x8000020,
		            0x80000009: 0x820,
		            0x8000000a: 0x20020,
		            0x8000000b: 0x8020800,
		            0x8000000c: 0x0,
		            0x8000000d: 0x8020020,
		            0x8000000e: 0x8000800,
		            0x8000000f: 0x20000,
		            0x10: 0x20820,
		            0x11: 0x8020800,
		            0x12: 0x20,
		            0x13: 0x800,
		            0x14: 0x8000800,
		            0x15: 0x8000020,
		            0x16: 0x8020020,
		            0x17: 0x20000,
		            0x18: 0x0,
		            0x19: 0x20020,
		            0x1a: 0x8020000,
		            0x1b: 0x8000820,
		            0x1c: 0x8020820,
		            0x1d: 0x20800,
		            0x1e: 0x820,
		            0x1f: 0x8000000,
		            0x80000010: 0x20000,
		            0x80000011: 0x800,
		            0x80000012: 0x8020020,
		            0x80000013: 0x20820,
		            0x80000014: 0x20,
		            0x80000015: 0x8020000,
		            0x80000016: 0x8000000,
		            0x80000017: 0x8000820,
		            0x80000018: 0x8020820,
		            0x80000019: 0x8000020,
		            0x8000001a: 0x8000800,
		            0x8000001b: 0x0,
		            0x8000001c: 0x20800,
		            0x8000001d: 0x820,
		            0x8000001e: 0x20020,
		            0x8000001f: 0x8020800
		        }
		    ];

		    // Masks that select the SBOX input
		    var SBOX_MASK = [
		        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
		        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
		    ];

		    /**
		     * DES block cipher algorithm.
		     */
		    var DES = C_algo.DES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Select 56 bits according to PC1
		            var keyBits = [];
		            for (var i = 0; i < 56; i++) {
		                var keyBitPos = PC1[i] - 1;
		                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
		            }

		            // Assemble 16 subkeys
		            var subKeys = this._subKeys = [];
		            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
		                // Create subkey
		                var subKey = subKeys[nSubKey] = [];

		                // Shortcut
		                var bitShift = BIT_SHIFTS[nSubKey];

		                // Select 48 bits according to PC2
		                for (var i = 0; i < 24; i++) {
		                    // Select from the left 28 key bits
		                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

		                    // Select from the right 28 key bits
		                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
		                }

		                // Since each subkey is applied to an expanded 32-bit input,
		                // the subkey can be broken into 8 values scaled to 32-bits,
		                // which allows the key to be used without expansion
		                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
		                for (var i = 1; i < 7; i++) {
		                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
		                }
		                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
		            }

		            // Compute inverse subkeys
		            var invSubKeys = this._invSubKeys = [];
		            for (var i = 0; i < 16; i++) {
		                invSubKeys[i] = subKeys[15 - i];
		            }
		        },

		        encryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._subKeys);
		        },

		        decryptBlock: function (M, offset) {
		            this._doCryptBlock(M, offset, this._invSubKeys);
		        },

		        _doCryptBlock: function (M, offset, subKeys) {
		            // Get input
		            this._lBlock = M[offset];
		            this._rBlock = M[offset + 1];

		            // Initial permutation
		            exchangeLR.call(this, 4,  0x0f0f0f0f);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeLR.call(this, 1,  0x55555555);

		            // Rounds
		            for (var round = 0; round < 16; round++) {
		                // Shortcuts
		                var subKey = subKeys[round];
		                var lBlock = this._lBlock;
		                var rBlock = this._rBlock;

		                // Feistel function
		                var f = 0;
		                for (var i = 0; i < 8; i++) {
		                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
		                }
		                this._lBlock = rBlock;
		                this._rBlock = lBlock ^ f;
		            }

		            // Undo swap from last round
		            var t = this._lBlock;
		            this._lBlock = this._rBlock;
		            this._rBlock = t;

		            // Final permutation
		            exchangeLR.call(this, 1,  0x55555555);
		            exchangeRL.call(this, 8,  0x00ff00ff);
		            exchangeRL.call(this, 2,  0x33333333);
		            exchangeLR.call(this, 16, 0x0000ffff);
		            exchangeLR.call(this, 4,  0x0f0f0f0f);

		            // Set output
		            M[offset] = this._lBlock;
		            M[offset + 1] = this._rBlock;
		        },

		        keySize: 64/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    // Swap bits across the left and right words
		    function exchangeLR(offset, mask) {
		        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
		        this._rBlock ^= t;
		        this._lBlock ^= t << offset;
		    }

		    function exchangeRL(offset, mask) {
		        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
		        this._lBlock ^= t;
		        this._rBlock ^= t << offset;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
		     */
		    C.DES = BlockCipher._createHelper(DES);

		    /**
		     * Triple-DES block cipher algorithm.
		     */
		    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;

		            // Create DES instances
		            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
		            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
		            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
		        },

		        encryptBlock: function (M, offset) {
		            this._des1.encryptBlock(M, offset);
		            this._des2.decryptBlock(M, offset);
		            this._des3.encryptBlock(M, offset);
		        },

		        decryptBlock: function (M, offset) {
		            this._des3.decryptBlock(M, offset);
		            this._des2.encryptBlock(M, offset);
		            this._des1.decryptBlock(M, offset);
		        },

		        keySize: 192/32,

		        ivSize: 64/32,

		        blockSize: 64/32
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
		     */
		    C.TripleDES = BlockCipher._createHelper(TripleDES);
		}());


		return CryptoJS.TripleDES;

	}));
	});

	var rc4 = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, encBase64, md5, evpkdf, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    /**
		     * RC4 stream cipher algorithm.
		     */
		    var RC4 = C_algo.RC4 = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var key = this._key;
		            var keyWords = key.words;
		            var keySigBytes = key.sigBytes;

		            // Init sbox
		            var S = this._S = [];
		            for (var i = 0; i < 256; i++) {
		                S[i] = i;
		            }

		            // Key setup
		            for (var i = 0, j = 0; i < 256; i++) {
		                var keyByteIndex = i % keySigBytes;
		                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

		                j = (j + S[i] + keyByte) % 256;

		                // Swap
		                var t = S[i];
		                S[i] = S[j];
		                S[j] = t;
		            }

		            // Counters
		            this._i = this._j = 0;
		        },

		        _doProcessBlock: function (M, offset) {
		            M[offset] ^= generateKeystreamWord.call(this);
		        },

		        keySize: 256/32,

		        ivSize: 0
		    });

		    function generateKeystreamWord() {
		        // Shortcuts
		        var S = this._S;
		        var i = this._i;
		        var j = this._j;

		        // Generate keystream word
		        var keystreamWord = 0;
		        for (var n = 0; n < 4; n++) {
		            i = (i + 1) % 256;
		            j = (j + S[i]) % 256;

		            // Swap
		            var t = S[i];
		            S[i] = S[j];
		            S[j] = t;

		            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
		        }

		        // Update counters
		        this._i = i;
		        this._j = j;

		        return keystreamWord;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4 = StreamCipher._createHelper(RC4);

		    /**
		     * Modified RC4 stream cipher algorithm.
		     */
		    var RC4Drop = C_algo.RC4Drop = RC4.extend({
		        /**
		         * Configuration options.
		         *
		         * @property {number} drop The number of keystream words to drop. Default 192
		         */
		        cfg: RC4.cfg.extend({
		            drop: 192
		        }),

		        _doReset: function () {
		            RC4._doReset.call(this);

		            // Drop
		            for (var i = this.cfg.drop; i > 0; i--) {
		                generateKeystreamWord.call(this);
		            }
		        }
		    });

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
		     */
		    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
		}());


		return CryptoJS.RC4;

	}));
	});

	var rabbit = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, encBase64, md5, evpkdf, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm
		     */
		    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
		                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
		            }

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
		     */
		    C.Rabbit = StreamCipher._createHelper(Rabbit);
		}());


		return CryptoJS.Rabbit;

	}));
	});

	var rabbitLegacy = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, encBase64, md5, evpkdf, cipherCore);
		}
	}(commonjsGlobal, function (CryptoJS) {

		(function () {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var StreamCipher = C_lib.StreamCipher;
		    var C_algo = C.algo;

		    // Reusable objects
		    var S  = [];
		    var C_ = [];
		    var G  = [];

		    /**
		     * Rabbit stream cipher algorithm.
		     *
		     * This is a legacy version that neglected to convert the key to little-endian.
		     * This error doesn't affect the cipher's security,
		     * but it does affect its compatibility with other implementations.
		     */
		    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
		        _doReset: function () {
		            // Shortcuts
		            var K = this._key.words;
		            var iv = this.cfg.iv;

		            // Generate initial state values
		            var X = this._X = [
		                K[0], (K[3] << 16) | (K[2] >>> 16),
		                K[1], (K[0] << 16) | (K[3] >>> 16),
		                K[2], (K[1] << 16) | (K[0] >>> 16),
		                K[3], (K[2] << 16) | (K[1] >>> 16)
		            ];

		            // Generate initial counter values
		            var C = this._C = [
		                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
		                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
		                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
		                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
		            ];

		            // Carry bit
		            this._b = 0;

		            // Iterate the system four times
		            for (var i = 0; i < 4; i++) {
		                nextState.call(this);
		            }

		            // Modify the counters
		            for (var i = 0; i < 8; i++) {
		                C[i] ^= X[(i + 4) & 7];
		            }

		            // IV setup
		            if (iv) {
		                // Shortcuts
		                var IV = iv.words;
		                var IV_0 = IV[0];
		                var IV_1 = IV[1];

		                // Generate four subvectors
		                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
		                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
		                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
		                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

		                // Modify counter values
		                C[0] ^= i0;
		                C[1] ^= i1;
		                C[2] ^= i2;
		                C[3] ^= i3;
		                C[4] ^= i0;
		                C[5] ^= i1;
		                C[6] ^= i2;
		                C[7] ^= i3;

		                // Iterate the system four times
		                for (var i = 0; i < 4; i++) {
		                    nextState.call(this);
		                }
		            }
		        },

		        _doProcessBlock: function (M, offset) {
		            // Shortcut
		            var X = this._X;

		            // Iterate the system
		            nextState.call(this);

		            // Generate four keystream words
		            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
		            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
		            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
		            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

		            for (var i = 0; i < 4; i++) {
		                // Swap endian
		                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
		                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

		                // Encrypt
		                M[offset + i] ^= S[i];
		            }
		        },

		        blockSize: 128/32,

		        ivSize: 64/32
		    });

		    function nextState() {
		        // Shortcuts
		        var X = this._X;
		        var C = this._C;

		        // Save old counter values
		        for (var i = 0; i < 8; i++) {
		            C_[i] = C[i];
		        }

		        // Calculate new counter values
		        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
		        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
		        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
		        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
		        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
		        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
		        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
		        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
		        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

		        // Calculate the g-values
		        for (var i = 0; i < 8; i++) {
		            var gx = X[i] + C[i];

		            // Construct high and low argument for squaring
		            var ga = gx & 0xffff;
		            var gb = gx >>> 16;

		            // Calculate high and low result of squaring
		            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
		            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

		            // High XOR low
		            G[i] = gh ^ gl;
		        }

		        // Calculate new state values
		        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
		        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
		        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
		        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
		        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
		        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
		        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
		        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
		    }

		    /**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
		     */
		    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
		}());


		return CryptoJS.RabbitLegacy;

	}));
	});

	var cryptoJs = createCommonjsModule(function (module, exports) {
	(function (root, factory, undef) {
		{
			// CommonJS
			module.exports = factory(core, x64Core, libTypedarrays, encUtf16, encBase64, md5, sha1, sha256, sha224, sha512, sha384, sha3, ripemd160, hmac, pbkdf2, evpkdf, cipherCore, modeCfb, modeCtr, modeCtrGladman, modeOfb, modeEcb, padAnsix923, padIso10126, padIso97971, padZeropadding, padNopadding, formatHex, aes, tripledes, rc4, rabbit, rabbitLegacy);
		}
	}(commonjsGlobal, function (CryptoJS) {

		return CryptoJS;

	}));
	});

	var convert = createCommonjsModule(function (module, exports) {
	var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __spread = (commonjsGlobal && commonjsGlobal.__spread) || function () {
	    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
	    return ar;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var Convert = /** @class */ (function () {
	    function Convert() {
	    }
	    /**
	     * Convert a string (UTF-8 encoded) to a byte array
	     *
	     * @param {String} str UTF-8 encoded string
	     * @return {Uint8Array} Byte array
	     */
	    Convert.str2bin = function (str) {
	        str = str.replace(/\r\n/g, '\n');
	        var bin = new Uint8Array(str.length * 3);
	        var p = 0;
	        for (var i = 0, len = str.length; i < len; i++) {
	            var c = str.charCodeAt(i);
	            if (c < 128) {
	                bin[p++] = c;
	            }
	            else if (c < 2048) {
	                bin[p++] = (c >>> 6) | 192;
	                bin[p++] = (c & 63) | 128;
	            }
	            else {
	                bin[p++] = (c >>> 12) | 224;
	                bin[p++] = ((c >>> 6) & 63) | 128;
	                bin[p++] = (c & 63) | 128;
	            }
	        }
	        return bin.subarray(0, p);
	    };
	    /**
	     * Convert Array of 8 bytes (int64) to hex string
	     *
	     * @param {Uint8Array} bin Array of bytes
	     * @return {String} Hex encoded string
	     */
	    Convert.ab2hex = function (buf) {
	        return Array.prototype.map.call(new Uint8Array(buf), function (x) { return ('00' + x.toString(16)).slice(-2); }).join('');
	    };
	    /**
	     * Convert hex string to array of 8 bytes (int64)
	     *
	     * @param {String} bin Array of bytes
	     * @return {Uint8Array} Array of 8 bytes (int64)
	     */
	    Convert.hex2ab = function (hex) {
	        var ab = [];
	        for (var i = 0; i < hex.length; i += 2) {
	            ab.push(parseInt(hex.substr(i, 2), 16));
	        }
	        return new Uint8Array(ab);
	    };
	    /**
	     * Convert a decimal number to hex string
	     *
	     * @param {String} str Decimal to be converted
	     * @param {Number} bytes Length of the output to be padded
	     * @returns Hexadecimal representation of the inputed decimal
	     */
	    Convert.dec2hex = function (str, bytes) {
	        var decimals = str.toString().split('');
	        var sum = [];
	        var hex = [];
	        var i;
	        var s;
	        while (decimals.length) {
	            s = 1 * +decimals.shift();
	            for (i = 0; s || i < sum.length; i++) {
	                s += (sum[i] || 0) * 10;
	                sum[i] = s % 16;
	                s = (s - sum[i]) / 16;
	            }
	        }
	        while (sum.length) {
	            hex.push(sum.pop().toString(16));
	        }
	        var joined = hex.join('');
	        if (joined.length % 2 != 0) {
	            joined = '0' + joined;
	        }
	        if (bytes > joined.length / 2) {
	            var diff = bytes - joined.length / 2;
	            for (var i_1 = 0; i_1 < diff; i_1++) {
	                joined = '00' + joined;
	            }
	        }
	        return joined;
	    };
	    Convert.dec2bin = function (dec) {
	        return (dec >>> 0).toString(2);
	    };
	    Convert.bytesToHexString = function (bytes) {
	        return __spread(bytes).map(function (b) { return b.toString(16).padStart(2, '0'); }).join('');
	    };
	    Convert.hexStringToBinary = function (hex) {
	        return __spread(hex).map(function (c) { return (Convert.dec2bin(parseInt(c, 16))).padStart(4, '0'); }).join('');
	    };
	    Convert.binaryToHexString = function (bin) {
	        return parseInt(bin, 2).toString(16);
	    };
	    Convert.stringToHex = function (str) {
	        return __spread(str).map(function (c) { return c.charCodeAt(0).toString(16); }).join('');
	    };
	    return Convert;
	}());
	exports.default = Convert;
	});

	var bip32KeyDerivation = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	//@ts-ignore

	var convert_1 = __importDefault(convert);
	var ED25519_CURVE = 'ed25519 seed';
	var HARDENED_OFFSET = 0x80000000;
	var Bip32KeyDerivation = /** @class */ (function () {
	    function Bip32KeyDerivation(path, seed) {
	        var _this = this;
	        this.derivePath = function () {
	            var _a = _this.getKeyFromSeed(), key = _a.key, chainCode = _a.chainCode;
	            var segments = _this.path
	                .split('/')
	                .map(function (v) { return v.replace('\'', ''); })
	                .map(function (el) { return parseInt(el, 10); });
	            return segments.reduce(function (parentKeys, segment) {
	                return _this.CKDPriv(parentKeys, segment + HARDENED_OFFSET);
	            }, { key: key, chainCode: chainCode });
	        };
	        this.getKeyFromSeed = function () {
	            return _this.derive(cryptoJs.enc.Hex.parse(_this.seed), cryptoJs.enc.Utf8.parse(ED25519_CURVE));
	        };
	        this.CKDPriv = function (_a, index) {
	            var key = _a.key, chainCode = _a.chainCode;
	            var ib = [];
	            ib.push((index >> 24) & 0xff);
	            ib.push((index >> 16) & 0xff);
	            ib.push((index >> 8) & 0xff);
	            ib.push(index & 0xff);
	            var data = '00' + key + convert_1.default.ab2hex(new Uint8Array(ib).buffer);
	            return _this.derive(cryptoJs.enc.Hex.parse(data), cryptoJs.enc.Hex.parse(chainCode));
	        };
	        this.derive = function (data, base) {
	            var hmac = cryptoJs.algo.HMAC.create(cryptoJs.algo.SHA512, base);
	            var I = hmac.update(data).finalize().toString();
	            var IL = I.slice(0, I.length / 2);
	            var IR = I.slice(I.length / 2);
	            return {
	                key: IL,
	                chainCode: IR,
	            };
	        };
	        this.path = path;
	        this.seed = seed;
	    }
	    return Bip32KeyDerivation;
	}());
	exports.default = Bip32KeyDerivation;
	});

	var util = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var Util = /** @class */ (function () {
	    function Util() {
	    }
	    /**
	     * Time constant comparison of two arrays
	     *
	     * @param {Uint8Array} lh First array of bytes
	     * @param {Uint8Array} rh Second array of bytes
	     * @return {Boolean} True if the arrays are equal (length and content), false otherwise
	     */
	    Util.compare = function (lh, rh) {
	        if (lh.length !== rh.length) {
	            return false;
	        }
	        var i;
	        var d = 0;
	        var len = lh.length;
	        for (i = 0; i < len; i++) {
	            d |= lh[i] ^ rh[i];
	        }
	        return d === 0;
	    };
	    Util.normalizeUTF8 = function (str) {
	        return str ? str.normalize('NFKD') : '';
	    };
	    return Util;
	}());
	exports.default = Util;
	});

	var words_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var words = [
	    'abandon',
	    'ability',
	    'able',
	    'about',
	    'above',
	    'absent',
	    'absorb',
	    'abstract',
	    'absurd',
	    'abuse',
	    'access',
	    'accident',
	    'account',
	    'accuse',
	    'achieve',
	    'acid',
	    'acoustic',
	    'acquire',
	    'across',
	    'act',
	    'action',
	    'actor',
	    'actress',
	    'actual',
	    'adapt',
	    'add',
	    'addict',
	    'address',
	    'adjust',
	    'admit',
	    'adult',
	    'advance',
	    'advice',
	    'aerobic',
	    'affair',
	    'afford',
	    'afraid',
	    'again',
	    'age',
	    'agent',
	    'agree',
	    'ahead',
	    'aim',
	    'air',
	    'airport',
	    'aisle',
	    'alarm',
	    'album',
	    'alcohol',
	    'alert',
	    'alien',
	    'all',
	    'alley',
	    'allow',
	    'almost',
	    'alone',
	    'alpha',
	    'already',
	    'also',
	    'alter',
	    'always',
	    'amateur',
	    'amazing',
	    'among',
	    'amount',
	    'amused',
	    'analyst',
	    'anchor',
	    'ancient',
	    'anger',
	    'angle',
	    'angry',
	    'animal',
	    'ankle',
	    'announce',
	    'annual',
	    'another',
	    'answer',
	    'antenna',
	    'antique',
	    'anxiety',
	    'any',
	    'apart',
	    'apology',
	    'appear',
	    'apple',
	    'approve',
	    'april',
	    'arch',
	    'arctic',
	    'area',
	    'arena',
	    'argue',
	    'arm',
	    'armed',
	    'armor',
	    'army',
	    'around',
	    'arrange',
	    'arrest',
	    'arrive',
	    'arrow',
	    'art',
	    'artefact',
	    'artist',
	    'artwork',
	    'ask',
	    'aspect',
	    'assault',
	    'asset',
	    'assist',
	    'assume',
	    'asthma',
	    'athlete',
	    'atom',
	    'attack',
	    'attend',
	    'attitude',
	    'attract',
	    'auction',
	    'audit',
	    'august',
	    'aunt',
	    'author',
	    'auto',
	    'autumn',
	    'average',
	    'avocado',
	    'avoid',
	    'awake',
	    'aware',
	    'away',
	    'awesome',
	    'awful',
	    'awkward',
	    'axis',
	    'baby',
	    'bachelor',
	    'bacon',
	    'badge',
	    'bag',
	    'balance',
	    'balcony',
	    'ball',
	    'bamboo',
	    'banana',
	    'banner',
	    'bar',
	    'barely',
	    'bargain',
	    'barrel',
	    'base',
	    'basic',
	    'basket',
	    'battle',
	    'beach',
	    'bean',
	    'beauty',
	    'because',
	    'become',
	    'beef',
	    'before',
	    'begin',
	    'behave',
	    'behind',
	    'believe',
	    'below',
	    'belt',
	    'bench',
	    'benefit',
	    'best',
	    'betray',
	    'better',
	    'between',
	    'beyond',
	    'bicycle',
	    'bid',
	    'bike',
	    'bind',
	    'biology',
	    'bird',
	    'birth',
	    'bitter',
	    'black',
	    'blade',
	    'blame',
	    'blanket',
	    'blast',
	    'bleak',
	    'bless',
	    'blind',
	    'blood',
	    'blossom',
	    'blouse',
	    'blue',
	    'blur',
	    'blush',
	    'board',
	    'boat',
	    'body',
	    'boil',
	    'bomb',
	    'bone',
	    'bonus',
	    'book',
	    'boost',
	    'border',
	    'boring',
	    'borrow',
	    'boss',
	    'bottom',
	    'bounce',
	    'box',
	    'boy',
	    'bracket',
	    'brain',
	    'brand',
	    'brass',
	    'brave',
	    'bread',
	    'breeze',
	    'brick',
	    'bridge',
	    'brief',
	    'bright',
	    'bring',
	    'brisk',
	    'broccoli',
	    'broken',
	    'bronze',
	    'broom',
	    'brother',
	    'brown',
	    'brush',
	    'bubble',
	    'buddy',
	    'budget',
	    'buffalo',
	    'build',
	    'bulb',
	    'bulk',
	    'bullet',
	    'bundle',
	    'bunker',
	    'burden',
	    'burger',
	    'burst',
	    'bus',
	    'business',
	    'busy',
	    'butter',
	    'buyer',
	    'buzz',
	    'cabbage',
	    'cabin',
	    'cable',
	    'cactus',
	    'cage',
	    'cake',
	    'call',
	    'calm',
	    'camera',
	    'camp',
	    'can',
	    'canal',
	    'cancel',
	    'candy',
	    'cannon',
	    'canoe',
	    'canvas',
	    'canyon',
	    'capable',
	    'capital',
	    'captain',
	    'car',
	    'carbon',
	    'card',
	    'cargo',
	    'carpet',
	    'carry',
	    'cart',
	    'case',
	    'cash',
	    'casino',
	    'castle',
	    'casual',
	    'cat',
	    'catalog',
	    'catch',
	    'category',
	    'cattle',
	    'caught',
	    'cause',
	    'caution',
	    'cave',
	    'ceiling',
	    'celery',
	    'cement',
	    'census',
	    'century',
	    'cereal',
	    'certain',
	    'chair',
	    'chalk',
	    'champion',
	    'change',
	    'chaos',
	    'chapter',
	    'charge',
	    'chase',
	    'chat',
	    'cheap',
	    'check',
	    'cheese',
	    'chef',
	    'cherry',
	    'chest',
	    'chicken',
	    'chief',
	    'child',
	    'chimney',
	    'choice',
	    'choose',
	    'chronic',
	    'chuckle',
	    'chunk',
	    'churn',
	    'cigar',
	    'cinnamon',
	    'circle',
	    'citizen',
	    'city',
	    'civil',
	    'claim',
	    'clap',
	    'clarify',
	    'claw',
	    'clay',
	    'clean',
	    'clerk',
	    'clever',
	    'click',
	    'client',
	    'cliff',
	    'climb',
	    'clinic',
	    'clip',
	    'clock',
	    'clog',
	    'close',
	    'cloth',
	    'cloud',
	    'clown',
	    'club',
	    'clump',
	    'cluster',
	    'clutch',
	    'coach',
	    'coast',
	    'coconut',
	    'code',
	    'coffee',
	    'coil',
	    'coin',
	    'collect',
	    'color',
	    'column',
	    'combine',
	    'come',
	    'comfort',
	    'comic',
	    'common',
	    'company',
	    'concert',
	    'conduct',
	    'confirm',
	    'congress',
	    'connect',
	    'consider',
	    'control',
	    'convince',
	    'cook',
	    'cool',
	    'copper',
	    'copy',
	    'coral',
	    'core',
	    'corn',
	    'correct',
	    'cost',
	    'cotton',
	    'couch',
	    'country',
	    'couple',
	    'course',
	    'cousin',
	    'cover',
	    'coyote',
	    'crack',
	    'cradle',
	    'craft',
	    'cram',
	    'crane',
	    'crash',
	    'crater',
	    'crawl',
	    'crazy',
	    'cream',
	    'credit',
	    'creek',
	    'crew',
	    'cricket',
	    'crime',
	    'crisp',
	    'critic',
	    'crop',
	    'cross',
	    'crouch',
	    'crowd',
	    'crucial',
	    'cruel',
	    'cruise',
	    'crumble',
	    'crunch',
	    'crush',
	    'cry',
	    'crystal',
	    'cube',
	    'culture',
	    'cup',
	    'cupboard',
	    'curious',
	    'current',
	    'curtain',
	    'curve',
	    'cushion',
	    'custom',
	    'cute',
	    'cycle',
	    'dad',
	    'damage',
	    'damp',
	    'dance',
	    'danger',
	    'daring',
	    'dash',
	    'daughter',
	    'dawn',
	    'day',
	    'deal',
	    'debate',
	    'debris',
	    'decade',
	    'december',
	    'decide',
	    'decline',
	    'decorate',
	    'decrease',
	    'deer',
	    'defense',
	    'define',
	    'defy',
	    'degree',
	    'delay',
	    'deliver',
	    'demand',
	    'demise',
	    'denial',
	    'dentist',
	    'deny',
	    'depart',
	    'depend',
	    'deposit',
	    'depth',
	    'deputy',
	    'derive',
	    'describe',
	    'desert',
	    'design',
	    'desk',
	    'despair',
	    'destroy',
	    'detail',
	    'detect',
	    'develop',
	    'device',
	    'devote',
	    'diagram',
	    'dial',
	    'diamond',
	    'diary',
	    'dice',
	    'diesel',
	    'diet',
	    'differ',
	    'digital',
	    'dignity',
	    'dilemma',
	    'dinner',
	    'dinosaur',
	    'direct',
	    'dirt',
	    'disagree',
	    'discover',
	    'disease',
	    'dish',
	    'dismiss',
	    'disorder',
	    'display',
	    'distance',
	    'divert',
	    'divide',
	    'divorce',
	    'dizzy',
	    'doctor',
	    'document',
	    'dog',
	    'doll',
	    'dolphin',
	    'domain',
	    'donate',
	    'donkey',
	    'donor',
	    'door',
	    'dose',
	    'double',
	    'dove',
	    'draft',
	    'dragon',
	    'drama',
	    'drastic',
	    'draw',
	    'dream',
	    'dress',
	    'drift',
	    'drill',
	    'drink',
	    'drip',
	    'drive',
	    'drop',
	    'drum',
	    'dry',
	    'duck',
	    'dumb',
	    'dune',
	    'during',
	    'dust',
	    'dutch',
	    'duty',
	    'dwarf',
	    'dynamic',
	    'eager',
	    'eagle',
	    'early',
	    'earn',
	    'earth',
	    'easily',
	    'east',
	    'easy',
	    'echo',
	    'ecology',
	    'economy',
	    'edge',
	    'edit',
	    'educate',
	    'effort',
	    'egg',
	    'eight',
	    'either',
	    'elbow',
	    'elder',
	    'electric',
	    'elegant',
	    'element',
	    'elephant',
	    'elevator',
	    'elite',
	    'else',
	    'embark',
	    'embody',
	    'embrace',
	    'emerge',
	    'emotion',
	    'employ',
	    'empower',
	    'empty',
	    'enable',
	    'enact',
	    'end',
	    'endless',
	    'endorse',
	    'enemy',
	    'energy',
	    'enforce',
	    'engage',
	    'engine',
	    'enhance',
	    'enjoy',
	    'enlist',
	    'enough',
	    'enrich',
	    'enroll',
	    'ensure',
	    'enter',
	    'entire',
	    'entry',
	    'envelope',
	    'episode',
	    'equal',
	    'equip',
	    'era',
	    'erase',
	    'erode',
	    'erosion',
	    'error',
	    'erupt',
	    'escape',
	    'essay',
	    'essence',
	    'estate',
	    'eternal',
	    'ethics',
	    'evidence',
	    'evil',
	    'evoke',
	    'evolve',
	    'exact',
	    'example',
	    'excess',
	    'exchange',
	    'excite',
	    'exclude',
	    'excuse',
	    'execute',
	    'exercise',
	    'exhaust',
	    'exhibit',
	    'exile',
	    'exist',
	    'exit',
	    'exotic',
	    'expand',
	    'expect',
	    'expire',
	    'explain',
	    'expose',
	    'express',
	    'extend',
	    'extra',
	    'eye',
	    'eyebrow',
	    'fabric',
	    'face',
	    'faculty',
	    'fade',
	    'faint',
	    'faith',
	    'fall',
	    'false',
	    'fame',
	    'family',
	    'famous',
	    'fan',
	    'fancy',
	    'fantasy',
	    'farm',
	    'fashion',
	    'fat',
	    'fatal',
	    'father',
	    'fatigue',
	    'fault',
	    'favorite',
	    'feature',
	    'february',
	    'federal',
	    'fee',
	    'feed',
	    'feel',
	    'female',
	    'fence',
	    'festival',
	    'fetch',
	    'fever',
	    'few',
	    'fiber',
	    'fiction',
	    'field',
	    'figure',
	    'file',
	    'film',
	    'filter',
	    'final',
	    'find',
	    'fine',
	    'finger',
	    'finish',
	    'fire',
	    'firm',
	    'first',
	    'fiscal',
	    'fish',
	    'fit',
	    'fitness',
	    'fix',
	    'flag',
	    'flame',
	    'flash',
	    'flat',
	    'flavor',
	    'flee',
	    'flight',
	    'flip',
	    'float',
	    'flock',
	    'floor',
	    'flower',
	    'fluid',
	    'flush',
	    'fly',
	    'foam',
	    'focus',
	    'fog',
	    'foil',
	    'fold',
	    'follow',
	    'food',
	    'foot',
	    'force',
	    'forest',
	    'forget',
	    'fork',
	    'fortune',
	    'forum',
	    'forward',
	    'fossil',
	    'foster',
	    'found',
	    'fox',
	    'fragile',
	    'frame',
	    'frequent',
	    'fresh',
	    'friend',
	    'fringe',
	    'frog',
	    'front',
	    'frost',
	    'frown',
	    'frozen',
	    'fruit',
	    'fuel',
	    'fun',
	    'funny',
	    'furnace',
	    'fury',
	    'future',
	    'gadget',
	    'gain',
	    'galaxy',
	    'gallery',
	    'game',
	    'gap',
	    'garage',
	    'garbage',
	    'garden',
	    'garlic',
	    'garment',
	    'gas',
	    'gasp',
	    'gate',
	    'gather',
	    'gauge',
	    'gaze',
	    'general',
	    'genius',
	    'genre',
	    'gentle',
	    'genuine',
	    'gesture',
	    'ghost',
	    'giant',
	    'gift',
	    'giggle',
	    'ginger',
	    'giraffe',
	    'girl',
	    'give',
	    'glad',
	    'glance',
	    'glare',
	    'glass',
	    'glide',
	    'glimpse',
	    'globe',
	    'gloom',
	    'glory',
	    'glove',
	    'glow',
	    'glue',
	    'goat',
	    'goddess',
	    'gold',
	    'good',
	    'goose',
	    'gorilla',
	    'gospel',
	    'gossip',
	    'govern',
	    'gown',
	    'grab',
	    'grace',
	    'grain',
	    'grant',
	    'grape',
	    'grass',
	    'gravity',
	    'great',
	    'green',
	    'grid',
	    'grief',
	    'grit',
	    'grocery',
	    'group',
	    'grow',
	    'grunt',
	    'guard',
	    'guess',
	    'guide',
	    'guilt',
	    'guitar',
	    'gun',
	    'gym',
	    'habit',
	    'hair',
	    'half',
	    'hammer',
	    'hamster',
	    'hand',
	    'happy',
	    'harbor',
	    'hard',
	    'harsh',
	    'harvest',
	    'hat',
	    'have',
	    'hawk',
	    'hazard',
	    'head',
	    'health',
	    'heart',
	    'heavy',
	    'hedgehog',
	    'height',
	    'hello',
	    'helmet',
	    'help',
	    'hen',
	    'hero',
	    'hidden',
	    'high',
	    'hill',
	    'hint',
	    'hip',
	    'hire',
	    'history',
	    'hobby',
	    'hockey',
	    'hold',
	    'hole',
	    'holiday',
	    'hollow',
	    'home',
	    'honey',
	    'hood',
	    'hope',
	    'horn',
	    'horror',
	    'horse',
	    'hospital',
	    'host',
	    'hotel',
	    'hour',
	    'hover',
	    'hub',
	    'huge',
	    'human',
	    'humble',
	    'humor',
	    'hundred',
	    'hungry',
	    'hunt',
	    'hurdle',
	    'hurry',
	    'hurt',
	    'husband',
	    'hybrid',
	    'ice',
	    'icon',
	    'idea',
	    'identify',
	    'idle',
	    'ignore',
	    'ill',
	    'illegal',
	    'illness',
	    'image',
	    'imitate',
	    'immense',
	    'immune',
	    'impact',
	    'impose',
	    'improve',
	    'impulse',
	    'inch',
	    'include',
	    'income',
	    'increase',
	    'index',
	    'indicate',
	    'indoor',
	    'industry',
	    'infant',
	    'inflict',
	    'inform',
	    'inhale',
	    'inherit',
	    'initial',
	    'inject',
	    'injury',
	    'inmate',
	    'inner',
	    'innocent',
	    'input',
	    'inquiry',
	    'insane',
	    'insect',
	    'inside',
	    'inspire',
	    'install',
	    'intact',
	    'interest',
	    'into',
	    'invest',
	    'invite',
	    'involve',
	    'iron',
	    'island',
	    'isolate',
	    'issue',
	    'item',
	    'ivory',
	    'jacket',
	    'jaguar',
	    'jar',
	    'jazz',
	    'jealous',
	    'jeans',
	    'jelly',
	    'jewel',
	    'job',
	    'join',
	    'joke',
	    'journey',
	    'joy',
	    'judge',
	    'juice',
	    'jump',
	    'jungle',
	    'junior',
	    'junk',
	    'just',
	    'kangaroo',
	    'keen',
	    'keep',
	    'ketchup',
	    'key',
	    'kick',
	    'kid',
	    'kidney',
	    'kind',
	    'kingdom',
	    'kiss',
	    'kit',
	    'kitchen',
	    'kite',
	    'kitten',
	    'kiwi',
	    'knee',
	    'knife',
	    'knock',
	    'know',
	    'lab',
	    'label',
	    'labor',
	    'ladder',
	    'lady',
	    'lake',
	    'lamp',
	    'language',
	    'laptop',
	    'large',
	    'later',
	    'latin',
	    'laugh',
	    'laundry',
	    'lava',
	    'law',
	    'lawn',
	    'lawsuit',
	    'layer',
	    'lazy',
	    'leader',
	    'leaf',
	    'learn',
	    'leave',
	    'lecture',
	    'left',
	    'leg',
	    'legal',
	    'legend',
	    'leisure',
	    'lemon',
	    'lend',
	    'length',
	    'lens',
	    'leopard',
	    'lesson',
	    'letter',
	    'level',
	    'liar',
	    'liberty',
	    'library',
	    'license',
	    'life',
	    'lift',
	    'light',
	    'like',
	    'limb',
	    'limit',
	    'link',
	    'lion',
	    'liquid',
	    'list',
	    'little',
	    'live',
	    'lizard',
	    'load',
	    'loan',
	    'lobster',
	    'local',
	    'lock',
	    'logic',
	    'lonely',
	    'long',
	    'loop',
	    'lottery',
	    'loud',
	    'lounge',
	    'love',
	    'loyal',
	    'lucky',
	    'luggage',
	    'lumber',
	    'lunar',
	    'lunch',
	    'luxury',
	    'lyrics',
	    'machine',
	    'mad',
	    'magic',
	    'magnet',
	    'maid',
	    'mail',
	    'main',
	    'major',
	    'make',
	    'mammal',
	    'man',
	    'manage',
	    'mandate',
	    'mango',
	    'mansion',
	    'manual',
	    'maple',
	    'marble',
	    'march',
	    'margin',
	    'marine',
	    'market',
	    'marriage',
	    'mask',
	    'mass',
	    'master',
	    'match',
	    'material',
	    'math',
	    'matrix',
	    'matter',
	    'maximum',
	    'maze',
	    'meadow',
	    'mean',
	    'measure',
	    'meat',
	    'mechanic',
	    'medal',
	    'media',
	    'melody',
	    'melt',
	    'member',
	    'memory',
	    'mention',
	    'menu',
	    'mercy',
	    'merge',
	    'merit',
	    'merry',
	    'mesh',
	    'message',
	    'metal',
	    'method',
	    'middle',
	    'midnight',
	    'milk',
	    'million',
	    'mimic',
	    'mind',
	    'minimum',
	    'minor',
	    'minute',
	    'miracle',
	    'mirror',
	    'misery',
	    'miss',
	    'mistake',
	    'mix',
	    'mixed',
	    'mixture',
	    'mobile',
	    'model',
	    'modify',
	    'mom',
	    'moment',
	    'monitor',
	    'monkey',
	    'monster',
	    'month',
	    'moon',
	    'moral',
	    'more',
	    'morning',
	    'mosquito',
	    'mother',
	    'motion',
	    'motor',
	    'mountain',
	    'mouse',
	    'move',
	    'movie',
	    'much',
	    'muffin',
	    'mule',
	    'multiply',
	    'muscle',
	    'museum',
	    'mushroom',
	    'music',
	    'must',
	    'mutual',
	    'myself',
	    'mystery',
	    'myth',
	    'naive',
	    'name',
	    'napkin',
	    'narrow',
	    'nasty',
	    'nation',
	    'nature',
	    'near',
	    'neck',
	    'need',
	    'negative',
	    'neglect',
	    'neither',
	    'nephew',
	    'nerve',
	    'nest',
	    'net',
	    'network',
	    'neutral',
	    'never',
	    'news',
	    'next',
	    'nice',
	    'night',
	    'noble',
	    'noise',
	    'nominee',
	    'noodle',
	    'normal',
	    'north',
	    'nose',
	    'notable',
	    'note',
	    'nothing',
	    'notice',
	    'novel',
	    'now',
	    'nuclear',
	    'number',
	    'nurse',
	    'nut',
	    'oak',
	    'obey',
	    'object',
	    'oblige',
	    'obscure',
	    'observe',
	    'obtain',
	    'obvious',
	    'occur',
	    'ocean',
	    'october',
	    'odor',
	    'off',
	    'offer',
	    'office',
	    'often',
	    'oil',
	    'okay',
	    'old',
	    'olive',
	    'olympic',
	    'omit',
	    'once',
	    'one',
	    'onion',
	    'online',
	    'only',
	    'open',
	    'opera',
	    'opinion',
	    'oppose',
	    'option',
	    'orange',
	    'orbit',
	    'orchard',
	    'order',
	    'ordinary',
	    'organ',
	    'orient',
	    'original',
	    'orphan',
	    'ostrich',
	    'other',
	    'outdoor',
	    'outer',
	    'output',
	    'outside',
	    'oval',
	    'oven',
	    'over',
	    'own',
	    'owner',
	    'oxygen',
	    'oyster',
	    'ozone',
	    'pact',
	    'paddle',
	    'page',
	    'pair',
	    'palace',
	    'palm',
	    'panda',
	    'panel',
	    'panic',
	    'panther',
	    'paper',
	    'parade',
	    'parent',
	    'park',
	    'parrot',
	    'party',
	    'pass',
	    'patch',
	    'path',
	    'patient',
	    'patrol',
	    'pattern',
	    'pause',
	    'pave',
	    'payment',
	    'peace',
	    'peanut',
	    'pear',
	    'peasant',
	    'pelican',
	    'pen',
	    'penalty',
	    'pencil',
	    'people',
	    'pepper',
	    'perfect',
	    'permit',
	    'person',
	    'pet',
	    'phone',
	    'photo',
	    'phrase',
	    'physical',
	    'piano',
	    'picnic',
	    'picture',
	    'piece',
	    'pig',
	    'pigeon',
	    'pill',
	    'pilot',
	    'pink',
	    'pioneer',
	    'pipe',
	    'pistol',
	    'pitch',
	    'pizza',
	    'place',
	    'planet',
	    'plastic',
	    'plate',
	    'play',
	    'please',
	    'pledge',
	    'pluck',
	    'plug',
	    'plunge',
	    'poem',
	    'poet',
	    'point',
	    'polar',
	    'pole',
	    'police',
	    'pond',
	    'pony',
	    'pool',
	    'popular',
	    'portion',
	    'position',
	    'possible',
	    'post',
	    'potato',
	    'pottery',
	    'poverty',
	    'powder',
	    'power',
	    'practice',
	    'praise',
	    'predict',
	    'prefer',
	    'prepare',
	    'present',
	    'pretty',
	    'prevent',
	    'price',
	    'pride',
	    'primary',
	    'print',
	    'priority',
	    'prison',
	    'private',
	    'prize',
	    'problem',
	    'process',
	    'produce',
	    'profit',
	    'program',
	    'project',
	    'promote',
	    'proof',
	    'property',
	    'prosper',
	    'protect',
	    'proud',
	    'provide',
	    'public',
	    'pudding',
	    'pull',
	    'pulp',
	    'pulse',
	    'pumpkin',
	    'punch',
	    'pupil',
	    'puppy',
	    'purchase',
	    'purity',
	    'purpose',
	    'purse',
	    'push',
	    'put',
	    'puzzle',
	    'pyramid',
	    'quality',
	    'quantum',
	    'quarter',
	    'question',
	    'quick',
	    'quit',
	    'quiz',
	    'quote',
	    'rabbit',
	    'raccoon',
	    'race',
	    'rack',
	    'radar',
	    'radio',
	    'rail',
	    'rain',
	    'raise',
	    'rally',
	    'ramp',
	    'ranch',
	    'random',
	    'range',
	    'rapid',
	    'rare',
	    'rate',
	    'rather',
	    'raven',
	    'raw',
	    'razor',
	    'ready',
	    'real',
	    'reason',
	    'rebel',
	    'rebuild',
	    'recall',
	    'receive',
	    'recipe',
	    'record',
	    'recycle',
	    'reduce',
	    'reflect',
	    'reform',
	    'refuse',
	    'region',
	    'regret',
	    'regular',
	    'reject',
	    'relax',
	    'release',
	    'relief',
	    'rely',
	    'remain',
	    'remember',
	    'remind',
	    'remove',
	    'render',
	    'renew',
	    'rent',
	    'reopen',
	    'repair',
	    'repeat',
	    'replace',
	    'report',
	    'require',
	    'rescue',
	    'resemble',
	    'resist',
	    'resource',
	    'response',
	    'result',
	    'retire',
	    'retreat',
	    'return',
	    'reunion',
	    'reveal',
	    'review',
	    'reward',
	    'rhythm',
	    'rib',
	    'ribbon',
	    'rice',
	    'rich',
	    'ride',
	    'ridge',
	    'rifle',
	    'right',
	    'rigid',
	    'ring',
	    'riot',
	    'ripple',
	    'risk',
	    'ritual',
	    'rival',
	    'river',
	    'road',
	    'roast',
	    'robot',
	    'robust',
	    'rocket',
	    'romance',
	    'roof',
	    'rookie',
	    'room',
	    'rose',
	    'rotate',
	    'rough',
	    'round',
	    'route',
	    'royal',
	    'rubber',
	    'rude',
	    'rug',
	    'rule',
	    'run',
	    'runway',
	    'rural',
	    'sad',
	    'saddle',
	    'sadness',
	    'safe',
	    'sail',
	    'salad',
	    'salmon',
	    'salon',
	    'salt',
	    'salute',
	    'same',
	    'sample',
	    'sand',
	    'satisfy',
	    'satoshi',
	    'sauce',
	    'sausage',
	    'save',
	    'say',
	    'scale',
	    'scan',
	    'scare',
	    'scatter',
	    'scene',
	    'scheme',
	    'school',
	    'science',
	    'scissors',
	    'scorpion',
	    'scout',
	    'scrap',
	    'screen',
	    'script',
	    'scrub',
	    'sea',
	    'search',
	    'season',
	    'seat',
	    'second',
	    'secret',
	    'section',
	    'security',
	    'seed',
	    'seek',
	    'segment',
	    'select',
	    'sell',
	    'seminar',
	    'senior',
	    'sense',
	    'sentence',
	    'series',
	    'service',
	    'session',
	    'settle',
	    'setup',
	    'seven',
	    'shadow',
	    'shaft',
	    'shallow',
	    'share',
	    'shed',
	    'shell',
	    'sheriff',
	    'shield',
	    'shift',
	    'shine',
	    'ship',
	    'shiver',
	    'shock',
	    'shoe',
	    'shoot',
	    'shop',
	    'short',
	    'shoulder',
	    'shove',
	    'shrimp',
	    'shrug',
	    'shuffle',
	    'shy',
	    'sibling',
	    'sick',
	    'side',
	    'siege',
	    'sight',
	    'sign',
	    'silent',
	    'silk',
	    'silly',
	    'silver',
	    'similar',
	    'simple',
	    'since',
	    'sing',
	    'siren',
	    'sister',
	    'situate',
	    'six',
	    'size',
	    'skate',
	    'sketch',
	    'ski',
	    'skill',
	    'skin',
	    'skirt',
	    'skull',
	    'slab',
	    'slam',
	    'sleep',
	    'slender',
	    'slice',
	    'slide',
	    'slight',
	    'slim',
	    'slogan',
	    'slot',
	    'slow',
	    'slush',
	    'small',
	    'smart',
	    'smile',
	    'smoke',
	    'smooth',
	    'snack',
	    'snake',
	    'snap',
	    'sniff',
	    'snow',
	    'soap',
	    'soccer',
	    'social',
	    'sock',
	    'soda',
	    'soft',
	    'solar',
	    'soldier',
	    'solid',
	    'solution',
	    'solve',
	    'someone',
	    'song',
	    'soon',
	    'sorry',
	    'sort',
	    'soul',
	    'sound',
	    'soup',
	    'source',
	    'south',
	    'space',
	    'spare',
	    'spatial',
	    'spawn',
	    'speak',
	    'special',
	    'speed',
	    'spell',
	    'spend',
	    'sphere',
	    'spice',
	    'spider',
	    'spike',
	    'spin',
	    'spirit',
	    'split',
	    'spoil',
	    'sponsor',
	    'spoon',
	    'sport',
	    'spot',
	    'spray',
	    'spread',
	    'spring',
	    'spy',
	    'square',
	    'squeeze',
	    'squirrel',
	    'stable',
	    'stadium',
	    'staff',
	    'stage',
	    'stairs',
	    'stamp',
	    'stand',
	    'start',
	    'state',
	    'stay',
	    'steak',
	    'steel',
	    'stem',
	    'step',
	    'stereo',
	    'stick',
	    'still',
	    'sting',
	    'stock',
	    'stomach',
	    'stone',
	    'stool',
	    'story',
	    'stove',
	    'strategy',
	    'street',
	    'strike',
	    'strong',
	    'struggle',
	    'student',
	    'stuff',
	    'stumble',
	    'style',
	    'subject',
	    'submit',
	    'subway',
	    'success',
	    'such',
	    'sudden',
	    'suffer',
	    'sugar',
	    'suggest',
	    'suit',
	    'summer',
	    'sun',
	    'sunny',
	    'sunset',
	    'super',
	    'supply',
	    'supreme',
	    'sure',
	    'surface',
	    'surge',
	    'surprise',
	    'surround',
	    'survey',
	    'suspect',
	    'sustain',
	    'swallow',
	    'swamp',
	    'swap',
	    'swarm',
	    'swear',
	    'sweet',
	    'swift',
	    'swim',
	    'swing',
	    'switch',
	    'sword',
	    'symbol',
	    'symptom',
	    'syrup',
	    'system',
	    'table',
	    'tackle',
	    'tag',
	    'tail',
	    'talent',
	    'talk',
	    'tank',
	    'tape',
	    'target',
	    'task',
	    'taste',
	    'tattoo',
	    'taxi',
	    'teach',
	    'team',
	    'tell',
	    'ten',
	    'tenant',
	    'tennis',
	    'tent',
	    'term',
	    'test',
	    'text',
	    'thank',
	    'that',
	    'theme',
	    'then',
	    'theory',
	    'there',
	    'they',
	    'thing',
	    'this',
	    'thought',
	    'three',
	    'thrive',
	    'throw',
	    'thumb',
	    'thunder',
	    'ticket',
	    'tide',
	    'tiger',
	    'tilt',
	    'timber',
	    'time',
	    'tiny',
	    'tip',
	    'tired',
	    'tissue',
	    'title',
	    'toast',
	    'tobacco',
	    'today',
	    'toddler',
	    'toe',
	    'together',
	    'toilet',
	    'token',
	    'tomato',
	    'tomorrow',
	    'tone',
	    'tongue',
	    'tonight',
	    'tool',
	    'tooth',
	    'top',
	    'topic',
	    'topple',
	    'torch',
	    'tornado',
	    'tortoise',
	    'toss',
	    'total',
	    'tourist',
	    'toward',
	    'tower',
	    'town',
	    'toy',
	    'track',
	    'trade',
	    'traffic',
	    'tragic',
	    'train',
	    'transfer',
	    'trap',
	    'trash',
	    'travel',
	    'tray',
	    'treat',
	    'tree',
	    'trend',
	    'trial',
	    'tribe',
	    'trick',
	    'trigger',
	    'trim',
	    'trip',
	    'trophy',
	    'trouble',
	    'truck',
	    'true',
	    'truly',
	    'trumpet',
	    'trust',
	    'truth',
	    'try',
	    'tube',
	    'tuition',
	    'tumble',
	    'tuna',
	    'tunnel',
	    'turkey',
	    'turn',
	    'turtle',
	    'twelve',
	    'twenty',
	    'twice',
	    'twin',
	    'twist',
	    'two',
	    'type',
	    'typical',
	    'ugly',
	    'umbrella',
	    'unable',
	    'unaware',
	    'uncle',
	    'uncover',
	    'under',
	    'undo',
	    'unfair',
	    'unfold',
	    'unhappy',
	    'uniform',
	    'unique',
	    'unit',
	    'universe',
	    'unknown',
	    'unlock',
	    'until',
	    'unusual',
	    'unveil',
	    'update',
	    'upgrade',
	    'uphold',
	    'upon',
	    'upper',
	    'upset',
	    'urban',
	    'urge',
	    'usage',
	    'use',
	    'used',
	    'useful',
	    'useless',
	    'usual',
	    'utility',
	    'vacant',
	    'vacuum',
	    'vague',
	    'valid',
	    'valley',
	    'valve',
	    'van',
	    'vanish',
	    'vapor',
	    'various',
	    'vast',
	    'vault',
	    'vehicle',
	    'velvet',
	    'vendor',
	    'venture',
	    'venue',
	    'verb',
	    'verify',
	    'version',
	    'very',
	    'vessel',
	    'veteran',
	    'viable',
	    'vibrant',
	    'vicious',
	    'victory',
	    'video',
	    'view',
	    'village',
	    'vintage',
	    'violin',
	    'virtual',
	    'virus',
	    'visa',
	    'visit',
	    'visual',
	    'vital',
	    'vivid',
	    'vocal',
	    'voice',
	    'void',
	    'volcano',
	    'volume',
	    'vote',
	    'voyage',
	    'wage',
	    'wagon',
	    'wait',
	    'walk',
	    'wall',
	    'walnut',
	    'want',
	    'warfare',
	    'warm',
	    'warrior',
	    'wash',
	    'wasp',
	    'waste',
	    'water',
	    'wave',
	    'way',
	    'wealth',
	    'weapon',
	    'wear',
	    'weasel',
	    'weather',
	    'web',
	    'wedding',
	    'weekend',
	    'weird',
	    'welcome',
	    'west',
	    'wet',
	    'whale',
	    'what',
	    'wheat',
	    'wheel',
	    'when',
	    'where',
	    'whip',
	    'whisper',
	    'wide',
	    'width',
	    'wife',
	    'wild',
	    'will',
	    'win',
	    'window',
	    'wine',
	    'wing',
	    'wink',
	    'winner',
	    'winter',
	    'wire',
	    'wisdom',
	    'wise',
	    'wish',
	    'witness',
	    'wolf',
	    'woman',
	    'wonder',
	    'wood',
	    'wool',
	    'word',
	    'work',
	    'world',
	    'worry',
	    'worth',
	    'wrap',
	    'wreck',
	    'wrestle',
	    'wrist',
	    'write',
	    'wrong',
	    'yard',
	    'year',
	    'yellow',
	    'you',
	    'young',
	    'youth',
	    'zebra',
	    'zero',
	    'zone',
	    'zoo',
	];
	exports.default = words;
	});

	/*@__PURE__*/getDefaultExportFromCjs(words_1);

	var bip39Mnemonic = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	//@ts-ignore

	var convert_1 = __importDefault(convert);
	var util_1 = __importDefault(util);
	var words_1$1 = __importDefault(words_1);
	var Bip39Mnemonic = /** @class */ (function () {
	    function Bip39Mnemonic(password) {
	        var _this = this;
	        /**
	         * Creates a BIP39 wallet
	         *
	         * @param {string} [entropy] - (Optional) the entropy to use instead of generating
	         * @returns {MnemonicSeed} The mnemonic phrase and a seed derived from the (generated) entropy
	         */
	        this.createWallet = function (entropy) {
	            if (entropy) {
	                if (entropy.length !== 64) {
	                    throw new Error('Invalid entropy length, must be a 64 byte hexadecimal string');
	                }
	                if (!/^[0-9a-fA-F]+$/i.test(entropy)) {
	                    throw new Error('Entopy is not a valid hexadecimal string');
	                }
	            }
	            if (!entropy) {
	                entropy = _this.randomHex(64);
	            }
	            var mnemonic = _this.deriveMnemonic(entropy);
	            var seed = _this.mnemonicToSeed(mnemonic);
	            return {
	                mnemonic: mnemonic,
	                seed: seed,
	            };
	        };
	        /**
	         * Creates an old Nano wallet
	         *
	         * @param {string} seed - (Optional) the seed to be used for the wallet
	         * @returns {MnemonicSeed} The mnemonic phrase and a generated seed if none provided
	         */
	        this.createLegacyWallet = function (seed) {
	            if (seed) {
	                if (seed.length !== 64) {
	                    throw new Error('Invalid entropy length, must be a 64 byte hexadecimal string');
	                }
	                if (!/^[0-9a-fA-F]+$/i.test(seed)) {
	                    throw new Error('Entopy is not a valid hexadecimal string');
	                }
	            }
	            if (!seed) {
	                seed = _this.randomHex(64);
	            }
	            var mnemonic = _this.deriveMnemonic(seed);
	            return {
	                mnemonic: mnemonic,
	                seed: seed,
	            };
	        };
	        this.deriveMnemonic = function (entropy) {
	            var entropyBinary = convert_1.default.hexStringToBinary(entropy);
	            var entropySha256Binary = convert_1.default.hexStringToBinary(_this.calculateChecksum(entropy));
	            var entropyBinaryWithChecksum = entropyBinary + entropySha256Binary;
	            var mnemonicWords = [];
	            for (var i = 0; i < entropyBinaryWithChecksum.length; i += 11) {
	                mnemonicWords.push(words_1$1.default[parseInt(entropyBinaryWithChecksum.substr(i, 11), 2)]);
	            }
	            return mnemonicWords.join(' ');
	        };
	        /**
	         * Validates a mnemonic phrase
	         *
	         * @param {string} mnemonic - The mnemonic phrase to validate
	         * @returns {boolean} Is the mnemonic phrase valid
	         */
	        this.validateMnemonic = function (mnemonic) {
	            var wordArray = util_1.default.normalizeUTF8(mnemonic).split(' ');
	            if (wordArray.length % 3 !== 0) {
	                return false;
	            }
	            var bits = wordArray.map(function (w) {
	                var wordIndex = words_1$1.default.indexOf(w);
	                if (wordIndex === -1) {
	                    return false;
	                }
	                return (convert_1.default.dec2bin(wordIndex)).padStart(11, '0');
	            }).join('');
	            var dividerIndex = Math.floor(bits.length / 33) * 32;
	            var entropyBits = bits.slice(0, dividerIndex);
	            var checksumBits = bits.slice(dividerIndex);
	            var entropyBytes = entropyBits.match(/(.{1,8})/g).map(function (bin) { return parseInt(bin, 2); });
	            if (entropyBytes.length < 16) {
	                return false;
	            }
	            if (entropyBytes.length > 32) {
	                return false;
	            }
	            if (entropyBytes.length % 4 !== 0) {
	                return false;
	            }
	            var entropyHex = convert_1.default.bytesToHexString(entropyBytes);
	            var newChecksum = _this.calculateChecksum(entropyHex);
	            var inputChecksum = convert_1.default.binaryToHexString(checksumBits);
	            if (parseInt(newChecksum, 16) != parseInt(inputChecksum, 16)) {
	                return false;
	            }
	            return true;
	        };
	        /**
	         * Converts the mnemonic phrase to an old Nano seed
	         *
	         * @param {string} mnemonic Mnemonic phrase separated by spaces
	         */
	        this.mnemonicToLegacySeed = function (mnemonic) {
	            var wordArray = util_1.default.normalizeUTF8(mnemonic).split(' ');
	            var bits = wordArray.map(function (w) {
	                var wordIndex = words_1$1.default.indexOf(w);
	                if (wordIndex === -1) {
	                    return false;
	                }
	                return (convert_1.default.dec2bin(wordIndex)).padStart(11, '0');
	            }).join('');
	            var dividerIndex = Math.floor(bits.length / 33) * 32;
	            var entropyBits = bits.slice(0, dividerIndex);
	            var entropyBytes = entropyBits.match(/(.{1,8})/g).map(function (bin) { return parseInt(bin, 2); });
	            var entropyHex = convert_1.default.bytesToHexString(entropyBytes);
	            return entropyHex;
	        };
	        /**
	         * Converts the mnemonic phrase to a BIP39 seed
	         *
	         * @param {string} mnemonic Mnemonic phrase separated by spaces
	         */
	        this.mnemonicToSeed = function (mnemonic) {
	            var normalizedMnemonic = util_1.default.normalizeUTF8(mnemonic);
	            var normalizedPassword = 'mnemonic' + util_1.default.normalizeUTF8(_this.password);
	            return cryptoJs.PBKDF2(normalizedMnemonic, normalizedPassword, {
	                keySize: 512 / 32,
	                iterations: 2048,
	                hasher: cryptoJs.algo.SHA512,
	            })
	                .toString(cryptoJs.enc.Hex);
	        };
	        this.randomHex = function (length) {
	            return cryptoJs.lib.WordArray.random(length / 2).toString();
	        };
	        this.calculateChecksum = function (entropyHex) {
	            var entropySha256 = cryptoJs.SHA256(cryptoJs.enc.Hex.parse(entropyHex)).toString();
	            return entropySha256.substr(0, entropySha256.length / 32);
	        };
	        this.password = password;
	    }
	    return Bip39Mnemonic;
	}());
	exports.default = Bip39Mnemonic;
	});

	var curve25519 = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __importDefault(util);
	var Curve25519 = /** @class */ (function () {
	    function Curve25519() {
	        this.gf0 = this.gf();
	        this.gf1 = this.gf([1]);
	        this._9 = new Uint8Array(32);
	        this._9[0] = 9;
	        this._121665 = this.gf([0xdb41, 1]);
	        this.D = this.gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]);
	        this.D2 = this.gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]);
	        this.I = this.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
	    }
	    Curve25519.prototype.gf = function (init) {
	        var r = new Int32Array(16);
	        if (init) {
	            for (var i = 0; i < init.length; i++) {
	                r[i] = init[i];
	            }
	        }
	        return r;
	    };
	    Curve25519.prototype.A = function (o, a, b) {
	        for (var i = 0; i < 16; i++) {
	            o[i] = a[i] + b[i];
	        }
	    };
	    Curve25519.prototype.Z = function (o, a, b) {
	        for (var i = 0; i < 16; i++) {
	            o[i] = a[i] - b[i];
	        }
	    };
	    // Avoid loops for better performance
	    Curve25519.prototype.M = function (o, a, b) {
	        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0;
	        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
	        v = a[0];
	        t0 += v * b0;
	        t1 += v * b1;
	        t2 += v * b2;
	        t3 += v * b3;
	        t4 += v * b4;
	        t5 += v * b5;
	        t6 += v * b6;
	        t7 += v * b7;
	        t8 += v * b8;
	        t9 += v * b9;
	        t10 += v * b10;
	        t11 += v * b11;
	        t12 += v * b12;
	        t13 += v * b13;
	        t14 += v * b14;
	        t15 += v * b15;
	        v = a[1];
	        t1 += v * b0;
	        t2 += v * b1;
	        t3 += v * b2;
	        t4 += v * b3;
	        t5 += v * b4;
	        t6 += v * b5;
	        t7 += v * b6;
	        t8 += v * b7;
	        t9 += v * b8;
	        t10 += v * b9;
	        t11 += v * b10;
	        t12 += v * b11;
	        t13 += v * b12;
	        t14 += v * b13;
	        t15 += v * b14;
	        t16 += v * b15;
	        v = a[2];
	        t2 += v * b0;
	        t3 += v * b1;
	        t4 += v * b2;
	        t5 += v * b3;
	        t6 += v * b4;
	        t7 += v * b5;
	        t8 += v * b6;
	        t9 += v * b7;
	        t10 += v * b8;
	        t11 += v * b9;
	        t12 += v * b10;
	        t13 += v * b11;
	        t14 += v * b12;
	        t15 += v * b13;
	        t16 += v * b14;
	        t17 += v * b15;
	        v = a[3];
	        t3 += v * b0;
	        t4 += v * b1;
	        t5 += v * b2;
	        t6 += v * b3;
	        t7 += v * b4;
	        t8 += v * b5;
	        t9 += v * b6;
	        t10 += v * b7;
	        t11 += v * b8;
	        t12 += v * b9;
	        t13 += v * b10;
	        t14 += v * b11;
	        t15 += v * b12;
	        t16 += v * b13;
	        t17 += v * b14;
	        t18 += v * b15;
	        v = a[4];
	        t4 += v * b0;
	        t5 += v * b1;
	        t6 += v * b2;
	        t7 += v * b3;
	        t8 += v * b4;
	        t9 += v * b5;
	        t10 += v * b6;
	        t11 += v * b7;
	        t12 += v * b8;
	        t13 += v * b9;
	        t14 += v * b10;
	        t15 += v * b11;
	        t16 += v * b12;
	        t17 += v * b13;
	        t18 += v * b14;
	        t19 += v * b15;
	        v = a[5];
	        t5 += v * b0;
	        t6 += v * b1;
	        t7 += v * b2;
	        t8 += v * b3;
	        t9 += v * b4;
	        t10 += v * b5;
	        t11 += v * b6;
	        t12 += v * b7;
	        t13 += v * b8;
	        t14 += v * b9;
	        t15 += v * b10;
	        t16 += v * b11;
	        t17 += v * b12;
	        t18 += v * b13;
	        t19 += v * b14;
	        t20 += v * b15;
	        v = a[6];
	        t6 += v * b0;
	        t7 += v * b1;
	        t8 += v * b2;
	        t9 += v * b3;
	        t10 += v * b4;
	        t11 += v * b5;
	        t12 += v * b6;
	        t13 += v * b7;
	        t14 += v * b8;
	        t15 += v * b9;
	        t16 += v * b10;
	        t17 += v * b11;
	        t18 += v * b12;
	        t19 += v * b13;
	        t20 += v * b14;
	        t21 += v * b15;
	        v = a[7];
	        t7 += v * b0;
	        t8 += v * b1;
	        t9 += v * b2;
	        t10 += v * b3;
	        t11 += v * b4;
	        t12 += v * b5;
	        t13 += v * b6;
	        t14 += v * b7;
	        t15 += v * b8;
	        t16 += v * b9;
	        t17 += v * b10;
	        t18 += v * b11;
	        t19 += v * b12;
	        t20 += v * b13;
	        t21 += v * b14;
	        t22 += v * b15;
	        v = a[8];
	        t8 += v * b0;
	        t9 += v * b1;
	        t10 += v * b2;
	        t11 += v * b3;
	        t12 += v * b4;
	        t13 += v * b5;
	        t14 += v * b6;
	        t15 += v * b7;
	        t16 += v * b8;
	        t17 += v * b9;
	        t18 += v * b10;
	        t19 += v * b11;
	        t20 += v * b12;
	        t21 += v * b13;
	        t22 += v * b14;
	        t23 += v * b15;
	        v = a[9];
	        t9 += v * b0;
	        t10 += v * b1;
	        t11 += v * b2;
	        t12 += v * b3;
	        t13 += v * b4;
	        t14 += v * b5;
	        t15 += v * b6;
	        t16 += v * b7;
	        t17 += v * b8;
	        t18 += v * b9;
	        t19 += v * b10;
	        t20 += v * b11;
	        t21 += v * b12;
	        t22 += v * b13;
	        t23 += v * b14;
	        t24 += v * b15;
	        v = a[10];
	        t10 += v * b0;
	        t11 += v * b1;
	        t12 += v * b2;
	        t13 += v * b3;
	        t14 += v * b4;
	        t15 += v * b5;
	        t16 += v * b6;
	        t17 += v * b7;
	        t18 += v * b8;
	        t19 += v * b9;
	        t20 += v * b10;
	        t21 += v * b11;
	        t22 += v * b12;
	        t23 += v * b13;
	        t24 += v * b14;
	        t25 += v * b15;
	        v = a[11];
	        t11 += v * b0;
	        t12 += v * b1;
	        t13 += v * b2;
	        t14 += v * b3;
	        t15 += v * b4;
	        t16 += v * b5;
	        t17 += v * b6;
	        t18 += v * b7;
	        t19 += v * b8;
	        t20 += v * b9;
	        t21 += v * b10;
	        t22 += v * b11;
	        t23 += v * b12;
	        t24 += v * b13;
	        t25 += v * b14;
	        t26 += v * b15;
	        v = a[12];
	        t12 += v * b0;
	        t13 += v * b1;
	        t14 += v * b2;
	        t15 += v * b3;
	        t16 += v * b4;
	        t17 += v * b5;
	        t18 += v * b6;
	        t19 += v * b7;
	        t20 += v * b8;
	        t21 += v * b9;
	        t22 += v * b10;
	        t23 += v * b11;
	        t24 += v * b12;
	        t25 += v * b13;
	        t26 += v * b14;
	        t27 += v * b15;
	        v = a[13];
	        t13 += v * b0;
	        t14 += v * b1;
	        t15 += v * b2;
	        t16 += v * b3;
	        t17 += v * b4;
	        t18 += v * b5;
	        t19 += v * b6;
	        t20 += v * b7;
	        t21 += v * b8;
	        t22 += v * b9;
	        t23 += v * b10;
	        t24 += v * b11;
	        t25 += v * b12;
	        t26 += v * b13;
	        t27 += v * b14;
	        t28 += v * b15;
	        v = a[14];
	        t14 += v * b0;
	        t15 += v * b1;
	        t16 += v * b2;
	        t17 += v * b3;
	        t18 += v * b4;
	        t19 += v * b5;
	        t20 += v * b6;
	        t21 += v * b7;
	        t22 += v * b8;
	        t23 += v * b9;
	        t24 += v * b10;
	        t25 += v * b11;
	        t26 += v * b12;
	        t27 += v * b13;
	        t28 += v * b14;
	        t29 += v * b15;
	        v = a[15];
	        t15 += v * b0;
	        t16 += v * b1;
	        t17 += v * b2;
	        t18 += v * b3;
	        t19 += v * b4;
	        t20 += v * b5;
	        t21 += v * b6;
	        t22 += v * b7;
	        t23 += v * b8;
	        t24 += v * b9;
	        t25 += v * b10;
	        t26 += v * b11;
	        t27 += v * b12;
	        t28 += v * b13;
	        t29 += v * b14;
	        t30 += v * b15;
	        t0 += 38 * t16;
	        t1 += 38 * t17;
	        t2 += 38 * t18;
	        t3 += 38 * t19;
	        t4 += 38 * t20;
	        t5 += 38 * t21;
	        t6 += 38 * t22;
	        t7 += 38 * t23;
	        t8 += 38 * t24;
	        t9 += 38 * t25;
	        t10 += 38 * t26;
	        t11 += 38 * t27;
	        t12 += 38 * t28;
	        t13 += 38 * t29;
	        t14 += 38 * t30;
	        c = 1;
	        v = t0 + c + 65535;
	        c = Math.floor(v / 65536);
	        t0 = v - c * 65536;
	        v = t1 + c + 65535;
	        c = Math.floor(v / 65536);
	        t1 = v - c * 65536;
	        v = t2 + c + 65535;
	        c = Math.floor(v / 65536);
	        t2 = v - c * 65536;
	        v = t3 + c + 65535;
	        c = Math.floor(v / 65536);
	        t3 = v - c * 65536;
	        v = t4 + c + 65535;
	        c = Math.floor(v / 65536);
	        t4 = v - c * 65536;
	        v = t5 + c + 65535;
	        c = Math.floor(v / 65536);
	        t5 = v - c * 65536;
	        v = t6 + c + 65535;
	        c = Math.floor(v / 65536);
	        t6 = v - c * 65536;
	        v = t7 + c + 65535;
	        c = Math.floor(v / 65536);
	        t7 = v - c * 65536;
	        v = t8 + c + 65535;
	        c = Math.floor(v / 65536);
	        t8 = v - c * 65536;
	        v = t9 + c + 65535;
	        c = Math.floor(v / 65536);
	        t9 = v - c * 65536;
	        v = t10 + c + 65535;
	        c = Math.floor(v / 65536);
	        t10 = v - c * 65536;
	        v = t11 + c + 65535;
	        c = Math.floor(v / 65536);
	        t11 = v - c * 65536;
	        v = t12 + c + 65535;
	        c = Math.floor(v / 65536);
	        t12 = v - c * 65536;
	        v = t13 + c + 65535;
	        c = Math.floor(v / 65536);
	        t13 = v - c * 65536;
	        v = t14 + c + 65535;
	        c = Math.floor(v / 65536);
	        t14 = v - c * 65536;
	        v = t15 + c + 65535;
	        c = Math.floor(v / 65536);
	        t15 = v - c * 65536;
	        t0 += c - 1 + 37 * (c - 1);
	        c = 1;
	        v = t0 + c + 65535;
	        c = Math.floor(v / 65536);
	        t0 = v - c * 65536;
	        v = t1 + c + 65535;
	        c = Math.floor(v / 65536);
	        t1 = v - c * 65536;
	        v = t2 + c + 65535;
	        c = Math.floor(v / 65536);
	        t2 = v - c * 65536;
	        v = t3 + c + 65535;
	        c = Math.floor(v / 65536);
	        t3 = v - c * 65536;
	        v = t4 + c + 65535;
	        c = Math.floor(v / 65536);
	        t4 = v - c * 65536;
	        v = t5 + c + 65535;
	        c = Math.floor(v / 65536);
	        t5 = v - c * 65536;
	        v = t6 + c + 65535;
	        c = Math.floor(v / 65536);
	        t6 = v - c * 65536;
	        v = t7 + c + 65535;
	        c = Math.floor(v / 65536);
	        t7 = v - c * 65536;
	        v = t8 + c + 65535;
	        c = Math.floor(v / 65536);
	        t8 = v - c * 65536;
	        v = t9 + c + 65535;
	        c = Math.floor(v / 65536);
	        t9 = v - c * 65536;
	        v = t10 + c + 65535;
	        c = Math.floor(v / 65536);
	        t10 = v - c * 65536;
	        v = t11 + c + 65535;
	        c = Math.floor(v / 65536);
	        t11 = v - c * 65536;
	        v = t12 + c + 65535;
	        c = Math.floor(v / 65536);
	        t12 = v - c * 65536;
	        v = t13 + c + 65535;
	        c = Math.floor(v / 65536);
	        t13 = v - c * 65536;
	        v = t14 + c + 65535;
	        c = Math.floor(v / 65536);
	        t14 = v - c * 65536;
	        v = t15 + c + 65535;
	        c = Math.floor(v / 65536);
	        t15 = v - c * 65536;
	        t0 += c - 1 + 37 * (c - 1);
	        o[0] = t0;
	        o[1] = t1;
	        o[2] = t2;
	        o[3] = t3;
	        o[4] = t4;
	        o[5] = t5;
	        o[6] = t6;
	        o[7] = t7;
	        o[8] = t8;
	        o[9] = t9;
	        o[10] = t10;
	        o[11] = t11;
	        o[12] = t12;
	        o[13] = t13;
	        o[14] = t14;
	        o[15] = t15;
	    };
	    Curve25519.prototype.S = function (o, a) {
	        this.M(o, a, a);
	    };
	    Curve25519.prototype.add = function (p, q) {
	        var a = this.gf(), b = this.gf(), c = this.gf(), d = this.gf(), e = this.gf(), f = this.gf(), g = this.gf(), h = this.gf(), t = this.gf();
	        this.Z(a, p[1], p[0]);
	        this.Z(t, q[1], q[0]);
	        this.M(a, a, t);
	        this.A(b, p[0], p[1]);
	        this.A(t, q[0], q[1]);
	        this.M(b, b, t);
	        this.M(c, p[3], q[3]);
	        this.M(c, c, this.D2);
	        this.M(d, p[2], q[2]);
	        this.A(d, d, d);
	        this.Z(e, b, a);
	        this.Z(f, d, c);
	        this.A(g, d, c);
	        this.A(h, b, a);
	        this.M(p[0], e, f);
	        this.M(p[1], h, g);
	        this.M(p[2], g, f);
	        this.M(p[3], e, h);
	    };
	    Curve25519.prototype.set25519 = function (r, a) {
	        for (var i = 0; i < 16; i++) {
	            r[i] = a[i];
	        }
	    };
	    Curve25519.prototype.car25519 = function (o) {
	        var i, v, c = 1;
	        for (i = 0; i < 16; i++) {
	            v = o[i] + c + 65535;
	            c = Math.floor(v / 65536);
	            o[i] = v - c * 65536;
	        }
	        o[0] += c - 1 + 37 * (c - 1);
	    };
	    // b is 0 or 1
	    Curve25519.prototype.sel25519 = function (p, q, b) {
	        var i, t;
	        var c = ~(b - 1);
	        for (i = 0; i < 16; i++) {
	            t = c & (p[i] ^ q[i]);
	            p[i] ^= t;
	            q[i] ^= t;
	        }
	    };
	    Curve25519.prototype.inv25519 = function (o, i) {
	        var a;
	        var c = this.gf();
	        for (a = 0; a < 16; a++) {
	            c[a] = i[a];
	        }
	        for (a = 253; a >= 0; a--) {
	            this.S(c, c);
	            if (a !== 2 && a !== 4) {
	                this.M(c, c, i);
	            }
	        }
	        for (a = 0; a < 16; a++) {
	            o[a] = c[a];
	        }
	    };
	    Curve25519.prototype.neq25519 = function (a, b) {
	        var c = new Uint8Array(32), d = new Uint8Array(32);
	        this.pack25519(c, a);
	        this.pack25519(d, b);
	        return !util_1.default.compare(c, d);
	    };
	    Curve25519.prototype.par25519 = function (a) {
	        var d = new Uint8Array(32);
	        this.pack25519(d, a);
	        return d[0] & 1;
	    };
	    Curve25519.prototype.pow2523 = function (o, i) {
	        var a;
	        var c = this.gf();
	        for (a = 0; a < 16; a++) {
	            c[a] = i[a];
	        }
	        for (a = 250; a >= 0; a--) {
	            this.S(c, c);
	            if (a !== 1)
	                this.M(c, c, i);
	        }
	        for (a = 0; a < 16; a++) {
	            o[a] = c[a];
	        }
	    };
	    Curve25519.prototype.cswap = function (p, q, b) {
	        for (var i = 0; i < 4; i++) {
	            this.sel25519(p[i], q[i], b);
	        }
	    };
	    Curve25519.prototype.pack25519 = function (o, n) {
	        var i;
	        var m = this.gf();
	        var t = this.gf();
	        for (i = 0; i < 16; i++) {
	            t[i] = n[i];
	        }
	        this.car25519(t);
	        this.car25519(t);
	        this.car25519(t);
	        for (var j = 0; j < 2; j++) {
	            m[0] = t[0] - 0xffed;
	            for (i = 1; i < 15; i++) {
	                m[i] = t[i] - 0xffff - ((m[i - 1] >>> 16) & 1);
	                m[i - 1] &= 0xffff;
	            }
	            m[15] = t[15] - 0x7fff - ((m[14] >>> 16) & 1);
	            var b = (m[15] >>> 16) & 1;
	            m[14] &= 0xffff;
	            this.sel25519(t, m, 1 - b);
	        }
	        for (i = 0; i < 16; i++) {
	            o[2 * i] = t[i] & 0xff;
	            o[2 * i + 1] = t[i] >>> 8;
	        }
	    };
	    Curve25519.prototype.unpack25519 = function (o, n) {
	        for (var i = 0; i < 16; i++) {
	            o[i] = n[2 * i] + (n[2 * i + 1] << 8);
	        }
	        o[15] &= 0x7fff;
	    };
	    Curve25519.prototype.unpackNeg = function (r, p) {
	        var t = this.gf(), chk = this.gf(), num = this.gf(), den = this.gf(), den2 = this.gf(), den4 = this.gf(), den6 = this.gf();
	        this.set25519(r[2], this.gf1);
	        this.unpack25519(r[1], p);
	        this.S(num, r[1]);
	        this.M(den, num, this.D);
	        this.Z(num, num, r[2]);
	        this.A(den, r[2], den);
	        this.S(den2, den);
	        this.S(den4, den2);
	        this.M(den6, den4, den2);
	        this.M(t, den6, num);
	        this.M(t, t, den);
	        this.pow2523(t, t);
	        this.M(t, t, num);
	        this.M(t, t, den);
	        this.M(t, t, den);
	        this.M(r[0], t, den);
	        this.S(chk, r[0]);
	        this.M(chk, chk, den);
	        if (this.neq25519(chk, num)) {
	            this.M(r[0], r[0], this.I);
	        }
	        this.S(chk, r[0]);
	        this.M(chk, chk, den);
	        if (this.neq25519(chk, num)) {
	            return -1;
	        }
	        if (this.par25519(r[0]) === (p[31] >>> 7)) {
	            this.Z(r[0], this.gf0, r[0]);
	        }
	        this.M(r[3], r[0], r[1]);
	        return 0;
	    };
	    /**
	     * Internal scalar mult function
	     * @param {Uint8Array} q Result
	     * @param {Uint8Array} s Secret key
	     * @param {Uint8Array} p Public key
	     */
	    Curve25519.prototype.cryptoScalarmult = function (q, s, p) {
	        var x = new Int32Array(80);
	        var r, i;
	        var a = this.gf(), b = this.gf(), c = this.gf(), d = this.gf(), e = this.gf(), f = this.gf();
	        this.unpack25519(x, p);
	        for (i = 0; i < 16; i++) {
	            b[i] = x[i];
	            d[i] = a[i] = c[i] = 0;
	        }
	        a[0] = d[0] = 1;
	        for (i = 254; i >= 0; --i) {
	            r = (s[i >>> 3] >>> (i & 7)) & 1;
	            this.sel25519(a, b, r);
	            this.sel25519(c, d, r);
	            this.A(e, a, c);
	            this.Z(a, a, c);
	            this.A(c, b, d);
	            this.Z(b, b, d);
	            this.S(d, e);
	            this.S(f, a);
	            this.M(a, c, a);
	            this.M(c, b, e);
	            this.A(e, a, c);
	            this.Z(a, a, c);
	            this.S(b, a);
	            this.Z(c, d, f);
	            this.M(a, c, this._121665);
	            this.A(a, a, d);
	            this.M(c, c, a);
	            this.M(a, d, f);
	            this.M(d, b, x);
	            this.S(b, e);
	            this.sel25519(a, b, r);
	            this.sel25519(c, d, r);
	        }
	        for (i = 0; i < 16; i++) {
	            x[i + 16] = a[i];
	            x[i + 32] = c[i];
	            x[i + 48] = b[i];
	            x[i + 64] = d[i];
	        }
	        var x32 = x.subarray(32);
	        var x16 = x.subarray(16);
	        this.inv25519(x32, x32);
	        this.M(x16, x16, x32);
	        this.pack25519(q, x16);
	    };
	    /**
	     * Generate the common key as the produkt of sk1 * pk2
	     * @param {Uint8Array} sk A 32 byte secret key of pair 1
	     * @param {Uint8Array} pk A 32 byte public key of pair 2
	     * @return {Uint8Array} sk * pk
	     */
	    Curve25519.prototype.scalarMult = function (sk, pk) {
	        var q = new Uint8Array(32);
	        this.cryptoScalarmult(q, sk, pk);
	        return q;
	    };
	    /**
	     * Generate a curve 25519 keypair
	     * @param {Uint8Array} seed A 32 byte cryptographic secure random array. This is basically the secret key
	     * @param {Object} Returns sk (Secret key) and pk (Public key) as 32 byte typed arrays
	     */
	    Curve25519.prototype.generateKeys = function (seed) {
	        var sk = seed.slice();
	        var pk = new Uint8Array(32);
	        if (sk.length !== 32) {
	            throw new Error('Invalid secret key size, expected 32 bytes');
	        }
	        sk[0] &= 0xf8;
	        sk[31] &= 0x7f;
	        sk[31] |= 0x40;
	        this.cryptoScalarmult(pk, sk, this._9);
	        return {
	            sk: sk,
	            pk: pk,
	        };
	    };
	    return Curve25519;
	}());
	exports.default = Curve25519;
	});

	var global$1 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init$1 () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init$1();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init$1();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString = {}.toString;

	var isArray = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength();

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype;
	  Buffer.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}
	Buffer.isBuffer = isBuffer;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var bufferEs6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Buffer: Buffer,
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer,
		kMaxLength: _kMaxLength
	});

	var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';

	// For convenience, let people hash a string, not just a Uint8Array
	function normalizeInput (input) {
	  var ret;
	  if (input instanceof Uint8Array) {
	    ret = input;
	  } else if (input instanceof Buffer) {
	    ret = new Uint8Array(input);
	  } else if (typeof (input) === 'string') {
	    ret = new Uint8Array(Buffer.from(input, 'utf8'));
	  } else {
	    throw new Error(ERROR_MSG_INPUT)
	  }
	  return ret
	}

	// Converts a Uint8Array to a hexadecimal string
	// For example, toHex([255, 0, 255]) returns "ff00ff"
	function toHex$1 (bytes) {
	  return Array.prototype.map.call(bytes, function (n) {
	    return (n < 16 ? '0' : '') + n.toString(16)
	  }).join('')
	}

	// Converts any value in [0...2^32-1] to an 8-character hex string
	function uint32ToHex (val) {
	  return (0x100000000 + val).toString(16).substring(1)
	}

	// For debugging: prints out hash state in the same format as the RFC
	// sample computation exactly, so that you can diff
	function debugPrint (label, arr, size) {
	  var msg = '\n' + label + ' = ';
	  for (var i = 0; i < arr.length; i += 2) {
	    if (size === 32) {
	      msg += uint32ToHex(arr[i]).toUpperCase();
	      msg += ' ';
	      msg += uint32ToHex(arr[i + 1]).toUpperCase();
	    } else if (size === 64) {
	      msg += uint32ToHex(arr[i + 1]).toUpperCase();
	      msg += uint32ToHex(arr[i]).toUpperCase();
	    } else throw new Error('Invalid size ' + size)
	    if (i % 6 === 4) {
	      msg += '\n' + new Array(label.length + 4).join(' ');
	    } else if (i < arr.length - 2) {
	      msg += ' ';
	    }
	  }
	  console.log(msg);
	}

	// For performance testing: generates N bytes of input, hashes M times
	// Measures and prints MB/second hash performance each time
	function testSpeed (hashFn, N, M) {
	  var startMs = new Date().getTime();

	  var input = new Uint8Array(N);
	  for (var i = 0; i < N; i++) {
	    input[i] = i % 256;
	  }
	  var genMs = new Date().getTime();
	  console.log('Generated random input in ' + (genMs - startMs) + 'ms');
	  startMs = genMs;

	  for (i = 0; i < M; i++) {
	    var hashHex = hashFn(input);
	    var hashMs = new Date().getTime();
	    var ms = hashMs - startMs;
	    startMs = hashMs;
	    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
	    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND');
	  }
	}

	var util$1 = {
	  normalizeInput: normalizeInput,
	  toHex: toHex$1,
	  debugPrint: debugPrint,
	  testSpeed: testSpeed
	};

	// Blake2B in pure Javascript
	// Adapted from the reference implementation in RFC7693
	// Ported to Javascript by DC - https://github.com/dcposch



	// 64-bit unsigned addition
	// Sets v[a,a+1] += v[b,b+1]
	// v should be a Uint32Array
	function ADD64AA (v, a, b) {
	  var o0 = v[a] + v[b];
	  var o1 = v[a + 1] + v[b + 1];
	  if (o0 >= 0x100000000) {
	    o1++;
	  }
	  v[a] = o0;
	  v[a + 1] = o1;
	}

	// 64-bit unsigned addition
	// Sets v[a,a+1] += b
	// b0 is the low 32 bits of b, b1 represents the high 32 bits
	function ADD64AC (v, a, b0, b1) {
	  var o0 = v[a] + b0;
	  if (b0 < 0) {
	    o0 += 0x100000000;
	  }
	  var o1 = v[a + 1] + b1;
	  if (o0 >= 0x100000000) {
	    o1++;
	  }
	  v[a] = o0;
	  v[a + 1] = o1;
	}

	// Little-endian byte access
	function B2B_GET32 (arr, i) {
	  return (arr[i] ^
	  (arr[i + 1] << 8) ^
	  (arr[i + 2] << 16) ^
	  (arr[i + 3] << 24))
	}

	// G Mixing function
	// The ROTRs are inlined for speed
	function B2B_G (a, b, c, d, ix, iy) {
	  var x0 = m[ix];
	  var x1 = m[ix + 1];
	  var y0 = m[iy];
	  var y1 = m[iy + 1];

	  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
	  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

	  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
	  var xor0 = v[d] ^ v[a];
	  var xor1 = v[d + 1] ^ v[a + 1];
	  v[d] = xor1;
	  v[d + 1] = xor0;

	  ADD64AA(v, c, d);

	  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
	  xor0 = v[b] ^ v[c];
	  xor1 = v[b + 1] ^ v[c + 1];
	  v[b] = (xor0 >>> 24) ^ (xor1 << 8);
	  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);

	  ADD64AA(v, a, b);
	  ADD64AC(v, a, y0, y1);

	  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
	  xor0 = v[d] ^ v[a];
	  xor1 = v[d + 1] ^ v[a + 1];
	  v[d] = (xor0 >>> 16) ^ (xor1 << 16);
	  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);

	  ADD64AA(v, c, d);

	  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
	  xor0 = v[b] ^ v[c];
	  xor1 = v[b + 1] ^ v[c + 1];
	  v[b] = (xor1 >>> 31) ^ (xor0 << 1);
	  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
	}

	// Initialization Vector
	var BLAKE2B_IV32 = new Uint32Array([
	  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,
	  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,
	  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,
	  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19
	]);

	var SIGMA8 = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
	  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
	  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
	  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
	  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
	  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
	  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
	  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
	  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3
	];

	// These are offsets into a uint64 buffer.
	// Multiply them all by 2 to make them offsets into a uint32 buffer,
	// because this is Javascript and we don't have uint64s
	var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }));

	// Compression function. 'last' flag indicates last block.
	// Note we're representing 16 uint64s as 32 uint32s
	var v = new Uint32Array(32);
	var m = new Uint32Array(32);
	function blake2bCompress (ctx, last) {
	  var i = 0;

	  // init work variables
	  for (i = 0; i < 16; i++) {
	    v[i] = ctx.h[i];
	    v[i + 16] = BLAKE2B_IV32[i];
	  }

	  // low 64 bits of offset
	  v[24] = v[24] ^ ctx.t;
	  v[25] = v[25] ^ (ctx.t / 0x100000000);
	  // high 64 bits not supported, offset may not be higher than 2**53-1

	  // last block flag set ?
	  if (last) {
	    v[28] = ~v[28];
	    v[29] = ~v[29];
	  }

	  // get little-endian words
	  for (i = 0; i < 32; i++) {
	    m[i] = B2B_GET32(ctx.b, 4 * i);
	  }

	  // twelve rounds of mixing
	  // uncomment the DebugPrint calls to log the computation
	  // and match the RFC sample documentation
	  // util.debugPrint('          m[16]', m, 64)
	  for (i = 0; i < 12; i++) {
	    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
	    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
	    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
	    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
	    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
	    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
	    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
	    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
	    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
	  }
	  // util.debugPrint('   (i=12) v[16]', v, 64)

	  for (i = 0; i < 16; i++) {
	    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
	  }
	  // util.debugPrint('h[8]', ctx.h, 64)
	}

	// Creates a BLAKE2b hashing context
	// Requires an output length between 1 and 64 bytes
	// Takes an optional Uint8Array key
	function blake2bInit (outlen, key) {
	  if (outlen === 0 || outlen > 64) {
	    throw new Error('Illegal output length, expected 0 < length <= 64')
	  }
	  if (key && key.length > 64) {
	    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')
	  }

	  // state, 'param block'
	  var ctx = {
	    b: new Uint8Array(128),
	    h: new Uint32Array(16),
	    t: 0, // input count
	    c: 0, // pointer within buffer
	    outlen: outlen // output length in bytes
	  };

	  // initialize hash state
	  for (var i = 0; i < 16; i++) {
	    ctx.h[i] = BLAKE2B_IV32[i];
	  }
	  var keylen = key ? key.length : 0;
	  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

	  // key the hash, if applicable
	  if (key) {
	    blake2bUpdate(ctx, key);
	    // at the end
	    ctx.c = 128;
	  }

	  return ctx
	}

	// Updates a BLAKE2b streaming hash
	// Requires hash context and Uint8Array (byte array)
	function blake2bUpdate (ctx, input) {
	  for (var i = 0; i < input.length; i++) {
	    if (ctx.c === 128) { // buffer full ?
	      ctx.t += ctx.c; // add counters
	      blake2bCompress(ctx, false); // compress (not last)
	      ctx.c = 0; // counter to zero
	    }
	    ctx.b[ctx.c++] = input[i];
	  }
	}

	// Completes a BLAKE2b streaming hash
	// Returns a Uint8Array containing the message digest
	function blake2bFinal (ctx) {
	  ctx.t += ctx.c; // mark last block offset

	  while (ctx.c < 128) { // fill up with zeros
	    ctx.b[ctx.c++] = 0;
	  }
	  blake2bCompress(ctx, true); // final block flag = 1

	  // little endian convert and store
	  var out = new Uint8Array(ctx.outlen);
	  for (var i = 0; i < ctx.outlen; i++) {
	    out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
	  }
	  return out
	}

	// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
	//
	// Returns a n-byte Uint8Array
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer or Uint8Array
	// - key - optional key Uint8Array, up to 64 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2b (input, key, outlen) {
	  // preprocess inputs
	  outlen = outlen || 64;
	  input = util$1.normalizeInput(input);

	  // do the math
	  var ctx = blake2bInit(outlen, key);
	  blake2bUpdate(ctx, input);
	  return blake2bFinal(ctx)
	}

	// Computes the BLAKE2B hash of a string or byte array
	//
	// Returns an n-byte hash in hex, all lowercase
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 64 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2bHex (input, key, outlen) {
	  var output = blake2b(input, key, outlen);
	  return util$1.toHex(output)
	}

	var blake2b_1 = {
	  blake2b: blake2b,
	  blake2bHex: blake2bHex,
	  blake2bInit: blake2bInit,
	  blake2bUpdate: blake2bUpdate,
	  blake2bFinal: blake2bFinal
	};

	// BLAKE2s hash function in pure Javascript
	// Adapted from the reference implementation in RFC7693
	// Ported to Javascript by DC - https://github.com/dcposch



	// Little-endian byte access.
	// Expects a Uint8Array and an index
	// Returns the little-endian uint32 at v[i..i+3]
	function B2S_GET32 (v, i) {
	  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)
	}

	// Mixing function G.
	function B2S_G (a, b, c, d, x, y) {
	  v$1[a] = v$1[a] + v$1[b] + x;
	  v$1[d] = ROTR32(v$1[d] ^ v$1[a], 16);
	  v$1[c] = v$1[c] + v$1[d];
	  v$1[b] = ROTR32(v$1[b] ^ v$1[c], 12);
	  v$1[a] = v$1[a] + v$1[b] + y;
	  v$1[d] = ROTR32(v$1[d] ^ v$1[a], 8);
	  v$1[c] = v$1[c] + v$1[d];
	  v$1[b] = ROTR32(v$1[b] ^ v$1[c], 7);
	}

	// 32-bit right rotation
	// x should be a uint32
	// y must be between 1 and 31, inclusive
	function ROTR32 (x, y) {
	  return (x >>> y) ^ (x << (32 - y))
	}

	// Initialization Vector.
	var BLAKE2S_IV = new Uint32Array([
	  0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
	  0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]);

	var SIGMA = new Uint8Array([
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
	  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
	  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
	  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
	  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
	  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
	  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
	  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
	  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]);

	// Compression function. "last" flag indicates last block
	var v$1 = new Uint32Array(16);
	var m$1 = new Uint32Array(16);
	function blake2sCompress (ctx, last) {
	  var i = 0;
	  for (i = 0; i < 8; i++) { // init work variables
	    v$1[i] = ctx.h[i];
	    v$1[i + 8] = BLAKE2S_IV[i];
	  }

	  v$1[12] ^= ctx.t; // low 32 bits of offset
	  v$1[13] ^= (ctx.t / 0x100000000); // high 32 bits
	  if (last) { // last block flag set ?
	    v$1[14] = ~v$1[14];
	  }

	  for (i = 0; i < 16; i++) { // get little-endian words
	    m$1[i] = B2S_GET32(ctx.b, 4 * i);
	  }

	  // ten rounds of mixing
	  // uncomment the DebugPrint calls to log the computation
	  // and match the RFC sample documentation
	  // util.debugPrint('          m[16]', m, 32)
	  for (i = 0; i < 10; i++) {
	    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
	    B2S_G(0, 4, 8, 12, m$1[SIGMA[i * 16 + 0]], m$1[SIGMA[i * 16 + 1]]);
	    B2S_G(1, 5, 9, 13, m$1[SIGMA[i * 16 + 2]], m$1[SIGMA[i * 16 + 3]]);
	    B2S_G(2, 6, 10, 14, m$1[SIGMA[i * 16 + 4]], m$1[SIGMA[i * 16 + 5]]);
	    B2S_G(3, 7, 11, 15, m$1[SIGMA[i * 16 + 6]], m$1[SIGMA[i * 16 + 7]]);
	    B2S_G(0, 5, 10, 15, m$1[SIGMA[i * 16 + 8]], m$1[SIGMA[i * 16 + 9]]);
	    B2S_G(1, 6, 11, 12, m$1[SIGMA[i * 16 + 10]], m$1[SIGMA[i * 16 + 11]]);
	    B2S_G(2, 7, 8, 13, m$1[SIGMA[i * 16 + 12]], m$1[SIGMA[i * 16 + 13]]);
	    B2S_G(3, 4, 9, 14, m$1[SIGMA[i * 16 + 14]], m$1[SIGMA[i * 16 + 15]]);
	  }
	  // util.debugPrint('   (i=10) v[16]', v, 32)

	  for (i = 0; i < 8; i++) {
	    ctx.h[i] ^= v$1[i] ^ v$1[i + 8];
	  }
	  // util.debugPrint('h[8]', ctx.h, 32)
	}

	// Creates a BLAKE2s hashing context
	// Requires an output length between 1 and 32 bytes
	// Takes an optional Uint8Array key
	function blake2sInit (outlen, key) {
	  if (!(outlen > 0 && outlen <= 32)) {
	    throw new Error('Incorrect output length, should be in [1, 32]')
	  }
	  var keylen = key ? key.length : 0;
	  if (key && !(keylen > 0 && keylen <= 32)) {
	    throw new Error('Incorrect key length, should be in [1, 32]')
	  }

	  var ctx = {
	    h: new Uint32Array(BLAKE2S_IV), // hash state
	    b: new Uint32Array(64), // input block
	    c: 0, // pointer within block
	    t: 0, // input count
	    outlen: outlen // output length in bytes
	  };
	  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

	  if (keylen > 0) {
	    blake2sUpdate(ctx, key);
	    ctx.c = 64; // at the end
	  }

	  return ctx
	}

	// Updates a BLAKE2s streaming hash
	// Requires hash context and Uint8Array (byte array)
	function blake2sUpdate (ctx, input) {
	  for (var i = 0; i < input.length; i++) {
	    if (ctx.c === 64) { // buffer full ?
	      ctx.t += ctx.c; // add counters
	      blake2sCompress(ctx, false); // compress (not last)
	      ctx.c = 0; // counter to zero
	    }
	    ctx.b[ctx.c++] = input[i];
	  }
	}

	// Completes a BLAKE2s streaming hash
	// Returns a Uint8Array containing the message digest
	function blake2sFinal (ctx) {
	  ctx.t += ctx.c; // mark last block offset
	  while (ctx.c < 64) { // fill up with zeros
	    ctx.b[ctx.c++] = 0;
	  }
	  blake2sCompress(ctx, true); // final block flag = 1

	  // little endian convert and store
	  var out = new Uint8Array(ctx.outlen);
	  for (var i = 0; i < ctx.outlen; i++) {
	    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xFF;
	  }
	  return out
	}

	// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
	//
	// Returns a n-byte Uint8Array
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 32 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2s (input, key, outlen) {
	  // preprocess inputs
	  outlen = outlen || 32;
	  input = util$1.normalizeInput(input);

	  // do the math
	  var ctx = blake2sInit(outlen, key);
	  blake2sUpdate(ctx, input);
	  return blake2sFinal(ctx)
	}

	// Computes the BLAKE2S hash of a string or byte array
	//
	// Returns an n-byte hash in hex, all lowercase
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 32 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2sHex (input, key, outlen) {
	  var output = blake2s(input, key, outlen);
	  return util$1.toHex(output)
	}

	var blake2s_1 = {
	  blake2s: blake2s,
	  blake2sHex: blake2sHex,
	  blake2sInit: blake2sInit,
	  blake2sUpdate: blake2sUpdate,
	  blake2sFinal: blake2sFinal
	};

	var blakejs = {
	  blake2b: blake2b_1.blake2b,
	  blake2bHex: blake2b_1.blake2bHex,
	  blake2bInit: blake2b_1.blake2bInit,
	  blake2bUpdate: blake2b_1.blake2bUpdate,
	  blake2bFinal: blake2b_1.blake2bFinal,
	  blake2s: blake2s_1.blake2s,
	  blake2sHex: blake2s_1.blake2sHex,
	  blake2sInit: blake2s_1.blake2sInit,
	  blake2sUpdate: blake2s_1.blake2sUpdate,
	  blake2sFinal: blake2s_1.blake2sFinal
	};

	var ed25519 = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var convert_1 = __importDefault(convert);
	var curve25519_1 = __importDefault(curve25519);
	//@ts-ignore

	var Ed25519 = /** @class */ (function () {
	    function Ed25519() {
	        this.curve = new curve25519_1.default();
	        this.X = this.curve.gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]);
	        this.Y = this.curve.gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]);
	        this.L = new Uint8Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
	    }
	    Ed25519.prototype.pack = function (r, p) {
	        var CURVE = this.curve;
	        var tx = CURVE.gf(), ty = CURVE.gf(), zi = CURVE.gf();
	        CURVE.inv25519(zi, p[2]);
	        CURVE.M(tx, p[0], zi);
	        CURVE.M(ty, p[1], zi);
	        CURVE.pack25519(r, ty);
	        r[31] ^= CURVE.par25519(tx) << 7;
	    };
	    Ed25519.prototype.modL = function (r, x) {
	        var carry, i, j, k;
	        for (i = 63; i >= 32; --i) {
	            carry = 0;
	            for (j = i - 32, k = i - 12; j < k; ++j) {
	                x[j] += carry - 16 * x[i] * this.L[j - (i - 32)];
	                carry = (x[j] + 128) >> 8;
	                x[j] -= carry * 256;
	            }
	            x[j] += carry;
	            x[i] = 0;
	        }
	        carry = 0;
	        for (j = 0; j < 32; j++) {
	            x[j] += carry - (x[31] >> 4) * this.L[j];
	            carry = x[j] >> 8;
	            x[j] &= 255;
	        }
	        for (j = 0; j < 32; j++) {
	            x[j] -= carry * this.L[j];
	        }
	        for (i = 0; i < 32; i++) {
	            x[i + 1] += x[i] >>> 8;
	            r[i] = x[i] & 0xff;
	        }
	    };
	    Ed25519.prototype.reduce = function (r) {
	        var x = new Uint32Array(64);
	        for (var i = 0; i < 64; i++) {
	            x[i] = r[i];
	        }
	        this.modL(r, x);
	    };
	    Ed25519.prototype.scalarmult = function (p, q, s) {
	        var CURVE = this.curve;
	        CURVE.set25519(p[0], CURVE.gf0);
	        CURVE.set25519(p[1], CURVE.gf1);
	        CURVE.set25519(p[2], CURVE.gf1);
	        CURVE.set25519(p[3], CURVE.gf0);
	        for (var i = 255; i >= 0; --i) {
	            var b = (s[(i / 8) | 0] >>> (i & 7)) & 1;
	            CURVE.cswap(p, q, b);
	            CURVE.add(q, p);
	            CURVE.add(p, p);
	            CURVE.cswap(p, q, b);
	        }
	    };
	    Ed25519.prototype.scalarbase = function (p, s) {
	        var CURVE = this.curve;
	        var q = [CURVE.gf(), CURVE.gf(), CURVE.gf(), CURVE.gf()];
	        CURVE.set25519(q[0], this.X);
	        CURVE.set25519(q[1], this.Y);
	        CURVE.set25519(q[2], CURVE.gf1);
	        CURVE.M(q[3], this.X, this.Y);
	        this.scalarmult(p, q, s);
	    };
	    /**
	     * Generate an ed25519 keypair
	     * @param {String} seed A 32 byte cryptographic secure random hexadecimal string. This is basically the secret key
	     * @param {Object} Returns sk (Secret key) and pk (Public key) as 32 byte hexadecimal strings
	     */
	    Ed25519.prototype.generateKeys = function (seed) {
	        var pk = new Uint8Array(32);
	        var p = [this.curve.gf(), this.curve.gf(), this.curve.gf(), this.curve.gf()];
	        var h = blakejs.blake2b(convert_1.default.hex2ab(seed), undefined, 64).slice(0, 32);
	        h[0] &= 0xf8;
	        h[31] &= 0x7f;
	        h[31] |= 0x40;
	        this.scalarbase(p, h);
	        this.pack(pk, p);
	        return {
	            privateKey: seed,
	            publicKey: convert_1.default.ab2hex(pk),
	        };
	    };
	    /**
	     * Generate a message signature
	     * @param {Uint8Array} msg Message to be signed as byte array
	     * @param {Uint8Array} secretKey Secret key as byte array
	     * @param {Uint8Array} Returns the signature as 64 byte typed array
	     */
	    Ed25519.prototype.sign = function (msg, secretKey) {
	        var signedMsg = this.naclSign(msg, secretKey);
	        var sig = new Uint8Array(64);
	        for (var i = 0; i < sig.length; i++) {
	            sig[i] = signedMsg[i];
	        }
	        return sig;
	    };
	    Ed25519.prototype.naclSign = function (msg, secretKey) {
	        if (secretKey.length !== 32) {
	            throw new Error('bad secret key size');
	        }
	        var signedMsg = new Uint8Array(64 + msg.length);
	        this.cryptoSign(signedMsg, msg, msg.length, secretKey);
	        return signedMsg;
	    };
	    Ed25519.prototype.cryptoSign = function (sm, m, n, sk) {
	        var CURVE = this.curve;
	        var d = new Uint8Array(64);
	        var h = new Uint8Array(64);
	        var r = new Uint8Array(64);
	        var x = new Float64Array(64);
	        var p = [CURVE.gf(), CURVE.gf(), CURVE.gf(), CURVE.gf()];
	        var i;
	        var j;
	        var pk = convert_1.default.hex2ab(this.generateKeys(convert_1.default.ab2hex(sk)).publicKey);
	        this.cryptoHash(d, sk, 32);
	        d[0] &= 248;
	        d[31] &= 127;
	        d[31] |= 64;
	        var smlen = n + 64;
	        for (i = 0; i < n; i++) {
	            sm[64 + i] = m[i];
	        }
	        for (i = 0; i < 32; i++) {
	            sm[32 + i] = d[32 + i];
	        }
	        this.cryptoHash(r, sm.subarray(32), n + 32);
	        this.reduce(r);
	        this.scalarbase(p, r);
	        this.pack(sm, p);
	        for (i = 32; i < 64; i++) {
	            sm[i] = pk[i - 32];
	        }
	        this.cryptoHash(h, sm, n + 64);
	        this.reduce(h);
	        for (i = 0; i < 64; i++) {
	            x[i] = 0;
	        }
	        for (i = 0; i < 32; i++) {
	            x[i] = r[i];
	        }
	        for (i = 0; i < 32; i++) {
	            for (j = 0; j < 32; j++) {
	                x[i + j] += h[i] * d[j];
	            }
	        }
	        this.modL(sm.subarray(32), x);
	        return smlen;
	    };
	    Ed25519.prototype.cryptoHash = function (out, m, n) {
	        var input = new Uint8Array(n);
	        for (var i = 0; i < n; ++i) {
	            input[i] = m[i];
	        }
	        var hash = blakejs.blake2b(input);
	        for (var i = 0; i < 64; ++i) {
	            out[i] = hash[i];
	        }
	        return 0;
	    };
	    return Ed25519;
	}());
	exports.default = Ed25519;
	});

	var nanoAddress = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	//@ts-ignore

	var convert_1 = __importDefault(convert);
	var NanoAddress = /** @class */ (function () {
	    function NanoAddress() {
	        var _this = this;
	        this.alphabet = '13456789abcdefghijkmnopqrstuwxyz';
	        this.prefix = 'nano_';
	        this.deriveAddress = function (publicKey) {
	            var publicKeyBytes = convert_1.default.hex2ab(publicKey);
	            var checksum = blakejs.blake2b(publicKeyBytes, undefined, 5).reverse();
	            var encoded = _this.encodeNanoBase32(publicKeyBytes);
	            var encodedChecksum = _this.encodeNanoBase32(checksum);
	            return _this.prefix + encoded + encodedChecksum;
	        };
	        this.encodeNanoBase32 = function (publicKey) {
	            var length = publicKey.length;
	            var leftover = (length * 8) % 5;
	            var offset = leftover === 0 ? 0 : 5 - leftover;
	            var value = 0;
	            var output = '';
	            var bits = 0;
	            for (var i = 0; i < length; i++) {
	                value = (value << 8) | publicKey[i];
	                bits += 8;
	                while (bits >= 5) {
	                    output += _this.alphabet[(value >>> (bits + offset - 5)) & 31];
	                    bits -= 5;
	                }
	            }
	            if (bits > 0) {
	                output += _this.alphabet[(value << (5 - (bits + offset))) & 31];
	            }
	            return output;
	        };
	        this.decodeNanoBase32 = function (input) {
	            var length = input.length;
	            var leftover = (length * 5) % 8;
	            var offset = leftover === 0 ? 0 : 8 - leftover;
	            var bits = 0;
	            var value = 0;
	            var index = 0;
	            var output = new Uint8Array(Math.ceil((length * 5) / 8));
	            for (var i = 0; i < length; i++) {
	                value = (value << 5) | _this.readChar(input[i]);
	                bits += 5;
	                if (bits >= 8) {
	                    output[index++] = (value >>> (bits + offset - 8)) & 255;
	                    bits -= 8;
	                }
	            }
	            if (bits > 0) {
	                output[index++] = (value << (bits + offset - 8)) & 255;
	            }
	            if (leftover !== 0) {
	                output = output.slice(1);
	            }
	            return output;
	        };
	        /**
	         * Validates a Nano address with 'nano' and 'xrb' prefixes
	         *
	         * Derived from https://github.com/alecrios/nano-address-validator
	         *
	         * @param {string} address Nano address
	         */
	        this.validateNanoAddress = function (address) {
	            if (address === undefined) {
	                throw Error('Address must be defined.');
	            }
	            if (typeof address !== 'string') {
	                throw TypeError('Address must be a string.');
	            }
	            var allowedPrefixes = ['nano', 'xrb'];
	            var pattern = new RegExp("^(" + allowedPrefixes.join('|') + ")_[13]{1}[13456789abcdefghijkmnopqrstuwxyz]{59}$");
	            if (!pattern.test(address)) {
	                return false;
	            }
	            var expectedChecksum = address.slice(-8);
	            var publicKey = address.slice(address.indexOf('_') + 1, -8);
	            var publicKeyBuffer = _this.decodeNanoBase32(publicKey);
	            var actualChecksumBuffer = blakejs.blake2b(publicKeyBuffer, null, 5).reverse();
	            var actualChecksum = _this.encodeNanoBase32(actualChecksumBuffer);
	            return expectedChecksum === actualChecksum;
	        };
	    }
	    NanoAddress.prototype.readChar = function (char) {
	        var idx = this.alphabet.indexOf(char);
	        if (idx === -1) {
	            throw new Error("Invalid character found: " + char);
	        }
	        return idx;
	    };
	    return NanoAddress;
	}());
	exports.default = NanoAddress;
	});

	/*@__PURE__*/getDefaultExportFromCjs(nanoAddress);

	var signer = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var convert_1 = __importDefault(convert);
	var ed25519_1 = __importDefault(ed25519);
	//@ts-ignore

	var Signer = /** @class */ (function () {
	    function Signer() {
	        this.ed25519 = new ed25519_1.default();
	    }
	    /**
	     * Signs any data using the ed25519 signature system
	     *
	     * @param privateKey Private key to sign the data with
	     * @param data Data to sign
	     */
	    Signer.prototype.sign = function (privateKey) {
	        var data = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            data[_i - 1] = arguments[_i];
	        }
	        var signature = this.ed25519.sign(this.generateHash(data), convert_1.default.hex2ab(privateKey));
	        return convert_1.default.ab2hex(signature);
	    };
	    /**
	     * Creates a blake2b hash of the input data
	     *
	     * @param data Data to hash
	     */
	    Signer.prototype.generateHash = function (data) {
	        var ctx = blakejs.blake2bInit(32, undefined);
	        data.forEach(function (str) { return blakejs.blake2bUpdate(ctx, convert_1.default.hex2ab(str)); });
	        return blakejs.blake2bFinal(ctx);
	    };
	    return Signer;
	}());
	exports.default = Signer;
	});

	var addressImporter = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var bip32_key_derivation_1 = __importDefault(bip32KeyDerivation);
	var bip39_mnemonic_1 = __importDefault(bip39Mnemonic);
	var ed25519_1 = __importDefault(ed25519);
	var nano_address_1 = __importDefault(nanoAddress);
	var signer_1 = __importDefault(signer);
	var convert_1 = __importDefault(convert);
	var AddressImporter = /** @class */ (function () {
	    function AddressImporter() {
	    }
	    /**
	     * Import a wallet using a mnemonic phrase
	     *
	     * @param {string} mnemonic - The mnemonic words to import the wallet from
	     * @param {string} [seedPassword] - (Optional) The password to use to secure the mnemonic
	     * @returns {Wallet} - The wallet derived from the mnemonic phrase
	     */
	    AddressImporter.prototype.fromMnemonic = function (mnemonic, seedPassword) {
	        if (seedPassword === void 0) { seedPassword = ''; }
	        var bip39 = new bip39_mnemonic_1.default(seedPassword);
	        if (!bip39.validateMnemonic(mnemonic)) {
	            throw new Error('Invalid mnemonic phrase');
	        }
	        var seed = bip39.mnemonicToSeed(mnemonic);
	        var accounts = this.accounts(seed, 0, 0);
	        return {
	            mnemonic: mnemonic,
	            seed: seed,
	            accounts: accounts,
	        };
	    };
	    /**
	     * Import a legacy wallet using a mnemonic phrase
	     *
	     * @param {string} mnemonic - The mnemonic words to import the wallet from
	     * @returns {Wallet} - The wallet derived from the mnemonic phrase
	     */
	    AddressImporter.prototype.fromLegacyMnemonic = function (mnemonic) {
	        var bip39 = new bip39_mnemonic_1.default();
	        if (!bip39.validateMnemonic(mnemonic)) {
	            throw new Error('Invalid mnemonic phrase');
	        }
	        var seed = bip39.mnemonicToLegacySeed(mnemonic);
	        return this.fromLegacySeed(seed, 0, 0, mnemonic);
	    };
	    /**
	     * Validate mnemonic words
	     *
	     * @param mnemonic {string} mnemonic - The mnemonic words to validate
	     */
	    AddressImporter.prototype.validateMnemonic = function (mnemonic) {
	        var bip39 = new bip39_mnemonic_1.default();
	        return bip39.validateMnemonic(mnemonic);
	    };
	    /**
	     * Import a wallet using a seed
	     *
	     * @param {string} seed - The seed to import the wallet from
	     * @param {number} [from] - (Optional) The start index of the private keys to derive from
	     * @param {number} [to] - (Optional) The end index of the private keys to derive to
	     * @returns {Wallet} The wallet derived from the mnemonic phrase
	     */
	    AddressImporter.prototype.fromSeed = function (seed, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = 0; }
	        if (seed.length !== 128) {
	            throw new Error('Invalid seed length, must be a 128 byte hexadecimal string');
	        }
	        if (!/^[0-9a-fA-F]+$/i.test(seed)) {
	            throw new Error('Seed is not a valid hexadecimal string');
	        }
	        var accounts = this.accounts(seed, from, to);
	        return {
	            mnemonic: undefined,
	            seed: seed,
	            accounts: accounts,
	        };
	    };
	    /**
	     * Import a wallet using a legacy seed
	     *
	     * @param {string} seed - The seed to import the wallet from
	     * @param {number} [from] - (Optional) The start index of the private keys to derive from
	     * @param {number} [to] - (Optional) The end index of the private keys to derive to
	     * @returns {Wallet} The wallet derived from the seed
	     */
	    AddressImporter.prototype.fromLegacySeed = function (seed, from, to, mnemonic) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = 0; }
	        if (seed.length !== 64) {
	            throw new Error('Invalid seed length, must be a 64 byte hexadecimal string');
	        }
	        if (!/^[0-9a-fA-F]+$/i.test(seed)) {
	            throw new Error('Seed is not a valid hexadecimal string');
	        }
	        var accounts = this.legacyAccounts(seed, from, to);
	        return {
	            mnemonic: mnemonic || new bip39_mnemonic_1.default().deriveMnemonic(seed),
	            seed: seed,
	            accounts: accounts,
	        };
	    };
	    /**
	     * Derives BIP32 private keys
	     *
	     * @param {string} seed - The seed to use for private key derivation
	     * @param {number} from - The start index of private keys to derive from
	     * @param {number} to - The end index of private keys to derive to
	     */
	    AddressImporter.prototype.accounts = function (seed, from, to) {
	        var accounts = [];
	        for (var i = from; i <= to; i++) {
	            var bip44 = new bip32_key_derivation_1.default("44'/165'/" + i + "'", seed);
	            var privateKey = bip44.derivePath().key;
	            var ed25519 = new ed25519_1.default();
	            var keyPair = ed25519.generateKeys(privateKey);
	            var nano = new nano_address_1.default();
	            var address = nano.deriveAddress(keyPair.publicKey);
	            accounts.push({
	                accountIndex: i,
	                privateKey: keyPair.privateKey,
	                publicKey: keyPair.publicKey,
	                address: address,
	            });
	        }
	        return accounts;
	    };
	    /**
	     * Derives legacy private keys
	     *
	     * @param {string} seed - The seed to use for private key derivation
	     * @param {number} from - The start index of private keys to derive from
	     * @param {number} to - The end index of private keys to derive to
	     */
	    AddressImporter.prototype.legacyAccounts = function (seed, from, to) {
	        var signer = new signer_1.default();
	        var accounts = [];
	        for (var i = from; i <= to; i++) {
	            var privateKey = convert_1.default.ab2hex(signer.generateHash([seed, convert_1.default.dec2hex(i, 4)]));
	            var ed25519 = new ed25519_1.default();
	            var keyPair = ed25519.generateKeys(privateKey);
	            var nano = new nano_address_1.default();
	            var address = nano.deriveAddress(keyPair.publicKey);
	            accounts.push({
	                accountIndex: i,
	                privateKey: keyPair.privateKey,
	                publicKey: keyPair.publicKey,
	                address: address,
	            });
	        }
	        return accounts;
	    };
	    return AddressImporter;
	}());
	exports.default = AddressImporter;
	});

	var addressGenerator = createCommonjsModule(function (module, exports) {
	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var address_importer_1 = __importDefault(addressImporter);
	var bip39_mnemonic_1 = __importDefault(bip39Mnemonic);
	var AddressGenerator = /** @class */ (function () {
	    function AddressGenerator() {
	    }
	    /**
	     * Generates a hierarchial deterministic BIP32/39/44 wallet
	     *
	     * @param {string} [entropy] - (Optional) Custom entropy if the caller doesn't want a default generated entropy
	     * @param {string} [seedPassword] - (Optional) Password for the seed
	     */
	    AddressGenerator.prototype.generateWallet = function (entropy, seedPassword) {
	        if (entropy === void 0) { entropy = ''; }
	        if (seedPassword === void 0) { seedPassword = ''; }
	        var bip39 = new bip39_mnemonic_1.default(seedPassword);
	        var mnemonicSeed = bip39.createWallet(entropy);
	        var wallet = new address_importer_1.default().fromSeed(mnemonicSeed.seed, 0, 0);
	        return __assign(__assign({}, wallet), { mnemonic: mnemonicSeed.mnemonic });
	    };
	    /**
	     * Generates a legacy Nano wallet
	     *
	     */
	    AddressGenerator.prototype.generateLegacyWallet = function (seed) {
	        var bip39 = new bip39_mnemonic_1.default();
	        var mnemonicSeed = bip39.createLegacyWallet(seed);
	        var wallet = new address_importer_1.default().fromLegacySeed(mnemonicSeed.seed, 0, 0, mnemonicSeed.mnemonic);
	        return wallet;
	    };
	    return AddressGenerator;
	}());
	exports.default = AddressGenerator;
	});

	var bignumber = createCommonjsModule(function (module) {
	(function (globalObject) {

	/*
	 *      bignumber.js v9.0.0
	 *      A JavaScript library for arbitrary-precision arithmetic.
	 *      https://github.com/MikeMcl/bignumber.js
	 *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
	 *      MIT Licensed.
	 *
	 *      BigNumber.prototype methods     |  BigNumber methods
	 *                                      |
	 *      absoluteValue            abs    |  clone
	 *      comparedTo                      |  config               set
	 *      decimalPlaces            dp     |      DECIMAL_PLACES
	 *      dividedBy                div    |      ROUNDING_MODE
	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
	 *      exponentiatedBy          pow    |      RANGE
	 *      integerValue                    |      CRYPTO
	 *      isEqualTo                eq     |      MODULO_MODE
	 *      isFinite                        |      POW_PRECISION
	 *      isGreaterThan            gt     |      FORMAT
	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
	 *      isInteger                       |  isBigNumber
	 *      isLessThan               lt     |  maximum              max
	 *      isLessThanOrEqualTo      lte    |  minimum              min
	 *      isNaN                           |  random
	 *      isNegative                      |  sum
	 *      isPositive                      |
	 *      isZero                          |
	 *      minus                           |
	 *      modulo                   mod    |
	 *      multipliedBy             times  |
	 *      negated                         |
	 *      plus                            |
	 *      precision                sd     |
	 *      shiftedBy                       |
	 *      squareRoot               sqrt   |
	 *      toExponential                   |
	 *      toFixed                         |
	 *      toFormat                        |
	 *      toFraction                      |
	 *      toJSON                          |
	 *      toNumber                        |
	 *      toPrecision                     |
	 *      toString                        |
	 *      valueOf                         |
	 *
	 */


	  var BigNumber,
	    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
	    mathceil = Math.ceil,
	    mathfloor = Math.floor,

	    bignumberError = '[BigNumber Error] ',
	    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

	    BASE = 1e14,
	    LOG_BASE = 14,
	    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	    SQRT_BASE = 1e7,

	    // EDITABLE
	    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
	    MAX = 1E9;                                   // 0 to MAX_INT32


	  /*
	   * Create and return a BigNumber constructor.
	   */
	  function clone(configObject) {
	    var div, convertBase, parseNumeric,
	      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
	      ONE = new BigNumber(1),


	      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


	      // The default values below must be integers within the inclusive ranges stated.
	      // The values can also be changed at run-time using BigNumber.set.

	      // The maximum number of decimal places for operations involving division.
	      DECIMAL_PLACES = 20,                     // 0 to MAX

	      // The rounding mode used when rounding to the above decimal places, and when using
	      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
	      // UP         0 Away from zero.
	      // DOWN       1 Towards zero.
	      // CEIL       2 Towards +Infinity.
	      // FLOOR      3 Towards -Infinity.
	      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      ROUNDING_MODE = 4,                       // 0 to 8

	      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	      // The exponent value at and beneath which toString returns exponential notation.
	      // Number type: -7
	      TO_EXP_NEG = -7,                         // 0 to -MAX

	      // The exponent value at and above which toString returns exponential notation.
	      // Number type: 21
	      TO_EXP_POS = 21,                         // 0 to MAX

	      // RANGE : [MIN_EXP, MAX_EXP]

	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // Number type: -324  (5e-324)
	      MIN_EXP = -1e7,                          // -1 to -MAX

	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // Number type:  308  (1.7976931348623157e+308)
	      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	      MAX_EXP = 1e7,                           // 1 to MAX

	      // Whether to use cryptographically-secure random number generation, if available.
	      CRYPTO = false,                          // true or false

	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP        0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN      1 The remainder has the same sign as the dividend.
	      //             This modulo mode is commonly known as 'truncated division' and is
	      //             equivalent to (a % n) in JavaScript.
	      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	      //             The remainder is always positive.
	      //
	      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
	      // modes are commonly used for the modulus operation.
	      // Although the other rounding modes can also be used, they may not give useful results.
	      MODULO_MODE = 1,                         // 0 to 9

	      // The maximum number of significant digits of the result of the exponentiatedBy operation.
	      // If POW_PRECISION is 0, there will be unlimited significant digits.
	      POW_PRECISION = 0,                    // 0 to MAX

	      // The format specification used by the BigNumber.prototype.toFormat method.
	      FORMAT = {
	        prefix: '',
	        groupSize: 3,
	        secondaryGroupSize: 0,
	        groupSeparator: ',',
	        decimalSeparator: '.',
	        fractionGroupSize: 0,
	        fractionGroupSeparator: '\xA0',      // non-breaking space
	        suffix: ''
	      },

	      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
	      // '-', '.', whitespace, or repeated character.
	      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
	      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


	    //------------------------------------------------------------------------------------------


	    // CONSTRUCTOR


	    /*
	     * The BigNumber constructor and exported function.
	     * Create and return a new instance of a BigNumber object.
	     *
	     * v {number|string|BigNumber} A numeric value.
	     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
	     */
	    function BigNumber(v, b) {
	      var alphabet, c, caseChanged, e, i, isNum, len, str,
	        x = this;

	      // Enable constructor call without `new`.
	      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

	      if (b == null) {

	        if (v && v._isBigNumber === true) {
	          x.s = v.s;

	          if (!v.c || v.e > MAX_EXP) {
	            x.c = x.e = null;
	          } else if (v.e < MIN_EXP) {
	            x.c = [x.e = 0];
	          } else {
	            x.e = v.e;
	            x.c = v.c.slice();
	          }

	          return;
	        }

	        if ((isNum = typeof v == 'number') && v * 0 == 0) {

	          // Use `1 / n` to handle minus zero also.
	          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

	          // Fast path for integers, where n < 2147483648 (2**31).
	          if (v === ~~v) {
	            for (e = 0, i = v; i >= 10; i /= 10, e++);

	            if (e > MAX_EXP) {
	              x.c = x.e = null;
	            } else {
	              x.e = e;
	              x.c = [v];
	            }

	            return;
	          }

	          str = String(v);
	        } else {

	          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

	          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
	        }

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	        // Exponential form?
	        if ((i = str.search(/e/i)) > 0) {

	          // Determine exponent.
	          if (e < 0) e = i;
	          e += +str.slice(i + 1);
	          str = str.substring(0, i);
	        } else if (e < 0) {

	          // Integer.
	          e = str.length;
	        }

	      } else {

	        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	        intCheck(b, 2, ALPHABET.length, 'Base');

	        // Allow exponential notation to be used with base 10 argument, while
	        // also rounding to DECIMAL_PLACES as with other bases.
	        if (b == 10) {
	          x = new BigNumber(v);
	          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
	        }

	        str = String(v);

	        if (isNum = typeof v == 'number') {

	          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

	          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

	          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
	            throw Error
	             (tooManyDigits + v);
	          }
	        } else {
	          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
	        }

	        alphabet = ALPHABET.slice(0, b);
	        e = i = 0;

	        // Check that str is a valid base b number.
	        // Don't use RegExp, so alphabet can contain special characters.
	        for (len = str.length; i < len; i++) {
	          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
	            if (c == '.') {

	              // If '.' is not the first character and it has not be found before.
	              if (i > e) {
	                e = len;
	                continue;
	              }
	            } else if (!caseChanged) {

	              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
	              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
	                  str == str.toLowerCase() && (str = str.toUpperCase())) {
	                caseChanged = true;
	                i = -1;
	                e = 0;
	                continue;
	              }
	            }

	            return parseNumeric(x, String(v), isNum, b);
	          }
	        }

	        // Prevent later check for length on converted number.
	        isNum = false;
	        str = convertBase(str, b, 10, x.s);

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	        else e = str.length;
	      }

	      // Determine leading zeros.
	      for (i = 0; str.charCodeAt(i) === 48; i++);

	      // Determine trailing zeros.
	      for (len = str.length; str.charCodeAt(--len) === 48;);

	      if (str = str.slice(i, ++len)) {
	        len -= i;

	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	        if (isNum && BigNumber.DEBUG &&
	          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
	            throw Error
	             (tooManyDigits + (x.s * v));
	        }

	         // Overflow?
	        if ((e = e - i - 1) > MAX_EXP) {

	          // Infinity.
	          x.c = x.e = null;

	        // Underflow?
	        } else if (e < MIN_EXP) {

	          // Zero.
	          x.c = [x.e = 0];
	        } else {
	          x.e = e;
	          x.c = [];

	          // Transform base

	          // e is the base 10 exponent.
	          // i is where to slice str to get the first element of the coefficient array.
	          i = (e + 1) % LOG_BASE;
	          if (e < 0) i += LOG_BASE;  // i < 1

	          if (i < len) {
	            if (i) x.c.push(+str.slice(0, i));

	            for (len -= LOG_BASE; i < len;) {
	              x.c.push(+str.slice(i, i += LOG_BASE));
	            }

	            i = LOG_BASE - (str = str.slice(i)).length;
	          } else {
	            i -= len;
	          }

	          for (; i--; str += '0');
	          x.c.push(+str);
	        }
	      } else {

	        // Zero.
	        x.c = [x.e = 0];
	      }
	    }


	    // CONSTRUCTOR PROPERTIES


	    BigNumber.clone = clone;

	    BigNumber.ROUND_UP = 0;
	    BigNumber.ROUND_DOWN = 1;
	    BigNumber.ROUND_CEIL = 2;
	    BigNumber.ROUND_FLOOR = 3;
	    BigNumber.ROUND_HALF_UP = 4;
	    BigNumber.ROUND_HALF_DOWN = 5;
	    BigNumber.ROUND_HALF_EVEN = 6;
	    BigNumber.ROUND_HALF_CEIL = 7;
	    BigNumber.ROUND_HALF_FLOOR = 8;
	    BigNumber.EUCLID = 9;


	    /*
	     * Configure infrequently-changing library-wide settings.
	     *
	     * Accept an object with the following optional properties (if the value of a property is
	     * a number, it must be an integer within the inclusive range stated):
	     *
	     *   DECIMAL_PLACES   {number}           0 to MAX
	     *   ROUNDING_MODE    {number}           0 to 8
	     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
	     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
	     *   CRYPTO           {boolean}          true or false
	     *   MODULO_MODE      {number}           0 to 9
	     *   POW_PRECISION       {number}           0 to MAX
	     *   ALPHABET         {string}           A string of two or more unique characters which does
	     *                                       not contain '.'.
	     *   FORMAT           {object}           An object with some of the following properties:
	     *     prefix                 {string}
	     *     groupSize              {number}
	     *     secondaryGroupSize     {number}
	     *     groupSeparator         {string}
	     *     decimalSeparator       {string}
	     *     fractionGroupSize      {number}
	     *     fractionGroupSeparator {string}
	     *     suffix                 {string}
	     *
	     * (The values assigned to the above FORMAT object properties are not checked for validity.)
	     *
	     * E.g.
	     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	     *
	     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
	     *
	     * Return an object with the properties current values.
	     */
	    BigNumber.config = BigNumber.set = function (obj) {
	      var p, v;

	      if (obj != null) {

	        if (typeof obj == 'object') {

	          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            DECIMAL_PLACES = v;
	          }

	          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 8, p);
	            ROUNDING_MODE = v;
	          }

	          // EXPONENTIAL_AT {number|number[]}
	          // Integer, -MAX to MAX inclusive or
	          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -MAX, 0, p);
	              intCheck(v[1], 0, MAX, p);
	              TO_EXP_NEG = v[0];
	              TO_EXP_POS = v[1];
	            } else {
	              intCheck(v, -MAX, MAX, p);
	              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
	            }
	          }

	          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
	          if (obj.hasOwnProperty(p = 'RANGE')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -MAX, -1, p);
	              intCheck(v[1], 1, MAX, p);
	              MIN_EXP = v[0];
	              MAX_EXP = v[1];
	            } else {
	              intCheck(v, -MAX, MAX, p);
	              if (v) {
	                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
	              } else {
	                throw Error
	                 (bignumberError + p + ' cannot be zero: ' + v);
	              }
	            }
	          }

	          // CRYPTO {boolean} true or false.
	          // '[BigNumber Error] CRYPTO not true or false: {v}'
	          // '[BigNumber Error] crypto unavailable'
	          if (obj.hasOwnProperty(p = 'CRYPTO')) {
	            v = obj[p];
	            if (v === !!v) {
	              if (v) {
	                if (typeof crypto != 'undefined' && crypto &&
	                 (crypto.getRandomValues || crypto.randomBytes)) {
	                  CRYPTO = v;
	                } else {
	                  CRYPTO = !v;
	                  throw Error
	                   (bignumberError + 'crypto unavailable');
	                }
	              } else {
	                CRYPTO = v;
	              }
	            } else {
	              throw Error
	               (bignumberError + p + ' not true or false: ' + v);
	            }
	          }

	          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 9, p);
	            MODULO_MODE = v;
	          }

	          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            POW_PRECISION = v;
	          }

	          // FORMAT {object}
	          // '[BigNumber Error] FORMAT not an object: {v}'
	          if (obj.hasOwnProperty(p = 'FORMAT')) {
	            v = obj[p];
	            if (typeof v == 'object') FORMAT = v;
	            else throw Error
	             (bignumberError + p + ' not an object: ' + v);
	          }

	          // ALPHABET {string}
	          // '[BigNumber Error] ALPHABET invalid: {v}'
	          if (obj.hasOwnProperty(p = 'ALPHABET')) {
	            v = obj[p];

	            // Disallow if only one character,
	            // or if it contains '+', '-', '.', whitespace, or a repeated character.
	            if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
	              ALPHABET = v;
	            } else {
	              throw Error
	               (bignumberError + p + ' invalid: ' + v);
	            }
	          }

	        } else {

	          // '[BigNumber Error] Object expected: {v}'
	          throw Error
	           (bignumberError + 'Object expected: ' + obj);
	        }
	      }

	      return {
	        DECIMAL_PLACES: DECIMAL_PLACES,
	        ROUNDING_MODE: ROUNDING_MODE,
	        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
	        RANGE: [MIN_EXP, MAX_EXP],
	        CRYPTO: CRYPTO,
	        MODULO_MODE: MODULO_MODE,
	        POW_PRECISION: POW_PRECISION,
	        FORMAT: FORMAT,
	        ALPHABET: ALPHABET
	      };
	    };


	    /*
	     * Return true if v is a BigNumber instance, otherwise return false.
	     *
	     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
	     *
	     * v {any}
	     *
	     * '[BigNumber Error] Invalid BigNumber: {v}'
	     */
	    BigNumber.isBigNumber = function (v) {
	      if (!v || v._isBigNumber !== true) return false;
	      if (!BigNumber.DEBUG) return true;

	      var i, n,
	        c = v.c,
	        e = v.e,
	        s = v.s;

	      out: if ({}.toString.call(c) == '[object Array]') {

	        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

	          // If the first element is zero, the BigNumber value must be zero.
	          if (c[0] === 0) {
	            if (e === 0 && c.length === 1) return true;
	            break out;
	          }

	          // Calculate number of digits that c[0] should have, based on the exponent.
	          i = (e + 1) % LOG_BASE;
	          if (i < 1) i += LOG_BASE;

	          // Calculate number of digits of c[0].
	          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
	          if (String(c[0]).length == i) {

	            for (i = 0; i < c.length; i++) {
	              n = c[i];
	              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
	            }

	            // Last element cannot be zero, unless it is the only element.
	            if (n !== 0) return true;
	          }
	        }

	      // Infinity/NaN
	      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
	        return true;
	      }

	      throw Error
	        (bignumberError + 'Invalid BigNumber: ' + v);
	    };


	    /*
	     * Return a new BigNumber whose value is the maximum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.maximum = BigNumber.max = function () {
	      return maxOrMin(arguments, P.lt);
	    };


	    /*
	     * Return a new BigNumber whose value is the minimum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.minimum = BigNumber.min = function () {
	      return maxOrMin(arguments, P.gt);
	    };


	    /*
	     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	     * zeros are produced).
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
	     * '[BigNumber Error] crypto unavailable'
	     */
	    BigNumber.random = (function () {
	      var pow2_53 = 0x20000000000000;

	      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	      // Check if Math.random() produces more than 32 bits of randomness.
	      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	       ? function () { return mathfloor(Math.random() * pow2_53); }
	       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	         (Math.random() * 0x800000 | 0); };

	      return function (dp) {
	        var a, b, e, k, v,
	          i = 0,
	          c = [],
	          rand = new BigNumber(ONE);

	        if (dp == null) dp = DECIMAL_PLACES;
	        else intCheck(dp, 0, MAX);

	        k = mathceil(dp / LOG_BASE);

	        if (CRYPTO) {

	          // Browsers supporting crypto.getRandomValues.
	          if (crypto.getRandomValues) {

	            a = crypto.getRandomValues(new Uint32Array(k *= 2));

	            for (; i < k;) {

	              // 53 bits:
	              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	              //                                     11111 11111111 11111111
	              // 0x20000 is 2^21.
	              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	              // Rejection sampling:
	              // 0 <= v < 9007199254740992
	              // Probability that v >= 9e15, is
	              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	              if (v >= 9e15) {
	                b = crypto.getRandomValues(new Uint32Array(2));
	                a[i] = b[0];
	                a[i + 1] = b[1];
	              } else {

	                // 0 <= v <= 8999999999999999
	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 2;
	              }
	            }
	            i = k / 2;

	          // Node.js supporting crypto.randomBytes.
	          } else if (crypto.randomBytes) {

	            // buffer
	            a = crypto.randomBytes(k *= 7);

	            for (; i < k;) {

	              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	              // 0x100000000 is 2^32, 0x1000000 is 2^24
	              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	              // 0 <= v < 9007199254740992
	              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
	                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
	                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

	              if (v >= 9e15) {
	                crypto.randomBytes(7).copy(a, i);
	              } else {

	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 7;
	              }
	            }
	            i = k / 7;
	          } else {
	            CRYPTO = false;
	            throw Error
	             (bignumberError + 'crypto unavailable');
	          }
	        }

	        // Use Math.random.
	        if (!CRYPTO) {

	          for (; i < k;) {
	            v = random53bitInt();
	            if (v < 9e15) c[i++] = v % 1e14;
	          }
	        }

	        k = c[--i];
	        dp %= LOG_BASE;

	        // Convert trailing digits to zeros according to dp.
	        if (k && dp) {
	          v = POWS_TEN[LOG_BASE - dp];
	          c[i] = mathfloor(k / v) * v;
	        }

	        // Remove trailing elements which are zero.
	        for (; c[i] === 0; c.pop(), i--);

	        // Zero?
	        if (i < 0) {
	          c = [e = 0];
	        } else {

	          // Remove leading elements which are zero and adjust exponent accordingly.
	          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

	          // Count the digits of the first element of c to determine leading zeros, and...
	          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

	          // adjust the exponent accordingly.
	          if (i < LOG_BASE) e -= LOG_BASE - i;
	        }

	        rand.e = e;
	        rand.c = c;
	        return rand;
	      };
	    })();


	    /*
	     * Return a BigNumber whose value is the sum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.sum = function () {
	      var i = 1,
	        args = arguments,
	        sum = new BigNumber(args[0]);
	      for (; i < args.length;) sum = sum.plus(args[i++]);
	      return sum;
	    };


	    // PRIVATE FUNCTIONS


	    // Called by BigNumber and BigNumber.prototype.toString.
	    convertBase = (function () {
	      var decimal = '0123456789';

	      /*
	       * Convert string of baseIn to an array of numbers of baseOut.
	       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
	       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
	       */
	      function toBaseOut(str, baseIn, baseOut, alphabet) {
	        var j,
	          arr = [0],
	          arrL,
	          i = 0,
	          len = str.length;

	        for (; i < len;) {
	          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

	          arr[0] += alphabet.indexOf(str.charAt(i++));

	          for (j = 0; j < arr.length; j++) {

	            if (arr[j] > baseOut - 1) {
	              if (arr[j + 1] == null) arr[j + 1] = 0;
	              arr[j + 1] += arr[j] / baseOut | 0;
	              arr[j] %= baseOut;
	            }
	          }
	        }

	        return arr.reverse();
	      }

	      // Convert a numeric string of baseIn to a numeric string of baseOut.
	      // If the caller is toString, we are converting from base 10 to baseOut.
	      // If the caller is BigNumber, we are converting from baseIn to base 10.
	      return function (str, baseIn, baseOut, sign, callerIsToString) {
	        var alphabet, d, e, k, r, x, xc, y,
	          i = str.indexOf('.'),
	          dp = DECIMAL_PLACES,
	          rm = ROUNDING_MODE;

	        // Non-integer.
	        if (i >= 0) {
	          k = POW_PRECISION;

	          // Unlimited precision.
	          POW_PRECISION = 0;
	          str = str.replace('.', '');
	          y = new BigNumber(baseIn);
	          x = y.pow(str.length - i);
	          POW_PRECISION = k;

	          // Convert str as if an integer, then restore the fraction part by dividing the
	          // result by its base raised to a power.

	          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
	           10, baseOut, decimal);
	          y.e = y.c.length;
	        }

	        // Convert the number as integer.

	        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
	         ? (alphabet = ALPHABET, decimal)
	         : (alphabet = decimal, ALPHABET));

	        // xc now represents str as an integer and converted to baseOut. e is the exponent.
	        e = k = xc.length;

	        // Remove trailing zeros.
	        for (; xc[--k] == 0; xc.pop());

	        // Zero?
	        if (!xc[0]) return alphabet.charAt(0);

	        // Does str represent an integer? If so, no need for the division.
	        if (i < 0) {
	          --e;
	        } else {
	          x.c = xc;
	          x.e = e;

	          // The sign is needed for correct rounding.
	          x.s = sign;
	          x = div(x, y, dp, rm, baseOut);
	          xc = x.c;
	          r = x.r;
	          e = x.e;
	        }

	        // xc now represents str converted to baseOut.

	        // THe index of the rounding digit.
	        d = e + dp + 1;

	        // The rounding digit: the digit to the right of the digit that may be rounded up.
	        i = xc[d];

	        // Look at the rounding digits and mode to determine whether to round up.

	        k = baseOut / 2;
	        r = r || d < 0 || xc[d + 1] != null;

	        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	               rm == (x.s < 0 ? 8 : 7));

	        // If the index of the rounding digit is not greater than zero, or xc represents
	        // zero, then the result of the base conversion is zero or, if rounding up, a value
	        // such as 0.00001.
	        if (d < 1 || !xc[0]) {

	          // 1^-dp or 0
	          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
	        } else {

	          // Truncate xc to the required number of decimal places.
	          xc.length = d;

	          // Round up?
	          if (r) {

	            // Rounding up may mean the previous digit has to be rounded up and so on.
	            for (--baseOut; ++xc[--d] > baseOut;) {
	              xc[d] = 0;

	              if (!d) {
	                ++e;
	                xc = [1].concat(xc);
	              }
	            }
	          }

	          // Determine trailing zeros.
	          for (k = xc.length; !xc[--k];);

	          // E.g. [4, 11, 15] becomes 4bf.
	          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

	          // Add leading zeros, decimal point and trailing zeros as required.
	          str = toFixedPoint(str, e, alphabet.charAt(0));
	        }

	        // The caller will add the sign.
	        return str;
	      };
	    })();


	    // Perform division in the specified base. Called by div and convertBase.
	    div = (function () {

	      // Assume non-zero x and k.
	      function multiply(x, k, base) {
	        var m, temp, xlo, xhi,
	          carry = 0,
	          i = x.length,
	          klo = k % SQRT_BASE,
	          khi = k / SQRT_BASE | 0;

	        for (x = x.slice(); i--;) {
	          xlo = x[i] % SQRT_BASE;
	          xhi = x[i] / SQRT_BASE | 0;
	          m = khi * xlo + xhi * klo;
	          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
	          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
	          x[i] = temp % base;
	        }

	        if (carry) x = [carry].concat(x);

	        return x;
	      }

	      function compare(a, b, aL, bL) {
	        var i, cmp;

	        if (aL != bL) {
	          cmp = aL > bL ? 1 : -1;
	        } else {

	          for (i = cmp = 0; i < aL; i++) {

	            if (a[i] != b[i]) {
	              cmp = a[i] > b[i] ? 1 : -1;
	              break;
	            }
	          }
	        }

	        return cmp;
	      }

	      function subtract(a, b, aL, base) {
	        var i = 0;

	        // Subtract b from a.
	        for (; aL--;) {
	          a[aL] -= i;
	          i = a[aL] < b[aL] ? 1 : 0;
	          a[aL] = i * base + a[aL] - b[aL];
	        }

	        // Remove leading zeros.
	        for (; !a[0] && a.length > 1; a.splice(0, 1));
	      }

	      // x: dividend, y: divisor.
	      return function (x, y, dp, rm, base) {
	        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	          yL, yz,
	          s = x.s == y.s ? 1 : -1,
	          xc = x.c,
	          yc = y.c;

	        // Either NaN, Infinity or 0?
	        if (!xc || !xc[0] || !yc || !yc[0]) {

	          return new BigNumber(

	           // Return NaN if either NaN, or both Infinity or 0.
	           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

	            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	         );
	        }

	        q = new BigNumber(s);
	        qc = q.c = [];
	        e = x.e - y.e;
	        s = dp + e + 1;

	        if (!base) {
	          base = BASE;
	          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
	          s = s / LOG_BASE | 0;
	        }

	        // Result exponent may be one less then the current value of e.
	        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	        for (i = 0; yc[i] == (xc[i] || 0); i++);

	        if (yc[i] > (xc[i] || 0)) e--;

	        if (s < 0) {
	          qc.push(1);
	          more = true;
	        } else {
	          xL = xc.length;
	          yL = yc.length;
	          i = 0;
	          s += 2;

	          // Normalise xc and yc so highest order digit of yc is >= base / 2.

	          n = mathfloor(base / (yc[0] + 1));

	          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
	          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
	          if (n > 1) {
	            yc = multiply(yc, n, base);
	            xc = multiply(xc, n, base);
	            yL = yc.length;
	            xL = xc.length;
	          }

	          xi = yL;
	          rem = xc.slice(0, yL);
	          remL = rem.length;

	          // Add zeros to make remainder as long as divisor.
	          for (; remL < yL; rem[remL++] = 0);
	          yz = yc.slice();
	          yz = [0].concat(yz);
	          yc0 = yc[0];
	          if (yc[1] >= base / 2) yc0++;
	          // Not necessary, but to prevent trial digit n > base, when using base 3.
	          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

	          do {
	            n = 0;

	            // Compare divisor and remainder.
	            cmp = compare(yc, rem, yL, remL);

	            // If divisor < remainder.
	            if (cmp < 0) {

	              // Calculate trial digit, n.

	              rem0 = rem[0];
	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	              // n is how many times the divisor goes into the current remainder.
	              n = mathfloor(rem0 / yc0);

	              //  Algorithm:
	              //  product = divisor multiplied by trial digit (n).
	              //  Compare product and remainder.
	              //  If product is greater than remainder:
	              //    Subtract divisor from product, decrement trial digit.
	              //  Subtract product from remainder.
	              //  If product was less than remainder at the last compare:
	              //    Compare new remainder and divisor.
	              //    If remainder is greater than divisor:
	              //      Subtract divisor from remainder, increment trial digit.

	              if (n > 1) {

	                // n may be > base only when base is 3.
	                if (n >= base) n = base - 1;

	                // product = divisor * trial digit.
	                prod = multiply(yc, n, base);
	                prodL = prod.length;
	                remL = rem.length;

	                // Compare product and remainder.
	                // If product > remainder then trial digit n too high.
	                // n is 1 too high about 5% of the time, and is not known to have
	                // ever been more than 1 too high.
	                while (compare(prod, rem, prodL, remL) == 1) {
	                  n--;

	                  // Subtract divisor from product.
	                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
	                  prodL = prod.length;
	                  cmp = 1;
	                }
	              } else {

	                // n is 0 or 1, cmp is -1.
	                // If n is 0, there is no need to compare yc and rem again below,
	                // so change cmp to 1 to avoid it.
	                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                if (n == 0) {

	                  // divisor < remainder, so n must be at least 1.
	                  cmp = n = 1;
	                }

	                // product = divisor
	                prod = yc.slice();
	                prodL = prod.length;
	              }

	              if (prodL < remL) prod = [0].concat(prod);

	              // Subtract product from remainder.
	              subtract(rem, prod, remL, base);
	              remL = rem.length;

	               // If product was < remainder.
	              if (cmp == -1) {

	                // Compare divisor and new remainder.
	                // If divisor < new remainder, subtract divisor from remainder.
	                // Trial digit n too low.
	                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                while (compare(yc, rem, yL, remL) < 1) {
	                  n++;

	                  // Subtract divisor from remainder.
	                  subtract(rem, yL < remL ? yz : yc, remL, base);
	                  remL = rem.length;
	                }
	              }
	            } else if (cmp === 0) {
	              n++;
	              rem = [0];
	            } // else cmp === 1 and n will be 0

	            // Add the next digit, n, to the result array.
	            qc[i++] = n;

	            // Update the remainder.
	            if (rem[0]) {
	              rem[remL++] = xc[xi] || 0;
	            } else {
	              rem = [xc[xi]];
	              remL = 1;
	            }
	          } while ((xi++ < xL || rem[0] != null) && s--);

	          more = rem[0] != null;

	          // Leading zero?
	          if (!qc[0]) qc.splice(0, 1);
	        }

	        if (base == BASE) {

	          // To calculate q.e, first get the number of digits of qc[0].
	          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

	          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

	        // Caller is convertBase.
	        } else {
	          q.e = e;
	          q.r = +more;
	        }

	        return q;
	      };
	    })();


	    /*
	     * Return a string representing the value of BigNumber n in fixed-point or exponential
	     * notation rounded to the specified decimal places or significant digits.
	     *
	     * n: a BigNumber.
	     * i: the index of the last digit required (i.e. the digit that may be rounded up).
	     * rm: the rounding mode.
	     * id: 1 (toExponential) or 2 (toPrecision).
	     */
	    function format(n, i, rm, id) {
	      var c0, e, ne, len, str;

	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      if (!n.c) return n.toString();

	      c0 = n.c[0];
	      ne = n.e;

	      if (i == null) {
	        str = coeffToString(n.c);
	        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
	         ? toExponential(str, ne)
	         : toFixedPoint(str, ne, '0');
	      } else {
	        n = round(new BigNumber(n), i, rm);

	        // n.e may have changed if the value was rounded up.
	        e = n.e;

	        str = coeffToString(n.c);
	        len = str.length;

	        // toPrecision returns exponential notation if the number of significant digits
	        // specified is less than the number of digits necessary to represent the integer
	        // part of the value in fixed-point notation.

	        // Exponential notation.
	        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

	          // Append zeros?
	          for (; len < i; str += '0', len++);
	          str = toExponential(str, e);

	        // Fixed-point notation.
	        } else {
	          i -= ne;
	          str = toFixedPoint(str, e, '0');

	          // Append zeros?
	          if (e + 1 > len) {
	            if (--i > 0) for (str += '.'; i--; str += '0');
	          } else {
	            i += e - len;
	            if (i > 0) {
	              if (e + 1 == len) str += '.';
	              for (; i--; str += '0');
	            }
	          }
	        }
	      }

	      return n.s < 0 && c0 ? '-' + str : str;
	    }


	    // Handle BigNumber.max and BigNumber.min.
	    function maxOrMin(args, method) {
	      var n,
	        i = 1,
	        m = new BigNumber(args[0]);

	      for (; i < args.length; i++) {
	        n = new BigNumber(args[i]);

	        // If any number is NaN, return NaN.
	        if (!n.s) {
	          m = n;
	          break;
	        } else if (method.call(m, n)) {
	          m = n;
	        }
	      }

	      return m;
	    }


	    /*
	     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	     * Called by minus, plus and times.
	     */
	    function normalise(n, c, e) {
	      var i = 1,
	        j = c.length;

	       // Remove trailing zeros.
	      for (; !c[--j]; c.pop());

	      // Calculate the base 10 exponent. First get the number of digits of c[0].
	      for (j = c[0]; j >= 10; j /= 10, i++);

	      // Overflow?
	      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

	        // Infinity.
	        n.c = n.e = null;

	      // Underflow?
	      } else if (e < MIN_EXP) {

	        // Zero.
	        n.c = [n.e = 0];
	      } else {
	        n.e = e;
	        n.c = c;
	      }

	      return n;
	    }


	    // Handle values that fail the validity test in BigNumber.
	    parseNumeric = (function () {
	      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	        dotAfter = /^([^.]+)\.$/,
	        dotBefore = /^\.([^.]+)$/,
	        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	      return function (x, str, isNum, b) {
	        var base,
	          s = isNum ? str : str.replace(whitespaceOrPlus, '');

	        // No exception on ±Infinity or NaN.
	        if (isInfinityOrNaN.test(s)) {
	          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	        } else {
	          if (!isNum) {

	            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	            s = s.replace(basePrefix, function (m, p1, p2) {
	              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	              return !b || b == base ? p1 : m;
	            });

	            if (b) {
	              base = b;

	              // E.g. '1.' to '1', '.1' to '0.1'
	              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
	            }

	            if (str != s) return new BigNumber(s, base);
	          }

	          // '[BigNumber Error] Not a number: {n}'
	          // '[BigNumber Error] Not a base {b} number: {n}'
	          if (BigNumber.DEBUG) {
	            throw Error
	              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
	          }

	          // NaN
	          x.s = null;
	        }

	        x.c = x.e = null;
	      }
	    })();


	    /*
	     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	     * If r is truthy, it is known that there are more digits after the rounding digit.
	     */
	    function round(x, sd, rm, r) {
	      var d, i, j, k, n, ni, rd,
	        xc = x.c,
	        pows10 = POWS_TEN;

	      // if x is not Infinity or NaN...
	      if (xc) {

	        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	        // n is a base 1e14 number, the value of the element of array x.c containing rd.
	        // ni is the index of n within x.c.
	        // d is the number of digits of n.
	        // i is the index of rd within n including leading zeros.
	        // j is the actual index of rd within n (if < 0, rd is a leading zero).
	        out: {

	          // Get the number of digits of the first element of xc.
	          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
	          i = sd - d;

	          // If the rounding digit is in the first element of xc...
	          if (i < 0) {
	            i += LOG_BASE;
	            j = sd;
	            n = xc[ni = 0];

	            // Get the rounding digit at index j of n.
	            rd = n / pows10[d - j - 1] % 10 | 0;
	          } else {
	            ni = mathceil((i + 1) / LOG_BASE);

	            if (ni >= xc.length) {

	              if (r) {

	                // Needed by sqrt.
	                for (; xc.length <= ni; xc.push(0));
	                n = rd = 0;
	                d = 1;
	                i %= LOG_BASE;
	                j = i - LOG_BASE + 1;
	              } else {
	                break out;
	              }
	            } else {
	              n = k = xc[ni];

	              // Get the number of digits of n.
	              for (d = 1; k >= 10; k /= 10, d++);

	              // Get the index of rd within n.
	              i %= LOG_BASE;

	              // Get the index of rd within n, adjusted for leading zeros.
	              // The number of leading zeros of n is given by LOG_BASE - d.
	              j = i - LOG_BASE + d;

	              // Get the rounding digit at index j of n.
	              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
	            }
	          }

	          r = r || sd < 0 ||

	          // Are there any non-zero digits after the rounding digit?
	          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
	          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

	          r = rm < 4
	           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

	            // Check whether the digit to the left of the rounding digit is odd.
	            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
	             rm == (x.s < 0 ? 8 : 7));

	          if (sd < 1 || !xc[0]) {
	            xc.length = 0;

	            if (r) {

	              // Convert sd to decimal places.
	              sd -= x.e + 1;

	              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
	              x.e = -sd || 0;
	            } else {

	              // Zero.
	              xc[0] = x.e = 0;
	            }

	            return x;
	          }

	          // Remove excess digits.
	          if (i == 0) {
	            xc.length = ni;
	            k = 1;
	            ni--;
	          } else {
	            xc.length = ni + 1;
	            k = pows10[LOG_BASE - i];

	            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	            // j > 0 means i > number of leading zeros of n.
	            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
	          }

	          // Round up?
	          if (r) {

	            for (; ;) {

	              // If the digit to be rounded up is in the first element of xc...
	              if (ni == 0) {

	                // i will be the length of xc[0] before k is added.
	                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
	                j = xc[0] += k;
	                for (k = 1; j >= 10; j /= 10, k++);

	                // if i != k the length has increased.
	                if (i != k) {
	                  x.e++;
	                  if (xc[0] == BASE) xc[0] = 1;
	                }

	                break;
	              } else {
	                xc[ni] += k;
	                if (xc[ni] != BASE) break;
	                xc[ni--] = 0;
	                k = 1;
	              }
	            }
	          }

	          // Remove trailing zeros.
	          for (i = xc.length; xc[--i] === 0; xc.pop());
	        }

	        // Overflow? Infinity.
	        if (x.e > MAX_EXP) {
	          x.c = x.e = null;

	        // Underflow? Zero.
	        } else if (x.e < MIN_EXP) {
	          x.c = [x.e = 0];
	        }
	      }

	      return x;
	    }


	    function valueOf(n) {
	      var str,
	        e = n.e;

	      if (e === null) return n.toString();

	      str = coeffToString(n.c);

	      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	        ? toExponential(str, e)
	        : toFixedPoint(str, e, '0');

	      return n.s < 0 ? '-' + str : str;
	    }


	    // PROTOTYPE/INSTANCE METHODS


	    /*
	     * Return a new BigNumber whose value is the absolute value of this BigNumber.
	     */
	    P.absoluteValue = P.abs = function () {
	      var x = new BigNumber(this);
	      if (x.s < 0) x.s = 1;
	      return x;
	    };


	    /*
	     * Return
	     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	     *   0 if they have the same value,
	     *   or null if the value of either is NaN.
	     */
	    P.comparedTo = function (y, b) {
	      return compare(this, new BigNumber(y, b));
	    };


	    /*
	     * If dp is undefined or null or true or false, return the number of decimal places of the
	     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     *
	     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.decimalPlaces = P.dp = function (dp, rm) {
	      var c, n, v,
	        x = this;

	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), dp + x.e + 1, rm);
	      }

	      if (!(c = x.c)) return null;
	      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

	      // Subtract the number of trailing zeros of the last number.
	      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
	      if (n < 0) n = 0;

	      return n;
	    };


	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.dividedBy = P.div = function (y, b) {
	      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
	    };


	    /*
	     * Return a new BigNumber whose value is the integer part of dividing the value of this
	     * BigNumber by the value of BigNumber(y, b).
	     */
	    P.dividedToIntegerBy = P.idiv = function (y, b) {
	      return div(this, new BigNumber(y, b), 0, 1);
	    };


	    /*
	     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
	     *
	     * If m is present, return the result modulo m.
	     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
	     *
	     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
	     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
	     *
	     * n {number|string|BigNumber} The exponent. An integer.
	     * [m] {number|string|BigNumber} The modulus.
	     *
	     * '[BigNumber Error] Exponent not an integer: {n}'
	     */
	    P.exponentiatedBy = P.pow = function (n, m) {
	      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
	        x = this;

	      n = new BigNumber(n);

	      // Allow NaN and ±Infinity, but not other non-integers.
	      if (n.c && !n.isInteger()) {
	        throw Error
	          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
	      }

	      if (m != null) m = new BigNumber(m);

	      // Exponent of MAX_SAFE_INTEGER is 15.
	      nIsBig = n.e > 14;

	      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
	      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

	        // The sign of the result of pow when x is negative depends on the evenness of n.
	        // If +n overflows to ±Infinity, the evenness of n would be not be known.
	        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
	        return m ? y.mod(m) : y;
	      }

	      nIsNeg = n.s < 0;

	      if (m) {

	        // x % m returns NaN if abs(m) is zero, or m is NaN.
	        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

	        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

	        if (isModExp) x = x.mod(m);

	      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
	      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
	      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
	        // [1, 240000000]
	        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
	        // [80000000000000]  [99999750000000]
	        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

	        // If x is negative and n is odd, k = -0, else k = 0.
	        k = x.s < 0 && isOdd(n) ? -0 : 0;

	        // If x >= 1, k = ±Infinity.
	        if (x.e > -1) k = 1 / k;

	        // If n is negative return ±0, else return ±Infinity.
	        return new BigNumber(nIsNeg ? 1 / k : k);

	      } else if (POW_PRECISION) {

	        // Truncating each coefficient array to a length of k after each multiplication
	        // equates to truncating significant digits to POW_PRECISION + [28, 41],
	        // i.e. there will be a minimum of 28 guard digits retained.
	        k = mathceil(POW_PRECISION / LOG_BASE + 2);
	      }

	      if (nIsBig) {
	        half = new BigNumber(0.5);
	        if (nIsNeg) n.s = 1;
	        nIsOdd = isOdd(n);
	      } else {
	        i = Math.abs(+valueOf(n));
	        nIsOdd = i % 2;
	      }

	      y = new BigNumber(ONE);

	      // Performs 54 loop iterations for n of 9007199254740991.
	      for (; ;) {

	        if (nIsOdd) {
	          y = y.times(x);
	          if (!y.c) break;

	          if (k) {
	            if (y.c.length > k) y.c.length = k;
	          } else if (isModExp) {
	            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
	          }
	        }

	        if (i) {
	          i = mathfloor(i / 2);
	          if (i === 0) break;
	          nIsOdd = i % 2;
	        } else {
	          n = n.times(half);
	          round(n, n.e + 1, 1);

	          if (n.e > 14) {
	            nIsOdd = isOdd(n);
	          } else {
	            i = +valueOf(n);
	            if (i === 0) break;
	            nIsOdd = i % 2;
	          }
	        }

	        x = x.times(x);

	        if (k) {
	          if (x.c && x.c.length > k) x.c.length = k;
	        } else if (isModExp) {
	          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
	        }
	      }

	      if (isModExp) return y;
	      if (nIsNeg) y = ONE.div(y);

	      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
	     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
	     */
	    P.integerValue = function (rm) {
	      var n = new BigNumber(this);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);
	      return round(n, n.e + 1, rm);
	    };


	    /*
	     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isEqualTo = P.eq = function (y, b) {
	      return compare(this, new BigNumber(y, b)) === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is a finite number, otherwise return false.
	     */
	    P.isFinite = function () {
	      return !!this.c;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isGreaterThan = P.gt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

	    };


	    /*
	     * Return true if the value of this BigNumber is an integer, otherwise return false.
	     */
	    P.isInteger = function () {
	      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isLessThan = P.lt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isLessThanOrEqualTo = P.lte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is NaN, otherwise return false.
	     */
	    P.isNaN = function () {
	      return !this.s;
	    };


	    /*
	     * Return true if the value of this BigNumber is negative, otherwise return false.
	     */
	    P.isNegative = function () {
	      return this.s < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is positive, otherwise return false.
	     */
	    P.isPositive = function () {
	      return this.s > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
	     */
	    P.isZero = function () {
	      return !!this.c && this.c[0] == 0;
	    };


	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	     * BigNumber(y, b).
	     */
	    P.minus = function (y, b) {
	      var i, j, t, xLTy,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	      if (a != b) {
	        y.s = -b;
	        return x.plus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Either Infinity?
	        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

	        // Either zero?
	        if (!xc[0] || !yc[0]) {

	          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

	           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	           ROUNDING_MODE == 3 ? -0 : 0);
	        }
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Determine which is the bigger number.
	      if (a = xe - ye) {

	        if (xLTy = a < 0) {
	          a = -a;
	          t = xc;
	        } else {
	          ye = xe;
	          t = yc;
	        }

	        t.reverse();

	        // Prepend zeros to equalise exponents.
	        for (b = a; b--; t.push(0));
	        t.reverse();
	      } else {

	        // Exponents equal. Check digit by digit.
	        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

	        for (a = b = 0; b < j; b++) {

	          if (xc[b] != yc[b]) {
	            xLTy = xc[b] < yc[b];
	            break;
	          }
	        }
	      }

	      // x < y? Point xc to the array of the bigger number.
	      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	      b = (j = yc.length) - (i = xc.length);

	      // Append zeros to xc if shorter.
	      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	      if (b > 0) for (; b--; xc[i++] = 0);
	      b = BASE - 1;

	      // Subtract yc from xc.
	      for (; j > a;) {

	        if (xc[--j] < yc[j]) {
	          for (i = j; i && !xc[--i]; xc[i] = b);
	          --xc[i];
	          xc[j] += BASE;
	        }

	        xc[j] -= yc[j];
	      }

	      // Remove leading zeros and adjust exponent accordingly.
	      for (; xc[0] == 0; xc.splice(0, 1), --ye);

	      // Zero?
	      if (!xc[0]) {

	        // Following IEEE 754 (2008) 6.3,
	        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	        y.s = ROUNDING_MODE == 3 ? -1 : 1;
	        y.c = [y.e = 0];
	        return y;
	      }

	      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	      // for finite x and y.
	      return normalise(y, xc, ye);
	    };


	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   n % I =  n
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   0 % I =  0
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *   N % I =  N
	     *   I % n =  N
	     *   I % 0 =  N
	     *   I % N =  N
	     *   I % I =  N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	     */
	    P.modulo = P.mod = function (y, b) {
	      var q, s,
	        x = this;

	      y = new BigNumber(y, b);

	      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	      if (!x.c || !y.s || y.c && !y.c[0]) {
	        return new BigNumber(NaN);

	      // Return x if y is Infinity or x is zero.
	      } else if (!y.c || x.c && !x.c[0]) {
	        return new BigNumber(x);
	      }

	      if (MODULO_MODE == 9) {

	        // Euclidian division: q = sign(y) * floor(x / abs(y))
	        // r = x - qy    where  0 <= r < abs(y)
	        s = y.s;
	        y.s = 1;
	        q = div(x, y, 0, 3);
	        y.s = s;
	        q.s *= s;
	      } else {
	        q = div(x, y, 0, MODULO_MODE);
	      }

	      y = x.minus(q.times(y));

	      // To match JavaScript %, ensure sign of zero is sign of dividend.
	      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

	      return y;
	    };


	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
	     * of BigNumber(y, b).
	     */
	    P.multipliedBy = P.times = function (y, b) {
	      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	        base, sqrtBase,
	        x = this,
	        xc = x.c,
	        yc = (y = new BigNumber(y, b)).c;

	      // Either NaN, ±Infinity or ±0?
	      if (!xc || !yc || !xc[0] || !yc[0]) {

	        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
	          y.c = y.e = y.s = null;
	        } else {
	          y.s *= x.s;

	          // Return ±Infinity if either is ±Infinity.
	          if (!xc || !yc) {
	            y.c = y.e = null;

	          // Return ±0 if either is ±0.
	          } else {
	            y.c = [0];
	            y.e = 0;
	          }
	        }

	        return y;
	      }

	      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
	      y.s *= x.s;
	      xcL = xc.length;
	      ycL = yc.length;

	      // Ensure xc points to longer array and xcL to its length.
	      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	      // Initialise the result array with zeros.
	      for (i = xcL + ycL, zc = []; i--; zc.push(0));

	      base = BASE;
	      sqrtBase = SQRT_BASE;

	      for (i = ycL; --i >= 0;) {
	        c = 0;
	        ylo = yc[i] % sqrtBase;
	        yhi = yc[i] / sqrtBase | 0;

	        for (k = xcL, j = i + k; j > i;) {
	          xlo = xc[--k] % sqrtBase;
	          xhi = xc[k] / sqrtBase | 0;
	          m = yhi * xlo + xhi * ylo;
	          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
	          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
	          zc[j--] = xlo % base;
	        }

	        zc[j] = c;
	      }

	      if (c) {
	        ++e;
	      } else {
	        zc.splice(0, 1);
	      }

	      return normalise(y, zc, e);
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber negated,
	     * i.e. multiplied by -1.
	     */
	    P.negated = function () {
	      var x = new BigNumber(this);
	      x.s = -x.s || null;
	      return x;
	    };


	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	     * BigNumber(y, b).
	     */
	    P.plus = function (y, b) {
	      var t,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	       if (a != b) {
	        y.s = -b;
	        return x.minus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Return ±Infinity if either ±Infinity.
	        if (!xc || !yc) return new BigNumber(a / 0);

	        // Either zero?
	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	      if (a = xe - ye) {
	        if (a > 0) {
	          ye = xe;
	          t = yc;
	        } else {
	          a = -a;
	          t = xc;
	        }

	        t.reverse();
	        for (; a--; t.push(0));
	        t.reverse();
	      }

	      a = xc.length;
	      b = yc.length;

	      // Point xc to the longer array, and b to the shorter length.
	      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

	      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	      for (a = 0; b;) {
	        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
	        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
	      }

	      if (a) {
	        xc = [a].concat(xc);
	        ++ye;
	      }

	      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	      // ye = MAX_EXP + 1 possible
	      return normalise(y, xc, ye);
	    };


	    /*
	     * If sd is undefined or null or true or false, return the number of significant digits of
	     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     * If sd is true include integer-part trailing zeros in the count.
	     *
	     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
	     *                     boolean: whether to count integer-part trailing zeros: true or false.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.precision = P.sd = function (sd, rm) {
	      var c, n, v,
	        x = this;

	      if (sd != null && sd !== !!sd) {
	        intCheck(sd, 1, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), sd, rm);
	      }

	      if (!(c = x.c)) return null;
	      v = c.length - 1;
	      n = v * LOG_BASE + 1;

	      if (v = c[v]) {

	        // Subtract the number of trailing zeros of the last element.
	        for (; v % 10 == 0; v /= 10, n--);

	        // Add the number of digits of the first element.
	        for (v = c[0]; v >= 10; v /= 10, n++);
	      }

	      if (sd && x.e + 1 > n) n = x.e + 1;

	      return n;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	     *
	     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
	     */
	    P.shiftedBy = function (k) {
	      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	      return this.times('1e' + k);
	    };


	    /*
	     *  sqrt(-n) =  N
	     *  sqrt(N) =  N
	     *  sqrt(-I) =  N
	     *  sqrt(I) =  I
	     *  sqrt(0) =  0
	     *  sqrt(-0) = -0
	     *
	     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.squareRoot = P.sqrt = function () {
	      var m, n, r, rep, t,
	        x = this,
	        c = x.c,
	        s = x.s,
	        e = x.e,
	        dp = DECIMAL_PLACES + 4,
	        half = new BigNumber('0.5');

	      // Negative/NaN/Infinity/zero?
	      if (s !== 1 || !c || !c[0]) {
	        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
	      }

	      // Initial estimate.
	      s = Math.sqrt(+valueOf(x));

	      // Math.sqrt underflow/overflow?
	      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	      if (s == 0 || s == 1 / 0) {
	        n = coeffToString(c);
	        if ((n.length + e) % 2 == 0) n += '0';
	        s = Math.sqrt(+n);
	        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

	        if (s == 1 / 0) {
	          n = '1e' + e;
	        } else {
	          n = s.toExponential();
	          n = n.slice(0, n.indexOf('e') + 1) + e;
	        }

	        r = new BigNumber(n);
	      } else {
	        r = new BigNumber(s + '');
	      }

	      // Check for zero.
	      // r could be zero if MIN_EXP is changed after the this value was created.
	      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	      // coeffToString to throw.
	      if (r.c[0]) {
	        e = r.e;
	        s = e + dp;
	        if (s < 3) s = 0;

	        // Newton-Raphson iteration.
	        for (; ;) {
	          t = r;
	          r = half.times(t.plus(div(x, t, dp, 1)));

	          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

	            // The exponent of r may here be one less than the final result exponent,
	            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	            // are indexed correctly.
	            if (r.e < e) --s;
	            n = n.slice(s - 3, s + 1);

	            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	            // iteration.
	            if (n == '9999' || !rep && n == '4999') {

	              // On the first iteration only, check to see if rounding up gives the
	              // exact result as the nines may infinitely repeat.
	              if (!rep) {
	                round(t, t.e + DECIMAL_PLACES + 2, 0);

	                if (t.times(t).eq(x)) {
	                  r = t;
	                  break;
	                }
	              }

	              dp += 4;
	              s += 4;
	              rep = 1;
	            } else {

	              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	              // result. If not, then there are further digits and m will be truthy.
	              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	                // Truncate to the first rounding digit.
	                round(r, r.e + DECIMAL_PLACES + 2, 1);
	                m = !r.times(r).eq(x);
	              }

	              break;
	            }
	          }
	        }
	      }

	      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in exponential notation and
	     * rounded using ROUNDING_MODE to dp fixed decimal places.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toExponential = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp++;
	      }
	      return format(this, dp, rm, 1);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounding
	     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	     * but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toFixed = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp = dp + this.e + 1;
	      }
	      return format(this, dp, rm);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounded
	     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	     * of the format or FORMAT object (see BigNumber.set).
	     *
	     * The formatting object may contain some or all of the properties shown below.
	     *
	     * FORMAT = {
	     *   prefix: '',
	     *   groupSize: 3,
	     *   secondaryGroupSize: 0,
	     *   groupSeparator: ',',
	     *   decimalSeparator: '.',
	     *   fractionGroupSize: 0,
	     *   fractionGroupSeparator: '\xA0',      // non-breaking space
	     *   suffix: ''
	     * };
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     * [format] {object} Formatting options. See FORMAT pbject above.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     * '[BigNumber Error] Argument not an object: {format}'
	     */
	    P.toFormat = function (dp, rm, format) {
	      var str,
	        x = this;

	      if (format == null) {
	        if (dp != null && rm && typeof rm == 'object') {
	          format = rm;
	          rm = null;
	        } else if (dp && typeof dp == 'object') {
	          format = dp;
	          dp = rm = null;
	        } else {
	          format = FORMAT;
	        }
	      } else if (typeof format != 'object') {
	        throw Error
	          (bignumberError + 'Argument not an object: ' + format);
	      }

	      str = x.toFixed(dp, rm);

	      if (x.c) {
	        var i,
	          arr = str.split('.'),
	          g1 = +format.groupSize,
	          g2 = +format.secondaryGroupSize,
	          groupSeparator = format.groupSeparator || '',
	          intPart = arr[0],
	          fractionPart = arr[1],
	          isNeg = x.s < 0,
	          intDigits = isNeg ? intPart.slice(1) : intPart,
	          len = intDigits.length;

	        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	        if (g1 > 0 && len > 0) {
	          i = len % g1 || g1;
	          intPart = intDigits.substr(0, i);
	          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
	          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
	          if (isNeg) intPart = '-' + intPart;
	        }

	        str = fractionPart
	         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
	          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
	           '$&' + (format.fractionGroupSeparator || ''))
	          : fractionPart)
	         : intPart;
	      }

	      return (format.prefix || '') + str + (format.suffix || '');
	    };


	    /*
	     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
	     * fraction with an integer numerator and an integer denominator.
	     * The denominator will be a positive non-zero value less than or equal to the specified
	     * maximum denominator. If a maximum denominator is not specified, the denominator will be
	     * the lowest value necessary to represent the number exactly.
	     *
	     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
	     *
	     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
	     */
	    P.toFraction = function (md) {
	      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
	        x = this,
	        xc = x.c;

	      if (md != null) {
	        n = new BigNumber(md);

	        // Throw if md is less than one or is not an integer, unless it is Infinity.
	        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
	          throw Error
	            (bignumberError + 'Argument ' +
	              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
	        }
	      }

	      if (!xc) return new BigNumber(x);

	      d = new BigNumber(ONE);
	      n1 = d0 = new BigNumber(ONE);
	      d1 = n0 = new BigNumber(ONE);
	      s = coeffToString(xc);

	      // Determine initial denominator.
	      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	      e = d.e = s.length - x.e - 1;
	      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
	      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

	      exp = MAX_EXP;
	      MAX_EXP = 1 / 0;
	      n = new BigNumber(s);

	      // n0 = d1 = 0
	      n0.c[0] = 0;

	      for (; ;)  {
	        q = div(n, d, 0, 1);
	        d2 = d0.plus(q.times(d1));
	        if (d2.comparedTo(md) == 1) break;
	        d0 = d1;
	        d1 = d2;
	        n1 = n0.plus(q.times(d2 = n1));
	        n0 = d2;
	        d = n.minus(q.times(d2 = d));
	        n = d2;
	      }

	      d2 = div(md.minus(d0), d1, 0, 1);
	      n0 = n0.plus(d2.times(n1));
	      d0 = d0.plus(d2.times(d1));
	      n0.s = n1.s = x.s;
	      e = e * 2;

	      // Determine which fraction is closer to x, n0/d0 or n1/d1
	      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
	          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

	      MAX_EXP = exp;

	      return r;
	    };


	    /*
	     * Return the value of this BigNumber converted to a number primitive.
	     */
	    P.toNumber = function () {
	      return +valueOf(this);
	    };


	    /*
	     * Return a string representing the value of this BigNumber rounded to sd significant digits
	     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	     * necessary to represent the integer part of the value in fixed-point notation, then use
	     * exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.toPrecision = function (sd, rm) {
	      if (sd != null) intCheck(sd, 1, MAX);
	      return format(this, sd, rm, 2);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	     * TO_EXP_NEG, return exponential notation.
	     *
	     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
	     *
	     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	     */
	    P.toString = function (b) {
	      var str,
	        n = this,
	        s = n.s,
	        e = n.e;

	      // Infinity or NaN?
	      if (e === null) {
	        if (s) {
	          str = 'Infinity';
	          if (s < 0) str = '-' + str;
	        } else {
	          str = 'NaN';
	        }
	      } else {
	        if (b == null) {
	          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	           ? toExponential(coeffToString(n.c), e)
	           : toFixedPoint(coeffToString(n.c), e, '0');
	        } else if (b === 10) {
	          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
	          str = toFixedPoint(coeffToString(n.c), n.e, '0');
	        } else {
	          intCheck(b, 2, ALPHABET.length, 'Base');
	          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
	        }

	        if (s < 0 && n.c[0]) str = '-' + str;
	      }

	      return str;
	    };


	    /*
	     * Return as toString, but do not accept a base argument, and include the minus sign for
	     * negative zero.
	     */
	    P.valueOf = P.toJSON = function () {
	      return valueOf(this);
	    };


	    P._isBigNumber = true;

	    if (configObject != null) BigNumber.set(configObject);

	    return BigNumber;
	  }


	  // PRIVATE HELPER FUNCTIONS

	  // These functions don't need access to variables,
	  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


	  function bitFloor(n) {
	    var i = n | 0;
	    return n > 0 || n === i ? i : i - 1;
	  }


	  // Return a coefficient array as a string of base 10 digits.
	  function coeffToString(a) {
	    var s, z,
	      i = 1,
	      j = a.length,
	      r = a[0] + '';

	    for (; i < j;) {
	      s = a[i++] + '';
	      z = LOG_BASE - s.length;
	      for (; z--; s = '0' + s);
	      r += s;
	    }

	    // Determine trailing zeros.
	    for (j = r.length; r.charCodeAt(--j) === 48;);

	    return r.slice(0, j + 1 || 1);
	  }


	  // Compare the value of BigNumbers x and y.
	  function compare(x, y) {
	    var a, b,
	      xc = x.c,
	      yc = y.c,
	      i = x.s,
	      j = y.s,
	      k = x.e,
	      l = y.e;

	    // Either NaN?
	    if (!i || !j) return null;

	    a = xc && !xc[0];
	    b = yc && !yc[0];

	    // Either zero?
	    if (a || b) return a ? b ? 0 : -j : i;

	    // Signs differ?
	    if (i != j) return i;

	    a = i < 0;
	    b = k == l;

	    // Either Infinity?
	    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

	    // Compare exponents.
	    if (!b) return k > l ^ a ? 1 : -1;

	    j = (k = xc.length) < (l = yc.length) ? k : l;

	    // Compare digit by digit.
	    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

	    // Compare lengths.
	    return k == l ? 0 : k > l ^ a ? 1 : -1;
	  }


	  /*
	   * Check that n is a primitive number, an integer, and in range, otherwise throw.
	   */
	  function intCheck(n, min, max, name) {
	    if (n < min || n > max || n !== mathfloor(n)) {
	      throw Error
	       (bignumberError + (name || 'Argument') + (typeof n == 'number'
	         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
	         : ' not a primitive number: ') + String(n));
	    }
	  }


	  // Assumes finite n.
	  function isOdd(n) {
	    var k = n.c.length - 1;
	    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
	  }


	  function toExponential(str, e) {
	    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
	     (e < 0 ? 'e' : 'e+') + e;
	  }


	  function toFixedPoint(str, e, z) {
	    var len, zs;

	    // Negative exponent?
	    if (e < 0) {

	      // Prepend zeros.
	      for (zs = z + '.'; ++e; zs += z);
	      str = zs + str;

	    // Positive exponent
	    } else {
	      len = str.length;

	      // Append zeros.
	      if (++e > len) {
	        for (zs = z, e -= len; --e; zs += z);
	        str += zs;
	      } else if (e < len) {
	        str = str.slice(0, e) + '.' + str.slice(e);
	      }
	    }

	    return str;
	  }


	  // EXPORT


	  BigNumber = clone();
	  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

	  // AMD.
	  if ( module.exports) {
	    module.exports = BigNumber;

	  // Browser.
	  } else {
	    if (!globalObject) {
	      globalObject = typeof self != 'undefined' && self ? self : window;
	    }

	    globalObject.BigNumber = BigNumber;
	  }
	})(commonjsGlobal);
	});

	var nanoConverter = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var bignumber_js_1 = __importDefault(bignumber);
	var NanoConverter = /** @class */ (function () {
	    function NanoConverter() {
	    }
	    /**
	     * Converts the input value to the wanted unit
	     *
	     * @param input {string | BigNumber} value
	     * @param inputUnit {string} the unit to convert from
	     * @param outputUnit {string} the unit to convert to
	     */
	    NanoConverter.convert = function (input, inputUnit, outputUnit) {
	        var value = new bignumber_js_1.default(input.toString());
	        switch (inputUnit) {
	            case 'RAW':
	                value = value;
	                break;
	            case 'NANO':
	            case 'MRAI':
	                value = value.shiftedBy(30);
	                break;
	            case 'KRAI':
	                value = value.shiftedBy(27);
	                break;
	            case 'RAI':
	                value = value.shiftedBy(24);
	                break;
	            default:
	                throw new Error("Unkown input unit " + inputUnit + ", expected one of the following: RAW, NANO, MRAI, KRAI, RAI");
	        }
	        switch (outputUnit) {
	            case 'RAW':
	                return value.toFixed(0);
	            case 'NANO':
	            case 'MRAI':
	                return value.shiftedBy(-30).toFixed(30, 1);
	            case 'KRAI':
	                return value.shiftedBy(-27).toFixed(27, 1);
	            case 'RAI':
	                return value.shiftedBy(-24).toFixed(24, 1);
	            default:
	                throw new Error("Unknown output unit " + outputUnit + ", expected one of the following: RAW, NANO, MRAI, KRAI, RAI");
	        }
	    };
	    return NanoConverter;
	}());
	exports.default = NanoConverter;
	});

	var blockSigner = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var bignumber_js_1 = __importDefault(bignumber);
	//@ts-ignore

	var ed25519_1 = __importDefault(ed25519);
	var nano_address_1 = __importDefault(nanoAddress);
	var nano_converter_1 = __importDefault(nanoConverter);
	var signer_1 = __importDefault(signer);
	var convert_1 = __importDefault(convert);
	var BlockSigner = /** @class */ (function () {
	    function BlockSigner() {
	        this.nanoAddress = new nano_address_1.default();
	        this.ed25519 = new ed25519_1.default();
	        this.signer = new signer_1.default();
	        this.preamble = 0x6.toString().padStart(64, '0');
	    }
	    /**
	     * Sign a receive block
	     *
	     * @param {ReceiveBlock} data The data required to sign a receive block
	     * @param {string} privateKey Private key to sign the data with
	     * @returns {SignedBlock} the signed block to publish to the blockchain
	     */
	    BlockSigner.prototype.receive = function (data, privateKey) {
	        var validateInputRaw = function (input) { return !!input && !isNaN(+input); };
	        if (!validateInputRaw(data.walletBalanceRaw)) {
	            throw new Error('Invalid format in wallet balance');
	        }
	        if (!validateInputRaw(data.amountRaw)) {
	            throw new Error('Invalid format in send amount');
	        }
	        if (!this.nanoAddress.validateNanoAddress(data.toAddress)) {
	            throw new Error('Invalid toAddress');
	        }
	        if (!this.nanoAddress.validateNanoAddress(data.representativeAddress)) {
	            throw new Error('Invalid representativeAddress');
	        }
	        if (!data.transactionHash) {
	            throw new Error('No transaction hash');
	        }
	        if (!data.frontier) {
	            throw new Error('No frontier');
	        }
	        if (!data.work) {
	            throw new Error('No work');
	        }
	        if (!privateKey) {
	            throw new Error('Please input the private key to sign the block');
	        }
	        var balanceNano = nano_converter_1.default.convert(data.walletBalanceRaw, 'RAW', 'NANO');
	        var amountNano = nano_converter_1.default.convert(data.amountRaw, 'RAW', 'NANO');
	        var newBalanceNano = new bignumber_js_1.default(balanceNano).plus(new bignumber_js_1.default(amountNano));
	        var newBalanceRaw = nano_converter_1.default.convert(newBalanceNano, 'NANO', 'RAW');
	        var newBalanceHex = convert_1.default.dec2hex(newBalanceRaw, 16).toUpperCase();
	        var account = this.nanoAddressToHexString(data.toAddress);
	        var link = data.transactionHash;
	        var representative = this.nanoAddressToHexString(data.representativeAddress);
	        var signature = this.signer.sign(privateKey, this.preamble, account, data.frontier, representative, newBalanceHex, link);
	        return {
	            type: 'state',
	            account: data.toAddress,
	            previous: data.frontier,
	            representative: data.representativeAddress,
	            balance: newBalanceRaw,
	            link: link,
	            signature: signature,
	            work: data.work,
	        };
	    };
	    /**
	     * Sign a send block
	     *
	     * @param {SendBlock} data The data required to sign a send block
	     * @param {string} privateKey Private key to sign the data with
	     * @returns {SignedBlock} the signed block to publish to the blockchain
	     */
	    BlockSigner.prototype.send = function (data, privateKey) {
	        var validateInputRaw = function (input) { return !!input && !isNaN(+input); };
	        if (!validateInputRaw(data.walletBalanceRaw)) {
	            throw new Error('Invalid format in wallet balance');
	        }
	        if (!validateInputRaw(data.amountRaw)) {
	            throw new Error('Invalid format in send amount');
	        }
	        if (!this.nanoAddress.validateNanoAddress(data.toAddress)) {
	            throw new Error('Invalid toAddress');
	        }
	        if (!this.nanoAddress.validateNanoAddress(data.fromAddress)) {
	            throw new Error('Invalid fromAddress');
	        }
	        if (!this.nanoAddress.validateNanoAddress(data.representativeAddress)) {
	            throw new Error('Invalid representativeAddress');
	        }
	        if (!data.frontier) {
	            throw new Error('Frontier is not set');
	        }
	        if (!data.work) {
	            throw new Error('Work is not set');
	        }
	        if (!privateKey) {
	            throw new Error('Please input the private key to sign the block');
	        }
	        var balanceNano = nano_converter_1.default.convert(data.walletBalanceRaw, 'RAW', 'NANO');
	        var amountNano = nano_converter_1.default.convert(data.amountRaw, 'RAW', 'NANO');
	        var newBalanceNano = new bignumber_js_1.default(balanceNano).minus(new bignumber_js_1.default(amountNano));
	        var newBalanceRaw = nano_converter_1.default.convert(newBalanceNano, 'NANO', 'RAW');
	        var newBalanceHex = convert_1.default.dec2hex(newBalanceRaw, 16).toUpperCase();
	        var account = this.nanoAddressToHexString(data.fromAddress);
	        var link = this.nanoAddressToHexString(data.toAddress);
	        var representative = this.nanoAddressToHexString(data.representativeAddress);
	        var signature = this.signer.sign(privateKey, this.preamble, account, data.frontier, representative, newBalanceHex, link);
	        return {
	            type: 'state',
	            account: data.fromAddress,
	            previous: data.frontier,
	            representative: data.representativeAddress,
	            balance: newBalanceRaw,
	            link: link,
	            signature: signature,
	            work: data.work,
	        };
	    };
	    BlockSigner.prototype.nanoAddressToHexString = function (addr) {
	        addr = addr.slice(-60);
	        var isValid = /^[13456789abcdefghijkmnopqrstuwxyz]+$/.test(addr);
	        if (isValid) {
	            var keyBytes = this.nanoAddress.decodeNanoBase32(addr.substring(0, 52));
	            var hashBytes = this.nanoAddress.decodeNanoBase32(addr.substring(52, 60));
	            var blakeHash = blakejs.blake2b(keyBytes, undefined, 5).reverse();
	            if (convert_1.default.ab2hex(hashBytes) == convert_1.default.ab2hex(blakeHash)) {
	                var key = convert_1.default.ab2hex(keyBytes).toUpperCase();
	                return key;
	            }
	            throw new Error('Checksum mismatch in address');
	        }
	        else {
	            throw new Error('Illegal characters in address');
	        }
	    };
	    return BlockSigner;
	}());
	exports.default = BlockSigner;
	});

	var dist = createCommonjsModule(function (module, exports) {
	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __spread = (commonjsGlobal && commonjsGlobal.__spread) || function () {
	    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
	    return ar;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var address_generator_1 = __importDefault(addressGenerator);
	var address_importer_1 = __importDefault(addressImporter);
	var block_signer_1 = __importDefault(blockSigner);
	var nano_address_1 = __importDefault(nanoAddress);
	var nano_converter_1 = __importDefault(nanoConverter);
	var signer_1 = __importDefault(signer);
	var convert_1 = __importDefault(convert);
	var nanoAddress$1 = new nano_address_1.default();
	var generator = new address_generator_1.default();
	var importer = new address_importer_1.default();
	var signer$1 = new signer_1.default();
	var wallet = {
	    /**
	     * Generate a new Nano cryptocurrency wallet
	     *
	     * This function generates a wallet from random entropy. Wallet includes
	     * a BIP39 mnemonic phrase in line with the Nano Ledger implementation and
	     * a seed, the account is derived using BIP32 deterministic hierarchial algorithm
	     * with input parameters 44'/165' and index 0.
	     *
	     * The Nano address is derived from the public key using standard Nano encoding.
	     * The address is prefixed with 'nano_'.
	     *
	     * Generation uses CryptoJS to generate random entropy by default. You can give your own entropy
	     * as a parameter and it will be used instead.
	     *
	     * An optional seed password can be used to encrypt the mnemonic phrase so the seed
	     * cannot be derived correctly without the password. Recovering the password is not possible.
	     *
	     * @param {string} [entropy] - (Optional) 64 byte hexadecimal string entropy to be used instead of the default
	     * @param {string} [seedPassword] - (Optional) seed password
	     * @returns the generated mnemonic, seed and account
	     */
	    generate: function (entropy, seedPassword) {
	        return generator.generateWallet(entropy, seedPassword);
	    },
	    /**
	     * Generate a new Nano cryptocurrency wallet
	     *
	     * This function generates a legacy wallet from a random seed. Wallet includes
	     * a mnemonic phrase and a seed, the account is derived from the seed at index 0.
	     *
	     * The Nano address is derived from the public key using standard Nano encoding.
	     * The address is prefixed with 'nano_'.
	     *
	     * Generation uses CryptoJS to generate random seed by default. You can give your own seed
	     * as a parameter and it will be used instead.
	     *
	     * @param {string} [seed] - (Optional) 64 byte hexadecimal string seed to be used instead of generating
	     * @returns the generated mnemonic, seed and account
	     */
	    generateLegacy: function (seed) {
	        return generator.generateLegacyWallet(seed);
	    },
	    /**
	     * Import a Nano cryptocurrency wallet from a mnemonic phrase
	     *
	     * This function imports a wallet from a mnemonic phrase. Wallet includes the mnemonic phrase,
	     * a seed derived with BIP39 standard and an account derived using BIP32 deterministic hierarchial
	     * algorithm with input parameters 44'/165' and index 0.
	     *
	     * The Nano address is derived from the public key using standard Nano encoding.
	     * The address is prefixed with 'nano_'.
	     *
	     * @param {string} mnemonic - The mnemonic phrase. Words are separated with a space
	     * @param {string} [seedPassword] - (Optional) seed password
	     * @throws Throws an error if the mnemonic phrase doesn't pass validations
	     * @returns the wallet derived from the mnemonic (mnemonic, seed, account)
	     */
	    fromMnemonic: function (mnemonic, seedPassword) {
	        return importer.fromMnemonic(mnemonic, seedPassword);
	    },
	    /**
	     * Import a Nano cryptocurrency wallet from a legacy mnemonic phrase
	     *
	     * This function imports a wallet from an old Nano mnemonic phrase. Wallet includes the mnemonic
	     * phrase, a seed which represents the mnemonic and an account derived from the seed at index 0.
	     *
	     * The Nano address is derived from the public key using standard Nano encoding.
	     * The address is prefixed with 'nano_'.
	     *
	     * @param {string} mnemonic - The mnemonic phrase. Words are separated with a space
	     * @throws Throws an error if the mnemonic phrase doesn't pass validations
	     * @returns the wallet derived from the mnemonic (mnemonic, seed, account)
	     */
	    fromLegacyMnemonic: function (mnemonic) {
	        return importer.fromLegacyMnemonic(mnemonic);
	    },
	    /**
	     * Import a Nano cryptocurrency wallet from a seed
	     *
	     * This function imports a wallet from a seed. Wallet includes the seed and an account derived using
	     * BIP39 standard and an account derived using BIP32 deterministic hierarchial algorithm with input
	     * parameters 44'/165' and index 0.
	     *
	     * The Nano address is derived from the public key using standard Nano encoding.
	     * The address is prefixed with 'nano_'.
	     *
	     * @param {string} seed - The seed
	     * @returns {Wallet} the wallet derived from the seed (seed, account)
	     */
	    fromSeed: function (seed) {
	        return importer.fromSeed(seed);
	    },
	    /**
	     * Import Nano cryptocurrency accounts from a legacy hex seed
	     *
	     * This function imports a wallet from a seed. The private key is derived from the seed using
	     * simply a blake2b hash function. The public key is derived from the private key using the ed25519 curve
	     * algorithm.
	     *
	     * The Nano address is derived from the public key using standard Nano encoding.
	     * The address is prefixed with 'nano_'.
	     *
	     * @param {string} seed - The seed
	     * @returns the wallet derived from the seed (seed, account)
	     *
	     */
	    fromLegacySeed: function (seed) {
	        return importer.fromLegacySeed(seed);
	    },
	    /**
	     * Derive accounts for the seed
	     *
	     * This function derives Nano accounts with the BIP32 deterministic hierarchial algorithm
	     * from the given seed with input parameters 44'/165' and indexes based on the from and to
	     * parameters.
	     *
	     * @param {string} seed - The seed
	     * @param {number} from - The start index
	     * @param {number} to - The end index
	     */
	    accounts: function (seed, from, to) {
	        return importer.fromSeed(seed, from, to).accounts;
	    },
	    /**
	     * Derive accounts for the legacy hex seed
	     *
	     * This function derives Nano accounts with the given seed with indexes
	     * based on the from and to parameters.
	     *
	     * @param {string} seed - The seed
	     * @param {number} from - The start index
	     * @param {number} to - The end index
	     */
	    legacyAccounts: function (seed, from, to) {
	        return importer.fromLegacySeed(seed, from, to).accounts;
	    },
	};
	exports.wallet = wallet;
	var blockSigner$1 = new block_signer_1.default();
	var block = {
	    /**
	     * Sign a send block with the input parameters
	     *
	     * For a send block, put your own address to the 'fromAddress' property and
	     * the recipient address to the 'toAddress' property.
	     * All the NANO amounts should be input in RAW format. The addresses should be
	     * valid Nano addresses. Fetch the current balance, frontier (previous block) and
	     * representative address from the blockchain and generate work for the signature.
	     *
	     * The return value of this function is ready to be published to the blockchain.
	     *
	     * NOTICE: Always fetch up-to-date account info from the blockchain
	     *         before signing the block
	     *
	     * @param {SendBlock} data The data for the block
	     * @param {string} privateKey Private key to sign the block
	     */
	    send: function (data, privateKey) {
	        return blockSigner$1.send(data, privateKey);
	    },
	    /**
	     * Sign a receive block with the input parameters
	     *
	     * For a receive block, put your own address to the 'toAddress' property.
	     * All the NANO amounts should be input in RAW format. The addresses should be
	     * valid Nano addresses. Fetch the current balance, frontier (previous block) and
	     * representative address from the blockchain and generate work for the signature.
	     * Input the receive amount and transaction hash from the pending block.
	     *
	     * The return value of this function is ready to be published to the blockchain.
	     *
	     * NOTICE: Always fetch up-to-date account info from the blockchain
	     *         before signing the block
	     *
	     * @param {ReceiveBlock} data The data for the block
	     * @param {string} privateKey Private key to sign the block
	     */
	    receive: function (data, privateKey) {
	        return blockSigner$1.receive(data, privateKey);
	    },
	    /**
	     * Sign a representative change block with the input parameters
	     *
	     * For a change block, put your own address to the 'address' property.
	     * All the NANO amounts should be input in RAW format. The addresses should be
	     * valid Nano addresses. Fetch the current balance, previous block from the
	     * blockchain and generate work for the signature. Set the new representative address
	     * as the representative.
	     *
	     * NOTICE: Always fetch up-to-date account info from the blockchain
	     *         before signing the block
	     *
	     * @param {RepresentativeBlock} data The data for the block
	     * @param {string} privateKey Private key to sign the block
	     *
	     */
	    representative: function (data, privateKey) {
	        var block = __assign(__assign({}, data), { fromAddress: data.address, amountRaw: '0', toAddress: 'nano_1111111111111111111111111111111111111111111111111111hifc8npp' });
	        return blockSigner$1.send(block, privateKey);
	    },
	};
	exports.block = block;
	var tools = {
	    /**
	     * Convert Nano values
	     *
	     * Possible units are RAW, NANO, MRAI, KRAI, RAI
	     *
	     * @param {string | BigNumber} input The input value
	     * @param {string} inputUnit The unit of the input value
	     * @param {string} outputUnit The unit you wish to convert to
	     */
	    convert: function (input, inputUnit, outputUnit) {
	        return nano_converter_1.default.convert(input, inputUnit, outputUnit);
	    },
	    /**
	     * Sign any strings with the user's private key
	     *
	     * @param {string} privateKey The private key to sign with
	     * @param {...string} input Data to sign
	     */
	    sign: function (privateKey) {
	        var input = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            input[_i - 1] = arguments[_i];
	        }
	        var data = input.map(convert_1.default.stringToHex);
	        return signer$1.sign.apply(signer$1, __spread([privateKey], data));
	    },
	    /**
	     * Validate a Nano address
	     *
	     * @param {string} input The address to validate
	     */
	    validateAddress: function (input) {
	        return nanoAddress$1.validateNanoAddress(input);
	    },
	    /**
	     * Validate mnemonic words
	     *
	     * @param {string} input The address to validate
	     */
	    validateMnemonic: function (input) {
	        return importer.validateMnemonic(input);
	    },
	};
	exports.tools = tools;
	});

	var BIP39_SEED_LENGTH = 128;
	var NANO_SEED_LENGTH = 64; // Wraps BIP39 and legacy fromSeed

	function fromSeed(seed) {
	  return seed.length === BIP39_SEED_LENGTH ? dist.wallet.fromSeed(seed) : dist.wallet.fromLegacySeed(seed);
	} // Wraps BIP39 and legacy accounts


	function accounts(seed // eslint-disable-next-line no-unused-vars
	) {
	  return seed.length === BIP39_SEED_LENGTH ? dist.wallet.accounts : dist.wallet.legacyAccounts;
	}

	function generateWallet() {
	  return new Promise(function (resolve) {
	    setTimeout(function () {
	      var w = dist.wallet.generateLegacy(undefined);
	      resolve({
	        seed: w.seed,
	        mnemonic: w.mnemonic
	      });
	    }, 0);
	  });
	}
	function importWalletFromSeed(seed) {
	  return new Promise(function (resolve, error) {
	    setTimeout(function () {
	      try {
	        var w = fromSeed(seed);
	        resolve({
	          seed: w.seed,
	          mnemonic: w.mnemonic
	        });
	      } catch (e) {
	        error();
	      }
	    }, 0);
	  });
	}
	function createWallet(_x, _x2, _x3) {
	  return _createWallet.apply(this, arguments);
	}

	function _createWallet() {
	  _createWallet = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(walletData, encryptionSecret, alias) {
	    var nanoWallet;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            nanoWallet = {
	              seed: walletData.seed,
	              encryptionSecret: encryptionSecret,
	              accounts: [{
	                alias: alias,
	                address: undefined,
	                privateKey: undefined,
	                publicKey: undefined,
	                balance: undefined
	              }]
	            };
	            _context.next = 3;
	            return deleteStore();

	          case 3:
	            return _context.abrupt("return", setWallet(nanoWallet));

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _createWallet.apply(this, arguments);
	}

	function addNanoAccount(_x4) {
	  return _addNanoAccount.apply(this, arguments);
	}

	function _addNanoAccount() {
	  _addNanoAccount = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(walletData) {
	    var next, nextAccount, updatedNanoWallet;
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            next = walletData.accounts.length;
	            nextAccount = accounts(walletData.seed)(walletData.seed, 0, next)[next];
	            updatedNanoWallet = {
	              seed: walletData.seed,
	              encryptionSecret: walletData.encryptionSecret,
	              accounts: [].concat(toConsumableArray(walletData.accounts), [{
	                address: nextAccount.address,
	                alias: undefined,
	                privateKey: nextAccount.privateKey,
	                publicKey: nextAccount.publicKey,
	                balance: undefined
	              }])
	            };
	            return _context2.abrupt("return", setWallet(updatedNanoWallet));

	          case 4:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _addNanoAccount.apply(this, arguments);
	}

	function walletDataToWallet(walletData, encryptionSecret) {
	  var addresses = accounts(walletData.seed)(walletData.seed, 0, walletData.aliases.length - 1);
	  return {
	    seed: walletData.seed,
	    encryptionSecret: encryptionSecret,
	    accounts: addresses.map(function (address, i) {
	      return {
	        alias: walletData.aliases[i],
	        address: address.address,
	        privateKey: address.privateKey,
	        publicKey: address.publicKey,
	        balance: undefined
	      };
	    })
	  };
	}

	var APP_STORE = 'kaios_nano';
	var WALLET_KEY = 'wallet';
	var MOBILE_NUMBER_KEY = 'mobile_number';
	var securePhase;

	function walletToWalletData(wallet) {
	  return {
	    seed: wallet.seed,
	    aliases: wallet.accounts.map(function (account) {
	      return account.alias;
	    })
	  };
	}

	function setWallet(_x) {
	  return _setWallet.apply(this, arguments);
	}

	function _setWallet() {
	  _setWallet = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(wallet) {
	    var store;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.prev = 0;
	            store = new secureWebstore.Store(APP_STORE, wallet.encryptionSecret);
	            _context.next = 4;
	            return store.init();

	          case 4:
	            _context.next = 6;
	            return store.set(WALLET_KEY, walletToWalletData(wallet));

	          case 6:
	            console.log('Read wallet data', wallet);
	            return _context.abrupt("return", wallet);

	          case 10:
	            _context.prev = 10;
	            _context.t0 = _context["catch"](0);
	            console.log(_context.t0);
	            return _context.abrupt("return", undefined);

	          case 14:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, null, [[0, 10]]);
	  }));
	  return _setWallet.apply(this, arguments);
	}

	function setMobileNumber(_x2) {
	  return _setMobileNumber.apply(this, arguments);
	}

	function _setMobileNumber() {
	  _setMobileNumber = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(mobileNumber) {
	    var store;
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            console.log('Secure phase when setting number', securePhase);
	            store = new secureWebstore.Store(APP_STORE, securePhase);
	            _context2.next = 4;
	            return store.init();

	          case 4:
	            _context2.next = 6;
	            return store.set(MOBILE_NUMBER_KEY, mobileNumber);

	          case 6:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _setMobileNumber.apply(this, arguments);
	}

	function getMobileNumber(_x3) {
	  return _getMobileNumber.apply(this, arguments);
	}

	function _getMobileNumber() {
	  _getMobileNumber = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(encryptionSecret) {
	    var store, mobileNumber;
	    return regenerator.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            store = new secureWebstore.Store(APP_STORE, encryptionSecret);
	            _context3.next = 3;
	            return store.init();

	          case 3:
	            _context3.prev = 3;
	            _context3.next = 6;
	            return store.get(MOBILE_NUMBER_KEY);

	          case 6:
	            mobileNumber = _context3.sent;
	            securePhase = encryptionSecret;
	            return _context3.abrupt("return", mobileNumber);

	          case 11:
	            _context3.prev = 11;
	            _context3.t0 = _context3["catch"](3);
	            return _context3.abrupt("return", undefined);

	          case 14:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3, null, [[3, 11]]);
	  }));
	  return _getMobileNumber.apply(this, arguments);
	}

	function deleteStore() {
	  return _deleteStore.apply(this, arguments);
	}

	function _deleteStore() {
	  _deleteStore = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
	    var store;
	    return regenerator.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            store = new secureWebstore._idb.Store(APP_STORE, APP_STORE);
	            _context4.next = 3;
	            return secureWebstore._idb.clear(store);

	          case 3:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4);
	  }));
	  return _deleteStore.apply(this, arguments);
	}

	function walletExists() {
	  return _walletExists.apply(this, arguments);
	}

	function _walletExists() {
	  _walletExists = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
	    var store, keys;
	    return regenerator.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            store = new secureWebstore._idb.Store(APP_STORE, APP_STORE);
	            _context5.next = 3;
	            return secureWebstore._idb.keys(store);

	          case 3:
	            keys = _context5.sent;
	            return _context5.abrupt("return", keys.length > 0);

	          case 5:
	          case "end":
	            return _context5.stop();
	        }
	      }
	    }, _callee5);
	  }));
	  return _walletExists.apply(this, arguments);
	}

	function unlockWallet(_x4) {
	  return _unlockWallet.apply(this, arguments);
	}

	function _unlockWallet() {
	  _unlockWallet = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(encryptionSecret) {
	    var store, data;
	    return regenerator.wrap(function _callee6$(_context6) {
	      while (1) {
	        switch (_context6.prev = _context6.next) {
	          case 0:
	            _context6.prev = 0;
	            store = new secureWebstore.Store(APP_STORE, encryptionSecret);
	            _context6.next = 4;
	            return store.init();

	          case 4:
	            _context6.next = 6;
	            return store.get(WALLET_KEY);

	          case 6:
	            data = _context6.sent;
	            console.log('Wallet data during unlock', data);

	            if (!(data.seed && data.aliases)) {
	              _context6.next = 12;
	              break;
	            }

	            return _context6.abrupt("return", walletDataToWallet(data, encryptionSecret));

	          case 12:
	            return _context6.abrupt("return", undefined);

	          case 13:
	            _context6.next = 19;
	            break;

	          case 15:
	            _context6.prev = 15;
	            _context6.t0 = _context6["catch"](0);
	            console.log(_context6.t0);
	            return _context6.abrupt("return", undefined);

	          case 19:
	          case "end":
	            return _context6.stop();
	        }
	      }
	    }, _callee6, null, [[0, 15]]);
	  }));
	  return _unlockWallet.apply(this, arguments);
	}

	var navigation = new Navigation([]);
	var middleKey = undefined;
	var leftKey = undefined;
	var rightKey = undefined;
	var stack = new NavigationStack();
	/** Asking for permissions blurs / focuses screen, we need to ignore on those events */

	function ignoreOnCameraBlur() {
	  var current = stack.peek();
	  return current !== undefined; // any screen other than splash screen
	  // return current?.menu === 'account' && current?.accountAction === 'send_qr';
	}
	var loadStartScreen = /*#__PURE__*/function () {
	  var _ref = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	    var exists;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return walletExists();

	          case 2:
	            exists = _context.sent;

	            if (exists) {
	              pushMenu('unlock');
	            } else {
	              pushMenu('onboard');
	            }

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function loadStartScreen() {
	    return _ref.apply(this, arguments);
	  };
	}();
	var navigationReload = function navigationReload() {
	  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
	  var elements = Array.from(document.getElementsByClassName('navigation'));
	  document.removeEventListener('keydown', handleKeydown);
	  navigation = new Navigation(elements);
	  document.addEventListener('keydown', handleKeydown);
	  navigation.focus();
	  value ? setSoftwareKeys(value) : setSoftwareKeys({});
	}; // TODO: Instead of subscribing, we could click DOM elements

	softwareKeysStore.subscribe(function (value) {
	  var _a, _b, _c;

	  leftKey = value.leftKey && value.leftKey.disabled !== true ? (_a = value.leftKey) === null || _a === void 0 ? void 0 : _a.onClick : undefined;
	  middleKey = value.middleKey && value.middleKey.disabled !== true ? (_b = value.middleKey) === null || _b === void 0 ? void 0 : _b.onClick : undefined;
	  rightKey = value.rightKey && value.rightKey.disabled !== true ? (_c = value.rightKey) === null || _c === void 0 ? void 0 : _c.onClick : undefined;
	});
	function reset() {
	  stack = new NavigationStack();
	}
	function back() {
	  var current = stack.peek();
	  if ((current === null || current === void 0 ? void 0 : current.menu) === 'unlock') return false;else if ((current === null || current === void 0 ? void 0 : current.menu) === 'onboard' && current.onboardState === undefined) return false;else return stack.pop() !== undefined;
	}
	function pushMenu(menu) {
	  stack.pushOn(function (current) {
	    return Object.assign(Object.assign({}, current), {
	      menu: menu,
	      onboardState: undefined
	    });
	  });
	}
	function pushAccountAction(action) {
	  stack.pushOn(function (current) {
	    return Object.assign(Object.assign({}, current), {
	      menu: 'account',
	      accountAction: action
	    });
	  });
	}
	function pushOnboardState(updated) {
	  stack.pushOn(function (current) {
	    return Object.assign(Object.assign({}, current), {
	      menu: 'onboard',
	      onboardState: updated
	    });
	  });
	}
	function pushSetupAction(action) {
	  stack.pushOn(function (current) {
	    return Object.assign(Object.assign({}, current), {
	      menu: 'setup',
	      setupAction: action
	    });
	  });
	}
	function pushState(state) {
	  stack.push(state);
	}
	function pushToast(state) {
	  toastStore.set(state);
	}
	function clickSelection() {
	  navigation.selection().click();
	}
	function handleKeydown(_x) {
	  return _handleKeydown.apply(this, arguments);
	}

	function _handleKeydown() {
	  _handleKeydown = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(e) {
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.t0 = e.key;
	            _context2.next = _context2.t0 === 'ArrowUp' ? 3 : _context2.t0 === 'ArrowDown' ? 5 : _context2.t0 === 'ArrowRight' ? 7 : _context2.t0 === 'ArrowLeft' ? 14 : _context2.t0 === 'Backspace' ? 20 : _context2.t0 === 'Enter' ? 26 : _context2.t0 === 'SoftLeft' ? 35 : _context2.t0 === 'SoftRight' ? 40 : 45;
	            break;

	          case 3:
	            if (navigation.up()) {
	              e.preventDefault();
	            }

	            return _context2.abrupt("break", 45);

	          case 5:
	            if (navigation.down()) {
	              e.preventDefault();
	            }

	            return _context2.abrupt("break", 45);

	          case 7:
	            if (!navigation.navigatesInInputField()) {
	              _context2.next = 11;
	              break;
	            }

	            return _context2.abrupt("break", 45);

	          case 11:
	            if (navigation.selection()) {
	              navigation.selection().click();
	            }

	          case 12:
	            e.preventDefault();
	            return _context2.abrupt("break", 45);

	          case 14:
	            if (!navigation.navigatesInInputField()) {
	              _context2.next = 18;
	              break;
	            }

	            return _context2.abrupt("break", 45);

	          case 18:
	            if (back()) {
	              e.preventDefault();
	            }

	          case 19:
	            return _context2.abrupt("break", 45);

	          case 20:
	            if (!navigation.preventBackspaceInInputField()) {
	              _context2.next = 24;
	              break;
	            }

	            return _context2.abrupt("break", 45);

	          case 24:
	            if (back()) {
	              e.preventDefault();
	            }

	          case 25:
	            return _context2.abrupt("break", 45);

	          case 26:
	            if (!navigation.isClickableElement()) {
	              _context2.next = 30;
	              break;
	            }

	            navigation.selection().click();
	            _context2.next = 33;
	            break;

	          case 30:
	            if (!middleKey) {
	              _context2.next = 33;
	              break;
	            }

	            _context2.next = 33;
	            return middleKey();

	          case 33:
	            e.preventDefault();
	            return _context2.abrupt("break", 45);

	          case 35:
	            if (!leftKey) {
	              _context2.next = 39;
	              break;
	            }

	            _context2.next = 38;
	            return leftKey();

	          case 38:
	            e.preventDefault();

	          case 39:
	            return _context2.abrupt("break", 45);

	          case 40:
	            if (!rightKey) {
	              _context2.next = 44;
	              break;
	            }

	            _context2.next = 43;
	            return rightKey();

	          case 43:
	            e.preventDefault();

	          case 44:
	            return _context2.abrupt("break", 45);

	          case 45:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _handleKeydown.apply(this, arguments);
	}

	var languageStore = writable(function () {
	  return undefined;
	});
	var getLanguage;
	languageStore.subscribe(function (value) {
	  getLanguage = value;
	});

	var bignumber$1 = createCommonjsModule(function (module) {
	(function (globalObject) {

	/*
	 *      bignumber.js v9.0.1
	 *      A JavaScript library for arbitrary-precision arithmetic.
	 *      https://github.com/MikeMcl/bignumber.js
	 *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
	 *      MIT Licensed.
	 *
	 *      BigNumber.prototype methods     |  BigNumber methods
	 *                                      |
	 *      absoluteValue            abs    |  clone
	 *      comparedTo                      |  config               set
	 *      decimalPlaces            dp     |      DECIMAL_PLACES
	 *      dividedBy                div    |      ROUNDING_MODE
	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
	 *      exponentiatedBy          pow    |      RANGE
	 *      integerValue                    |      CRYPTO
	 *      isEqualTo                eq     |      MODULO_MODE
	 *      isFinite                        |      POW_PRECISION
	 *      isGreaterThan            gt     |      FORMAT
	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
	 *      isInteger                       |  isBigNumber
	 *      isLessThan               lt     |  maximum              max
	 *      isLessThanOrEqualTo      lte    |  minimum              min
	 *      isNaN                           |  random
	 *      isNegative                      |  sum
	 *      isPositive                      |
	 *      isZero                          |
	 *      minus                           |
	 *      modulo                   mod    |
	 *      multipliedBy             times  |
	 *      negated                         |
	 *      plus                            |
	 *      precision                sd     |
	 *      shiftedBy                       |
	 *      squareRoot               sqrt   |
	 *      toExponential                   |
	 *      toFixed                         |
	 *      toFormat                        |
	 *      toFraction                      |
	 *      toJSON                          |
	 *      toNumber                        |
	 *      toPrecision                     |
	 *      toString                        |
	 *      valueOf                         |
	 *
	 */


	  var BigNumber,
	    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
	    mathceil = Math.ceil,
	    mathfloor = Math.floor,

	    bignumberError = '[BigNumber Error] ',
	    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

	    BASE = 1e14,
	    LOG_BASE = 14,
	    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	    SQRT_BASE = 1e7,

	    // EDITABLE
	    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
	    MAX = 1E9;                                   // 0 to MAX_INT32


	  /*
	   * Create and return a BigNumber constructor.
	   */
	  function clone(configObject) {
	    var div, convertBase, parseNumeric,
	      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
	      ONE = new BigNumber(1),


	      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


	      // The default values below must be integers within the inclusive ranges stated.
	      // The values can also be changed at run-time using BigNumber.set.

	      // The maximum number of decimal places for operations involving division.
	      DECIMAL_PLACES = 20,                     // 0 to MAX

	      // The rounding mode used when rounding to the above decimal places, and when using
	      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
	      // UP         0 Away from zero.
	      // DOWN       1 Towards zero.
	      // CEIL       2 Towards +Infinity.
	      // FLOOR      3 Towards -Infinity.
	      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      ROUNDING_MODE = 4,                       // 0 to 8

	      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	      // The exponent value at and beneath which toString returns exponential notation.
	      // Number type: -7
	      TO_EXP_NEG = -7,                         // 0 to -MAX

	      // The exponent value at and above which toString returns exponential notation.
	      // Number type: 21
	      TO_EXP_POS = 21,                         // 0 to MAX

	      // RANGE : [MIN_EXP, MAX_EXP]

	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // Number type: -324  (5e-324)
	      MIN_EXP = -1e7,                          // -1 to -MAX

	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // Number type:  308  (1.7976931348623157e+308)
	      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	      MAX_EXP = 1e7,                           // 1 to MAX

	      // Whether to use cryptographically-secure random number generation, if available.
	      CRYPTO = false,                          // true or false

	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP        0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN      1 The remainder has the same sign as the dividend.
	      //             This modulo mode is commonly known as 'truncated division' and is
	      //             equivalent to (a % n) in JavaScript.
	      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	      //             The remainder is always positive.
	      //
	      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
	      // modes are commonly used for the modulus operation.
	      // Although the other rounding modes can also be used, they may not give useful results.
	      MODULO_MODE = 1,                         // 0 to 9

	      // The maximum number of significant digits of the result of the exponentiatedBy operation.
	      // If POW_PRECISION is 0, there will be unlimited significant digits.
	      POW_PRECISION = 0,                    // 0 to MAX

	      // The format specification used by the BigNumber.prototype.toFormat method.
	      FORMAT = {
	        prefix: '',
	        groupSize: 3,
	        secondaryGroupSize: 0,
	        groupSeparator: ',',
	        decimalSeparator: '.',
	        fractionGroupSize: 0,
	        fractionGroupSeparator: '\xA0',      // non-breaking space
	        suffix: ''
	      },

	      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
	      // '-', '.', whitespace, or repeated character.
	      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
	      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


	    //------------------------------------------------------------------------------------------


	    // CONSTRUCTOR


	    /*
	     * The BigNumber constructor and exported function.
	     * Create and return a new instance of a BigNumber object.
	     *
	     * v {number|string|BigNumber} A numeric value.
	     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
	     */
	    function BigNumber(v, b) {
	      var alphabet, c, caseChanged, e, i, isNum, len, str,
	        x = this;

	      // Enable constructor call without `new`.
	      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

	      if (b == null) {

	        if (v && v._isBigNumber === true) {
	          x.s = v.s;

	          if (!v.c || v.e > MAX_EXP) {
	            x.c = x.e = null;
	          } else if (v.e < MIN_EXP) {
	            x.c = [x.e = 0];
	          } else {
	            x.e = v.e;
	            x.c = v.c.slice();
	          }

	          return;
	        }

	        if ((isNum = typeof v == 'number') && v * 0 == 0) {

	          // Use `1 / n` to handle minus zero also.
	          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

	          // Fast path for integers, where n < 2147483648 (2**31).
	          if (v === ~~v) {
	            for (e = 0, i = v; i >= 10; i /= 10, e++);

	            if (e > MAX_EXP) {
	              x.c = x.e = null;
	            } else {
	              x.e = e;
	              x.c = [v];
	            }

	            return;
	          }

	          str = String(v);
	        } else {

	          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

	          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
	        }

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	        // Exponential form?
	        if ((i = str.search(/e/i)) > 0) {

	          // Determine exponent.
	          if (e < 0) e = i;
	          e += +str.slice(i + 1);
	          str = str.substring(0, i);
	        } else if (e < 0) {

	          // Integer.
	          e = str.length;
	        }

	      } else {

	        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	        intCheck(b, 2, ALPHABET.length, 'Base');

	        // Allow exponential notation to be used with base 10 argument, while
	        // also rounding to DECIMAL_PLACES as with other bases.
	        if (b == 10) {
	          x = new BigNumber(v);
	          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
	        }

	        str = String(v);

	        if (isNum = typeof v == 'number') {

	          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

	          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

	          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
	            throw Error
	             (tooManyDigits + v);
	          }
	        } else {
	          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
	        }

	        alphabet = ALPHABET.slice(0, b);
	        e = i = 0;

	        // Check that str is a valid base b number.
	        // Don't use RegExp, so alphabet can contain special characters.
	        for (len = str.length; i < len; i++) {
	          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
	            if (c == '.') {

	              // If '.' is not the first character and it has not be found before.
	              if (i > e) {
	                e = len;
	                continue;
	              }
	            } else if (!caseChanged) {

	              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
	              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
	                  str == str.toLowerCase() && (str = str.toUpperCase())) {
	                caseChanged = true;
	                i = -1;
	                e = 0;
	                continue;
	              }
	            }

	            return parseNumeric(x, String(v), isNum, b);
	          }
	        }

	        // Prevent later check for length on converted number.
	        isNum = false;
	        str = convertBase(str, b, 10, x.s);

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	        else e = str.length;
	      }

	      // Determine leading zeros.
	      for (i = 0; str.charCodeAt(i) === 48; i++);

	      // Determine trailing zeros.
	      for (len = str.length; str.charCodeAt(--len) === 48;);

	      if (str = str.slice(i, ++len)) {
	        len -= i;

	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	        if (isNum && BigNumber.DEBUG &&
	          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
	            throw Error
	             (tooManyDigits + (x.s * v));
	        }

	         // Overflow?
	        if ((e = e - i - 1) > MAX_EXP) {

	          // Infinity.
	          x.c = x.e = null;

	        // Underflow?
	        } else if (e < MIN_EXP) {

	          // Zero.
	          x.c = [x.e = 0];
	        } else {
	          x.e = e;
	          x.c = [];

	          // Transform base

	          // e is the base 10 exponent.
	          // i is where to slice str to get the first element of the coefficient array.
	          i = (e + 1) % LOG_BASE;
	          if (e < 0) i += LOG_BASE;  // i < 1

	          if (i < len) {
	            if (i) x.c.push(+str.slice(0, i));

	            for (len -= LOG_BASE; i < len;) {
	              x.c.push(+str.slice(i, i += LOG_BASE));
	            }

	            i = LOG_BASE - (str = str.slice(i)).length;
	          } else {
	            i -= len;
	          }

	          for (; i--; str += '0');
	          x.c.push(+str);
	        }
	      } else {

	        // Zero.
	        x.c = [x.e = 0];
	      }
	    }


	    // CONSTRUCTOR PROPERTIES


	    BigNumber.clone = clone;

	    BigNumber.ROUND_UP = 0;
	    BigNumber.ROUND_DOWN = 1;
	    BigNumber.ROUND_CEIL = 2;
	    BigNumber.ROUND_FLOOR = 3;
	    BigNumber.ROUND_HALF_UP = 4;
	    BigNumber.ROUND_HALF_DOWN = 5;
	    BigNumber.ROUND_HALF_EVEN = 6;
	    BigNumber.ROUND_HALF_CEIL = 7;
	    BigNumber.ROUND_HALF_FLOOR = 8;
	    BigNumber.EUCLID = 9;


	    /*
	     * Configure infrequently-changing library-wide settings.
	     *
	     * Accept an object with the following optional properties (if the value of a property is
	     * a number, it must be an integer within the inclusive range stated):
	     *
	     *   DECIMAL_PLACES   {number}           0 to MAX
	     *   ROUNDING_MODE    {number}           0 to 8
	     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
	     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
	     *   CRYPTO           {boolean}          true or false
	     *   MODULO_MODE      {number}           0 to 9
	     *   POW_PRECISION       {number}           0 to MAX
	     *   ALPHABET         {string}           A string of two or more unique characters which does
	     *                                       not contain '.'.
	     *   FORMAT           {object}           An object with some of the following properties:
	     *     prefix                 {string}
	     *     groupSize              {number}
	     *     secondaryGroupSize     {number}
	     *     groupSeparator         {string}
	     *     decimalSeparator       {string}
	     *     fractionGroupSize      {number}
	     *     fractionGroupSeparator {string}
	     *     suffix                 {string}
	     *
	     * (The values assigned to the above FORMAT object properties are not checked for validity.)
	     *
	     * E.g.
	     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	     *
	     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
	     *
	     * Return an object with the properties current values.
	     */
	    BigNumber.config = BigNumber.set = function (obj) {
	      var p, v;

	      if (obj != null) {

	        if (typeof obj == 'object') {

	          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            DECIMAL_PLACES = v;
	          }

	          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 8, p);
	            ROUNDING_MODE = v;
	          }

	          // EXPONENTIAL_AT {number|number[]}
	          // Integer, -MAX to MAX inclusive or
	          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -MAX, 0, p);
	              intCheck(v[1], 0, MAX, p);
	              TO_EXP_NEG = v[0];
	              TO_EXP_POS = v[1];
	            } else {
	              intCheck(v, -MAX, MAX, p);
	              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
	            }
	          }

	          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
	          if (obj.hasOwnProperty(p = 'RANGE')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -MAX, -1, p);
	              intCheck(v[1], 1, MAX, p);
	              MIN_EXP = v[0];
	              MAX_EXP = v[1];
	            } else {
	              intCheck(v, -MAX, MAX, p);
	              if (v) {
	                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
	              } else {
	                throw Error
	                 (bignumberError + p + ' cannot be zero: ' + v);
	              }
	            }
	          }

	          // CRYPTO {boolean} true or false.
	          // '[BigNumber Error] CRYPTO not true or false: {v}'
	          // '[BigNumber Error] crypto unavailable'
	          if (obj.hasOwnProperty(p = 'CRYPTO')) {
	            v = obj[p];
	            if (v === !!v) {
	              if (v) {
	                if (typeof crypto != 'undefined' && crypto &&
	                 (crypto.getRandomValues || crypto.randomBytes)) {
	                  CRYPTO = v;
	                } else {
	                  CRYPTO = !v;
	                  throw Error
	                   (bignumberError + 'crypto unavailable');
	                }
	              } else {
	                CRYPTO = v;
	              }
	            } else {
	              throw Error
	               (bignumberError + p + ' not true or false: ' + v);
	            }
	          }

	          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 9, p);
	            MODULO_MODE = v;
	          }

	          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            POW_PRECISION = v;
	          }

	          // FORMAT {object}
	          // '[BigNumber Error] FORMAT not an object: {v}'
	          if (obj.hasOwnProperty(p = 'FORMAT')) {
	            v = obj[p];
	            if (typeof v == 'object') FORMAT = v;
	            else throw Error
	             (bignumberError + p + ' not an object: ' + v);
	          }

	          // ALPHABET {string}
	          // '[BigNumber Error] ALPHABET invalid: {v}'
	          if (obj.hasOwnProperty(p = 'ALPHABET')) {
	            v = obj[p];

	            // Disallow if less than two characters,
	            // or if it contains '+', '-', '.', whitespace, or a repeated character.
	            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
	              ALPHABET = v;
	            } else {
	              throw Error
	               (bignumberError + p + ' invalid: ' + v);
	            }
	          }

	        } else {

	          // '[BigNumber Error] Object expected: {v}'
	          throw Error
	           (bignumberError + 'Object expected: ' + obj);
	        }
	      }

	      return {
	        DECIMAL_PLACES: DECIMAL_PLACES,
	        ROUNDING_MODE: ROUNDING_MODE,
	        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
	        RANGE: [MIN_EXP, MAX_EXP],
	        CRYPTO: CRYPTO,
	        MODULO_MODE: MODULO_MODE,
	        POW_PRECISION: POW_PRECISION,
	        FORMAT: FORMAT,
	        ALPHABET: ALPHABET
	      };
	    };


	    /*
	     * Return true if v is a BigNumber instance, otherwise return false.
	     *
	     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
	     *
	     * v {any}
	     *
	     * '[BigNumber Error] Invalid BigNumber: {v}'
	     */
	    BigNumber.isBigNumber = function (v) {
	      if (!v || v._isBigNumber !== true) return false;
	      if (!BigNumber.DEBUG) return true;

	      var i, n,
	        c = v.c,
	        e = v.e,
	        s = v.s;

	      out: if ({}.toString.call(c) == '[object Array]') {

	        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

	          // If the first element is zero, the BigNumber value must be zero.
	          if (c[0] === 0) {
	            if (e === 0 && c.length === 1) return true;
	            break out;
	          }

	          // Calculate number of digits that c[0] should have, based on the exponent.
	          i = (e + 1) % LOG_BASE;
	          if (i < 1) i += LOG_BASE;

	          // Calculate number of digits of c[0].
	          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
	          if (String(c[0]).length == i) {

	            for (i = 0; i < c.length; i++) {
	              n = c[i];
	              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
	            }

	            // Last element cannot be zero, unless it is the only element.
	            if (n !== 0) return true;
	          }
	        }

	      // Infinity/NaN
	      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
	        return true;
	      }

	      throw Error
	        (bignumberError + 'Invalid BigNumber: ' + v);
	    };


	    /*
	     * Return a new BigNumber whose value is the maximum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.maximum = BigNumber.max = function () {
	      return maxOrMin(arguments, P.lt);
	    };


	    /*
	     * Return a new BigNumber whose value is the minimum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.minimum = BigNumber.min = function () {
	      return maxOrMin(arguments, P.gt);
	    };


	    /*
	     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	     * zeros are produced).
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
	     * '[BigNumber Error] crypto unavailable'
	     */
	    BigNumber.random = (function () {
	      var pow2_53 = 0x20000000000000;

	      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	      // Check if Math.random() produces more than 32 bits of randomness.
	      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	       ? function () { return mathfloor(Math.random() * pow2_53); }
	       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	         (Math.random() * 0x800000 | 0); };

	      return function (dp) {
	        var a, b, e, k, v,
	          i = 0,
	          c = [],
	          rand = new BigNumber(ONE);

	        if (dp == null) dp = DECIMAL_PLACES;
	        else intCheck(dp, 0, MAX);

	        k = mathceil(dp / LOG_BASE);

	        if (CRYPTO) {

	          // Browsers supporting crypto.getRandomValues.
	          if (crypto.getRandomValues) {

	            a = crypto.getRandomValues(new Uint32Array(k *= 2));

	            for (; i < k;) {

	              // 53 bits:
	              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	              //                                     11111 11111111 11111111
	              // 0x20000 is 2^21.
	              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	              // Rejection sampling:
	              // 0 <= v < 9007199254740992
	              // Probability that v >= 9e15, is
	              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	              if (v >= 9e15) {
	                b = crypto.getRandomValues(new Uint32Array(2));
	                a[i] = b[0];
	                a[i + 1] = b[1];
	              } else {

	                // 0 <= v <= 8999999999999999
	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 2;
	              }
	            }
	            i = k / 2;

	          // Node.js supporting crypto.randomBytes.
	          } else if (crypto.randomBytes) {

	            // buffer
	            a = crypto.randomBytes(k *= 7);

	            for (; i < k;) {

	              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	              // 0x100000000 is 2^32, 0x1000000 is 2^24
	              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	              // 0 <= v < 9007199254740992
	              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
	                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
	                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

	              if (v >= 9e15) {
	                crypto.randomBytes(7).copy(a, i);
	              } else {

	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 7;
	              }
	            }
	            i = k / 7;
	          } else {
	            CRYPTO = false;
	            throw Error
	             (bignumberError + 'crypto unavailable');
	          }
	        }

	        // Use Math.random.
	        if (!CRYPTO) {

	          for (; i < k;) {
	            v = random53bitInt();
	            if (v < 9e15) c[i++] = v % 1e14;
	          }
	        }

	        k = c[--i];
	        dp %= LOG_BASE;

	        // Convert trailing digits to zeros according to dp.
	        if (k && dp) {
	          v = POWS_TEN[LOG_BASE - dp];
	          c[i] = mathfloor(k / v) * v;
	        }

	        // Remove trailing elements which are zero.
	        for (; c[i] === 0; c.pop(), i--);

	        // Zero?
	        if (i < 0) {
	          c = [e = 0];
	        } else {

	          // Remove leading elements which are zero and adjust exponent accordingly.
	          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

	          // Count the digits of the first element of c to determine leading zeros, and...
	          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

	          // adjust the exponent accordingly.
	          if (i < LOG_BASE) e -= LOG_BASE - i;
	        }

	        rand.e = e;
	        rand.c = c;
	        return rand;
	      };
	    })();


	    /*
	     * Return a BigNumber whose value is the sum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.sum = function () {
	      var i = 1,
	        args = arguments,
	        sum = new BigNumber(args[0]);
	      for (; i < args.length;) sum = sum.plus(args[i++]);
	      return sum;
	    };


	    // PRIVATE FUNCTIONS


	    // Called by BigNumber and BigNumber.prototype.toString.
	    convertBase = (function () {
	      var decimal = '0123456789';

	      /*
	       * Convert string of baseIn to an array of numbers of baseOut.
	       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
	       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
	       */
	      function toBaseOut(str, baseIn, baseOut, alphabet) {
	        var j,
	          arr = [0],
	          arrL,
	          i = 0,
	          len = str.length;

	        for (; i < len;) {
	          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

	          arr[0] += alphabet.indexOf(str.charAt(i++));

	          for (j = 0; j < arr.length; j++) {

	            if (arr[j] > baseOut - 1) {
	              if (arr[j + 1] == null) arr[j + 1] = 0;
	              arr[j + 1] += arr[j] / baseOut | 0;
	              arr[j] %= baseOut;
	            }
	          }
	        }

	        return arr.reverse();
	      }

	      // Convert a numeric string of baseIn to a numeric string of baseOut.
	      // If the caller is toString, we are converting from base 10 to baseOut.
	      // If the caller is BigNumber, we are converting from baseIn to base 10.
	      return function (str, baseIn, baseOut, sign, callerIsToString) {
	        var alphabet, d, e, k, r, x, xc, y,
	          i = str.indexOf('.'),
	          dp = DECIMAL_PLACES,
	          rm = ROUNDING_MODE;

	        // Non-integer.
	        if (i >= 0) {
	          k = POW_PRECISION;

	          // Unlimited precision.
	          POW_PRECISION = 0;
	          str = str.replace('.', '');
	          y = new BigNumber(baseIn);
	          x = y.pow(str.length - i);
	          POW_PRECISION = k;

	          // Convert str as if an integer, then restore the fraction part by dividing the
	          // result by its base raised to a power.

	          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
	           10, baseOut, decimal);
	          y.e = y.c.length;
	        }

	        // Convert the number as integer.

	        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
	         ? (alphabet = ALPHABET, decimal)
	         : (alphabet = decimal, ALPHABET));

	        // xc now represents str as an integer and converted to baseOut. e is the exponent.
	        e = k = xc.length;

	        // Remove trailing zeros.
	        for (; xc[--k] == 0; xc.pop());

	        // Zero?
	        if (!xc[0]) return alphabet.charAt(0);

	        // Does str represent an integer? If so, no need for the division.
	        if (i < 0) {
	          --e;
	        } else {
	          x.c = xc;
	          x.e = e;

	          // The sign is needed for correct rounding.
	          x.s = sign;
	          x = div(x, y, dp, rm, baseOut);
	          xc = x.c;
	          r = x.r;
	          e = x.e;
	        }

	        // xc now represents str converted to baseOut.

	        // THe index of the rounding digit.
	        d = e + dp + 1;

	        // The rounding digit: the digit to the right of the digit that may be rounded up.
	        i = xc[d];

	        // Look at the rounding digits and mode to determine whether to round up.

	        k = baseOut / 2;
	        r = r || d < 0 || xc[d + 1] != null;

	        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	               rm == (x.s < 0 ? 8 : 7));

	        // If the index of the rounding digit is not greater than zero, or xc represents
	        // zero, then the result of the base conversion is zero or, if rounding up, a value
	        // such as 0.00001.
	        if (d < 1 || !xc[0]) {

	          // 1^-dp or 0
	          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
	        } else {

	          // Truncate xc to the required number of decimal places.
	          xc.length = d;

	          // Round up?
	          if (r) {

	            // Rounding up may mean the previous digit has to be rounded up and so on.
	            for (--baseOut; ++xc[--d] > baseOut;) {
	              xc[d] = 0;

	              if (!d) {
	                ++e;
	                xc = [1].concat(xc);
	              }
	            }
	          }

	          // Determine trailing zeros.
	          for (k = xc.length; !xc[--k];);

	          // E.g. [4, 11, 15] becomes 4bf.
	          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

	          // Add leading zeros, decimal point and trailing zeros as required.
	          str = toFixedPoint(str, e, alphabet.charAt(0));
	        }

	        // The caller will add the sign.
	        return str;
	      };
	    })();


	    // Perform division in the specified base. Called by div and convertBase.
	    div = (function () {

	      // Assume non-zero x and k.
	      function multiply(x, k, base) {
	        var m, temp, xlo, xhi,
	          carry = 0,
	          i = x.length,
	          klo = k % SQRT_BASE,
	          khi = k / SQRT_BASE | 0;

	        for (x = x.slice(); i--;) {
	          xlo = x[i] % SQRT_BASE;
	          xhi = x[i] / SQRT_BASE | 0;
	          m = khi * xlo + xhi * klo;
	          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
	          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
	          x[i] = temp % base;
	        }

	        if (carry) x = [carry].concat(x);

	        return x;
	      }

	      function compare(a, b, aL, bL) {
	        var i, cmp;

	        if (aL != bL) {
	          cmp = aL > bL ? 1 : -1;
	        } else {

	          for (i = cmp = 0; i < aL; i++) {

	            if (a[i] != b[i]) {
	              cmp = a[i] > b[i] ? 1 : -1;
	              break;
	            }
	          }
	        }

	        return cmp;
	      }

	      function subtract(a, b, aL, base) {
	        var i = 0;

	        // Subtract b from a.
	        for (; aL--;) {
	          a[aL] -= i;
	          i = a[aL] < b[aL] ? 1 : 0;
	          a[aL] = i * base + a[aL] - b[aL];
	        }

	        // Remove leading zeros.
	        for (; !a[0] && a.length > 1; a.splice(0, 1));
	      }

	      // x: dividend, y: divisor.
	      return function (x, y, dp, rm, base) {
	        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	          yL, yz,
	          s = x.s == y.s ? 1 : -1,
	          xc = x.c,
	          yc = y.c;

	        // Either NaN, Infinity or 0?
	        if (!xc || !xc[0] || !yc || !yc[0]) {

	          return new BigNumber(

	           // Return NaN if either NaN, or both Infinity or 0.
	           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

	            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	         );
	        }

	        q = new BigNumber(s);
	        qc = q.c = [];
	        e = x.e - y.e;
	        s = dp + e + 1;

	        if (!base) {
	          base = BASE;
	          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
	          s = s / LOG_BASE | 0;
	        }

	        // Result exponent may be one less then the current value of e.
	        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	        for (i = 0; yc[i] == (xc[i] || 0); i++);

	        if (yc[i] > (xc[i] || 0)) e--;

	        if (s < 0) {
	          qc.push(1);
	          more = true;
	        } else {
	          xL = xc.length;
	          yL = yc.length;
	          i = 0;
	          s += 2;

	          // Normalise xc and yc so highest order digit of yc is >= base / 2.

	          n = mathfloor(base / (yc[0] + 1));

	          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
	          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
	          if (n > 1) {
	            yc = multiply(yc, n, base);
	            xc = multiply(xc, n, base);
	            yL = yc.length;
	            xL = xc.length;
	          }

	          xi = yL;
	          rem = xc.slice(0, yL);
	          remL = rem.length;

	          // Add zeros to make remainder as long as divisor.
	          for (; remL < yL; rem[remL++] = 0);
	          yz = yc.slice();
	          yz = [0].concat(yz);
	          yc0 = yc[0];
	          if (yc[1] >= base / 2) yc0++;
	          // Not necessary, but to prevent trial digit n > base, when using base 3.
	          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

	          do {
	            n = 0;

	            // Compare divisor and remainder.
	            cmp = compare(yc, rem, yL, remL);

	            // If divisor < remainder.
	            if (cmp < 0) {

	              // Calculate trial digit, n.

	              rem0 = rem[0];
	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	              // n is how many times the divisor goes into the current remainder.
	              n = mathfloor(rem0 / yc0);

	              //  Algorithm:
	              //  product = divisor multiplied by trial digit (n).
	              //  Compare product and remainder.
	              //  If product is greater than remainder:
	              //    Subtract divisor from product, decrement trial digit.
	              //  Subtract product from remainder.
	              //  If product was less than remainder at the last compare:
	              //    Compare new remainder and divisor.
	              //    If remainder is greater than divisor:
	              //      Subtract divisor from remainder, increment trial digit.

	              if (n > 1) {

	                // n may be > base only when base is 3.
	                if (n >= base) n = base - 1;

	                // product = divisor * trial digit.
	                prod = multiply(yc, n, base);
	                prodL = prod.length;
	                remL = rem.length;

	                // Compare product and remainder.
	                // If product > remainder then trial digit n too high.
	                // n is 1 too high about 5% of the time, and is not known to have
	                // ever been more than 1 too high.
	                while (compare(prod, rem, prodL, remL) == 1) {
	                  n--;

	                  // Subtract divisor from product.
	                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
	                  prodL = prod.length;
	                  cmp = 1;
	                }
	              } else {

	                // n is 0 or 1, cmp is -1.
	                // If n is 0, there is no need to compare yc and rem again below,
	                // so change cmp to 1 to avoid it.
	                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                if (n == 0) {

	                  // divisor < remainder, so n must be at least 1.
	                  cmp = n = 1;
	                }

	                // product = divisor
	                prod = yc.slice();
	                prodL = prod.length;
	              }

	              if (prodL < remL) prod = [0].concat(prod);

	              // Subtract product from remainder.
	              subtract(rem, prod, remL, base);
	              remL = rem.length;

	               // If product was < remainder.
	              if (cmp == -1) {

	                // Compare divisor and new remainder.
	                // If divisor < new remainder, subtract divisor from remainder.
	                // Trial digit n too low.
	                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                while (compare(yc, rem, yL, remL) < 1) {
	                  n++;

	                  // Subtract divisor from remainder.
	                  subtract(rem, yL < remL ? yz : yc, remL, base);
	                  remL = rem.length;
	                }
	              }
	            } else if (cmp === 0) {
	              n++;
	              rem = [0];
	            } // else cmp === 1 and n will be 0

	            // Add the next digit, n, to the result array.
	            qc[i++] = n;

	            // Update the remainder.
	            if (rem[0]) {
	              rem[remL++] = xc[xi] || 0;
	            } else {
	              rem = [xc[xi]];
	              remL = 1;
	            }
	          } while ((xi++ < xL || rem[0] != null) && s--);

	          more = rem[0] != null;

	          // Leading zero?
	          if (!qc[0]) qc.splice(0, 1);
	        }

	        if (base == BASE) {

	          // To calculate q.e, first get the number of digits of qc[0].
	          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

	          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

	        // Caller is convertBase.
	        } else {
	          q.e = e;
	          q.r = +more;
	        }

	        return q;
	      };
	    })();


	    /*
	     * Return a string representing the value of BigNumber n in fixed-point or exponential
	     * notation rounded to the specified decimal places or significant digits.
	     *
	     * n: a BigNumber.
	     * i: the index of the last digit required (i.e. the digit that may be rounded up).
	     * rm: the rounding mode.
	     * id: 1 (toExponential) or 2 (toPrecision).
	     */
	    function format(n, i, rm, id) {
	      var c0, e, ne, len, str;

	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      if (!n.c) return n.toString();

	      c0 = n.c[0];
	      ne = n.e;

	      if (i == null) {
	        str = coeffToString(n.c);
	        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
	         ? toExponential(str, ne)
	         : toFixedPoint(str, ne, '0');
	      } else {
	        n = round(new BigNumber(n), i, rm);

	        // n.e may have changed if the value was rounded up.
	        e = n.e;

	        str = coeffToString(n.c);
	        len = str.length;

	        // toPrecision returns exponential notation if the number of significant digits
	        // specified is less than the number of digits necessary to represent the integer
	        // part of the value in fixed-point notation.

	        // Exponential notation.
	        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

	          // Append zeros?
	          for (; len < i; str += '0', len++);
	          str = toExponential(str, e);

	        // Fixed-point notation.
	        } else {
	          i -= ne;
	          str = toFixedPoint(str, e, '0');

	          // Append zeros?
	          if (e + 1 > len) {
	            if (--i > 0) for (str += '.'; i--; str += '0');
	          } else {
	            i += e - len;
	            if (i > 0) {
	              if (e + 1 == len) str += '.';
	              for (; i--; str += '0');
	            }
	          }
	        }
	      }

	      return n.s < 0 && c0 ? '-' + str : str;
	    }


	    // Handle BigNumber.max and BigNumber.min.
	    function maxOrMin(args, method) {
	      var n,
	        i = 1,
	        m = new BigNumber(args[0]);

	      for (; i < args.length; i++) {
	        n = new BigNumber(args[i]);

	        // If any number is NaN, return NaN.
	        if (!n.s) {
	          m = n;
	          break;
	        } else if (method.call(m, n)) {
	          m = n;
	        }
	      }

	      return m;
	    }


	    /*
	     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	     * Called by minus, plus and times.
	     */
	    function normalise(n, c, e) {
	      var i = 1,
	        j = c.length;

	       // Remove trailing zeros.
	      for (; !c[--j]; c.pop());

	      // Calculate the base 10 exponent. First get the number of digits of c[0].
	      for (j = c[0]; j >= 10; j /= 10, i++);

	      // Overflow?
	      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

	        // Infinity.
	        n.c = n.e = null;

	      // Underflow?
	      } else if (e < MIN_EXP) {

	        // Zero.
	        n.c = [n.e = 0];
	      } else {
	        n.e = e;
	        n.c = c;
	      }

	      return n;
	    }


	    // Handle values that fail the validity test in BigNumber.
	    parseNumeric = (function () {
	      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	        dotAfter = /^([^.]+)\.$/,
	        dotBefore = /^\.([^.]+)$/,
	        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	      return function (x, str, isNum, b) {
	        var base,
	          s = isNum ? str : str.replace(whitespaceOrPlus, '');

	        // No exception on ±Infinity or NaN.
	        if (isInfinityOrNaN.test(s)) {
	          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	        } else {
	          if (!isNum) {

	            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	            s = s.replace(basePrefix, function (m, p1, p2) {
	              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	              return !b || b == base ? p1 : m;
	            });

	            if (b) {
	              base = b;

	              // E.g. '1.' to '1', '.1' to '0.1'
	              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
	            }

	            if (str != s) return new BigNumber(s, base);
	          }

	          // '[BigNumber Error] Not a number: {n}'
	          // '[BigNumber Error] Not a base {b} number: {n}'
	          if (BigNumber.DEBUG) {
	            throw Error
	              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
	          }

	          // NaN
	          x.s = null;
	        }

	        x.c = x.e = null;
	      }
	    })();


	    /*
	     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	     * If r is truthy, it is known that there are more digits after the rounding digit.
	     */
	    function round(x, sd, rm, r) {
	      var d, i, j, k, n, ni, rd,
	        xc = x.c,
	        pows10 = POWS_TEN;

	      // if x is not Infinity or NaN...
	      if (xc) {

	        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	        // n is a base 1e14 number, the value of the element of array x.c containing rd.
	        // ni is the index of n within x.c.
	        // d is the number of digits of n.
	        // i is the index of rd within n including leading zeros.
	        // j is the actual index of rd within n (if < 0, rd is a leading zero).
	        out: {

	          // Get the number of digits of the first element of xc.
	          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
	          i = sd - d;

	          // If the rounding digit is in the first element of xc...
	          if (i < 0) {
	            i += LOG_BASE;
	            j = sd;
	            n = xc[ni = 0];

	            // Get the rounding digit at index j of n.
	            rd = n / pows10[d - j - 1] % 10 | 0;
	          } else {
	            ni = mathceil((i + 1) / LOG_BASE);

	            if (ni >= xc.length) {

	              if (r) {

	                // Needed by sqrt.
	                for (; xc.length <= ni; xc.push(0));
	                n = rd = 0;
	                d = 1;
	                i %= LOG_BASE;
	                j = i - LOG_BASE + 1;
	              } else {
	                break out;
	              }
	            } else {
	              n = k = xc[ni];

	              // Get the number of digits of n.
	              for (d = 1; k >= 10; k /= 10, d++);

	              // Get the index of rd within n.
	              i %= LOG_BASE;

	              // Get the index of rd within n, adjusted for leading zeros.
	              // The number of leading zeros of n is given by LOG_BASE - d.
	              j = i - LOG_BASE + d;

	              // Get the rounding digit at index j of n.
	              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
	            }
	          }

	          r = r || sd < 0 ||

	          // Are there any non-zero digits after the rounding digit?
	          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
	          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

	          r = rm < 4
	           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

	            // Check whether the digit to the left of the rounding digit is odd.
	            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
	             rm == (x.s < 0 ? 8 : 7));

	          if (sd < 1 || !xc[0]) {
	            xc.length = 0;

	            if (r) {

	              // Convert sd to decimal places.
	              sd -= x.e + 1;

	              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
	              x.e = -sd || 0;
	            } else {

	              // Zero.
	              xc[0] = x.e = 0;
	            }

	            return x;
	          }

	          // Remove excess digits.
	          if (i == 0) {
	            xc.length = ni;
	            k = 1;
	            ni--;
	          } else {
	            xc.length = ni + 1;
	            k = pows10[LOG_BASE - i];

	            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	            // j > 0 means i > number of leading zeros of n.
	            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
	          }

	          // Round up?
	          if (r) {

	            for (; ;) {

	              // If the digit to be rounded up is in the first element of xc...
	              if (ni == 0) {

	                // i will be the length of xc[0] before k is added.
	                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
	                j = xc[0] += k;
	                for (k = 1; j >= 10; j /= 10, k++);

	                // if i != k the length has increased.
	                if (i != k) {
	                  x.e++;
	                  if (xc[0] == BASE) xc[0] = 1;
	                }

	                break;
	              } else {
	                xc[ni] += k;
	                if (xc[ni] != BASE) break;
	                xc[ni--] = 0;
	                k = 1;
	              }
	            }
	          }

	          // Remove trailing zeros.
	          for (i = xc.length; xc[--i] === 0; xc.pop());
	        }

	        // Overflow? Infinity.
	        if (x.e > MAX_EXP) {
	          x.c = x.e = null;

	        // Underflow? Zero.
	        } else if (x.e < MIN_EXP) {
	          x.c = [x.e = 0];
	        }
	      }

	      return x;
	    }


	    function valueOf(n) {
	      var str,
	        e = n.e;

	      if (e === null) return n.toString();

	      str = coeffToString(n.c);

	      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	        ? toExponential(str, e)
	        : toFixedPoint(str, e, '0');

	      return n.s < 0 ? '-' + str : str;
	    }


	    // PROTOTYPE/INSTANCE METHODS


	    /*
	     * Return a new BigNumber whose value is the absolute value of this BigNumber.
	     */
	    P.absoluteValue = P.abs = function () {
	      var x = new BigNumber(this);
	      if (x.s < 0) x.s = 1;
	      return x;
	    };


	    /*
	     * Return
	     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	     *   0 if they have the same value,
	     *   or null if the value of either is NaN.
	     */
	    P.comparedTo = function (y, b) {
	      return compare(this, new BigNumber(y, b));
	    };


	    /*
	     * If dp is undefined or null or true or false, return the number of decimal places of the
	     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     *
	     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.decimalPlaces = P.dp = function (dp, rm) {
	      var c, n, v,
	        x = this;

	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), dp + x.e + 1, rm);
	      }

	      if (!(c = x.c)) return null;
	      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

	      // Subtract the number of trailing zeros of the last number.
	      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
	      if (n < 0) n = 0;

	      return n;
	    };


	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.dividedBy = P.div = function (y, b) {
	      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
	    };


	    /*
	     * Return a new BigNumber whose value is the integer part of dividing the value of this
	     * BigNumber by the value of BigNumber(y, b).
	     */
	    P.dividedToIntegerBy = P.idiv = function (y, b) {
	      return div(this, new BigNumber(y, b), 0, 1);
	    };


	    /*
	     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
	     *
	     * If m is present, return the result modulo m.
	     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
	     *
	     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
	     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
	     *
	     * n {number|string|BigNumber} The exponent. An integer.
	     * [m] {number|string|BigNumber} The modulus.
	     *
	     * '[BigNumber Error] Exponent not an integer: {n}'
	     */
	    P.exponentiatedBy = P.pow = function (n, m) {
	      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
	        x = this;

	      n = new BigNumber(n);

	      // Allow NaN and ±Infinity, but not other non-integers.
	      if (n.c && !n.isInteger()) {
	        throw Error
	          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
	      }

	      if (m != null) m = new BigNumber(m);

	      // Exponent of MAX_SAFE_INTEGER is 15.
	      nIsBig = n.e > 14;

	      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
	      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

	        // The sign of the result of pow when x is negative depends on the evenness of n.
	        // If +n overflows to ±Infinity, the evenness of n would be not be known.
	        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
	        return m ? y.mod(m) : y;
	      }

	      nIsNeg = n.s < 0;

	      if (m) {

	        // x % m returns NaN if abs(m) is zero, or m is NaN.
	        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

	        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

	        if (isModExp) x = x.mod(m);

	      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
	      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
	      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
	        // [1, 240000000]
	        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
	        // [80000000000000]  [99999750000000]
	        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

	        // If x is negative and n is odd, k = -0, else k = 0.
	        k = x.s < 0 && isOdd(n) ? -0 : 0;

	        // If x >= 1, k = ±Infinity.
	        if (x.e > -1) k = 1 / k;

	        // If n is negative return ±0, else return ±Infinity.
	        return new BigNumber(nIsNeg ? 1 / k : k);

	      } else if (POW_PRECISION) {

	        // Truncating each coefficient array to a length of k after each multiplication
	        // equates to truncating significant digits to POW_PRECISION + [28, 41],
	        // i.e. there will be a minimum of 28 guard digits retained.
	        k = mathceil(POW_PRECISION / LOG_BASE + 2);
	      }

	      if (nIsBig) {
	        half = new BigNumber(0.5);
	        if (nIsNeg) n.s = 1;
	        nIsOdd = isOdd(n);
	      } else {
	        i = Math.abs(+valueOf(n));
	        nIsOdd = i % 2;
	      }

	      y = new BigNumber(ONE);

	      // Performs 54 loop iterations for n of 9007199254740991.
	      for (; ;) {

	        if (nIsOdd) {
	          y = y.times(x);
	          if (!y.c) break;

	          if (k) {
	            if (y.c.length > k) y.c.length = k;
	          } else if (isModExp) {
	            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
	          }
	        }

	        if (i) {
	          i = mathfloor(i / 2);
	          if (i === 0) break;
	          nIsOdd = i % 2;
	        } else {
	          n = n.times(half);
	          round(n, n.e + 1, 1);

	          if (n.e > 14) {
	            nIsOdd = isOdd(n);
	          } else {
	            i = +valueOf(n);
	            if (i === 0) break;
	            nIsOdd = i % 2;
	          }
	        }

	        x = x.times(x);

	        if (k) {
	          if (x.c && x.c.length > k) x.c.length = k;
	        } else if (isModExp) {
	          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
	        }
	      }

	      if (isModExp) return y;
	      if (nIsNeg) y = ONE.div(y);

	      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
	     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
	     */
	    P.integerValue = function (rm) {
	      var n = new BigNumber(this);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);
	      return round(n, n.e + 1, rm);
	    };


	    /*
	     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isEqualTo = P.eq = function (y, b) {
	      return compare(this, new BigNumber(y, b)) === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is a finite number, otherwise return false.
	     */
	    P.isFinite = function () {
	      return !!this.c;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isGreaterThan = P.gt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

	    };


	    /*
	     * Return true if the value of this BigNumber is an integer, otherwise return false.
	     */
	    P.isInteger = function () {
	      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isLessThan = P.lt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isLessThanOrEqualTo = P.lte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is NaN, otherwise return false.
	     */
	    P.isNaN = function () {
	      return !this.s;
	    };


	    /*
	     * Return true if the value of this BigNumber is negative, otherwise return false.
	     */
	    P.isNegative = function () {
	      return this.s < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is positive, otherwise return false.
	     */
	    P.isPositive = function () {
	      return this.s > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
	     */
	    P.isZero = function () {
	      return !!this.c && this.c[0] == 0;
	    };


	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	     * BigNumber(y, b).
	     */
	    P.minus = function (y, b) {
	      var i, j, t, xLTy,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	      if (a != b) {
	        y.s = -b;
	        return x.plus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Either Infinity?
	        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

	        // Either zero?
	        if (!xc[0] || !yc[0]) {

	          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

	           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	           ROUNDING_MODE == 3 ? -0 : 0);
	        }
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Determine which is the bigger number.
	      if (a = xe - ye) {

	        if (xLTy = a < 0) {
	          a = -a;
	          t = xc;
	        } else {
	          ye = xe;
	          t = yc;
	        }

	        t.reverse();

	        // Prepend zeros to equalise exponents.
	        for (b = a; b--; t.push(0));
	        t.reverse();
	      } else {

	        // Exponents equal. Check digit by digit.
	        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

	        for (a = b = 0; b < j; b++) {

	          if (xc[b] != yc[b]) {
	            xLTy = xc[b] < yc[b];
	            break;
	          }
	        }
	      }

	      // x < y? Point xc to the array of the bigger number.
	      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	      b = (j = yc.length) - (i = xc.length);

	      // Append zeros to xc if shorter.
	      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	      if (b > 0) for (; b--; xc[i++] = 0);
	      b = BASE - 1;

	      // Subtract yc from xc.
	      for (; j > a;) {

	        if (xc[--j] < yc[j]) {
	          for (i = j; i && !xc[--i]; xc[i] = b);
	          --xc[i];
	          xc[j] += BASE;
	        }

	        xc[j] -= yc[j];
	      }

	      // Remove leading zeros and adjust exponent accordingly.
	      for (; xc[0] == 0; xc.splice(0, 1), --ye);

	      // Zero?
	      if (!xc[0]) {

	        // Following IEEE 754 (2008) 6.3,
	        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	        y.s = ROUNDING_MODE == 3 ? -1 : 1;
	        y.c = [y.e = 0];
	        return y;
	      }

	      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	      // for finite x and y.
	      return normalise(y, xc, ye);
	    };


	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   n % I =  n
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   0 % I =  0
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *   N % I =  N
	     *   I % n =  N
	     *   I % 0 =  N
	     *   I % N =  N
	     *   I % I =  N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	     */
	    P.modulo = P.mod = function (y, b) {
	      var q, s,
	        x = this;

	      y = new BigNumber(y, b);

	      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	      if (!x.c || !y.s || y.c && !y.c[0]) {
	        return new BigNumber(NaN);

	      // Return x if y is Infinity or x is zero.
	      } else if (!y.c || x.c && !x.c[0]) {
	        return new BigNumber(x);
	      }

	      if (MODULO_MODE == 9) {

	        // Euclidian division: q = sign(y) * floor(x / abs(y))
	        // r = x - qy    where  0 <= r < abs(y)
	        s = y.s;
	        y.s = 1;
	        q = div(x, y, 0, 3);
	        y.s = s;
	        q.s *= s;
	      } else {
	        q = div(x, y, 0, MODULO_MODE);
	      }

	      y = x.minus(q.times(y));

	      // To match JavaScript %, ensure sign of zero is sign of dividend.
	      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

	      return y;
	    };


	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
	     * of BigNumber(y, b).
	     */
	    P.multipliedBy = P.times = function (y, b) {
	      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	        base, sqrtBase,
	        x = this,
	        xc = x.c,
	        yc = (y = new BigNumber(y, b)).c;

	      // Either NaN, ±Infinity or ±0?
	      if (!xc || !yc || !xc[0] || !yc[0]) {

	        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
	          y.c = y.e = y.s = null;
	        } else {
	          y.s *= x.s;

	          // Return ±Infinity if either is ±Infinity.
	          if (!xc || !yc) {
	            y.c = y.e = null;

	          // Return ±0 if either is ±0.
	          } else {
	            y.c = [0];
	            y.e = 0;
	          }
	        }

	        return y;
	      }

	      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
	      y.s *= x.s;
	      xcL = xc.length;
	      ycL = yc.length;

	      // Ensure xc points to longer array and xcL to its length.
	      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	      // Initialise the result array with zeros.
	      for (i = xcL + ycL, zc = []; i--; zc.push(0));

	      base = BASE;
	      sqrtBase = SQRT_BASE;

	      for (i = ycL; --i >= 0;) {
	        c = 0;
	        ylo = yc[i] % sqrtBase;
	        yhi = yc[i] / sqrtBase | 0;

	        for (k = xcL, j = i + k; j > i;) {
	          xlo = xc[--k] % sqrtBase;
	          xhi = xc[k] / sqrtBase | 0;
	          m = yhi * xlo + xhi * ylo;
	          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
	          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
	          zc[j--] = xlo % base;
	        }

	        zc[j] = c;
	      }

	      if (c) {
	        ++e;
	      } else {
	        zc.splice(0, 1);
	      }

	      return normalise(y, zc, e);
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber negated,
	     * i.e. multiplied by -1.
	     */
	    P.negated = function () {
	      var x = new BigNumber(this);
	      x.s = -x.s || null;
	      return x;
	    };


	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	     * BigNumber(y, b).
	     */
	    P.plus = function (y, b) {
	      var t,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	       if (a != b) {
	        y.s = -b;
	        return x.minus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Return ±Infinity if either ±Infinity.
	        if (!xc || !yc) return new BigNumber(a / 0);

	        // Either zero?
	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	      if (a = xe - ye) {
	        if (a > 0) {
	          ye = xe;
	          t = yc;
	        } else {
	          a = -a;
	          t = xc;
	        }

	        t.reverse();
	        for (; a--; t.push(0));
	        t.reverse();
	      }

	      a = xc.length;
	      b = yc.length;

	      // Point xc to the longer array, and b to the shorter length.
	      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

	      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	      for (a = 0; b;) {
	        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
	        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
	      }

	      if (a) {
	        xc = [a].concat(xc);
	        ++ye;
	      }

	      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	      // ye = MAX_EXP + 1 possible
	      return normalise(y, xc, ye);
	    };


	    /*
	     * If sd is undefined or null or true or false, return the number of significant digits of
	     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     * If sd is true include integer-part trailing zeros in the count.
	     *
	     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
	     *                     boolean: whether to count integer-part trailing zeros: true or false.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.precision = P.sd = function (sd, rm) {
	      var c, n, v,
	        x = this;

	      if (sd != null && sd !== !!sd) {
	        intCheck(sd, 1, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), sd, rm);
	      }

	      if (!(c = x.c)) return null;
	      v = c.length - 1;
	      n = v * LOG_BASE + 1;

	      if (v = c[v]) {

	        // Subtract the number of trailing zeros of the last element.
	        for (; v % 10 == 0; v /= 10, n--);

	        // Add the number of digits of the first element.
	        for (v = c[0]; v >= 10; v /= 10, n++);
	      }

	      if (sd && x.e + 1 > n) n = x.e + 1;

	      return n;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	     *
	     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
	     */
	    P.shiftedBy = function (k) {
	      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	      return this.times('1e' + k);
	    };


	    /*
	     *  sqrt(-n) =  N
	     *  sqrt(N) =  N
	     *  sqrt(-I) =  N
	     *  sqrt(I) =  I
	     *  sqrt(0) =  0
	     *  sqrt(-0) = -0
	     *
	     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.squareRoot = P.sqrt = function () {
	      var m, n, r, rep, t,
	        x = this,
	        c = x.c,
	        s = x.s,
	        e = x.e,
	        dp = DECIMAL_PLACES + 4,
	        half = new BigNumber('0.5');

	      // Negative/NaN/Infinity/zero?
	      if (s !== 1 || !c || !c[0]) {
	        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
	      }

	      // Initial estimate.
	      s = Math.sqrt(+valueOf(x));

	      // Math.sqrt underflow/overflow?
	      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	      if (s == 0 || s == 1 / 0) {
	        n = coeffToString(c);
	        if ((n.length + e) % 2 == 0) n += '0';
	        s = Math.sqrt(+n);
	        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

	        if (s == 1 / 0) {
	          n = '5e' + e;
	        } else {
	          n = s.toExponential();
	          n = n.slice(0, n.indexOf('e') + 1) + e;
	        }

	        r = new BigNumber(n);
	      } else {
	        r = new BigNumber(s + '');
	      }

	      // Check for zero.
	      // r could be zero if MIN_EXP is changed after the this value was created.
	      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	      // coeffToString to throw.
	      if (r.c[0]) {
	        e = r.e;
	        s = e + dp;
	        if (s < 3) s = 0;

	        // Newton-Raphson iteration.
	        for (; ;) {
	          t = r;
	          r = half.times(t.plus(div(x, t, dp, 1)));

	          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

	            // The exponent of r may here be one less than the final result exponent,
	            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	            // are indexed correctly.
	            if (r.e < e) --s;
	            n = n.slice(s - 3, s + 1);

	            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	            // iteration.
	            if (n == '9999' || !rep && n == '4999') {

	              // On the first iteration only, check to see if rounding up gives the
	              // exact result as the nines may infinitely repeat.
	              if (!rep) {
	                round(t, t.e + DECIMAL_PLACES + 2, 0);

	                if (t.times(t).eq(x)) {
	                  r = t;
	                  break;
	                }
	              }

	              dp += 4;
	              s += 4;
	              rep = 1;
	            } else {

	              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	              // result. If not, then there are further digits and m will be truthy.
	              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	                // Truncate to the first rounding digit.
	                round(r, r.e + DECIMAL_PLACES + 2, 1);
	                m = !r.times(r).eq(x);
	              }

	              break;
	            }
	          }
	        }
	      }

	      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in exponential notation and
	     * rounded using ROUNDING_MODE to dp fixed decimal places.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toExponential = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp++;
	      }
	      return format(this, dp, rm, 1);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounding
	     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	     * but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toFixed = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp = dp + this.e + 1;
	      }
	      return format(this, dp, rm);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounded
	     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	     * of the format or FORMAT object (see BigNumber.set).
	     *
	     * The formatting object may contain some or all of the properties shown below.
	     *
	     * FORMAT = {
	     *   prefix: '',
	     *   groupSize: 3,
	     *   secondaryGroupSize: 0,
	     *   groupSeparator: ',',
	     *   decimalSeparator: '.',
	     *   fractionGroupSize: 0,
	     *   fractionGroupSeparator: '\xA0',      // non-breaking space
	     *   suffix: ''
	     * };
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     * [format] {object} Formatting options. See FORMAT pbject above.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     * '[BigNumber Error] Argument not an object: {format}'
	     */
	    P.toFormat = function (dp, rm, format) {
	      var str,
	        x = this;

	      if (format == null) {
	        if (dp != null && rm && typeof rm == 'object') {
	          format = rm;
	          rm = null;
	        } else if (dp && typeof dp == 'object') {
	          format = dp;
	          dp = rm = null;
	        } else {
	          format = FORMAT;
	        }
	      } else if (typeof format != 'object') {
	        throw Error
	          (bignumberError + 'Argument not an object: ' + format);
	      }

	      str = x.toFixed(dp, rm);

	      if (x.c) {
	        var i,
	          arr = str.split('.'),
	          g1 = +format.groupSize,
	          g2 = +format.secondaryGroupSize,
	          groupSeparator = format.groupSeparator || '',
	          intPart = arr[0],
	          fractionPart = arr[1],
	          isNeg = x.s < 0,
	          intDigits = isNeg ? intPart.slice(1) : intPart,
	          len = intDigits.length;

	        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	        if (g1 > 0 && len > 0) {
	          i = len % g1 || g1;
	          intPart = intDigits.substr(0, i);
	          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
	          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
	          if (isNeg) intPart = '-' + intPart;
	        }

	        str = fractionPart
	         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
	          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
	           '$&' + (format.fractionGroupSeparator || ''))
	          : fractionPart)
	         : intPart;
	      }

	      return (format.prefix || '') + str + (format.suffix || '');
	    };


	    /*
	     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
	     * fraction with an integer numerator and an integer denominator.
	     * The denominator will be a positive non-zero value less than or equal to the specified
	     * maximum denominator. If a maximum denominator is not specified, the denominator will be
	     * the lowest value necessary to represent the number exactly.
	     *
	     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
	     *
	     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
	     */
	    P.toFraction = function (md) {
	      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
	        x = this,
	        xc = x.c;

	      if (md != null) {
	        n = new BigNumber(md);

	        // Throw if md is less than one or is not an integer, unless it is Infinity.
	        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
	          throw Error
	            (bignumberError + 'Argument ' +
	              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
	        }
	      }

	      if (!xc) return new BigNumber(x);

	      d = new BigNumber(ONE);
	      n1 = d0 = new BigNumber(ONE);
	      d1 = n0 = new BigNumber(ONE);
	      s = coeffToString(xc);

	      // Determine initial denominator.
	      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	      e = d.e = s.length - x.e - 1;
	      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
	      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

	      exp = MAX_EXP;
	      MAX_EXP = 1 / 0;
	      n = new BigNumber(s);

	      // n0 = d1 = 0
	      n0.c[0] = 0;

	      for (; ;)  {
	        q = div(n, d, 0, 1);
	        d2 = d0.plus(q.times(d1));
	        if (d2.comparedTo(md) == 1) break;
	        d0 = d1;
	        d1 = d2;
	        n1 = n0.plus(q.times(d2 = n1));
	        n0 = d2;
	        d = n.minus(q.times(d2 = d));
	        n = d2;
	      }

	      d2 = div(md.minus(d0), d1, 0, 1);
	      n0 = n0.plus(d2.times(n1));
	      d0 = d0.plus(d2.times(d1));
	      n0.s = n1.s = x.s;
	      e = e * 2;

	      // Determine which fraction is closer to x, n0/d0 or n1/d1
	      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
	          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

	      MAX_EXP = exp;

	      return r;
	    };


	    /*
	     * Return the value of this BigNumber converted to a number primitive.
	     */
	    P.toNumber = function () {
	      return +valueOf(this);
	    };


	    /*
	     * Return a string representing the value of this BigNumber rounded to sd significant digits
	     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	     * necessary to represent the integer part of the value in fixed-point notation, then use
	     * exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.toPrecision = function (sd, rm) {
	      if (sd != null) intCheck(sd, 1, MAX);
	      return format(this, sd, rm, 2);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	     * TO_EXP_NEG, return exponential notation.
	     *
	     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
	     *
	     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	     */
	    P.toString = function (b) {
	      var str,
	        n = this,
	        s = n.s,
	        e = n.e;

	      // Infinity or NaN?
	      if (e === null) {
	        if (s) {
	          str = 'Infinity';
	          if (s < 0) str = '-' + str;
	        } else {
	          str = 'NaN';
	        }
	      } else {
	        if (b == null) {
	          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	           ? toExponential(coeffToString(n.c), e)
	           : toFixedPoint(coeffToString(n.c), e, '0');
	        } else if (b === 10) {
	          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
	          str = toFixedPoint(coeffToString(n.c), n.e, '0');
	        } else {
	          intCheck(b, 2, ALPHABET.length, 'Base');
	          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
	        }

	        if (s < 0 && n.c[0]) str = '-' + str;
	      }

	      return str;
	    };


	    /*
	     * Return as toString, but do not accept a base argument, and include the minus sign for
	     * negative zero.
	     */
	    P.valueOf = P.toJSON = function () {
	      return valueOf(this);
	    };


	    P._isBigNumber = true;

	    if (configObject != null) BigNumber.set(configObject);

	    return BigNumber;
	  }


	  // PRIVATE HELPER FUNCTIONS

	  // These functions don't need access to variables,
	  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


	  function bitFloor(n) {
	    var i = n | 0;
	    return n > 0 || n === i ? i : i - 1;
	  }


	  // Return a coefficient array as a string of base 10 digits.
	  function coeffToString(a) {
	    var s, z,
	      i = 1,
	      j = a.length,
	      r = a[0] + '';

	    for (; i < j;) {
	      s = a[i++] + '';
	      z = LOG_BASE - s.length;
	      for (; z--; s = '0' + s);
	      r += s;
	    }

	    // Determine trailing zeros.
	    for (j = r.length; r.charCodeAt(--j) === 48;);

	    return r.slice(0, j + 1 || 1);
	  }


	  // Compare the value of BigNumbers x and y.
	  function compare(x, y) {
	    var a, b,
	      xc = x.c,
	      yc = y.c,
	      i = x.s,
	      j = y.s,
	      k = x.e,
	      l = y.e;

	    // Either NaN?
	    if (!i || !j) return null;

	    a = xc && !xc[0];
	    b = yc && !yc[0];

	    // Either zero?
	    if (a || b) return a ? b ? 0 : -j : i;

	    // Signs differ?
	    if (i != j) return i;

	    a = i < 0;
	    b = k == l;

	    // Either Infinity?
	    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

	    // Compare exponents.
	    if (!b) return k > l ^ a ? 1 : -1;

	    j = (k = xc.length) < (l = yc.length) ? k : l;

	    // Compare digit by digit.
	    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

	    // Compare lengths.
	    return k == l ? 0 : k > l ^ a ? 1 : -1;
	  }


	  /*
	   * Check that n is a primitive number, an integer, and in range, otherwise throw.
	   */
	  function intCheck(n, min, max, name) {
	    if (n < min || n > max || n !== mathfloor(n)) {
	      throw Error
	       (bignumberError + (name || 'Argument') + (typeof n == 'number'
	         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
	         : ' not a primitive number: ') + String(n));
	    }
	  }


	  // Assumes finite n.
	  function isOdd(n) {
	    var k = n.c.length - 1;
	    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
	  }


	  function toExponential(str, e) {
	    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
	     (e < 0 ? 'e' : 'e+') + e;
	  }


	  function toFixedPoint(str, e, z) {
	    var len, zs;

	    // Negative exponent?
	    if (e < 0) {

	      // Prepend zeros.
	      for (zs = z + '.'; ++e; zs += z);
	      str = zs + str;

	    // Positive exponent
	    } else {
	      len = str.length;

	      // Append zeros.
	      if (++e > len) {
	        for (zs = z, e -= len; --e; zs += z);
	        str += zs;
	      } else if (e < len) {
	        str = str.slice(0, e) + '.' + str.slice(e);
	      }
	    }

	    return str;
	  }


	  // EXPORT


	  BigNumber = clone();
	  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

	  // AMD.
	  if ( module.exports) {
	    module.exports = BigNumber;

	  // Browser.
	  } else {
	    if (!globalObject) {
	      globalObject = typeof self != 'undefined' && self ? self : window;
	    }

	    globalObject.BigNumber = BigNumber;
	  }
	})(commonjsGlobal);
	});

	/** Used for displaying RAW as NANO */

	function rawToNano(raw) {
	  return {
	    amount: dist.tools.convert(raw.raw, 'RAW', 'NANO')
	  };
	}
	function rawToNumber(raw) {
	  var number = new bignumber$1.BigNumber(rawToNano(raw).amount);
	  return number.toFixed(number.decimalPlaces());
	}
	function nanoToRaw(nano) {
	  return {
	    raw: dist.tools.convert(nano.amount, 'NANO', 'RAW')
	  };
	}
	function signReceiveBlock(address, privateKey, workHash, frontier, walletBalance, representative, blockHash, amount) {
	  var data = {
	    walletBalanceRaw: walletBalance.raw,
	    toAddress: address,
	    transactionHash: blockHash,
	    frontier: frontier,
	    representativeAddress: representative,
	    amountRaw: amount.raw,
	    work: workHash
	  };
	  return dist.block.receive(data, privateKey);
	}
	function signSendBlock(privateKey, walletBalance, fromAddress, toAddress, frontier, amount, workHash, representative) {
	  var data = {
	    walletBalanceRaw: walletBalance.raw,
	    fromAddress: fromAddress,
	    toAddress: toAddress,
	    representativeAddress: representative,
	    frontier: frontier,
	    amountRaw: amount.raw,
	    work: workHash
	  };
	  return dist.block.send(data, privateKey);
	}
	function signRepresentativeBlock(privateKey, walletBalance, address, representativeAddress, frontier, workHash) {
	  var data = {
	    walletBalanceRaw: walletBalance.raw,
	    address: address,
	    representativeAddress: representativeAddress,
	    frontier: frontier,
	    work: workHash
	  };
	  return dist.block.representative(data, privateKey);
	}

	var dateformat = createCommonjsModule(function (module, exports) {
	function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj};}else {_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};}return _typeof(obj)}(function(global){var _arguments=arguments;var dateFormat=function(){var token=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LlopSZWN]|"[^"]*"|'[^']*'/g;var timezone=/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;var timezoneClip=/[^-+\dA-Z]/g;return function(date,mask,utc,gmt){if(_arguments.length===1&&kindOf(date)==="string"&&!/\d/.test(date)){mask=date;date=undefined;}date=date||date===0?date:new Date;if(!(date instanceof Date)){date=new Date(date);}if(isNaN(date)){throw TypeError("Invalid date")}mask=String(dateFormat.masks[mask]||mask||dateFormat.masks["default"]);var maskSlice=mask.slice(0,4);if(maskSlice==="UTC:"||maskSlice==="GMT:"){mask=mask.slice(4);utc=true;if(maskSlice==="GMT:"){gmt=true;}}var _=function _(){return utc?"getUTC":"get"};var _d=function d(){return date[_()+"Date"]()};var D=function D(){return date[_()+"Day"]()};var _m=function m(){return date[_()+"Month"]()};var y=function y(){return date[_()+"FullYear"]()};var _H=function H(){return date[_()+"Hours"]()};var _M=function M(){return date[_()+"Minutes"]()};var _s=function s(){return date[_()+"Seconds"]()};var _L=function L(){return date[_()+"Milliseconds"]()};var _o=function o(){return utc?0:date.getTimezoneOffset()};var _W=function W(){return getWeek(date)};var _N=function N(){return getDayOfWeek(date)};var flags={d:function d(){return _d()},dd:function dd(){return pad(_d())},ddd:function ddd(){return dateFormat.i18n.dayNames[D()]},DDD:function DDD(){return getDayName({y:y(),m:_m(),D:D(),_:_(),dayName:dateFormat.i18n.dayNames[D()],short:true})},dddd:function dddd(){return dateFormat.i18n.dayNames[D()+7]},DDDD:function DDDD(){return getDayName({y:y(),m:_m(),D:D(),_:_(),dayName:dateFormat.i18n.dayNames[D()+7]})},m:function m(){return _m()+1},mm:function mm(){return pad(_m()+1)},mmm:function mmm(){return dateFormat.i18n.monthNames[_m()]},mmmm:function mmmm(){return dateFormat.i18n.monthNames[_m()+12]},yy:function yy(){return String(y()).slice(2)},yyyy:function yyyy(){return pad(y(),4)},h:function h(){return _H()%12||12},hh:function hh(){return pad(_H()%12||12)},H:function H(){return _H()},HH:function HH(){return pad(_H())},M:function M(){return _M()},MM:function MM(){return pad(_M())},s:function s(){return _s()},ss:function ss(){return pad(_s())},l:function l(){return pad(_L(),3)},L:function L(){return pad(Math.floor(_L()/10))},t:function t(){return _H()<12?dateFormat.i18n.timeNames[0]:dateFormat.i18n.timeNames[1]},tt:function tt(){return _H()<12?dateFormat.i18n.timeNames[2]:dateFormat.i18n.timeNames[3]},T:function T(){return _H()<12?dateFormat.i18n.timeNames[4]:dateFormat.i18n.timeNames[5]},TT:function TT(){return _H()<12?dateFormat.i18n.timeNames[6]:dateFormat.i18n.timeNames[7]},Z:function Z(){return gmt?"GMT":utc?"UTC":(String(date).match(timezone)||[""]).pop().replace(timezoneClip,"").replace(/GMT\+0000/g,"UTC")},o:function o(){return (_o()>0?"-":"+")+pad(Math.floor(Math.abs(_o())/60)*100+Math.abs(_o())%60,4)},p:function p(){return (_o()>0?"-":"+")+pad(Math.floor(Math.abs(_o())/60),2)+":"+pad(Math.floor(Math.abs(_o())%60),2)},S:function S(){return ["th","st","nd","rd"][_d()%10>3?0:(_d()%100-_d()%10!=10)*_d()%10]},W:function W(){return _W()},N:function N(){return _N()}};return mask.replace(token,function(match){if(match in flags){return flags[match]()}return match.slice(1,match.length-1)})}}();dateFormat.masks={default:"ddd mmm dd yyyy HH:MM:ss",shortDate:"m/d/yy",paddedShortDate:"mm/dd/yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:sso",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",expiresHeaderFormat:"ddd, dd mmm yyyy HH:MM:ss Z"};dateFormat.i18n={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],timeNames:["a","p","am","pm","A","P","AM","PM"]};var pad=function pad(val,len){val=String(val);len=len||2;while(val.length<len){val="0"+val;}return val};var getDayName=function getDayName(_ref){var y=_ref.y,m=_ref.m,D=_ref.D,_=_ref._,dayName=_ref.dayName,_ref$short=_ref["short"],_short=_ref$short===void 0?false:_ref$short;var today=new Date;var yesterday=new Date;yesterday.setDate(yesterday[_+"Date"]()-1);var tomorrow=new Date;tomorrow.setDate(tomorrow[_+"Date"]()+1);var today_D=function today_D(){return today[_+"Day"]()};var today_m=function today_m(){return today[_+"Month"]()};var today_y=function today_y(){return today[_+"FullYear"]()};var yesterday_D=function yesterday_D(){return yesterday[_+"Day"]()};var yesterday_m=function yesterday_m(){return yesterday[_+"Month"]()};var yesterday_y=function yesterday_y(){return yesterday[_+"FullYear"]()};var tomorrow_D=function tomorrow_D(){return tomorrow[_+"Day"]()};var tomorrow_m=function tomorrow_m(){return tomorrow[_+"Month"]()};var tomorrow_y=function tomorrow_y(){return tomorrow[_+"FullYear"]()};if(today_y()===y&&today_m()===m&&today_D()===D){return _short?"Tdy":"Today"}else if(yesterday_y()===y&&yesterday_m()===m&&yesterday_D()===D){return _short?"Ysd":"Yesterday"}else if(tomorrow_y()===y&&tomorrow_m()===m&&tomorrow_D()===D){return _short?"Tmw":"Tomorrow"}return dayName};var getWeek=function getWeek(date){var targetThursday=new Date(date.getFullYear(),date.getMonth(),date.getDate());targetThursday.setDate(targetThursday.getDate()-(targetThursday.getDay()+6)%7+3);var firstThursday=new Date(targetThursday.getFullYear(),0,4);firstThursday.setDate(firstThursday.getDate()-(firstThursday.getDay()+6)%7+3);var ds=targetThursday.getTimezoneOffset()-firstThursday.getTimezoneOffset();targetThursday.setHours(targetThursday.getHours()-ds);var weekDiff=(targetThursday-firstThursday)/(864e5*7);return 1+Math.floor(weekDiff)};var getDayOfWeek=function getDayOfWeek(date){var dow=date.getDay();if(dow===0){dow=7;}return dow};var kindOf=function kindOf(val){if(val===null){return "null"}if(val===undefined){return "undefined"}if(_typeof(val)!=="object"){return _typeof(val)}if(Array.isArray(val)){return "array"}return {}.toString.call(val).slice(8,-1).toLowerCase()};if((_typeof(exports))==="object"){module.exports=dateFormat;}else {global.dateFormat=dateFormat;}})(void 0);
	});

	var transactionType = function transactionType(transaction) {
	  switch (transaction.type) {
	    case 'receive':
	      return 'transaction-received';

	    case 'send':
	      return 'transaction-sent';

	    default:
	      return 'unknown';
	  }
	};
	var transactionReceived = function transactionReceived(transaction) {
	  switch (transaction.type) {
	    case 'receive':
	      return 'transaction-received-at';

	    case 'send':
	      return 'transaction-sent-at';

	    default:
	      return 'unknown';
	  }
	};
	var direction = function direction(transaction) {
	  switch (transaction.type) {
	    case 'receive':
	      return 'transaction-from';

	    case 'send':
	      return 'transaction-to';

	    default:
	      return 'unknown';
	  }
	};
	/** How we present values to the user */

	var rawToReadable = function rawToReadable(raw) {
	  var number = new bignumber$1.BigNumber(rawToNano(raw).amount);
	  var decimalPlaces = number.decimalPlaces();
	  var stringNumber = number.toFixed(Math.min(decimalPlaces, 6));
	  if (decimalPlaces > 6) return "".concat(stringNumber, "..");else return stringNumber;
	};
	var transactionText = function transactionText(transaction) {
	  return "".concat(getLanguage(transactionType(transaction)), " ").concat(rawToReadable(transaction.amount), " ").concat(getLanguage(direction(transaction)), " ").concat(truncateNanoAddress(transaction.account));
	};
	var transactionTime = function transactionTime(transaction) {
	  var date = new Date(Number(transaction.localTimestamp) * 1000);
	  return "".concat(getLanguage('at'), " ").concat(dateformat(date));
	};
	function truncateNanoAddress(address) {
	  return address.substr(0, 9) + '.....' + address.substr(address.length - 5, address.length);
	}
	function accountAliasOrFallback(account) {
	  return account.alias || 'unnamed-account';
	}

	function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_if_block$1(ctx) {
	  var withsecondary0;
	  var t0;
	  var withsecondary1;
	  var t1;
	  var withsecondary2;
	  var current;
	  withsecondary0 = new WithSecondary({
	    props: {
	      primaryLanguageId: "send",
	      secondaryText:
	      /*wallet*/
	      ctx[0].account.alias,
	      secondaryLanguageId: accountAliasOrFallback(
	      /*wallet*/
	      ctx[0].account)
	    },
	    $$inline: true
	  });
	  withsecondary0.$on("click",
	  /*click_handler_1*/
	  ctx[2]);
	  withsecondary1 = new WithSecondary({
	    props: {
	      primaryLanguageId: "transactions",
	      secondaryText:
	      /*wallet*/
	      ctx[0].account.alias,
	      secondaryLanguageId: accountAliasOrFallback(
	      /*wallet*/
	      ctx[0].account)
	    },
	    $$inline: true
	  });
	  withsecondary1.$on("click",
	  /*click_handler_2*/
	  ctx[3]);
	  withsecondary2 = new WithSecondary({
	    props: {
	      primaryLanguageId: "receive",
	      secondaryText:
	      /*wallet*/
	      ctx[0].account.alias,
	      secondaryLanguageId: accountAliasOrFallback(
	      /*wallet*/
	      ctx[0].account)
	    },
	    $$inline: true
	  });
	  withsecondary2.$on("click",
	  /*click_handler_3*/
	  ctx[4]);
	  var block = {
	    c: function create() {
	      create_component(withsecondary0.$$.fragment);
	      t0 = space();
	      create_component(withsecondary1.$$.fragment);
	      t1 = space();
	      create_component(withsecondary2.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(withsecondary0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(withsecondary1, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(withsecondary2, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var withsecondary0_changes = {};
	      if (dirty &
	      /*wallet*/
	      1) withsecondary0_changes.secondaryText =
	      /*wallet*/
	      ctx[0].account.alias;
	      if (dirty &
	      /*wallet*/
	      1) withsecondary0_changes.secondaryLanguageId = accountAliasOrFallback(
	      /*wallet*/
	      ctx[0].account);
	      withsecondary0.$set(withsecondary0_changes);
	      var withsecondary1_changes = {};
	      if (dirty &
	      /*wallet*/
	      1) withsecondary1_changes.secondaryText =
	      /*wallet*/
	      ctx[0].account.alias;
	      if (dirty &
	      /*wallet*/
	      1) withsecondary1_changes.secondaryLanguageId = accountAliasOrFallback(
	      /*wallet*/
	      ctx[0].account);
	      withsecondary1.$set(withsecondary1_changes);
	      var withsecondary2_changes = {};
	      if (dirty &
	      /*wallet*/
	      1) withsecondary2_changes.secondaryText =
	      /*wallet*/
	      ctx[0].account.alias;
	      if (dirty &
	      /*wallet*/
	      1) withsecondary2_changes.secondaryLanguageId = accountAliasOrFallback(
	      /*wallet*/
	      ctx[0].account);
	      withsecondary2.$set(withsecondary2_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(withsecondary0.$$.fragment, local);
	      transition_in(withsecondary1.$$.fragment, local);
	      transition_in(withsecondary2.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(withsecondary0.$$.fragment, local);
	      transition_out(withsecondary1.$$.fragment, local);
	      transition_out(withsecondary2.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(withsecondary0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(withsecondary1, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(withsecondary2, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$1.name,
	    type: "if",
	    source: "(31:8) {#if wallet.account}",
	    ctx: ctx
	  });
	  return block;
	} // (29:4) <List>


	function create_default_slot_1(ctx) {
	  var primary0;
	  var t0;
	  var t1;
	  var primary1;
	  var t2;
	  var primary2;
	  var current;
	  primary0 = new Primary({
	    props: {
	      primaryLanguageId: "wallet",
	      primaryText: "wallet"
	    },
	    $$inline: true
	  });
	  primary0.$on("click",
	  /*click_handler*/
	  ctx[1]);
	  var if_block =
	  /*wallet*/
	  ctx[0].account && create_if_block$1(ctx);
	  primary1 = new Primary({
	    props: {
	      primaryLanguageId: "about",
	      primaryText: "about"
	    },
	    $$inline: true
	  });
	  primary1.$on("click",
	  /*click_handler_4*/
	  ctx[5]);
	  primary2 = new Primary({
	    props: {
	      primaryLanguageId: "setup",
	      primaryText: "setup"
	    },
	    $$inline: true
	  });
	  primary2.$on("click",
	  /*click_handler_5*/
	  ctx[6]);
	  var block = {
	    c: function create() {
	      create_component(primary0.$$.fragment);
	      t0 = space();
	      if (if_block) if_block.c();
	      t1 = space();
	      create_component(primary1.$$.fragment);
	      t2 = space();
	      create_component(primary2.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(primary0, target, anchor);
	      insert_dev(target, t0, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(primary1, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(primary2, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (
	      /*wallet*/
	      ctx[0].account) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*wallet*/
	          1) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$1(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(t1.parentNode, t1);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(primary0.$$.fragment, local);
	      transition_in(if_block);
	      transition_in(primary1.$$.fragment, local);
	      transition_in(primary2.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(primary0.$$.fragment, local);
	      transition_out(if_block);
	      transition_out(primary1.$$.fragment, local);
	      transition_out(primary2.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(primary0, detaching);
	      if (detaching) detach_dev(t0);
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(primary1, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(primary2, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_1.name,
	    type: "slot",
	    source: "(29:4) <List>",
	    ctx: ctx
	  });
	  return block;
	} // (28:0) <Content titleKey="menu">


	function create_default_slot$2(ctx) {
	  var list;
	  var current;
	  list = new List({
	    props: {
	      $$slots: {
	        "default": [create_default_slot_1]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(list.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(list, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var list_changes = {};

	      if (dirty &
	      /*$$scope, wallet*/
	      257) {
	        list_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      list.$set(list_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(list.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(list.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(list, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$2.name,
	    type: "slot",
	    source: "(28:0) <Content titleKey=\\\"menu\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$5(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "menu",
	      $$slots: {
	        "default": [create_default_slot$2]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, wallet*/
	      257) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$5.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$5($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Menu", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var wallet = $$props.wallet;
	  afterUpdate(function () {
	    return navigationReload({
	      rightKey: {
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    back();

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        },
	        languageId: "close-menu"
	      }
	    });
	  });
	  var writable_props = ["wallet"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Menu> was created with unknown prop '".concat(key, "'"));
	  });

	  var click_handler = function click_handler() {
	    return pushMenu("accounts");
	  };

	  var click_handler_1 = function click_handler_1() {
	    return pushAccountAction("send");
	  };

	  var click_handler_2 = function click_handler_2() {
	    return pushAccountAction("transactions");
	  };

	  var click_handler_3 = function click_handler_3() {
	    return pushAccountAction("receive");
	  };

	  var click_handler_4 = function click_handler_4() {
	    return pushMenu("about");
	  };

	  var click_handler_5 = function click_handler_5() {
	    return pushSetupAction("menu");
	  };

	  $$self.$$set = function ($$props) {
	    if ("wallet" in $$props) $$invalidate(0, wallet = $$props.wallet);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      List: List,
	      Primary: Primary,
	      Content: Content,
	      WithSecondary: WithSecondary,
	      back: back,
	      navigationReload: navigationReload,
	      afterUpdate: afterUpdate,
	      pushMenu: pushMenu,
	      pushAccountAction: pushAccountAction,
	      pushSetupAction: pushSetupAction,
	      accountAliasOrFallback: accountAliasOrFallback,
	      wallet: wallet
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("wallet" in $$props) $$invalidate(0, wallet = $$props.wallet);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [wallet, click_handler, click_handler_1, click_handler_2, click_handler_3, click_handler_4, click_handler_5];
	}

	var Menu = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Menu, _SvelteComponentDev);

	  var _super = _createSuper$6(Menu);

	  function Menu(options) {
	    var _this;

	    classCallCheck(this, Menu);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$5, create_fragment$5, safe_not_equal, {
	      wallet: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Menu",
	      options: options,
	      id: create_fragment$5.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*wallet*/
	    ctx[0] === undefined && !("wallet" in props)) {
	      console.warn("<Menu> was created without expected prop 'wallet'");
	    }

	    return _this;
	  }

	  createClass(Menu, [{
	    key: "wallet",
	    get: function get() {
	      throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Menu;
	}(SvelteComponentDev);

	function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$5 = "src/components/Seperator.svelte";

	function create_fragment$6(ctx) {
	  var div;
	  var span;
	  var t;
	  var block = {
	    c: function create() {
	      div = element("div");
	      span = element("span");
	      t = text(
	      /*primaryText*/
	      ctx[1]);
	      attr_dev(span, "class", "kui-thi svelte-13jxy9q");
	      attr_dev(span, "data-l10n-id",
	      /*languageId*/
	      ctx[0]);
	      add_location(span, file$5, 18, 4, 337);
	      attr_dev(div, "class", "kui-separator svelte-13jxy9q");
	      add_location(div, file$5, 17, 0, 305);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, span);
	      append_dev(span, t);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*primaryText*/
	      2) set_data_dev(t,
	      /*primaryText*/
	      ctx[1]);

	      if (dirty &
	      /*languageId*/
	      1) {
	        attr_dev(span, "data-l10n-id",
	        /*languageId*/
	        ctx[0]);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$6.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$6($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Seperator", slots, []);
	  var languageId = $$props.languageId;
	  var primaryText = $$props.primaryText;
	  var writable_props = ["languageId", "primaryText"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Seperator> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("primaryText" in $$props) $$invalidate(1, primaryText = $$props.primaryText);
	  };

	  $$self.$capture_state = function () {
	    return {
	      languageId: languageId,
	      primaryText: primaryText
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("primaryText" in $$props) $$invalidate(1, primaryText = $$props.primaryText);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId, primaryText];
	}

	var Seperator = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Seperator, _SvelteComponentDev);

	  var _super = _createSuper$7(Seperator);

	  function Seperator(options) {
	    var _this;

	    classCallCheck(this, Seperator);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$6, create_fragment$6, safe_not_equal, {
	      languageId: 0,
	      primaryText: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Seperator",
	      options: options,
	      id: create_fragment$6.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[0] === undefined && !("languageId" in props)) {
	      console.warn("<Seperator> was created without expected prop 'languageId'");
	    }

	    if (
	    /*primaryText*/
	    ctx[1] === undefined && !("primaryText" in props)) {
	      console.warn("<Seperator> was created without expected prop 'primaryText'");
	    }

	    return _this;
	  }

	  createClass(Seperator, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<Seperator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Seperator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "primaryText",
	    get: function get() {
	      throw new Error("<Seperator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Seperator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Seperator;
	}(SvelteComponentDev);

	function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$6 = "src/components/Text.svelte";

	function create_fragment$7(ctx) {
	  var span;
	  var current;
	  var mounted;
	  var dispose;
	  var default_slot_template =
	  /*#slots*/
	  ctx[4]["default"];
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[3], null);
	  var block = {
	    c: function create() {
	      span = element("span");
	      if (default_slot) default_slot.c();
	      attr_dev(span, "class", "kui-text svelte-d33aem");
	      attr_dev(span, "tabindex", "1");
	      attr_dev(span, "data-l10n-id",
	      /*languageId*/
	      ctx[0]);
	      toggle_class(span, "navigation", !
	      /*preventNavigation*/
	      ctx[2]);
	      toggle_class(span, "text-break",
	      /*breakAll*/
	      ctx[1]);
	      add_location(span, file$6, 24, 0, 455);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);

	      if (default_slot) {
	        default_slot.m(span, null);
	      }

	      current = true;

	      if (!mounted) {
	        dispose = [listen_dev(span, "click",
	        /*click_handler*/
	        ctx[5], false, false, false), listen_dev(span, "focus",
	        /*focus_handler*/
	        ctx[6], false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        8) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[3], dirty, null, null);
	        }
	      }

	      if (!current || dirty &
	      /*languageId*/
	      1) {
	        attr_dev(span, "data-l10n-id",
	        /*languageId*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*preventNavigation*/
	      4) {
	        toggle_class(span, "navigation", !
	        /*preventNavigation*/
	        ctx[2]);
	      }

	      if (dirty &
	      /*breakAll*/
	      2) {
	        toggle_class(span, "text-break",
	        /*breakAll*/
	        ctx[1]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	      if (default_slot) default_slot.d(detaching);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$7.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$7($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Text", slots, ['default']);
	  var languageId = $$props.languageId;
	  var breakAll = $$props.breakAll;
	  var _$$props$preventNavig = $$props.preventNavigation,
	      preventNavigation = _$$props$preventNavig === void 0 ? false : _$$props$preventNavig;
	  var writable_props = ["languageId", "breakAll", "preventNavigation"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Text> was created with unknown prop '".concat(key, "'"));
	  });

	  function click_handler(event) {
	    bubble($$self, event);
	  }

	  function focus_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("breakAll" in $$props) $$invalidate(1, breakAll = $$props.breakAll);
	    if ("preventNavigation" in $$props) $$invalidate(2, preventNavigation = $$props.preventNavigation);
	    if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	  };

	  $$self.$capture_state = function () {
	    return {
	      languageId: languageId,
	      breakAll: breakAll,
	      preventNavigation: preventNavigation
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("breakAll" in $$props) $$invalidate(1, breakAll = $$props.breakAll);
	    if ("preventNavigation" in $$props) $$invalidate(2, preventNavigation = $$props.preventNavigation);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId, breakAll, preventNavigation, $$scope, slots, click_handler, focus_handler];
	}

	var Text = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Text, _SvelteComponentDev);

	  var _super = _createSuper$8(Text);

	  function Text(options) {
	    var _this;

	    classCallCheck(this, Text);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$7, create_fragment$7, safe_not_equal, {
	      languageId: 0,
	      breakAll: 1,
	      preventNavigation: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Text",
	      options: options,
	      id: create_fragment$7.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[0] === undefined && !("languageId" in props)) {
	      console.warn("<Text> was created without expected prop 'languageId'");
	    }

	    if (
	    /*breakAll*/
	    ctx[1] === undefined && !("breakAll" in props)) {
	      console.warn("<Text> was created without expected prop 'breakAll'");
	    }

	    return _this;
	  }

	  createClass(Text, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "breakAll",
	    get: function get() {
	      throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "preventNavigation",
	    get: function get() {
	      throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Text;
	}(SvelteComponentDev);

	function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$7 = "src/components/input/LabelInput.svelte"; // (55:4) {#if languageId || text}

	function create_if_block$2(ctx) {
	  var label;
	  var t;
	  var label_for_value;
	  var block = {
	    c: function create() {
	      label = element("label");
	      t = text(
	      /*text*/
	      ctx[1]);
	      attr_dev(label, "for", label_for_value =
	      /*languageId*/
	      ctx[0] ||
	      /*text*/
	      ctx[1]);
	      attr_dev(label, "class", "kui-input-label kui-h3 svelte-1xru82q");
	      attr_dev(label, "data-l10n-id",
	      /*languageId*/
	      ctx[0]);
	      add_location(label, file$7, 55, 8, 1210);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, label, anchor);
	      append_dev(label, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*text*/
	      2) set_data_dev(t,
	      /*text*/
	      ctx[1]);

	      if (dirty &
	      /*languageId, text*/
	      3 && label_for_value !== (label_for_value =
	      /*languageId*/
	      ctx[0] ||
	      /*text*/
	      ctx[1])) {
	        attr_dev(label, "for", label_for_value);
	      }

	      if (dirty &
	      /*languageId*/
	      1) {
	        attr_dev(label, "data-l10n-id",
	        /*languageId*/
	        ctx[0]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(label);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$2.name,
	    type: "if",
	    source: "(55:4) {#if languageId || text}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$8(ctx) {
	  var div;
	  var t;
	  var current;
	  var mounted;
	  var dispose;
	  var if_block = (
	  /*languageId*/
	  ctx[0] ||
	  /*text*/
	  ctx[1]) && create_if_block$2(ctx);
	  var default_slot_template =
	  /*#slots*/
	  ctx[4]["default"];
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[3], null);
	  var block = {
	    c: function create() {
	      div = element("div");
	      if (if_block) if_block.c();
	      t = space();
	      if (default_slot) default_slot.c();
	      attr_dev(div, "class", "kui-input-holder svelte-1xru82q");
	      toggle_class(div, "row",
	      /*row*/
	      ctx[2]);
	      add_location(div, file$7, 53, 0, 1123);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      if (if_block) if_block.m(div, null);
	      append_dev(div, t);

	      if (default_slot) {
	        default_slot.m(div, null);
	      }

	      current = true;

	      if (!mounted) {
	        dispose = listen_dev(div, "focus",
	        /*focus_handler*/
	        ctx[5], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*languageId*/
	      ctx[0] ||
	      /*text*/
	      ctx[1]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$2(ctx);
	          if_block.c();
	          if_block.m(div, t);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        8) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[3], dirty, null, null);
	        }
	      }

	      if (dirty &
	      /*row*/
	      4) {
	        toggle_class(div, "row",
	        /*row*/
	        ctx[2]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (if_block) if_block.d();
	      if (default_slot) default_slot.d(detaching);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$8.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$8($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("LabelInput", slots, ['default']);
	  var languageId = $$props.languageId;
	  var text = $$props.text;
	  var _$$props$row = $$props.row,
	      row = _$$props$row === void 0 ? false : _$$props$row;
	  var writable_props = ["languageId", "text", "row"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<LabelInput> was created with unknown prop '".concat(key, "'"));
	  });

	  function focus_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(1, text = $$props.text);
	    if ("row" in $$props) $$invalidate(2, row = $$props.row);
	    if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	  };

	  $$self.$capture_state = function () {
	    return {
	      languageId: languageId,
	      text: text,
	      row: row
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(1, text = $$props.text);
	    if ("row" in $$props) $$invalidate(2, row = $$props.row);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId, text, row, $$scope, slots, focus_handler];
	}

	var LabelInput = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(LabelInput, _SvelteComponentDev);

	  var _super = _createSuper$9(LabelInput);

	  function LabelInput(options) {
	    var _this;

	    classCallCheck(this, LabelInput);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$8, create_fragment$8, safe_not_equal, {
	      languageId: 0,
	      text: 1,
	      row: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "LabelInput",
	      options: options,
	      id: create_fragment$8.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[0] === undefined && !("languageId" in props)) {
	      console.warn("<LabelInput> was created without expected prop 'languageId'");
	    }

	    if (
	    /*text*/
	    ctx[1] === undefined && !("text" in props)) {
	      console.warn("<LabelInput> was created without expected prop 'text'");
	    }

	    return _this;
	  }

	  createClass(LabelInput, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<LabelInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<LabelInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "text",
	    get: function get() {
	      throw new Error("<LabelInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<LabelInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "row",
	    get: function get() {
	      throw new Error("<LabelInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<LabelInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return LabelInput;
	}(SvelteComponentDev);

	function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$8 = "src/components/input/NumberInput.svelte"; // (15:0) <LabelInput languageId={languageId} text={text}>

	function create_default_slot$3(ctx) {
	  var input;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      input = element("input");
	      attr_dev(input, "id",
	      /*languageId*/
	      ctx[1]);
	      attr_dev(input, "type", "tel");
	      attr_dev(input, "class", "kui-input kui-text navigation svelte-70wxe5");
	      attr_dev(input, "data-l10n-id",
	      /*placeholderLanguage*/
	      ctx[3]);
	      attr_dev(input, "autocomplete", "off");
	      add_location(input, file$8, 16, 4, 537);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, input, anchor);
	      set_input_value(input,
	      /*value*/
	      ctx[0]);

	      if (!mounted) {
	        dispose = listen_dev(input, "input",
	        /*input_input_handler*/
	        ctx[4]);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*languageId*/
	      2) {
	        attr_dev(input, "id",
	        /*languageId*/
	        ctx[1]);
	      }

	      if (dirty &
	      /*placeholderLanguage*/
	      8) {
	        attr_dev(input, "data-l10n-id",
	        /*placeholderLanguage*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*value*/
	      1) {
	        set_input_value(input,
	        /*value*/
	        ctx[0]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(input);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$3.name,
	    type: "slot",
	    source: "(15:0) <LabelInput languageId={languageId} text={text}>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$9(ctx) {
	  var labelinput;
	  var current;
	  labelinput = new LabelInput({
	    props: {
	      languageId:
	      /*languageId*/
	      ctx[1],
	      text:
	      /*text*/
	      ctx[2],
	      $$slots: {
	        "default": [create_default_slot$3]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(labelinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(labelinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var labelinput_changes = {};
	      if (dirty &
	      /*languageId*/
	      2) labelinput_changes.languageId =
	      /*languageId*/
	      ctx[1];
	      if (dirty &
	      /*text*/
	      4) labelinput_changes.text =
	      /*text*/
	      ctx[2];

	      if (dirty &
	      /*$$scope, languageId, placeholderLanguage, value*/
	      43) {
	        labelinput_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      labelinput.$set(labelinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(labelinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(labelinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(labelinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$9.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$9($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("NumberInput", slots, []);
	  var languageId = $$props.languageId;
	  var text = $$props.text;
	  var placeholderLanguage = $$props.placeholderLanguage;
	  var value = $$props.value;
	  var writable_props = ["languageId", "text", "placeholderLanguage", "value"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<NumberInput> was created with unknown prop '".concat(key, "'"));
	  });

	  function input_input_handler() {
	    value = this.value;
	    $$invalidate(0, value);
	  }

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(1, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(2, text = $$props.text);
	    if ("placeholderLanguage" in $$props) $$invalidate(3, placeholderLanguage = $$props.placeholderLanguage);
	    if ("value" in $$props) $$invalidate(0, value = $$props.value);
	  };

	  $$self.$capture_state = function () {
	    return {
	      LabelInput: LabelInput,
	      languageId: languageId,
	      text: text,
	      placeholderLanguage: placeholderLanguage,
	      value: value
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(1, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(2, text = $$props.text);
	    if ("placeholderLanguage" in $$props) $$invalidate(3, placeholderLanguage = $$props.placeholderLanguage);
	    if ("value" in $$props) $$invalidate(0, value = $$props.value);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [value, languageId, text, placeholderLanguage, input_input_handler];
	}

	var NumberInput = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(NumberInput, _SvelteComponentDev);

	  var _super = _createSuper$a(NumberInput);

	  function NumberInput(options) {
	    var _this;

	    classCallCheck(this, NumberInput);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$9, create_fragment$9, safe_not_equal, {
	      languageId: 1,
	      text: 2,
	      placeholderLanguage: 3,
	      value: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "NumberInput",
	      options: options,
	      id: create_fragment$9.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[1] === undefined && !("languageId" in props)) {
	      console.warn("<NumberInput> was created without expected prop 'languageId'");
	    }

	    if (
	    /*text*/
	    ctx[2] === undefined && !("text" in props)) {
	      console.warn("<NumberInput> was created without expected prop 'text'");
	    }

	    if (
	    /*placeholderLanguage*/
	    ctx[3] === undefined && !("placeholderLanguage" in props)) {
	      console.warn("<NumberInput> was created without expected prop 'placeholderLanguage'");
	    }

	    if (
	    /*value*/
	    ctx[0] === undefined && !("value" in props)) {
	      console.warn("<NumberInput> was created without expected prop 'value'");
	    }

	    return _this;
	  }

	  createClass(NumberInput, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "text",
	    get: function get() {
	      throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "placeholderLanguage",
	    get: function get() {
	      throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      throw new Error("<NumberInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<NumberInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return NumberInput;
	}(SvelteComponentDev);

	function hashString(string) {
	  var hash = 0;
	  if (string.length == 0) return hash;

	  for (var i = 0; i < string.length; i++) {
	    var _char = string.charCodeAt(i);

	    hash = (hash << 5) - hash + _char;
	    hash = hash & hash; // Convert to 32bit integer
	  }

	  return Math.abs(hash);
	}

	function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_else_block(ctx) {
	  var text_1;
	  var t;
	  var numberinput;
	  var updating_value;
	  var current;
	  text_1 = new Text({
	    props: {
	      languageId: "seed-export-text"
	    },
	    $$inline: true
	  });

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[3].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "unlock-label",
	    placeholderLanguage: "unlock-label"
	  };

	  if (
	  /*inputPhrase*/
	  ctx[0] !== void 0) {
	    numberinput_props.value =
	    /*inputPhrase*/
	    ctx[0];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(text_1.$$.fragment);
	      t = space();
	      create_component(numberinput.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(numberinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var numberinput_changes = {};

	      if (!updating_value && dirty &
	      /*inputPhrase*/
	      1) {
	        updating_value = true;
	        numberinput_changes.value =
	        /*inputPhrase*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(text_1.$$.fragment, local);
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(text_1.$$.fragment, local);
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(numberinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block.name,
	    type: "else",
	    source: "(52:0) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (48:0) {#if seed}


	function create_if_block$3(ctx) {
	  var seperator;
	  var t0;
	  var text0;
	  var t1;
	  var text1;
	  var t2;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "wallet-seed"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      breakAll: true,
	      $$slots: {
	        "default": [create_default_slot$4]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "seed-checksum"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(text1.$$.fragment);
	      t2 = text(
	      /*seedChecksum*/
	      ctx[2]);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(text1, target, anchor);
	      insert_dev(target, t2, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var text0_changes = {};

	      if (dirty &
	      /*$$scope, seed*/
	      130) {
	        text0_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      text0.$set(text0_changes);
	      if (!current || dirty &
	      /*seedChecksum*/
	      4) set_data_dev(t2,
	      /*seedChecksum*/
	      ctx[2]);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(text1, detaching);
	      if (detaching) detach_dev(t2);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$3.name,
	    type: "if",
	    source: "(48:0) {#if seed}",
	    ctx: ctx
	  });
	  return block;
	} // (50:4) <Text breakAll={true}>


	function create_default_slot$4(ctx) {
	  var t;
	  var block = {
	    c: function create() {
	      t = text(
	      /*seed*/
	      ctx[1]);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*seed*/
	      2) set_data_dev(t,
	      /*seed*/
	      ctx[1]);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$4.name,
	    type: "slot",
	    source: "(50:4) <Text breakAll={true}>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$a(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var if_block_anchor;
	  var current;
	  var if_block_creators = [create_if_block$3, create_else_block];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*seed*/
	    ctx[1]) return 0;
	    return 1;
	  }

	  current_block_type_index = select_block_type(ctx);
	  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  var block = {
	    c: function create() {
	      if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if_blocks[current_block_type_index].m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if_blocks[current_block_type_index].p(ctx, dirty);
	      } else {
	        group_outros();
	        transition_out(if_blocks[previous_block_index], 1, 1, function () {
	          if_blocks[previous_block_index] = null;
	        });
	        check_outros();
	        if_block = if_blocks[current_block_type_index];

	        if (!if_block) {
	          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	          if_block.c();
	        } else {
	          if_block.p(ctx, dirty);
	        }

	        transition_in(if_block, 1);
	        if_block.m(if_block_anchor.parentNode, if_block_anchor);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if_blocks[current_block_type_index].d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$a.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$a($$self, $$props, $$invalidate) {
	  var seedChecksum;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SeedExporter", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var inputPhrase;
	  var seed;

	  var showSeed = function showSeed() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      var data;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.prev = 0;
	              _context.next = 3;
	              return unlockWallet(inputPhrase);

	            case 3:
	              data = _context.sent;
	              $$invalidate(1, seed = data.seed);
	              clearSoftwareKeys();
	              _context.next = 11;
	              break;

	            case 8:
	              _context.prev = 8;
	              _context.t0 = _context["catch"](0);
	              pushToast({
	                languageId: "wrong-pin",
	                type: "info"
	              });

	            case 11:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[0, 8]]);
	    }));
	  };

	  var softwareKeys = function softwareKeys(disabledUnlock) {
	    return {
	      middleKey: {
	        disabled: disabledUnlock,
	        onClick: showSeed,
	        languageId: "unlock-wallet"
	      }
	    };
	  };

	  onMount(function () {
	    return navigationReload(softwareKeys(true));
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SeedExporter> was created with unknown prop '".concat(key, "'"));
	  });

	  function numberinput_value_binding(value) {
	    inputPhrase = value;
	    $$invalidate(0, inputPhrase);
	  }

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Text: Text,
	      NumberInput: NumberInput,
	      clearSoftwareKeys: clearSoftwareKeys,
	      setSoftwareKeys: setSoftwareKeys,
	      navigationReload: navigationReload,
	      pushToast: pushToast,
	      onMount: onMount,
	      unlockWallet: unlockWallet,
	      Seperator: Seperator,
	      hashString: hashString,
	      inputPhrase: inputPhrase,
	      seed: seed,
	      showSeed: showSeed,
	      softwareKeys: softwareKeys,
	      seedChecksum: seedChecksum
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("inputPhrase" in $$props) $$invalidate(0, inputPhrase = $$props.inputPhrase);
	    if ("seed" in $$props) $$invalidate(1, seed = $$props.seed);
	    if ("seedChecksum" in $$props) $$invalidate(2, seedChecksum = $$props.seedChecksum);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*seed*/
	    2) {
	       $$invalidate(2, seedChecksum = seed ? hashString(seed) : undefined);
	    }

	    if ($$self.$$.dirty &
	    /*inputPhrase*/
	    1) {
	       {
	        var valid = inputPhrase && inputPhrase.length >= 4;
	        setSoftwareKeys(softwareKeys(!valid));
	      }
	    }
	  };

	  return [inputPhrase, seed, seedChecksum, numberinput_value_binding];
	}

	var SeedExporter = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(SeedExporter, _SvelteComponentDev);

	  var _super = _createSuper$b(SeedExporter);

	  function SeedExporter(options) {
	    var _this;

	    classCallCheck(this, SeedExporter);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$a, create_fragment$a, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "SeedExporter",
	      options: options,
	      id: create_fragment$a.name
	    });
	    return _this;
	  }

	  return SeedExporter;
	}(SvelteComponentDev);

	function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_if_block_1(ctx) {
	  var seedexporter;
	  var current;
	  seedexporter = new SeedExporter({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seedexporter.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seedexporter, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seedexporter.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seedexporter.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seedexporter, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1.name,
	    type: "if",
	    source: "(20:44) ",
	    ctx: ctx
	  });
	  return block;
	} // (15:4) {#if setupAction === 'menu'}


	function create_if_block$4(ctx) {
	  var seperator;
	  var t;
	  var list;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "setup-action"
	    },
	    $$inline: true
	  });
	  list = new List({
	    props: {
	      $$slots: {
	        "default": [create_default_slot_1$1]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t = space();
	      create_component(list.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(list, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var list_changes = {};

	      if (dirty &
	      /*$$scope*/
	      4) {
	        list_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      list.$set(list_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(list.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(list.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(list, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$4.name,
	    type: "if",
	    source: "(15:4) {#if setupAction === 'menu'}",
	    ctx: ctx
	  });
	  return block;
	} // (17:8) <List>


	function create_default_slot_1$1(ctx) {
	  var primary;
	  var current;
	  primary = new Primary({
	    props: {
	      primaryLanguageId: "export-seed"
	    },
	    $$inline: true
	  });
	  primary.$on("click",
	  /*click_handler*/
	  ctx[1]);
	  var block = {
	    c: function create() {
	      create_component(primary.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(primary, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(primary.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(primary.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(primary, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_1$1.name,
	    type: "slot",
	    source: "(17:8) <List>",
	    ctx: ctx
	  });
	  return block;
	} // (14:0) <Content titleKey="setup">


	function create_default_slot$5(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var if_block_anchor;
	  var current;
	  var if_block_creators = [create_if_block$4, create_if_block_1];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*setupAction*/
	    ctx[0] === "menu") return 0;
	    if (
	    /*setupAction*/
	    ctx[0] === "export-seed") return 1;
	    return -1;
	  }

	  if (~(current_block_type_index = select_block_type(ctx))) {
	    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  }

	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    m: function mount(target, anchor) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].m(target, anchor);
	      }

	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if (~current_block_type_index) {
	          if_blocks[current_block_type_index].p(ctx, dirty);
	        }
	      } else {
	        if (if_block) {
	          group_outros();
	          transition_out(if_blocks[previous_block_index], 1, 1, function () {
	            if_blocks[previous_block_index] = null;
	          });
	          check_outros();
	        }

	        if (~current_block_type_index) {
	          if_block = if_blocks[current_block_type_index];

	          if (!if_block) {
	            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	            if_block.c();
	          } else {
	            if_block.p(ctx, dirty);
	          }

	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        } else {
	          if_block = null;
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].d(detaching);
	      }

	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$5.name,
	    type: "slot",
	    source: "(14:0) <Content titleKey=\\\"setup\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$b(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "setup",
	      $$slots: {
	        "default": [create_default_slot$5]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, setupAction*/
	      5) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$b.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$b($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Setup", slots, []);
	  var setupAction = $$props.setupAction;
	  afterUpdate(function () {
	    return navigationReload();
	  });
	  var writable_props = ["setupAction"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Setup> was created with unknown prop '".concat(key, "'"));
	  });

	  var click_handler = function click_handler() {
	    return pushSetupAction("export-seed");
	  };

	  $$self.$$set = function ($$props) {
	    if ("setupAction" in $$props) $$invalidate(0, setupAction = $$props.setupAction);
	  };

	  $$self.$capture_state = function () {
	    return {
	      Seperator: Seperator,
	      List: List,
	      Primary: Primary,
	      Content: Content,
	      afterUpdate: afterUpdate,
	      navigationReload: navigationReload,
	      pushSetupAction: pushSetupAction,
	      SeedExporter: SeedExporter,
	      setupAction: setupAction
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("setupAction" in $$props) $$invalidate(0, setupAction = $$props.setupAction);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [setupAction, click_handler];
	}

	var Setup = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Setup, _SvelteComponentDev);

	  var _super = _createSuper$c(Setup);

	  function Setup(options) {
	    var _this;

	    classCallCheck(this, Setup);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$b, create_fragment$b, safe_not_equal, {
	      setupAction: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Setup",
	      options: options,
	      id: create_fragment$b.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*setupAction*/
	    ctx[0] === undefined && !("setupAction" in props)) {
	      console.warn("<Setup> was created without expected prop 'setupAction'");
	    }

	    return _this;
	  }

	  createClass(Setup, [{
	    key: "setupAction",
	    get: function get() {
	      throw new Error("<Setup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Setup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Setup;
	}(SvelteComponentDev);

	function _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$9 = "src/components/Link.svelte";

	function create_fragment$c(ctx) {
	  var a;
	  var current;
	  var default_slot_template =
	  /*#slots*/
	  ctx[2]["default"];
	  var default_slot = create_slot(default_slot_template, ctx,
	  /*$$scope*/
	  ctx[1], null);
	  var block = {
	    c: function create() {
	      a = element("a");
	      if (default_slot) default_slot.c();
	      attr_dev(a, "href",
	      /*href*/
	      ctx[0]);
	      attr_dev(a, "class", "kui-text navigation svelte-bu84q3");
	      attr_dev(a, "target", "_blank");
	      add_location(a, file$9, 18, 0, 298);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, a, anchor);

	      if (default_slot) {
	        default_slot.m(a, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (default_slot) {
	        if (default_slot.p && dirty &
	        /*$$scope*/
	        2) {
	          update_slot(default_slot, default_slot_template, ctx,
	          /*$$scope*/
	          ctx[1], dirty, null, null);
	        }
	      }

	      if (!current || dirty &
	      /*href*/
	      1) {
	        attr_dev(a, "href",
	        /*href*/
	        ctx[0]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(default_slot, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(default_slot, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(a);
	      if (default_slot) default_slot.d(detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$c.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$c($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Link", slots, ['default']);
	  var href = $$props.href;
	  var writable_props = ["href"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Link> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("href" in $$props) $$invalidate(0, href = $$props.href);
	    if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	  };

	  $$self.$capture_state = function () {
	    return {
	      href: href
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("href" in $$props) $$invalidate(0, href = $$props.href);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [href, $$scope, slots];
	}

	var Link = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Link, _SvelteComponentDev);

	  var _super = _createSuper$d(Link);

	  function Link(options) {
	    var _this;

	    classCallCheck(this, Link);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$c, create_fragment$c, safe_not_equal, {
	      href: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Link",
	      options: options,
	      id: create_fragment$c.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*href*/
	    ctx[0] === undefined && !("href" in props)) {
	      console.warn("<Link> was created without expected prop 'href'");
	    }

	    return _this;
	  }

	  createClass(Link, [{
	    key: "href",
	    get: function get() {
	      throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Link;
	}(SvelteComponentDev);

	function _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$e() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_default_slot_2(ctx) {
	  var t;
	  var block = {
	    c: function create() {
	      t = text("Kaiak Github");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_2.name,
	    type: "slot",
	    source: "(19:4) <Link href=\\\"https://github.com/Kaiak/kaiak-wallet\\\">",
	    ctx: ctx
	  });
	  return block;
	} // (21:4) <Text>


	function create_default_slot_1$2(ctx) {
	  var t;
	  var block = {
	    c: function create() {
	      t = text(
	      /*getVersion*/
	      ctx[0]);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*getVersion*/
	      1) set_data_dev(t,
	      /*getVersion*/
	      ctx[0]);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_1$2.name,
	    type: "slot",
	    source: "(21:4) <Text>",
	    ctx: ctx
	  });
	  return block;
	} // (16:0) <Content titleKey="about">


	function create_default_slot$6(ctx) {
	  var seperator0;
	  var t0;
	  var text0;
	  var t1;
	  var link;
	  var t2;
	  var seperator1;
	  var t3;
	  var text1;
	  var current;
	  seperator0 = new Seperator({
	    props: {
	      languageId: "about-project-title"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      languageId: "about-project-text"
	    },
	    $$inline: true
	  });
	  link = new Link({
	    props: {
	      href: "https://github.com/Kaiak/kaiak-wallet",
	      $$slots: {
	        "default": [create_default_slot_2]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  seperator1 = new Seperator({
	    props: {
	      languageId: "about-version-title"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      $$slots: {
	        "default": [create_default_slot_1$2]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator0.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(link.$$.fragment);
	      t2 = space();
	      create_component(seperator1.$$.fragment);
	      t3 = space();
	      create_component(text1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(link, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(seperator1, target, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(text1, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var link_changes = {};

	      if (dirty &
	      /*$$scope*/
	      16) {
	        link_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      link.$set(link_changes);
	      var text1_changes = {};

	      if (dirty &
	      /*$$scope, getVersion*/
	      17) {
	        text1_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      text1.$set(text1_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator0.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(link.$$.fragment, local);
	      transition_in(seperator1.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator0.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(link.$$.fragment, local);
	      transition_out(seperator1.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(link, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(seperator1, detaching);
	      if (detaching) detach_dev(t3);
	      destroy_component(text1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$6.name,
	    type: "slot",
	    source: "(16:0) <Content titleKey=\\\"about\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$d(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "about",
	      $$slots: {
	        "default": [create_default_slot$6]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, getVersion*/
	      17) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$d.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$d($$self, $$props, $$invalidate) {
	  var canDonate;
	  var getVersion;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("About", slots, []);
	  var version = $$props.version;
	  var walletState = $$props.walletState;
	  onMount(function () {
	    return navigationReload();
	  });
	  var writable_props = ["version", "walletState"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<About> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("version" in $$props) $$invalidate(1, version = $$props.version);
	    if ("walletState" in $$props) $$invalidate(2, walletState = $$props.walletState);
	  };

	  $$self.$capture_state = function () {
	    return {
	      Content: Content,
	      Text: Text,
	      Seperator: Seperator,
	      Link: Link,
	      getLanguage: getLanguage,
	      navigationReload: navigationReload,
	      onMount: onMount,
	      version: version,
	      walletState: walletState,
	      canDonate: canDonate,
	      getVersion: getVersion
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("version" in $$props) $$invalidate(1, version = $$props.version);
	    if ("walletState" in $$props) $$invalidate(2, walletState = $$props.walletState);
	    if ("canDonate" in $$props) canDonate = $$props.canDonate;
	    if ("getVersion" in $$props) $$invalidate(0, getVersion = $$props.getVersion);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*walletState*/
	    4) {
	       canDonate = (walletState === null || walletState === void 0 ? void 0 : walletState.account) !== undefined;
	    }

	    if ($$self.$$.dirty &
	    /*version*/
	    2) {
	       $$invalidate(0, getVersion = "".concat(getLanguage("version"), " ").concat(version()));
	    }
	  };

	  return [getVersion, version, walletState];
	}

	var About = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(About, _SvelteComponentDev);

	  var _super = _createSuper$e(About);

	  function About(options) {
	    var _this;

	    classCallCheck(this, About);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$d, create_fragment$d, safe_not_equal, {
	      version: 1,
	      walletState: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "About",
	      options: options,
	      id: create_fragment$d.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*version*/
	    ctx[1] === undefined && !("version" in props)) {
	      console.warn("<About> was created without expected prop 'version'");
	    }

	    if (
	    /*walletState*/
	    ctx[2] === undefined && !("walletState" in props)) {
	      console.warn("<About> was created without expected prop 'walletState'");
	    }

	    return _this;
	  }

	  createClass(About, [{
	    key: "version",
	    get: function get() {
	      throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "walletState",
	    get: function get() {
	      throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return About;
	}(SvelteComponentDev);

	var runtime$1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BASE_PATH = "http://localhost:7076".replace(/\/+$/, "");
	const isBlob = (value) => typeof Blob !== 'undefined' && value instanceof Blob;
	/**
	 * This is the base class for all generated API classes.
	 */
	class BaseAPI {
	    constructor(configuration = new Configuration()) {
	        this.configuration = configuration;
	        this.fetchApi = (url, init) => __awaiter(this, void 0, void 0, function* () {
	            let fetchParams = { url, init };
	            for (const middleware of this.middleware) {
	                if (middleware.pre) {
	                    fetchParams = (yield middleware.pre(Object.assign({ fetch: this.fetchApi }, fetchParams))) || fetchParams;
	                }
	            }
	            let response = yield this.configuration.fetchApi(fetchParams.url, fetchParams.init);
	            for (const middleware of this.middleware) {
	                if (middleware.post) {
	                    response = (yield middleware.post({
	                        fetch: this.fetchApi,
	                        url,
	                        init,
	                        response: response.clone(),
	                    })) || response;
	                }
	            }
	            return response;
	        });
	        this.middleware = configuration.middleware;
	    }
	    withMiddleware(...middlewares) {
	        const next = this.clone();
	        next.middleware = next.middleware.concat(...middlewares);
	        return next;
	    }
	    withPreMiddleware(...preMiddlewares) {
	        const middlewares = preMiddlewares.map((pre) => ({ pre }));
	        return this.withMiddleware(...middlewares);
	    }
	    withPostMiddleware(...postMiddlewares) {
	        const middlewares = postMiddlewares.map((post) => ({ post }));
	        return this.withMiddleware(...middlewares);
	    }
	    request(context) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const { url, init } = this.createFetchParams(context);
	            const response = yield this.fetchApi(url, init);
	            if (response.status >= 200 && response.status < 300) {
	                return response;
	            }
	            throw response;
	        });
	    }
	    createFetchParams(context) {
	        let url = this.configuration.basePath + context.path;
	        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
	            // only add the querystring to the URL if there are query parameters.
	            // this is done to avoid urls ending with a "?" character which buggy webservers
	            // do not handle correctly sometimes.
	            url += '?' + this.configuration.queryParamsStringify(context.query);
	        }
	        const body = ((typeof FormData !== "undefined" && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body))
	            ? context.body
	            : JSON.stringify(context.body);
	        const headers = Object.assign({}, this.configuration.headers, context.headers);
	        const init = {
	            method: context.method,
	            headers: headers,
	            body,
	            credentials: this.configuration.credentials
	        };
	        return { url, init };
	    }
	    /**
	     * Create a shallow clone of `this` by constructing a new instance
	     * and then shallow cloning data members.
	     */
	    clone() {
	        const constructor = this.constructor;
	        const next = new constructor(this.configuration);
	        next.middleware = this.middleware.slice();
	        return next;
	    }
	}
	exports.BaseAPI = BaseAPI;
	class RequiredError extends Error {
	    constructor(field, msg) {
	        super(msg);
	        this.field = field;
	        this.name = "RequiredError";
	    }
	}
	exports.RequiredError = RequiredError;
	exports.COLLECTION_FORMATS = {
	    csv: ",",
	    ssv: " ",
	    tsv: "\t",
	    pipes: "|",
	};
	class Configuration {
	    constructor(configuration = {}) {
	        this.configuration = configuration;
	    }
	    get basePath() {
	        return this.configuration.basePath != null ? this.configuration.basePath : exports.BASE_PATH;
	    }
	    get fetchApi() {
	        return this.configuration.fetchApi || window.fetch.bind(window);
	    }
	    get middleware() {
	        return this.configuration.middleware || [];
	    }
	    get queryParamsStringify() {
	        return this.configuration.queryParamsStringify || querystring;
	    }
	    get username() {
	        return this.configuration.username;
	    }
	    get password() {
	        return this.configuration.password;
	    }
	    get apiKey() {
	        const apiKey = this.configuration.apiKey;
	        if (apiKey) {
	            return typeof apiKey === 'function' ? apiKey : () => apiKey;
	        }
	        return undefined;
	    }
	    get accessToken() {
	        const accessToken = this.configuration.accessToken;
	        if (accessToken) {
	            return typeof accessToken === 'function' ? accessToken : () => accessToken;
	        }
	        return undefined;
	    }
	    get headers() {
	        return this.configuration.headers;
	    }
	    get credentials() {
	        return this.configuration.credentials;
	    }
	}
	exports.Configuration = Configuration;
	function exists(json, key) {
	    const value = json[key];
	    return value !== null && value !== undefined;
	}
	exports.exists = exists;
	function querystring(params, prefix = '') {
	    return Object.keys(params)
	        .map((key) => {
	        const fullKey = prefix + (prefix.length ? `[${key}]` : key);
	        const value = params[key];
	        if (value instanceof Array) {
	            const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))
	                .join(`&${encodeURIComponent(fullKey)}=`);
	            return `${encodeURIComponent(fullKey)}=${multiValue}`;
	        }
	        if (value instanceof Object) {
	            return querystring(value, fullKey);
	        }
	        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
	    })
	        .filter(part => part.length > 0)
	        .join('&');
	}
	exports.querystring = querystring;
	function mapValues(data, fn) {
	    return Object.keys(data).reduce((acc, key) => (Object.assign({}, acc, { [key]: fn(data[key]) })), {});
	}
	exports.mapValues = mapValues;
	function canConsumeForm(consumes) {
	    for (const consume of consumes) {
	        if ('multipart/form-data' === consume.contentType) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.canConsumeForm = canConsumeForm;
	class JSONApiResponse {
	    constructor(raw, transformer = (jsonValue) => jsonValue) {
	        this.raw = raw;
	        this.transformer = transformer;
	    }
	    value() {
	        return __awaiter(this, void 0, void 0, function* () {
	            return this.transformer(yield this.raw.json());
	        });
	    }
	}
	exports.JSONApiResponse = JSONApiResponse;
	class VoidApiResponse {
	    constructor(raw) {
	        this.raw = raw;
	    }
	    value() {
	        return __awaiter(this, void 0, void 0, function* () {
	            return undefined;
	        });
	    }
	}
	exports.VoidApiResponse = VoidApiResponse;
	class BlobApiResponse {
	    constructor(raw) {
	        this.raw = raw;
	    }
	    value() {
	        return __awaiter(this, void 0, void 0, function* () {
	            return yield this.raw.blob();
	        });
	    }
	    ;
	}
	exports.BlobApiResponse = BlobApiResponse;
	class TextApiResponse {
	    constructor(raw) {
	        this.raw = raw;
	    }
	    value() {
	        return __awaiter(this, void 0, void 0, function* () {
	            return yield this.raw.text();
	        });
	    }
	    ;
	}
	exports.TextApiResponse = TextApiResponse;
	});

	var AccountBalanceRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function AccountBalanceRequestFromJSON(json) {
	    return AccountBalanceRequestFromJSONTyped(json);
	}
	exports.AccountBalanceRequestFromJSON = AccountBalanceRequestFromJSON;
	function AccountBalanceRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'account': json['account'],
	    };
	}
	exports.AccountBalanceRequestFromJSONTyped = AccountBalanceRequestFromJSONTyped;
	function AccountBalanceRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	    };
	}
	exports.AccountBalanceRequestToJSON = AccountBalanceRequestToJSON;
	(function (AccountBalanceRequestActionEnum) {
	    AccountBalanceRequestActionEnum["AccountBalance"] = "account_balance";
	})(exports.AccountBalanceRequestActionEnum || (exports.AccountBalanceRequestActionEnum = {}));
	});

	var AccountBalanceResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountBalanceResponseFromJSON(json) {
	    return AccountBalanceResponseFromJSONTyped(json);
	}
	exports.AccountBalanceResponseFromJSON = AccountBalanceResponseFromJSON;
	function AccountBalanceResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'balance': !runtime$1.exists(json, 'balance') ? undefined : json['balance'],
	        'pending': !runtime$1.exists(json, 'pending') ? undefined : json['pending'],
	    };
	}
	exports.AccountBalanceResponseFromJSONTyped = AccountBalanceResponseFromJSONTyped;
	function AccountBalanceResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'balance': value.balance,
	        'pending': value.pending,
	    };
	}
	exports.AccountBalanceResponseToJSON = AccountBalanceResponseToJSON;
	});

	var AccountBlockCountRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function AccountBlockCountRequestFromJSON(json) {
	    return AccountBlockCountRequestFromJSONTyped(json);
	}
	exports.AccountBlockCountRequestFromJSON = AccountBlockCountRequestFromJSON;
	function AccountBlockCountRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'account': json['account'],
	    };
	}
	exports.AccountBlockCountRequestFromJSONTyped = AccountBlockCountRequestFromJSONTyped;
	function AccountBlockCountRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	    };
	}
	exports.AccountBlockCountRequestToJSON = AccountBlockCountRequestToJSON;
	(function (AccountBlockCountRequestActionEnum) {
	    AccountBlockCountRequestActionEnum["AccountBlockCount"] = "account_block_count";
	})(exports.AccountBlockCountRequestActionEnum || (exports.AccountBlockCountRequestActionEnum = {}));
	});

	var AccountBlockCountResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountBlockCountResponseFromJSON(json) {
	    return AccountBlockCountResponseFromJSONTyped(json);
	}
	exports.AccountBlockCountResponseFromJSON = AccountBlockCountResponseFromJSON;
	function AccountBlockCountResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blockCount': !runtime$1.exists(json, 'block_count') ? undefined : json['block_count'],
	    };
	}
	exports.AccountBlockCountResponseFromJSONTyped = AccountBlockCountResponseFromJSONTyped;
	function AccountBlockCountResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'block_count': value.blockCount,
	    };
	}
	exports.AccountBlockCountResponseToJSON = AccountBlockCountResponseToJSON;
	});

	var AccountGetRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function AccountGetRequestFromJSON(json) {
	    return AccountGetRequestFromJSONTyped(json);
	}
	exports.AccountGetRequestFromJSON = AccountGetRequestFromJSON;
	function AccountGetRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'key': json['key'],
	    };
	}
	exports.AccountGetRequestFromJSONTyped = AccountGetRequestFromJSONTyped;
	function AccountGetRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'key': value.key,
	    };
	}
	exports.AccountGetRequestToJSON = AccountGetRequestToJSON;
	(function (AccountGetRequestActionEnum) {
	    AccountGetRequestActionEnum["AccountGet"] = "account_get";
	})(exports.AccountGetRequestActionEnum || (exports.AccountGetRequestActionEnum = {}));
	});

	var AccountGetResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountGetResponseFromJSON(json) {
	    return AccountGetResponseFromJSONTyped(json);
	}
	exports.AccountGetResponseFromJSON = AccountGetResponseFromJSON;
	function AccountGetResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.AccountGetResponseFromJSONTyped = AccountGetResponseFromJSONTyped;
	function AccountGetResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'account': value.account,
	    };
	}
	exports.AccountGetResponseToJSON = AccountGetResponseToJSON;
	});

	var AccountHistoryRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountHistoryRequestFromJSON(json) {
	    return AccountHistoryRequestFromJSONTyped(json);
	}
	exports.AccountHistoryRequestFromJSON = AccountHistoryRequestFromJSON;
	function AccountHistoryRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	        'count': !runtime$1.exists(json, 'count') ? undefined : json['count'],
	    };
	}
	exports.AccountHistoryRequestFromJSONTyped = AccountHistoryRequestFromJSONTyped;
	function AccountHistoryRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	        'count': value.count,
	    };
	}
	exports.AccountHistoryRequestToJSON = AccountHistoryRequestToJSON;
	(function (AccountHistoryRequestActionEnum) {
	    AccountHistoryRequestActionEnum["AccountHistory"] = "account_history";
	})(exports.AccountHistoryRequestActionEnum || (exports.AccountHistoryRequestActionEnum = {}));
	});

	var AccountHistoryResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function AccountHistoryResponseFromJSON(json) {
	    return AccountHistoryResponseFromJSONTyped(json);
	}
	exports.AccountHistoryResponseFromJSON = AccountHistoryResponseFromJSON;
	function AccountHistoryResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	        'history': !runtime$1.exists(json, 'history') ? undefined : (json['history'].map(models.BlockFromJSON)),
	        'previous': !runtime$1.exists(json, 'previous') ? undefined : json['previous'],
	    };
	}
	exports.AccountHistoryResponseFromJSONTyped = AccountHistoryResponseFromJSONTyped;
	function AccountHistoryResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'account': value.account,
	        'history': value.history === undefined ? undefined : (value.history.map(models.BlockToJSON)),
	        'previous': value.previous,
	    };
	}
	exports.AccountHistoryResponseToJSON = AccountHistoryResponseToJSON;
	});

	var AccountInfoRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function AccountInfoRequestFromJSON(json) {
	    return AccountInfoRequestFromJSONTyped(json);
	}
	exports.AccountInfoRequestFromJSON = AccountInfoRequestFromJSON;
	function AccountInfoRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	        'representative': !runtime$1.exists(json, 'representative') ? undefined : models.ModelBooleanFromJSON(json['representative']),
	        'weight': !runtime$1.exists(json, 'weight') ? undefined : models.ModelBooleanFromJSON(json['weight']),
	        'pending': !runtime$1.exists(json, 'pending') ? undefined : models.ModelBooleanFromJSON(json['pending']),
	    };
	}
	exports.AccountInfoRequestFromJSONTyped = AccountInfoRequestFromJSONTyped;
	function AccountInfoRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	        'representative': models.ModelBooleanToJSON(value.representative),
	        'weight': models.ModelBooleanToJSON(value.weight),
	        'pending': models.ModelBooleanToJSON(value.pending),
	    };
	}
	exports.AccountInfoRequestToJSON = AccountInfoRequestToJSON;
	(function (AccountInfoRequestActionEnum) {
	    AccountInfoRequestActionEnum["AccountInfo"] = "account_info";
	})(exports.AccountInfoRequestActionEnum || (exports.AccountInfoRequestActionEnum = {}));
	});

	var AccountInfoResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountInfoResponseFromJSON(json) {
	    return AccountInfoResponseFromJSONTyped(json);
	}
	exports.AccountInfoResponseFromJSON = AccountInfoResponseFromJSON;
	function AccountInfoResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'frontier': !runtime$1.exists(json, 'frontier') ? undefined : json['frontier'],
	        'openBlock': !runtime$1.exists(json, 'open_block') ? undefined : json['open_block'],
	        'representativeBlock': !runtime$1.exists(json, 'representative_block') ? undefined : json['representative_block'],
	        'balance': !runtime$1.exists(json, 'balance') ? undefined : json['balance'],
	        'modifiedTimestamp': !runtime$1.exists(json, 'modified_timestamp') ? undefined : json['modified_timestamp'],
	        'blockCount': !runtime$1.exists(json, 'block_count') ? undefined : json['block_count'],
	        'confirmationHeight': !runtime$1.exists(json, 'confirmation_height') ? undefined : json['confirmation_height'],
	        'accountVersion': !runtime$1.exists(json, 'account_version') ? undefined : json['account_version'],
	        'representative': !runtime$1.exists(json, 'representative') ? undefined : json['representative'],
	        'weight': !runtime$1.exists(json, 'weight') ? undefined : json['weight'],
	        'pending': !runtime$1.exists(json, 'pending') ? undefined : json['pending'],
	    };
	}
	exports.AccountInfoResponseFromJSONTyped = AccountInfoResponseFromJSONTyped;
	function AccountInfoResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'frontier': value.frontier,
	        'open_block': value.openBlock,
	        'representative_block': value.representativeBlock,
	        'balance': value.balance,
	        'modified_timestamp': value.modifiedTimestamp,
	        'block_count': value.blockCount,
	        'confirmation_height': value.confirmationHeight,
	        'account_version': value.accountVersion,
	        'representative': value.representative,
	        'weight': value.weight,
	        'pending': value.pending,
	    };
	}
	exports.AccountInfoResponseToJSON = AccountInfoResponseToJSON;
	});

	var AccountKeyRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountKeyRequestFromJSON(json) {
	    return AccountKeyRequestFromJSONTyped(json);
	}
	exports.AccountKeyRequestFromJSON = AccountKeyRequestFromJSON;
	function AccountKeyRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.AccountKeyRequestFromJSONTyped = AccountKeyRequestFromJSONTyped;
	function AccountKeyRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	    };
	}
	exports.AccountKeyRequestToJSON = AccountKeyRequestToJSON;
	(function (AccountKeyRequestActionEnum) {
	    AccountKeyRequestActionEnum["AccountKey"] = "account_key";
	})(exports.AccountKeyRequestActionEnum || (exports.AccountKeyRequestActionEnum = {}));
	});

	var AccountKeyResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountKeyResponseFromJSON(json) {
	    return AccountKeyResponseFromJSONTyped(json);
	}
	exports.AccountKeyResponseFromJSON = AccountKeyResponseFromJSON;
	function AccountKeyResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'key': !runtime$1.exists(json, 'key') ? undefined : json['key'],
	    };
	}
	exports.AccountKeyResponseFromJSONTyped = AccountKeyResponseFromJSONTyped;
	function AccountKeyResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'key': value.key,
	    };
	}
	exports.AccountKeyResponseToJSON = AccountKeyResponseToJSON;
	});

	var AccountRepresentativeRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountRepresentativeRequestFromJSON(json) {
	    return AccountRepresentativeRequestFromJSONTyped(json);
	}
	exports.AccountRepresentativeRequestFromJSON = AccountRepresentativeRequestFromJSON;
	function AccountRepresentativeRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.AccountRepresentativeRequestFromJSONTyped = AccountRepresentativeRequestFromJSONTyped;
	function AccountRepresentativeRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	    };
	}
	exports.AccountRepresentativeRequestToJSON = AccountRepresentativeRequestToJSON;
	(function (AccountRepresentativeRequestActionEnum) {
	    AccountRepresentativeRequestActionEnum["AccountRepresentative"] = "account_representative";
	})(exports.AccountRepresentativeRequestActionEnum || (exports.AccountRepresentativeRequestActionEnum = {}));
	});

	var AccountRepresentativeResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountRepresentativeResponseFromJSON(json) {
	    return AccountRepresentativeResponseFromJSONTyped(json);
	}
	exports.AccountRepresentativeResponseFromJSON = AccountRepresentativeResponseFromJSON;
	function AccountRepresentativeResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'representative': !runtime$1.exists(json, 'representative') ? undefined : json['representative'],
	    };
	}
	exports.AccountRepresentativeResponseFromJSONTyped = AccountRepresentativeResponseFromJSONTyped;
	function AccountRepresentativeResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'representative': value.representative,
	    };
	}
	exports.AccountRepresentativeResponseToJSON = AccountRepresentativeResponseToJSON;
	});

	var AccountWeightRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountWeightRequestFromJSON(json) {
	    return AccountWeightRequestFromJSONTyped(json);
	}
	exports.AccountWeightRequestFromJSON = AccountWeightRequestFromJSON;
	function AccountWeightRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.AccountWeightRequestFromJSONTyped = AccountWeightRequestFromJSONTyped;
	function AccountWeightRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	    };
	}
	exports.AccountWeightRequestToJSON = AccountWeightRequestToJSON;
	(function (AccountWeightRequestActionEnum) {
	    AccountWeightRequestActionEnum["AccountWeight"] = "account_weight";
	})(exports.AccountWeightRequestActionEnum || (exports.AccountWeightRequestActionEnum = {}));
	});

	var AccountWeightResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountWeightResponseFromJSON(json) {
	    return AccountWeightResponseFromJSONTyped(json);
	}
	exports.AccountWeightResponseFromJSON = AccountWeightResponseFromJSON;
	function AccountWeightResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'weight': !runtime$1.exists(json, 'weight') ? undefined : json['weight'],
	    };
	}
	exports.AccountWeightResponseFromJSONTyped = AccountWeightResponseFromJSONTyped;
	function AccountWeightResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'weight': value.weight,
	    };
	}
	exports.AccountWeightResponseToJSON = AccountWeightResponseToJSON;
	});

	var AccountsBalancesRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsBalancesRequestFromJSON(json) {
	    return AccountsBalancesRequestFromJSONTyped(json);
	}
	exports.AccountsBalancesRequestFromJSON = AccountsBalancesRequestFromJSON;
	function AccountsBalancesRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'accounts': !runtime$1.exists(json, 'accounts') ? undefined : json['accounts'],
	    };
	}
	exports.AccountsBalancesRequestFromJSONTyped = AccountsBalancesRequestFromJSONTyped;
	function AccountsBalancesRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'accounts': value.accounts,
	    };
	}
	exports.AccountsBalancesRequestToJSON = AccountsBalancesRequestToJSON;
	(function (AccountsBalancesRequestActionEnum) {
	    AccountsBalancesRequestActionEnum["AccountsBalances"] = "accounts_balances";
	})(exports.AccountsBalancesRequestActionEnum || (exports.AccountsBalancesRequestActionEnum = {}));
	});

	var AccountsBalancesResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function AccountsBalancesResponseFromJSON(json) {
	    return AccountsBalancesResponseFromJSONTyped(json);
	}
	exports.AccountsBalancesResponseFromJSON = AccountsBalancesResponseFromJSON;
	function AccountsBalancesResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'balances': !runtime$1.exists(json, 'balances') ? undefined : (runtime$1.mapValues(json['balances'], models.AccountBalanceResponseFromJSON)),
	    };
	}
	exports.AccountsBalancesResponseFromJSONTyped = AccountsBalancesResponseFromJSONTyped;
	function AccountsBalancesResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'balances': value.balances === undefined ? undefined : (runtime$1.mapValues(value.balances, models.AccountBalanceResponseToJSON)),
	    };
	}
	exports.AccountsBalancesResponseToJSON = AccountsBalancesResponseToJSON;
	});

	var AccountsCreateRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsCreateRequestFromJSON(json) {
	    return AccountsCreateRequestFromJSONTyped(json);
	}
	exports.AccountsCreateRequestFromJSON = AccountsCreateRequestFromJSON;
	function AccountsCreateRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'wallet': !runtime$1.exists(json, 'wallet') ? undefined : json['wallet'],
	        'count': !runtime$1.exists(json, 'count') ? undefined : json['count'],
	    };
	}
	exports.AccountsCreateRequestFromJSONTyped = AccountsCreateRequestFromJSONTyped;
	function AccountsCreateRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'wallet': value.wallet,
	        'count': value.count,
	    };
	}
	exports.AccountsCreateRequestToJSON = AccountsCreateRequestToJSON;
	(function (AccountsCreateRequestActionEnum) {
	    AccountsCreateRequestActionEnum["AccountsCreate"] = "accounts_create";
	})(exports.AccountsCreateRequestActionEnum || (exports.AccountsCreateRequestActionEnum = {}));
	});

	var AccountsCreateResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsCreateResponseFromJSON(json) {
	    return AccountsCreateResponseFromJSONTyped(json);
	}
	exports.AccountsCreateResponseFromJSON = AccountsCreateResponseFromJSON;
	function AccountsCreateResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'accounts': !runtime$1.exists(json, 'accounts') ? undefined : json['accounts'],
	    };
	}
	exports.AccountsCreateResponseFromJSONTyped = AccountsCreateResponseFromJSONTyped;
	function AccountsCreateResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'accounts': value.accounts,
	    };
	}
	exports.AccountsCreateResponseToJSON = AccountsCreateResponseToJSON;
	});

	var AccountsFrontiersRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsFrontiersRequestFromJSON(json) {
	    return AccountsFrontiersRequestFromJSONTyped(json);
	}
	exports.AccountsFrontiersRequestFromJSON = AccountsFrontiersRequestFromJSON;
	function AccountsFrontiersRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'accounts': !runtime$1.exists(json, 'accounts') ? undefined : json['accounts'],
	    };
	}
	exports.AccountsFrontiersRequestFromJSONTyped = AccountsFrontiersRequestFromJSONTyped;
	function AccountsFrontiersRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'accounts': value.accounts,
	    };
	}
	exports.AccountsFrontiersRequestToJSON = AccountsFrontiersRequestToJSON;
	(function (AccountsFrontiersRequestActionEnum) {
	    AccountsFrontiersRequestActionEnum["AccountsFrontiers"] = "accounts_frontiers";
	})(exports.AccountsFrontiersRequestActionEnum || (exports.AccountsFrontiersRequestActionEnum = {}));
	});

	var AccountsFrontiersResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsFrontiersResponseFromJSON(json) {
	    return AccountsFrontiersResponseFromJSONTyped(json);
	}
	exports.AccountsFrontiersResponseFromJSON = AccountsFrontiersResponseFromJSON;
	function AccountsFrontiersResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'frontiers': !runtime$1.exists(json, 'frontiers') ? undefined : json['frontiers'],
	    };
	}
	exports.AccountsFrontiersResponseFromJSONTyped = AccountsFrontiersResponseFromJSONTyped;
	function AccountsFrontiersResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'frontiers': value.frontiers,
	    };
	}
	exports.AccountsFrontiersResponseToJSON = AccountsFrontiersResponseToJSON;
	});

	var AccountsPendingRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsPendingRequestFromJSON(json) {
	    return AccountsPendingRequestFromJSONTyped(json);
	}
	exports.AccountsPendingRequestFromJSON = AccountsPendingRequestFromJSON;
	function AccountsPendingRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'accounts': !runtime$1.exists(json, 'accounts') ? undefined : json['accounts'],
	        'count': !runtime$1.exists(json, 'count') ? undefined : json['count'],
	        'includeActive': !runtime$1.exists(json, 'include_active') ? undefined : json['include_active'],
	        'source': !runtime$1.exists(json, 'source') ? undefined : json['source'],
	    };
	}
	exports.AccountsPendingRequestFromJSONTyped = AccountsPendingRequestFromJSONTyped;
	function AccountsPendingRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'accounts': value.accounts,
	        'count': value.count,
	        'include_active': value.includeActive,
	        'source': value.source,
	    };
	}
	exports.AccountsPendingRequestToJSON = AccountsPendingRequestToJSON;
	(function (AccountsPendingRequestActionEnum) {
	    AccountsPendingRequestActionEnum["AccountsPending"] = "accounts_pending";
	})(exports.AccountsPendingRequestActionEnum || (exports.AccountsPendingRequestActionEnum = {}));
	});

	var AccountsPendingResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AccountsPendingResponseFromJSON(json) {
	    return AccountsPendingResponseFromJSONTyped(json);
	}
	exports.AccountsPendingResponseFromJSON = AccountsPendingResponseFromJSON;
	function AccountsPendingResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blocks': !runtime$1.exists(json, 'blocks') ? undefined : json['blocks'],
	    };
	}
	exports.AccountsPendingResponseFromJSONTyped = AccountsPendingResponseFromJSONTyped;
	function AccountsPendingResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'blocks': value.blocks,
	    };
	}
	exports.AccountsPendingResponseToJSON = AccountsPendingResponseToJSON;
	});

	var ActiveDifficultyRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ActiveDifficultyRequestFromJSON(json) {
	    return ActiveDifficultyRequestFromJSONTyped(json);
	}
	exports.ActiveDifficultyRequestFromJSON = ActiveDifficultyRequestFromJSON;
	function ActiveDifficultyRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'includeTrend': !runtime$1.exists(json, 'include_trend') ? undefined : models.ModelBooleanFromJSON(json['include_trend']),
	    };
	}
	exports.ActiveDifficultyRequestFromJSONTyped = ActiveDifficultyRequestFromJSONTyped;
	function ActiveDifficultyRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'include_trend': models.ModelBooleanToJSON(value.includeTrend),
	    };
	}
	exports.ActiveDifficultyRequestToJSON = ActiveDifficultyRequestToJSON;
	(function (ActiveDifficultyRequestActionEnum) {
	    ActiveDifficultyRequestActionEnum["ActiveDifficulty"] = "active_difficulty";
	})(exports.ActiveDifficultyRequestActionEnum || (exports.ActiveDifficultyRequestActionEnum = {}));
	});

	var ActiveDifficultyResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ActiveDifficultyResponseFromJSON(json) {
	    return ActiveDifficultyResponseFromJSONTyped(json);
	}
	exports.ActiveDifficultyResponseFromJSON = ActiveDifficultyResponseFromJSON;
	function ActiveDifficultyResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'networkMinimum': !runtime$1.exists(json, 'network_minimum') ? undefined : json['network_minimum'],
	        'networkCurrent': !runtime$1.exists(json, 'network_current') ? undefined : json['network_current'],
	        'multiplier': !runtime$1.exists(json, 'multiplier') ? undefined : json['multiplier'],
	    };
	}
	exports.ActiveDifficultyResponseFromJSONTyped = ActiveDifficultyResponseFromJSONTyped;
	function ActiveDifficultyResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'network_minimum': value.networkMinimum,
	        'network_current': value.networkCurrent,
	        'multiplier': value.multiplier,
	    };
	}
	exports.ActiveDifficultyResponseToJSON = ActiveDifficultyResponseToJSON;
	});

	var AvailableSupplyRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function AvailableSupplyRequestFromJSON(json) {
	    return AvailableSupplyRequestFromJSONTyped(json);
	}
	exports.AvailableSupplyRequestFromJSON = AvailableSupplyRequestFromJSON;
	function AvailableSupplyRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	    };
	}
	exports.AvailableSupplyRequestFromJSONTyped = AvailableSupplyRequestFromJSONTyped;
	function AvailableSupplyRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.AvailableSupplyRequestToJSON = AvailableSupplyRequestToJSON;
	(function (AvailableSupplyRequestActionEnum) {
	    AvailableSupplyRequestActionEnum["AvailableSupply"] = "available_supply";
	})(exports.AvailableSupplyRequestActionEnum || (exports.AvailableSupplyRequestActionEnum = {}));
	});

	var AvailableSupplyResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function AvailableSupplyResponseFromJSON(json) {
	    return AvailableSupplyResponseFromJSONTyped(json);
	}
	exports.AvailableSupplyResponseFromJSON = AvailableSupplyResponseFromJSON;
	function AvailableSupplyResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'available': !runtime$1.exists(json, 'available') ? undefined : json['available'],
	    };
	}
	exports.AvailableSupplyResponseFromJSONTyped = AvailableSupplyResponseFromJSONTyped;
	function AvailableSupplyResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'available': value.available,
	    };
	}
	exports.AvailableSupplyResponseToJSON = AvailableSupplyResponseToJSON;
	});

	var Block = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockFromJSON(json) {
	    return BlockFromJSONTyped(json);
	}
	exports.BlockFromJSON = BlockFromJSON;
	function BlockFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'type': !runtime$1.exists(json, 'type') ? undefined : models.BlockStateFromJSON(json['type']),
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	        'amount': !runtime$1.exists(json, 'amount') ? undefined : json['amount'],
	        'localTimestamp': !runtime$1.exists(json, 'local_timestamp') ? undefined : json['local_timestamp'],
	        'height': !runtime$1.exists(json, 'height') ? undefined : json['height'],
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	    };
	}
	exports.BlockFromJSONTyped = BlockFromJSONTyped;
	function BlockToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'type': models.BlockStateToJSON(value.type),
	        'account': value.account,
	        'amount': value.amount,
	        'local_timestamp': value.localTimestamp,
	        'height': value.height,
	        'hash': value.hash,
	    };
	}
	exports.BlockToJSON = BlockToJSON;
	});

	var BlockAccountRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockAccountRequestFromJSON(json) {
	    return BlockAccountRequestFromJSONTyped(json);
	}
	exports.BlockAccountRequestFromJSON = BlockAccountRequestFromJSON;
	function BlockAccountRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	    };
	}
	exports.BlockAccountRequestFromJSONTyped = BlockAccountRequestFromJSONTyped;
	function BlockAccountRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'hash': value.hash,
	    };
	}
	exports.BlockAccountRequestToJSON = BlockAccountRequestToJSON;
	(function (BlockAccountRequestActionEnum) {
	    BlockAccountRequestActionEnum["BlockAccount"] = "block_account";
	})(exports.BlockAccountRequestActionEnum || (exports.BlockAccountRequestActionEnum = {}));
	});

	var BlockAccountResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockAccountResponseFromJSON(json) {
	    return BlockAccountResponseFromJSONTyped(json);
	}
	exports.BlockAccountResponseFromJSON = BlockAccountResponseFromJSON;
	function BlockAccountResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.BlockAccountResponseFromJSONTyped = BlockAccountResponseFromJSONTyped;
	function BlockAccountResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'account': value.account,
	    };
	}
	exports.BlockAccountResponseToJSON = BlockAccountResponseToJSON;
	});

	var BlockConfirmRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockConfirmRequestFromJSON(json) {
	    return BlockConfirmRequestFromJSONTyped(json);
	}
	exports.BlockConfirmRequestFromJSON = BlockConfirmRequestFromJSON;
	function BlockConfirmRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	    };
	}
	exports.BlockConfirmRequestFromJSONTyped = BlockConfirmRequestFromJSONTyped;
	function BlockConfirmRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'hash': value.hash,
	    };
	}
	exports.BlockConfirmRequestToJSON = BlockConfirmRequestToJSON;
	(function (BlockConfirmRequestActionEnum) {
	    BlockConfirmRequestActionEnum["BlockConfirm"] = "block_confirm";
	})(exports.BlockConfirmRequestActionEnum || (exports.BlockConfirmRequestActionEnum = {}));
	});

	var BlockConfirmResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockConfirmResponseFromJSON(json) {
	    return BlockConfirmResponseFromJSONTyped(json);
	}
	exports.BlockConfirmResponseFromJSON = BlockConfirmResponseFromJSON;
	function BlockConfirmResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'started': !runtime$1.exists(json, 'started') ? undefined : json['started'],
	    };
	}
	exports.BlockConfirmResponseFromJSONTyped = BlockConfirmResponseFromJSONTyped;
	function BlockConfirmResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'started': value.started,
	    };
	}
	exports.BlockConfirmResponseToJSON = BlockConfirmResponseToJSON;
	});

	var BlockCountRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockCountRequestFromJSON(json) {
	    return BlockCountRequestFromJSONTyped(json);
	}
	exports.BlockCountRequestFromJSON = BlockCountRequestFromJSON;
	function BlockCountRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'includeCemented': !runtime$1.exists(json, 'include_cemented') ? undefined : json['include_cemented'],
	    };
	}
	exports.BlockCountRequestFromJSONTyped = BlockCountRequestFromJSONTyped;
	function BlockCountRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'include_cemented': value.includeCemented,
	    };
	}
	exports.BlockCountRequestToJSON = BlockCountRequestToJSON;
	(function (BlockCountRequestActionEnum) {
	    BlockCountRequestActionEnum["BlockCount"] = "block_count";
	})(exports.BlockCountRequestActionEnum || (exports.BlockCountRequestActionEnum = {}));
	});

	var BlockCountResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockCountResponseFromJSON(json) {
	    return BlockCountResponseFromJSONTyped(json);
	}
	exports.BlockCountResponseFromJSON = BlockCountResponseFromJSON;
	function BlockCountResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'count': json['count'],
	        'unchecked': json['unchecked'],
	        'cemented': !runtime$1.exists(json, 'cemented') ? undefined : json['cemented'],
	    };
	}
	exports.BlockCountResponseFromJSONTyped = BlockCountResponseFromJSONTyped;
	function BlockCountResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'count': value.count,
	        'unchecked': value.unchecked,
	        'cemented': value.cemented,
	    };
	}
	exports.BlockCountResponseToJSON = BlockCountResponseToJSON;
	});

	var BlockCountTypeRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function BlockCountTypeRequestFromJSON(json) {
	    return BlockCountTypeRequestFromJSONTyped(json);
	}
	exports.BlockCountTypeRequestFromJSON = BlockCountTypeRequestFromJSON;
	function BlockCountTypeRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	    };
	}
	exports.BlockCountTypeRequestFromJSONTyped = BlockCountTypeRequestFromJSONTyped;
	function BlockCountTypeRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.BlockCountTypeRequestToJSON = BlockCountTypeRequestToJSON;
	(function (BlockCountTypeRequestActionEnum) {
	    BlockCountTypeRequestActionEnum["BlockCountType"] = "block_count_type";
	})(exports.BlockCountTypeRequestActionEnum || (exports.BlockCountTypeRequestActionEnum = {}));
	});

	var BlockCountTypeResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function BlockCountTypeResponseFromJSON(json) {
	    return BlockCountTypeResponseFromJSONTyped(json);
	}
	exports.BlockCountTypeResponseFromJSON = BlockCountTypeResponseFromJSON;
	function BlockCountTypeResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'send': json['send'],
	        'receive': json['receive'],
	        'open': json['open'],
	        'change': json['change'],
	        'stateV0': json['state_v0'],
	        'stateV1': json['state_v1'],
	        'state': json['state'],
	    };
	}
	exports.BlockCountTypeResponseFromJSONTyped = BlockCountTypeResponseFromJSONTyped;
	function BlockCountTypeResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'send': value.send,
	        'receive': value.receive,
	        'open': value.open,
	        'change': value.change,
	        'state_v0': value.stateV0,
	        'state_v1': value.stateV1,
	        'state': value.state,
	    };
	}
	exports.BlockCountTypeResponseToJSON = BlockCountTypeResponseToJSON;
	});

	var BlockCreateRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockCreateRequestFromJSON(json) {
	    return BlockCreateRequestFromJSONTyped(json);
	}
	exports.BlockCreateRequestFromJSON = BlockCreateRequestFromJSON;
	function BlockCreateRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'jsonBlock': !runtime$1.exists(json, 'json_block') ? undefined : models.ModelBooleanFromJSON(json['json_block']),
	        'type': !runtime$1.exists(json, 'type') ? undefined : json['type'],
	        'balance': !runtime$1.exists(json, 'balance') ? undefined : json['balance'],
	        'key': !runtime$1.exists(json, 'key') ? undefined : json['key'],
	        'representative': !runtime$1.exists(json, 'representative') ? undefined : json['representative'],
	        'link': !runtime$1.exists(json, 'link') ? undefined : json['link'],
	        'work': !runtime$1.exists(json, 'work') ? undefined : json['work'],
	        'previous': !runtime$1.exists(json, 'previous') ? undefined : json['previous'],
	        'wallet': !runtime$1.exists(json, 'wallet') ? undefined : json['wallet'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.BlockCreateRequestFromJSONTyped = BlockCreateRequestFromJSONTyped;
	function BlockCreateRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'json_block': models.ModelBooleanToJSON(value.jsonBlock),
	        'type': value.type,
	        'balance': value.balance,
	        'key': value.key,
	        'representative': value.representative,
	        'link': value.link,
	        'work': value.work,
	        'previous': value.previous,
	        'wallet': value.wallet,
	        'account': value.account,
	    };
	}
	exports.BlockCreateRequestToJSON = BlockCreateRequestToJSON;
	(function (BlockCreateRequestActionEnum) {
	    BlockCreateRequestActionEnum["BlockCreate"] = "block_create";
	})(exports.BlockCreateRequestActionEnum || (exports.BlockCreateRequestActionEnum = {}));
	(function (BlockCreateRequestTypeEnum) {
	    BlockCreateRequestTypeEnum["State"] = "state";
	})(exports.BlockCreateRequestTypeEnum || (exports.BlockCreateRequestTypeEnum = {}));
	});

	var BlockCreateResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockCreateResponseFromJSON(json) {
	    return BlockCreateResponseFromJSONTyped(json);
	}
	exports.BlockCreateResponseFromJSON = BlockCreateResponseFromJSON;
	function BlockCreateResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	        'block': !runtime$1.exists(json, 'block') ? undefined : models.BlockDataJsonFromJSON(json['block']),
	    };
	}
	exports.BlockCreateResponseFromJSONTyped = BlockCreateResponseFromJSONTyped;
	function BlockCreateResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'hash': value.hash,
	        'block': models.BlockDataJsonToJSON(value.block),
	    };
	}
	exports.BlockCreateResponseToJSON = BlockCreateResponseToJSON;
	});

	var BlockDataJson = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockDataJsonFromJSON(json) {
	    return BlockDataJsonFromJSONTyped(json);
	}
	exports.BlockDataJsonFromJSON = BlockDataJsonFromJSON;
	function BlockDataJsonFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'type': !runtime$1.exists(json, 'type') ? undefined : json['type'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	        'previous': !runtime$1.exists(json, 'previous') ? undefined : json['previous'],
	        'representative': !runtime$1.exists(json, 'representative') ? undefined : json['representative'],
	        'balance': !runtime$1.exists(json, 'balance') ? undefined : json['balance'],
	        'link': !runtime$1.exists(json, 'link') ? undefined : json['link'],
	        'linkAsAccount': !runtime$1.exists(json, 'link_as_account') ? undefined : json['link_as_account'],
	        'signature': !runtime$1.exists(json, 'signature') ? undefined : json['signature'],
	        'work': !runtime$1.exists(json, 'work') ? undefined : json['work'],
	    };
	}
	exports.BlockDataJsonFromJSONTyped = BlockDataJsonFromJSONTyped;
	function BlockDataJsonToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'type': value.type,
	        'account': value.account,
	        'previous': value.previous,
	        'representative': value.representative,
	        'balance': value.balance,
	        'link': value.link,
	        'link_as_account': value.linkAsAccount,
	        'signature': value.signature,
	        'work': value.work,
	    };
	}
	exports.BlockDataJsonToJSON = BlockDataJsonToJSON;
	(function (BlockDataJsonTypeEnum) {
	    BlockDataJsonTypeEnum["State"] = "state";
	})(exports.BlockDataJsonTypeEnum || (exports.BlockDataJsonTypeEnum = {}));
	});

	var BlockHashRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockHashRequestFromJSON(json) {
	    return BlockHashRequestFromJSONTyped(json);
	}
	exports.BlockHashRequestFromJSON = BlockHashRequestFromJSON;
	function BlockHashRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'jsonBlock': !runtime$1.exists(json, 'json_block') ? undefined : models.ModelBooleanFromJSON(json['json_block']),
	        'block': models.BlockDataJsonFromJSON(json['block']),
	    };
	}
	exports.BlockHashRequestFromJSONTyped = BlockHashRequestFromJSONTyped;
	function BlockHashRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'json_block': models.ModelBooleanToJSON(value.jsonBlock),
	        'block': models.BlockDataJsonToJSON(value.block),
	    };
	}
	exports.BlockHashRequestToJSON = BlockHashRequestToJSON;
	(function (BlockHashRequestActionEnum) {
	    BlockHashRequestActionEnum["BlockInfo"] = "block_info";
	})(exports.BlockHashRequestActionEnum || (exports.BlockHashRequestActionEnum = {}));
	});

	var BlockHashResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlockHashResponseFromJSON(json) {
	    return BlockHashResponseFromJSONTyped(json);
	}
	exports.BlockHashResponseFromJSON = BlockHashResponseFromJSON;
	function BlockHashResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	    };
	}
	exports.BlockHashResponseFromJSONTyped = BlockHashResponseFromJSONTyped;
	function BlockHashResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'hash': value.hash,
	    };
	}
	exports.BlockHashResponseToJSON = BlockHashResponseToJSON;
	});

	var BlockInfo = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockInfoFromJSON(json) {
	    return BlockInfoFromJSONTyped(json);
	}
	exports.BlockInfoFromJSON = BlockInfoFromJSON;
	function BlockInfoFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blockAccount': !runtime$1.exists(json, 'block_account') ? undefined : json['block_account'],
	        'amount': !runtime$1.exists(json, 'amount') ? undefined : json['amount'],
	        'balance': !runtime$1.exists(json, 'balance') ? undefined : json['balance'],
	        'height': !runtime$1.exists(json, 'height') ? undefined : json['height'],
	        'localTimestamp': !runtime$1.exists(json, 'local_timestamp') ? undefined : json['local_timestamp'],
	        'confirmed': !runtime$1.exists(json, 'confirmed') ? undefined : models.ModelBooleanFromJSON(json['confirmed']),
	        'contents': !runtime$1.exists(json, 'contents') ? undefined : json['contents'],
	        'subtype': !runtime$1.exists(json, 'subtype') ? undefined : models.SubTypeFromJSON(json['subtype']),
	    };
	}
	exports.BlockInfoFromJSONTyped = BlockInfoFromJSONTyped;
	function BlockInfoToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'block_account': value.blockAccount,
	        'amount': value.amount,
	        'balance': value.balance,
	        'height': value.height,
	        'local_timestamp': value.localTimestamp,
	        'confirmed': models.ModelBooleanToJSON(value.confirmed),
	        'contents': value.contents,
	        'subtype': models.SubTypeToJSON(value.subtype),
	    };
	}
	exports.BlockInfoToJSON = BlockInfoToJSON;
	});

	var BlockInfoRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockInfoRequestFromJSON(json) {
	    return BlockInfoRequestFromJSONTyped(json);
	}
	exports.BlockInfoRequestFromJSON = BlockInfoRequestFromJSON;
	function BlockInfoRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'jsonBlock': !runtime$1.exists(json, 'json_block') ? undefined : models.ModelBooleanFromJSON(json['json_block']),
	        'hash': json['hash'],
	    };
	}
	exports.BlockInfoRequestFromJSONTyped = BlockInfoRequestFromJSONTyped;
	function BlockInfoRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'json_block': models.ModelBooleanToJSON(value.jsonBlock),
	        'hash': value.hash,
	    };
	}
	exports.BlockInfoRequestToJSON = BlockInfoRequestToJSON;
	(function (BlockInfoRequestActionEnum) {
	    BlockInfoRequestActionEnum["BlockInfo"] = "block_info";
	})(exports.BlockInfoRequestActionEnum || (exports.BlockInfoRequestActionEnum = {}));
	});

	var BlockInfoResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlockInfoResponseFromJSON(json) {
	    return BlockInfoResponseFromJSONTyped(json);
	}
	exports.BlockInfoResponseFromJSON = BlockInfoResponseFromJSON;
	function BlockInfoResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blockAccount': !runtime$1.exists(json, 'block_account') ? undefined : json['block_account'],
	        'amount': !runtime$1.exists(json, 'amount') ? undefined : json['amount'],
	        'balance': !runtime$1.exists(json, 'balance') ? undefined : json['balance'],
	        'height': !runtime$1.exists(json, 'height') ? undefined : json['height'],
	        'localTimestamp': !runtime$1.exists(json, 'local_timestamp') ? undefined : json['local_timestamp'],
	        'confirmed': !runtime$1.exists(json, 'confirmed') ? undefined : models.ModelBooleanFromJSON(json['confirmed']),
	        'contents': !runtime$1.exists(json, 'contents') ? undefined : models.BlockDataJsonFromJSON(json['contents']),
	        'subType': !runtime$1.exists(json, 'subType') ? undefined : models.SubTypeFromJSON(json['subType']),
	    };
	}
	exports.BlockInfoResponseFromJSONTyped = BlockInfoResponseFromJSONTyped;
	function BlockInfoResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'block_account': value.blockAccount,
	        'amount': value.amount,
	        'balance': value.balance,
	        'height': value.height,
	        'local_timestamp': value.localTimestamp,
	        'confirmed': models.ModelBooleanToJSON(value.confirmed),
	        'contents': models.BlockDataJsonToJSON(value.contents),
	        'subType': models.SubTypeToJSON(value.subType),
	    };
	}
	exports.BlockInfoResponseToJSON = BlockInfoResponseToJSON;
	});

	var BlockState_1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	(function (BlockState) {
	    BlockState["Send"] = "send";
	})(exports.BlockState || (exports.BlockState = {}));
	function BlockStateFromJSON(json) {
	    return BlockStateFromJSONTyped(json);
	}
	exports.BlockStateFromJSON = BlockStateFromJSON;
	function BlockStateFromJSONTyped(json, ignoreDiscriminator) {
	    return json;
	}
	exports.BlockStateFromJSONTyped = BlockStateFromJSONTyped;
	function BlockStateToJSON(value) {
	    return value;
	}
	exports.BlockStateToJSON = BlockStateToJSON;
	});

	var BlocksInfoRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlocksInfoRequestFromJSON(json) {
	    return BlocksInfoRequestFromJSONTyped(json);
	}
	exports.BlocksInfoRequestFromJSON = BlocksInfoRequestFromJSON;
	function BlocksInfoRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'jsonBlock': !runtime$1.exists(json, 'json_block') ? undefined : models.ModelBooleanFromJSON(json['json_block']),
	        'hashes': !runtime$1.exists(json, 'hashes') ? undefined : json['hashes'],
	    };
	}
	exports.BlocksInfoRequestFromJSONTyped = BlocksInfoRequestFromJSONTyped;
	function BlocksInfoRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'json_block': models.ModelBooleanToJSON(value.jsonBlock),
	        'hashes': value.hashes,
	    };
	}
	exports.BlocksInfoRequestToJSON = BlocksInfoRequestToJSON;
	(function (BlocksInfoRequestActionEnum) {
	    BlocksInfoRequestActionEnum["BlocksInfo"] = "blocks_info";
	})(exports.BlocksInfoRequestActionEnum || (exports.BlocksInfoRequestActionEnum = {}));
	});

	var BlocksInfoResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BlocksInfoResponseFromJSON(json) {
	    return BlocksInfoResponseFromJSONTyped(json);
	}
	exports.BlocksInfoResponseFromJSON = BlocksInfoResponseFromJSON;
	function BlocksInfoResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blocks': !runtime$1.exists(json, 'blocks') ? undefined : (runtime$1.mapValues(json['blocks'], models.BlockInfoFromJSON)),
	    };
	}
	exports.BlocksInfoResponseFromJSONTyped = BlocksInfoResponseFromJSONTyped;
	function BlocksInfoResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'blocks': value.blocks === undefined ? undefined : (runtime$1.mapValues(value.blocks, models.BlockInfoToJSON)),
	    };
	}
	exports.BlocksInfoResponseToJSON = BlocksInfoResponseToJSON;
	});

	var BlocksRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlocksRequestFromJSON(json) {
	    return BlocksRequestFromJSONTyped(json);
	}
	exports.BlocksRequestFromJSON = BlocksRequestFromJSON;
	function BlocksRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'hashes': !runtime$1.exists(json, 'hashes') ? undefined : json['hashes'],
	    };
	}
	exports.BlocksRequestFromJSONTyped = BlocksRequestFromJSONTyped;
	function BlocksRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'hashes': value.hashes,
	    };
	}
	exports.BlocksRequestToJSON = BlocksRequestToJSON;
	(function (BlocksRequestActionEnum) {
	    BlocksRequestActionEnum["Blocks"] = "blocks";
	})(exports.BlocksRequestActionEnum || (exports.BlocksRequestActionEnum = {}));
	});

	var BlocksResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BlocksResponseFromJSON(json) {
	    return BlocksResponseFromJSONTyped(json);
	}
	exports.BlocksResponseFromJSON = BlocksResponseFromJSON;
	function BlocksResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blocks': !runtime$1.exists(json, 'blocks') ? undefined : json['blocks'],
	    };
	}
	exports.BlocksResponseFromJSONTyped = BlocksResponseFromJSONTyped;
	function BlocksResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'blocks': value.blocks,
	    };
	}
	exports.BlocksResponseToJSON = BlocksResponseToJSON;
	});

	var BootstrapAnyRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function BootstrapAnyRequestFromJSON(json) {
	    return BootstrapAnyRequestFromJSONTyped(json);
	}
	exports.BootstrapAnyRequestFromJSON = BootstrapAnyRequestFromJSON;
	function BootstrapAnyRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	    };
	}
	exports.BootstrapAnyRequestFromJSONTyped = BootstrapAnyRequestFromJSONTyped;
	function BootstrapAnyRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.BootstrapAnyRequestToJSON = BootstrapAnyRequestToJSON;
	(function (BootstrapAnyRequestActionEnum) {
	    BootstrapAnyRequestActionEnum["BootstrapAny"] = "bootstrap_any";
	})(exports.BootstrapAnyRequestActionEnum || (exports.BootstrapAnyRequestActionEnum = {}));
	});

	var BootstrapAnyResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BootstrapAnyResponseFromJSON(json) {
	    return BootstrapAnyResponseFromJSONTyped(json);
	}
	exports.BootstrapAnyResponseFromJSON = BootstrapAnyResponseFromJSON;
	function BootstrapAnyResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'success': !runtime$1.exists(json, 'success') ? undefined : json['success'],
	    };
	}
	exports.BootstrapAnyResponseFromJSONTyped = BootstrapAnyResponseFromJSONTyped;
	function BootstrapAnyResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'success': value.success,
	    };
	}
	exports.BootstrapAnyResponseToJSON = BootstrapAnyResponseToJSON;
	});

	var BootstrapLazyRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function BootstrapLazyRequestFromJSON(json) {
	    return BootstrapLazyRequestFromJSONTyped(json);
	}
	exports.BootstrapLazyRequestFromJSON = BootstrapLazyRequestFromJSON;
	function BootstrapLazyRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'hash': json['hash'],
	        'force': !runtime$1.exists(json, 'force') ? undefined : models.ModelBooleanFromJSON(json['force']),
	    };
	}
	exports.BootstrapLazyRequestFromJSONTyped = BootstrapLazyRequestFromJSONTyped;
	function BootstrapLazyRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'hash': value.hash,
	        'force': models.ModelBooleanToJSON(value.force),
	    };
	}
	exports.BootstrapLazyRequestToJSON = BootstrapLazyRequestToJSON;
	(function (BootstrapLazyRequestActionEnum) {
	    BootstrapLazyRequestActionEnum["BootstrapAny"] = "bootstrap_any";
	})(exports.BootstrapLazyRequestActionEnum || (exports.BootstrapLazyRequestActionEnum = {}));
	});

	var BootstrapLazyResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BootstrapLazyResponseFromJSON(json) {
	    return BootstrapLazyResponseFromJSONTyped(json);
	}
	exports.BootstrapLazyResponseFromJSON = BootstrapLazyResponseFromJSON;
	function BootstrapLazyResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'started': !runtime$1.exists(json, 'started') ? undefined : json['started'],
	    };
	}
	exports.BootstrapLazyResponseFromJSONTyped = BootstrapLazyResponseFromJSONTyped;
	function BootstrapLazyResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'started': value.started,
	    };
	}
	exports.BootstrapLazyResponseToJSON = BootstrapLazyResponseToJSON;
	});

	var BootstrapRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BootstrapRequestFromJSON(json) {
	    return BootstrapRequestFromJSONTyped(json);
	}
	exports.BootstrapRequestFromJSON = BootstrapRequestFromJSON;
	function BootstrapRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'address': !runtime$1.exists(json, 'address') ? undefined : json['address'],
	        'port': !runtime$1.exists(json, 'port') ? undefined : json['port'],
	    };
	}
	exports.BootstrapRequestFromJSONTyped = BootstrapRequestFromJSONTyped;
	function BootstrapRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'address': value.address,
	        'port': value.port,
	    };
	}
	exports.BootstrapRequestToJSON = BootstrapRequestToJSON;
	(function (BootstrapRequestActionEnum) {
	    BootstrapRequestActionEnum["Bootstrap"] = "bootstrap";
	})(exports.BootstrapRequestActionEnum || (exports.BootstrapRequestActionEnum = {}));
	});

	var BootstrapResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function BootstrapResponseFromJSON(json) {
	    return BootstrapResponseFromJSONTyped(json);
	}
	exports.BootstrapResponseFromJSON = BootstrapResponseFromJSON;
	function BootstrapResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'success': !runtime$1.exists(json, 'success') ? undefined : json['success'],
	    };
	}
	exports.BootstrapResponseFromJSONTyped = BootstrapResponseFromJSONTyped;
	function BootstrapResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'success': value.success,
	    };
	}
	exports.BootstrapResponseToJSON = BootstrapResponseToJSON;
	});

	var ChainRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ChainRequestFromJSON(json) {
	    return ChainRequestFromJSONTyped(json);
	}
	exports.ChainRequestFromJSON = ChainRequestFromJSON;
	function ChainRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'block': json['block'],
	        'count': json['count'],
	        'offset': !runtime$1.exists(json, 'offset') ? undefined : json['offset'],
	        'reverse': !runtime$1.exists(json, 'reverse') ? undefined : models.ModelBooleanFromJSON(json['reverse']),
	    };
	}
	exports.ChainRequestFromJSONTyped = ChainRequestFromJSONTyped;
	function ChainRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'block': value.block,
	        'count': value.count,
	        'offset': value.offset,
	        'reverse': models.ModelBooleanToJSON(value.reverse),
	    };
	}
	exports.ChainRequestToJSON = ChainRequestToJSON;
	(function (ChainRequestActionEnum) {
	    ChainRequestActionEnum["Chain"] = "chain";
	})(exports.ChainRequestActionEnum || (exports.ChainRequestActionEnum = {}));
	});

	var ChainResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ChainResponseFromJSON(json) {
	    return ChainResponseFromJSONTyped(json);
	}
	exports.ChainResponseFromJSON = ChainResponseFromJSON;
	function ChainResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blocks': !runtime$1.exists(json, 'blocks') ? undefined : json['blocks'],
	    };
	}
	exports.ChainResponseFromJSONTyped = ChainResponseFromJSONTyped;
	function ChainResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'blocks': value.blocks,
	    };
	}
	exports.ChainResponseToJSON = ChainResponseToJSON;
	});

	var Confirmation = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ConfirmationFromJSON(json) {
	    return ConfirmationFromJSONTyped(json);
	}
	exports.ConfirmationFromJSON = ConfirmationFromJSON;
	function ConfirmationFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	        'duration': !runtime$1.exists(json, 'duration') ? undefined : json['duration'],
	        'time': !runtime$1.exists(json, 'time') ? undefined : json['time'],
	        'tally': !runtime$1.exists(json, 'tally') ? undefined : json['tally'],
	    };
	}
	exports.ConfirmationFromJSONTyped = ConfirmationFromJSONTyped;
	function ConfirmationToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'hash': value.hash,
	        'duration': value.duration,
	        'time': value.time,
	        'tally': value.tally,
	    };
	}
	exports.ConfirmationToJSON = ConfirmationToJSON;
	});

	var ConfirmationActiveRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ConfirmationActiveRequestFromJSON(json) {
	    return ConfirmationActiveRequestFromJSONTyped(json);
	}
	exports.ConfirmationActiveRequestFromJSON = ConfirmationActiveRequestFromJSON;
	function ConfirmationActiveRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'announcements': !runtime$1.exists(json, 'announcements') ? undefined : json['announcements'],
	    };
	}
	exports.ConfirmationActiveRequestFromJSONTyped = ConfirmationActiveRequestFromJSONTyped;
	function ConfirmationActiveRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'announcements': value.announcements,
	    };
	}
	exports.ConfirmationActiveRequestToJSON = ConfirmationActiveRequestToJSON;
	(function (ConfirmationActiveRequestActionEnum) {
	    ConfirmationActiveRequestActionEnum["ConfirmationActive"] = "confirmation_active";
	})(exports.ConfirmationActiveRequestActionEnum || (exports.ConfirmationActiveRequestActionEnum = {}));
	});

	var ConfirmationActiveResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ConfirmationActiveResponseFromJSON(json) {
	    return ConfirmationActiveResponseFromJSONTyped(json);
	}
	exports.ConfirmationActiveResponseFromJSON = ConfirmationActiveResponseFromJSON;
	function ConfirmationActiveResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'confirmations': !runtime$1.exists(json, 'confirmations') ? undefined : json['confirmations'],
	    };
	}
	exports.ConfirmationActiveResponseFromJSONTyped = ConfirmationActiveResponseFromJSONTyped;
	function ConfirmationActiveResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'confirmations': value.confirmations,
	    };
	}
	exports.ConfirmationActiveResponseToJSON = ConfirmationActiveResponseToJSON;
	});

	var ConfirmationHeightCurrentlyProcessingRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function ConfirmationHeightCurrentlyProcessingRequestFromJSON(json) {
	    return ConfirmationHeightCurrentlyProcessingRequestFromJSONTyped(json);
	}
	exports.ConfirmationHeightCurrentlyProcessingRequestFromJSON = ConfirmationHeightCurrentlyProcessingRequestFromJSON;
	function ConfirmationHeightCurrentlyProcessingRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	    };
	}
	exports.ConfirmationHeightCurrentlyProcessingRequestFromJSONTyped = ConfirmationHeightCurrentlyProcessingRequestFromJSONTyped;
	function ConfirmationHeightCurrentlyProcessingRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.ConfirmationHeightCurrentlyProcessingRequestToJSON = ConfirmationHeightCurrentlyProcessingRequestToJSON;
	(function (ConfirmationHeightCurrentlyProcessingRequestActionEnum) {
	    ConfirmationHeightCurrentlyProcessingRequestActionEnum["ConfirmationHeightCurrentlyProcessing"] = "confirmation_height_currently_processing";
	})(exports.ConfirmationHeightCurrentlyProcessingRequestActionEnum || (exports.ConfirmationHeightCurrentlyProcessingRequestActionEnum = {}));
	});

	/*@__PURE__*/getDefaultExportFromCjs(ConfirmationHeightCurrentlyProcessingRequest);

	var ConfirmationHeightCurrentlyProcessingResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ConfirmationHeightCurrentlyProcessingResponseFromJSON(json) {
	    return ConfirmationHeightCurrentlyProcessingResponseFromJSONTyped(json);
	}
	exports.ConfirmationHeightCurrentlyProcessingResponseFromJSON = ConfirmationHeightCurrentlyProcessingResponseFromJSON;
	function ConfirmationHeightCurrentlyProcessingResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	    };
	}
	exports.ConfirmationHeightCurrentlyProcessingResponseFromJSONTyped = ConfirmationHeightCurrentlyProcessingResponseFromJSONTyped;
	function ConfirmationHeightCurrentlyProcessingResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'hash': value.hash,
	    };
	}
	exports.ConfirmationHeightCurrentlyProcessingResponseToJSON = ConfirmationHeightCurrentlyProcessingResponseToJSON;
	});

	var ConfirmationHistoryRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	function ConfirmationHistoryRequestFromJSON(json) {
	    return ConfirmationHistoryRequestFromJSONTyped(json);
	}
	exports.ConfirmationHistoryRequestFromJSON = ConfirmationHistoryRequestFromJSON;
	function ConfirmationHistoryRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	    };
	}
	exports.ConfirmationHistoryRequestFromJSONTyped = ConfirmationHistoryRequestFromJSONTyped;
	function ConfirmationHistoryRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.ConfirmationHistoryRequestToJSON = ConfirmationHistoryRequestToJSON;
	(function (ConfirmationHistoryRequestActionEnum) {
	    ConfirmationHistoryRequestActionEnum["ConfirmationHistory"] = "confirmation_history";
	})(exports.ConfirmationHistoryRequestActionEnum || (exports.ConfirmationHistoryRequestActionEnum = {}));
	});

	var ConfirmationHistoryResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ConfirmationHistoryResponseFromJSON(json) {
	    return ConfirmationHistoryResponseFromJSONTyped(json);
	}
	exports.ConfirmationHistoryResponseFromJSON = ConfirmationHistoryResponseFromJSON;
	function ConfirmationHistoryResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'confirmationStats': !runtime$1.exists(json, 'confirmation_stats') ? undefined : models.ConfirmationHistoryResponseConfirmationStatsFromJSON(json['confirmation_stats']),
	        'confirmations': !runtime$1.exists(json, 'confirmations') ? undefined : (json['confirmations'].map(models.ConfirmationFromJSON)),
	    };
	}
	exports.ConfirmationHistoryResponseFromJSONTyped = ConfirmationHistoryResponseFromJSONTyped;
	function ConfirmationHistoryResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'confirmation_stats': models.ConfirmationHistoryResponseConfirmationStatsToJSON(value.confirmationStats),
	        'confirmations': value.confirmations === undefined ? undefined : (value.confirmations.map(models.ConfirmationToJSON)),
	    };
	}
	exports.ConfirmationHistoryResponseToJSON = ConfirmationHistoryResponseToJSON;
	});

	var ConfirmationHistoryResponseConfirmationStats = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ConfirmationHistoryResponseConfirmationStatsFromJSON(json) {
	    return ConfirmationHistoryResponseConfirmationStatsFromJSONTyped(json);
	}
	exports.ConfirmationHistoryResponseConfirmationStatsFromJSON = ConfirmationHistoryResponseConfirmationStatsFromJSON;
	function ConfirmationHistoryResponseConfirmationStatsFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'count': !runtime$1.exists(json, 'count') ? undefined : json['count'],
	        'average': !runtime$1.exists(json, 'average') ? undefined : json['average'],
	    };
	}
	exports.ConfirmationHistoryResponseConfirmationStatsFromJSONTyped = ConfirmationHistoryResponseConfirmationStatsFromJSONTyped;
	function ConfirmationHistoryResponseConfirmationStatsToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'count': value.count,
	        'average': value.average,
	    };
	}
	exports.ConfirmationHistoryResponseConfirmationStatsToJSON = ConfirmationHistoryResponseConfirmationStatsToJSON;
	});

	var ConfirmationInfo = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ConfirmationInfoFromJSON(json) {
	    return ConfirmationInfoFromJSONTyped(json);
	}
	exports.ConfirmationInfoFromJSON = ConfirmationInfoFromJSON;
	function ConfirmationInfoFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'tally': !runtime$1.exists(json, 'tally') ? undefined : json['tally'],
	        'contents': !runtime$1.exists(json, 'contents') ? undefined : models.BlockDataJsonFromJSON(json['contents']),
	    };
	}
	exports.ConfirmationInfoFromJSONTyped = ConfirmationInfoFromJSONTyped;
	function ConfirmationInfoToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'tally': value.tally,
	        'contents': models.BlockDataJsonToJSON(value.contents),
	    };
	}
	exports.ConfirmationInfoToJSON = ConfirmationInfoToJSON;
	});

	var ConfirmationInfoRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ConfirmationInfoRequestFromJSON(json) {
	    return ConfirmationInfoRequestFromJSONTyped(json);
	}
	exports.ConfirmationInfoRequestFromJSON = ConfirmationInfoRequestFromJSON;
	function ConfirmationInfoRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'jsonBlock': !runtime$1.exists(json, 'json_block') ? undefined : models.ModelBooleanFromJSON(json['json_block']),
	        'contents': !runtime$1.exists(json, 'contents') ? undefined : models.ModelBooleanFromJSON(json['contents']),
	        'representatives': !runtime$1.exists(json, 'representatives') ? undefined : models.ModelBooleanFromJSON(json['representatives']),
	    };
	}
	exports.ConfirmationInfoRequestFromJSONTyped = ConfirmationInfoRequestFromJSONTyped;
	function ConfirmationInfoRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'json_block': models.ModelBooleanToJSON(value.jsonBlock),
	        'contents': models.ModelBooleanToJSON(value.contents),
	        'representatives': models.ModelBooleanToJSON(value.representatives),
	    };
	}
	exports.ConfirmationInfoRequestToJSON = ConfirmationInfoRequestToJSON;
	(function (ConfirmationInfoRequestActionEnum) {
	    ConfirmationInfoRequestActionEnum["ConfirmationInfo"] = "confirmation_info";
	})(exports.ConfirmationInfoRequestActionEnum || (exports.ConfirmationInfoRequestActionEnum = {}));
	});

	var ConfirmationInfoResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ConfirmationInfoResponseFromJSON(json) {
	    return ConfirmationInfoResponseFromJSONTyped(json);
	}
	exports.ConfirmationInfoResponseFromJSON = ConfirmationInfoResponseFromJSON;
	function ConfirmationInfoResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'announcements': !runtime$1.exists(json, 'announcements') ? undefined : json['announcements'],
	        'lastWinner': !runtime$1.exists(json, 'last_winner') ? undefined : json['last_winner'],
	        'totalTally': !runtime$1.exists(json, 'total_tally') ? undefined : json['total_tally'],
	        'blocks': !runtime$1.exists(json, 'blocks') ? undefined : (runtime$1.mapValues(json['blocks'], models.ConfirmationInfoFromJSON)),
	    };
	}
	exports.ConfirmationInfoResponseFromJSONTyped = ConfirmationInfoResponseFromJSONTyped;
	function ConfirmationInfoResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'announcements': value.announcements,
	        'last_winner': value.lastWinner,
	        'total_tally': value.totalTally,
	        'blocks': value.blocks === undefined ? undefined : (runtime$1.mapValues(value.blocks, models.ConfirmationInfoToJSON)),
	    };
	}
	exports.ConfirmationInfoResponseToJSON = ConfirmationInfoResponseToJSON;
	});

	var KeyCreateRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function KeyCreateRequestFromJSON(json) {
	    return KeyCreateRequestFromJSONTyped(json);
	}
	exports.KeyCreateRequestFromJSON = KeyCreateRequestFromJSON;
	function KeyCreateRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	    };
	}
	exports.KeyCreateRequestFromJSONTyped = KeyCreateRequestFromJSONTyped;
	function KeyCreateRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.KeyCreateRequestToJSON = KeyCreateRequestToJSON;
	(function (KeyCreateRequestActionEnum) {
	    KeyCreateRequestActionEnum["KeyCreate"] = "key_create";
	})(exports.KeyCreateRequestActionEnum || (exports.KeyCreateRequestActionEnum = {}));
	});

	var KeyCreateResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function KeyCreateResponseFromJSON(json) {
	    return KeyCreateResponseFromJSONTyped(json);
	}
	exports.KeyCreateResponseFromJSON = KeyCreateResponseFromJSON;
	function KeyCreateResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        '_private': !runtime$1.exists(json, 'private') ? undefined : json['private'],
	        '_public': !runtime$1.exists(json, 'public') ? undefined : json['public'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.KeyCreateResponseFromJSONTyped = KeyCreateResponseFromJSONTyped;
	function KeyCreateResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'private': value._private,
	        'public': value._public,
	        'account': value.account,
	    };
	}
	exports.KeyCreateResponseToJSON = KeyCreateResponseToJSON;
	});

	var KeyExpandRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function KeyExpandRequestFromJSON(json) {
	    return KeyExpandRequestFromJSONTyped(json);
	}
	exports.KeyExpandRequestFromJSON = KeyExpandRequestFromJSON;
	function KeyExpandRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'key': !runtime$1.exists(json, 'key') ? undefined : json['key'],
	    };
	}
	exports.KeyExpandRequestFromJSONTyped = KeyExpandRequestFromJSONTyped;
	function KeyExpandRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'key': value.key,
	    };
	}
	exports.KeyExpandRequestToJSON = KeyExpandRequestToJSON;
	(function (KeyExpandRequestActionEnum) {
	    KeyExpandRequestActionEnum["KeyExpand"] = "key_expand";
	})(exports.KeyExpandRequestActionEnum || (exports.KeyExpandRequestActionEnum = {}));
	});

	var KeyExpandResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function KeyExpandResponseFromJSON(json) {
	    return KeyExpandResponseFromJSONTyped(json);
	}
	exports.KeyExpandResponseFromJSON = KeyExpandResponseFromJSON;
	function KeyExpandResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        '_private': !runtime$1.exists(json, 'private') ? undefined : json['private'],
	        '_public': !runtime$1.exists(json, 'public') ? undefined : json['public'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	    };
	}
	exports.KeyExpandResponseFromJSONTyped = KeyExpandResponseFromJSONTyped;
	function KeyExpandResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'private': value._private,
	        'public': value._public,
	        'account': value.account,
	    };
	}
	exports.KeyExpandResponseToJSON = KeyExpandResponseToJSON;
	});

	var ModelBoolean_1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	(function (ModelBoolean) {
	    ModelBoolean["True"] = "true";
	    ModelBoolean["False"] = "false";
	})(exports.ModelBoolean || (exports.ModelBoolean = {}));
	function ModelBooleanFromJSON(json) {
	    return ModelBooleanFromJSONTyped(json);
	}
	exports.ModelBooleanFromJSON = ModelBooleanFromJSON;
	function ModelBooleanFromJSONTyped(json, ignoreDiscriminator) {
	    return json;
	}
	exports.ModelBooleanFromJSONTyped = ModelBooleanFromJSONTyped;
	function ModelBooleanToJSON(value) {
	    return value;
	}
	exports.ModelBooleanToJSON = ModelBooleanToJSON;
	});

	var PendingBlock = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function PendingBlockFromJSON(json) {
	    return PendingBlockFromJSONTyped(json);
	}
	exports.PendingBlockFromJSON = PendingBlockFromJSON;
	function PendingBlockFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'amount': !runtime$1.exists(json, 'amount') ? undefined : json['amount'],
	        'source': !runtime$1.exists(json, 'source') ? undefined : json['source'],
	    };
	}
	exports.PendingBlockFromJSONTyped = PendingBlockFromJSONTyped;
	function PendingBlockToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'amount': value.amount,
	        'source': value.source,
	    };
	}
	exports.PendingBlockToJSON = PendingBlockToJSON;
	});

	var PendingRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function PendingRequestFromJSON(json) {
	    return PendingRequestFromJSONTyped(json);
	}
	exports.PendingRequestFromJSON = PendingRequestFromJSON;
	function PendingRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'account': json['account'],
	        'count': !runtime$1.exists(json, 'count') ? undefined : json['count'],
	        'sorting': !runtime$1.exists(json, 'sorting') ? undefined : models.ModelBooleanFromJSON(json['sorting']),
	        'includeOnlyConfirmed': !runtime$1.exists(json, 'include_only_confirmed') ? undefined : models.ModelBooleanFromJSON(json['include_only_confirmed']),
	        'source': !runtime$1.exists(json, 'source') ? undefined : models.ModelBooleanFromJSON(json['source']),
	    };
	}
	exports.PendingRequestFromJSONTyped = PendingRequestFromJSONTyped;
	function PendingRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'account': value.account,
	        'count': value.count,
	        'sorting': models.ModelBooleanToJSON(value.sorting),
	        'include_only_confirmed': models.ModelBooleanToJSON(value.includeOnlyConfirmed),
	        'source': models.ModelBooleanToJSON(value.source),
	    };
	}
	exports.PendingRequestToJSON = PendingRequestToJSON;
	(function (PendingRequestActionEnum) {
	    PendingRequestActionEnum["Pending"] = "pending";
	})(exports.PendingRequestActionEnum || (exports.PendingRequestActionEnum = {}));
	});

	var PendingResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function PendingResponseFromJSON(json) {
	    return PendingResponseFromJSONTyped(json);
	}
	exports.PendingResponseFromJSON = PendingResponseFromJSON;
	function PendingResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'blocks': !runtime$1.exists(json, 'blocks') ? undefined : json['blocks'],
	    };
	}
	exports.PendingResponseFromJSONTyped = PendingResponseFromJSONTyped;
	function PendingResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'blocks': value.blocks,
	    };
	}
	exports.PendingResponseToJSON = PendingResponseToJSON;
	});

	var ProcessRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	function ProcessRequestFromJSON(json) {
	    return ProcessRequestFromJSONTyped(json);
	}
	exports.ProcessRequestFromJSON = ProcessRequestFromJSON;
	function ProcessRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': json['action'],
	        'jsonBlock': !runtime$1.exists(json, 'json_block') ? undefined : models.ModelBooleanFromJSON(json['json_block']),
	        'block': models.BlockDataJsonFromJSON(json['block']),
	        'subtype': !runtime$1.exists(json, 'subtype') ? undefined : models.SubTypeFromJSON(json['subtype']),
	    };
	}
	exports.ProcessRequestFromJSONTyped = ProcessRequestFromJSONTyped;
	function ProcessRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'json_block': models.ModelBooleanToJSON(value.jsonBlock),
	        'block': models.BlockDataJsonToJSON(value.block),
	        'subtype': models.SubTypeToJSON(value.subtype),
	    };
	}
	exports.ProcessRequestToJSON = ProcessRequestToJSON;
	(function (ProcessRequestActionEnum) {
	    ProcessRequestActionEnum["Process"] = "process";
	})(exports.ProcessRequestActionEnum || (exports.ProcessRequestActionEnum = {}));
	});

	/*@__PURE__*/getDefaultExportFromCjs(ProcessRequest);

	var ProcessResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ProcessResponseFromJSON(json) {
	    return ProcessResponseFromJSONTyped(json);
	}
	exports.ProcessResponseFromJSON = ProcessResponseFromJSON;
	function ProcessResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	    };
	}
	exports.ProcessResponseFromJSONTyped = ProcessResponseFromJSONTyped;
	function ProcessResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'hash': value.hash,
	    };
	}
	exports.ProcessResponseToJSON = ProcessResponseToJSON;
	});

	var ReceiveRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ReceiveRequestFromJSON(json) {
	    return ReceiveRequestFromJSONTyped(json);
	}
	exports.ReceiveRequestFromJSON = ReceiveRequestFromJSON;
	function ReceiveRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'wallet': !runtime$1.exists(json, 'wallet') ? undefined : json['wallet'],
	        'account': !runtime$1.exists(json, 'account') ? undefined : json['account'],
	        'block': !runtime$1.exists(json, 'block') ? undefined : json['block'],
	    };
	}
	exports.ReceiveRequestFromJSONTyped = ReceiveRequestFromJSONTyped;
	function ReceiveRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'wallet': value.wallet,
	        'account': value.account,
	        'block': value.block,
	    };
	}
	exports.ReceiveRequestToJSON = ReceiveRequestToJSON;
	(function (ReceiveRequestActionEnum) {
	    ReceiveRequestActionEnum["Receive"] = "receive";
	})(exports.ReceiveRequestActionEnum || (exports.ReceiveRequestActionEnum = {}));
	});

	var ReceiveResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function ReceiveResponseFromJSON(json) {
	    return ReceiveResponseFromJSONTyped(json);
	}
	exports.ReceiveResponseFromJSON = ReceiveResponseFromJSON;
	function ReceiveResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'block': !runtime$1.exists(json, 'block') ? undefined : json['block'],
	    };
	}
	exports.ReceiveResponseFromJSONTyped = ReceiveResponseFromJSONTyped;
	function ReceiveResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'block': value.block,
	    };
	}
	exports.ReceiveResponseToJSON = ReceiveResponseToJSON;
	});

	var SubType_1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	(function (SubType) {
	    SubType["Send"] = "send";
	    SubType["Receive"] = "receive";
	    SubType["Open"] = "open";
	    SubType["Change"] = "change";
	    SubType["Epoch"] = "epoch";
	})(exports.SubType || (exports.SubType = {}));
	function SubTypeFromJSON(json) {
	    return SubTypeFromJSONTyped(json);
	}
	exports.SubTypeFromJSON = SubTypeFromJSON;
	function SubTypeFromJSONTyped(json, ignoreDiscriminator) {
	    return json;
	}
	exports.SubTypeFromJSONTyped = SubTypeFromJSONTyped;
	function SubTypeToJSON(value) {
	    return value;
	}
	exports.SubTypeToJSON = SubTypeToJSON;
	});

	var WalletCreateRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function WalletCreateRequestFromJSON(json) {
	    return WalletCreateRequestFromJSONTyped(json);
	}
	exports.WalletCreateRequestFromJSON = WalletCreateRequestFromJSON;
	function WalletCreateRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	    };
	}
	exports.WalletCreateRequestFromJSONTyped = WalletCreateRequestFromJSONTyped;
	function WalletCreateRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	    };
	}
	exports.WalletCreateRequestToJSON = WalletCreateRequestToJSON;
	(function (WalletCreateRequestActionEnum) {
	    WalletCreateRequestActionEnum["WalletCreate"] = "wallet_create";
	})(exports.WalletCreateRequestActionEnum || (exports.WalletCreateRequestActionEnum = {}));
	});

	var WalletCreateResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function WalletCreateResponseFromJSON(json) {
	    return WalletCreateResponseFromJSONTyped(json);
	}
	exports.WalletCreateResponseFromJSON = WalletCreateResponseFromJSON;
	function WalletCreateResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'wallet': !runtime$1.exists(json, 'wallet') ? undefined : json['wallet'],
	    };
	}
	exports.WalletCreateResponseFromJSONTyped = WalletCreateResponseFromJSONTyped;
	function WalletCreateResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'wallet': value.wallet,
	    };
	}
	exports.WalletCreateResponseToJSON = WalletCreateResponseToJSON;
	});

	var WorkGenerateRequest = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function WorkGenerateRequestFromJSON(json) {
	    return WorkGenerateRequestFromJSONTyped(json);
	}
	exports.WorkGenerateRequestFromJSON = WorkGenerateRequestFromJSON;
	function WorkGenerateRequestFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'action': !runtime$1.exists(json, 'action') ? undefined : json['action'],
	        'hash': !runtime$1.exists(json, 'hash') ? undefined : json['hash'],
	        'difficulty': !runtime$1.exists(json, 'difficulty') ? undefined : json['difficulty'],
	    };
	}
	exports.WorkGenerateRequestFromJSONTyped = WorkGenerateRequestFromJSONTyped;
	function WorkGenerateRequestToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'action': value.action,
	        'hash': value.hash,
	        'difficulty': value.difficulty,
	    };
	}
	exports.WorkGenerateRequestToJSON = WorkGenerateRequestToJSON;
	(function (WorkGenerateRequestActionEnum) {
	    WorkGenerateRequestActionEnum["WorkGenerate"] = "work_generate";
	})(exports.WorkGenerateRequestActionEnum || (exports.WorkGenerateRequestActionEnum = {}));
	});

	var WorkGenerateResponse = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });

	function WorkGenerateResponseFromJSON(json) {
	    return WorkGenerateResponseFromJSONTyped(json);
	}
	exports.WorkGenerateResponseFromJSON = WorkGenerateResponseFromJSON;
	function WorkGenerateResponseFromJSONTyped(json, ignoreDiscriminator) {
	    if ((json === undefined) || (json === null)) {
	        return json;
	    }
	    return {
	        'work': !runtime$1.exists(json, 'work') ? undefined : json['work'],
	        'difficulty': !runtime$1.exists(json, 'difficulty') ? undefined : json['difficulty'],
	        'multiplier': !runtime$1.exists(json, 'multiplier') ? undefined : json['multiplier'],
	    };
	}
	exports.WorkGenerateResponseFromJSONTyped = WorkGenerateResponseFromJSONTyped;
	function WorkGenerateResponseToJSON(value) {
	    if (value === undefined) {
	        return undefined;
	    }
	    if (value === null) {
	        return null;
	    }
	    return {
	        'work': value.work,
	        'difficulty': value.difficulty,
	        'multiplier': value.multiplier,
	    };
	}
	exports.WorkGenerateResponseToJSON = WorkGenerateResponseToJSON;
	});

	var models = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(AccountBalanceRequest);
	__export(AccountBalanceResponse);
	__export(AccountBlockCountRequest);
	__export(AccountBlockCountResponse);
	__export(AccountGetRequest);
	__export(AccountGetResponse);
	__export(AccountHistoryRequest);
	__export(AccountHistoryResponse);
	__export(AccountInfoRequest);
	__export(AccountInfoResponse);
	__export(AccountKeyRequest);
	__export(AccountKeyResponse);
	__export(AccountRepresentativeRequest);
	__export(AccountRepresentativeResponse);
	__export(AccountWeightRequest);
	__export(AccountWeightResponse);
	__export(AccountsBalancesRequest);
	__export(AccountsBalancesResponse);
	__export(AccountsCreateRequest);
	__export(AccountsCreateResponse);
	__export(AccountsFrontiersRequest);
	__export(AccountsFrontiersResponse);
	__export(AccountsPendingRequest);
	__export(AccountsPendingResponse);
	__export(ActiveDifficultyRequest);
	__export(ActiveDifficultyResponse);
	__export(AvailableSupplyRequest);
	__export(AvailableSupplyResponse);
	__export(Block);
	__export(BlockAccountRequest);
	__export(BlockAccountResponse);
	__export(BlockConfirmRequest);
	__export(BlockConfirmResponse);
	__export(BlockCountRequest);
	__export(BlockCountResponse);
	__export(BlockCountTypeRequest);
	__export(BlockCountTypeResponse);
	__export(BlockCreateRequest);
	__export(BlockCreateResponse);
	__export(BlockDataJson);
	__export(BlockHashRequest);
	__export(BlockHashResponse);
	__export(BlockInfo);
	__export(BlockInfoRequest);
	__export(BlockInfoResponse);
	__export(BlockState_1);
	__export(BlocksInfoRequest);
	__export(BlocksInfoResponse);
	__export(BlocksRequest);
	__export(BlocksResponse);
	__export(BootstrapAnyRequest);
	__export(BootstrapAnyResponse);
	__export(BootstrapLazyRequest);
	__export(BootstrapLazyResponse);
	__export(BootstrapRequest);
	__export(BootstrapResponse);
	__export(ChainRequest);
	__export(ChainResponse);
	__export(Confirmation);
	__export(ConfirmationActiveRequest);
	__export(ConfirmationActiveResponse);
	__export(ConfirmationHeightCurrentlyProcessingRequest);
	__export(ConfirmationHeightCurrentlyProcessingResponse);
	__export(ConfirmationHistoryRequest);
	__export(ConfirmationHistoryResponse);
	__export(ConfirmationHistoryResponseConfirmationStats);
	__export(ConfirmationInfo);
	__export(ConfirmationInfoRequest);
	__export(ConfirmationInfoResponse);
	__export(KeyCreateRequest);
	__export(KeyCreateResponse);
	__export(KeyExpandRequest);
	__export(KeyExpandResponse);
	__export(ModelBoolean_1);
	__export(PendingBlock);
	__export(PendingRequest);
	__export(PendingResponse);
	__export(ProcessRequest);
	__export(ProcessResponse);
	__export(ReceiveRequest);
	__export(ReceiveResponse);
	__export(SubType_1);
	__export(WalletCreateRequest);
	__export(WalletCreateResponse);
	__export(WorkGenerateRequest);
	__export(WorkGenerateResponse);
	});

	var DebugApi_1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	/**
	 *
	 */
	class DebugApi extends runtime$1.BaseAPI {
	    /**
	     * _version 19.0+_  Returns the hash of the block which is having the confirmation height set for, error otherwise. When a block is being confirmed, it must confirm all blocks in the chain below and iteratively follow all receive blocks. This can take a long time, so it can be useful to find which block was the original being confirmed.
	     */
	    confirmationHeightCurrentlyProcessingRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#confirmation_height_currently_processing`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ConfirmationHeightCurrentlyProcessingRequestToJSON(requestParameters.confirmationHeightCurrentlyProcessingRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ConfirmationHeightCurrentlyProcessingResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * _version 19.0+_  Returns the hash of the block which is having the confirmation height set for, error otherwise. When a block is being confirmed, it must confirm all blocks in the chain below and iteratively follow all receive blocks. This can take a long time, so it can be useful to find which block was the original being confirmed.
	     */
	    confirmationHeightCurrentlyProcessing(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.confirmationHeightCurrentlyProcessingRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	}
	exports.DebugApi = DebugApi;
	});

	/*@__PURE__*/getDefaultExportFromCjs(DebugApi_1);

	var NodeRPCsApi_1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	/**
	 *
	 */
	class NodeRPCsApi extends runtime$1.BaseAPI {
	    /**
	     * Returns how many RAW is owned and how many have not yet been received by **account** > This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network.
	     */
	    accountBalanceRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_balance`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountBalanceRequestToJSON(requestParameters.accountBalanceRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountBalanceResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns how many RAW is owned and how many have not yet been received by **account** > This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network.
	     */
	    accountBalance(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountBalanceRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Get number of blocks for a specific account
	     */
	    accountBlockCountRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_block_count`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountBlockCountRequestToJSON(requestParameters.accountBlockCountRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountBlockCountResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Get number of blocks for a specific account
	     */
	    accountBlockCount(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountBlockCountRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Get account for the public key
	     */
	    accountGetRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_get`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountGetRequestToJSON(requestParameters.accountGetRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountGetResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Get account for the public key
	     */
	    accountGet(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountGetRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Gets the account history. Reports send/receive information for an account.
	     */
	    accountHistoryRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_history`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountHistoryRequestToJSON(requestParameters.accountHistoryRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountHistoryResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Gets the account history. Reports send/receive information for an account.
	     */
	    accountHistory(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountHistoryRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise.
	     */
	    accountInfoRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_info`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountInfoRequestToJSON(requestParameters.accountInfoRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountInfoResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns frontier, open block, change representative block, balance, last modified timestamp from local database & block count for **account**. Only works for accounts that have an entry on the ledger, will return _Account not found_ otherwise.
	     */
	    accountInfo(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountInfoRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Get the public key for **account**
	     */
	    accountKeyRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_key`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountKeyRequestToJSON(requestParameters.accountKeyRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountKeyResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Get the public key for **account**
	     */
	    accountKey(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountKeyRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns the representative for **account**
	     */
	    accountRepresentativeRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_representative`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountRepresentativeRequestToJSON(requestParameters.accountRepresentativeRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountRepresentativeResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns the representative for **account**
	     */
	    accountRepresentative(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountRepresentativeRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns the voting weight for **account**
	     */
	    accountWeightRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#account_weight`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountWeightRequestToJSON(requestParameters.accountWeightRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountWeightResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns the voting weight for **account**
	     */
	    accountWeight(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountWeightRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns how many RAW is owned and how many have not yet been received by **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network.
	     */
	    accountsBalancesRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#accounts_balances`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountsBalancesRequestToJSON(requestParameters.accountsBalancesRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountsBalancesResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns how many RAW is owned and how many have not yet been received by **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network.
	     */
	    accountsBalances(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountsBalancesRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns a list of pairs of account and block hash representing the head block for **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network.
	     */
	    accountsFrontiersRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#accounts_frontiers`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountsFrontiersRequestToJSON(requestParameters.accountsFrontiersRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountsFrontiersResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns a list of pairs of account and block hash representing the head block for **accounts list**  This call may return results that include unconfirmed blocks, so it should not be used in any processes or integrations requiring only details from blocks confirmed by the network.
	     */
	    accountsFrontiers(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountsFrontiersRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns a list of block hashes which have not yet been received by these accounts
	     */
	    accountsPendingRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#accounts_pending`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountsPendingRequestToJSON(requestParameters.accountsPendingRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountsPendingResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns a list of block hashes which have not yet been received by these accounts
	     */
	    accountsPending(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountsPendingRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns the difficulty values (16 hexadecimal digits string, 64 bit) for the minimum required on the network (network_minimum) as well as the current active difficulty seen on the network (network_current, 5 minute trended average of adjusted difficulty seen on confirmed transactions) which can be used to perform rework for better prioritization of transaction processing. A multiplier of the network_current from the base difficulty of network_minimum is also provided for comparison.
	     */
	    activeDifficultyRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#active_difficulty`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ActiveDifficultyRequestToJSON(requestParameters.activeDifficultyRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ActiveDifficultyResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns the difficulty values (16 hexadecimal digits string, 64 bit) for the minimum required on the network (network_minimum) as well as the current active difficulty seen on the network (network_current, 5 minute trended average of adjusted difficulty seen on confirmed transactions) which can be used to perform rework for better prioritization of transaction processing. A multiplier of the network_current from the base difficulty of network_minimum is also provided for comparison.
	     */
	    activeDifficulty(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.activeDifficultyRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns how many raw are in the public supply
	     */
	    availableSupplyRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#available_supply`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AvailableSupplyRequestToJSON(requestParameters.availableSupplyRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AvailableSupplyResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns how many raw are in the public supply
	     */
	    availableSupply(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.availableSupplyRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns the account containing block
	     */
	    blockAccountRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_account`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockAccountRequestToJSON(requestParameters.blockAccountRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockAccountResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns the account containing block
	     */
	    blockAccount(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockAccountRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Request confirmation for **block** from known online representative nodes. Check results with confirmation history.
	     */
	    blockConfirmRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_confirm`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockConfirmRequestToJSON(requestParameters.blockConfirmRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockConfirmResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Request confirmation for **block** from known online representative nodes. Check results with confirmation history.
	     */
	    blockConfirm(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockConfirmRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Reports the number of blocks in the ledger and unchecked synchronizing blocks.
	     */
	    blockCountRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_count`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockCountRequestToJSON(requestParameters.blockCountRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockCountResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Reports the number of blocks in the ledger and unchecked synchronizing blocks.
	     */
	    blockCount(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockCountRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Reports the number of blocks in the ledger by type (send, receive, open, change, state with version)
	     */
	    blockCountTypeRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_count_type`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockCountTypeRequestToJSON(requestParameters.blockCountTypeRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockCountTypeResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Reports the number of blocks in the ledger by type (send, receive, open, change, state with version)
	     */
	    blockCountType(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockCountTypeRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing.
	     */
	    blockCreateRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_create`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockCreateRequestToJSON(requestParameters.blockCreateRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockCreateResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Creates a json representations of new block based on input data & signed with **private key** or **account** in **wallet**. Use for offline signing.
	     */
	    blockCreate(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockCreateRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returning block hash for given block content. Using the optional **json_block** is recommended since v19.0.
	     */
	    blockHashRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_hash`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockHashRequestToJSON(requestParameters.blockHashRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockHashResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returning block hash for given block content. Using the optional **json_block** is recommended since v19.0.
	     */
	    blockHash(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockHashRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Retrieves a json representation of the block in `contents` along with:  * _since version 18.0_: `block_account`, transaction `amount`, block `balance`, block `height` in account chain, block local modification `timestamp` * _since version 19.0_: Whether block was `confirmed`, `subtype` (for state blocks) of `send`, `receive`,  `change` or `epoch`  Using the optional `json_block` is recommended since v19.0.
	     */
	    blockInfoRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#block_info`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlockInfoRequestToJSON(requestParameters.blockInfoRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlockInfoResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Retrieves a json representation of the block in `contents` along with:  * _since version 18.0_: `block_account`, transaction `amount`, block `balance`, block `height` in account chain, block local modification `timestamp` * _since version 19.0_: Whether block was `confirmed`, `subtype` (for state blocks) of `send`, `receive`,  `change` or `epoch`  Using the optional `json_block` is recommended since v19.0.
	     */
	    blockInfo(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blockInfoRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Retrieves a json representations of **blocks**.
	     */
	    blocksRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#blocks`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlocksRequestToJSON(requestParameters.blocksRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlocksResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Retrieves a json representations of **blocks**.
	     */
	    blocks(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blocksRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Retrieves a json representations of blocks in contents along with:  * _since version 18.0_: `block_account`, transaction `amount`, block `balance`, block `height` in account chain, block local modification  timestamp * _since version 19.0_: Whether block was `confirmed`, `subtype` (for state blocks) of `send`, `receive`, `change` or `epoch`
	     */
	    blocksInfoRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#blocks_info`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BlocksInfoRequestToJSON(requestParameters.blocksInfoRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BlocksInfoResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Retrieves a json representations of blocks in contents along with:  * _since version 18.0_: `block_account`, transaction `amount`, block `balance`, block `height` in account chain, block local modification  timestamp * _since version 19.0_: Whether block was `confirmed`, `subtype` (for state blocks) of `send`, `receive`, `change` or `epoch`
	     */
	    blocksInfo(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.blocksInfoRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Initialize bootstrap to specific **IP address** and **port**. Not compatible with launch flag [--disable_legacy_bootstrap](https://docs.nano.org/commands/command-line-interface/#-disable_legacy_bootstrap)
	     */
	    bootstrapRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#bootstrap`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BootstrapRequestToJSON(requestParameters.bootstrapRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BootstrapResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Initialize bootstrap to specific **IP address** and **port**. Not compatible with launch flag [--disable_legacy_bootstrap](https://docs.nano.org/commands/command-line-interface/#-disable_legacy_bootstrap)
	     */
	    bootstrap(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.bootstrapRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Initialize multi-connection bootstrap to random peers. Not compatible with launch flag [--disable_legacy_bootstrap](https://docs.nano.org/commands/command-line-interface/#-disable_legacy_bootstrap)
	     */
	    bootstrapAnyRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#bootstrap_any`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BootstrapAnyRequestToJSON(requestParameters.bootstrapAnyRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BootstrapAnyResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Initialize multi-connection bootstrap to random peers. Not compatible with launch flag [--disable_legacy_bootstrap](https://docs.nano.org/commands/command-line-interface/#-disable_legacy_bootstrap)
	     */
	    bootstrapAny(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.bootstrapAnyRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * _version 17.0+_  Initialize lazy bootstrap with given block hash. Not compatible with launch flag [--disable_lazy_bootstrap](https://docs.nano.org/commands/command-line-interface/#-disable_lazy_bootstrap)
	     */
	    bootstrapLazyRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#bootstrap_lazy`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.BootstrapLazyRequestToJSON(requestParameters.bootstrapLazyRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.BootstrapLazyResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * _version 17.0+_  Initialize lazy bootstrap with given block hash. Not compatible with launch flag [--disable_lazy_bootstrap](https://docs.nano.org/commands/command-line-interface/#-disable_lazy_bootstrap)
	     */
	    bootstrapLazy(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.bootstrapLazyRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns a consecutive list of block hashes in the account chain starting at **block** back to **count** (direction from frontier back to open block, from newer blocks to older). Will list all blocks back to the open block of this chain when count is set to \"-1\". The requested block hash is included in the answer.
	     */
	    chainRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#chain`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ChainRequestToJSON(requestParameters.chainRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ChainResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns a consecutive list of block hashes in the account chain starting at **block** back to **count** (direction from frontier back to open block, from newer blocks to older). Will list all blocks back to the open block of this chain when count is set to \"-1\". The requested block hash is included in the answer.
	     */
	    chain(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.chainRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * _version 16.0+_  Returns list of active elections roots (excluding stopped & aborted elections). Find info about specific root with confirmation_info  The roots provided are two parts and differ between the first account block and subsequent blocks:  * First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key * Other blocks: previous hash + previous hash
	     */
	    confirmationActiveRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#confirmation_active`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ConfirmationActiveRequestToJSON(requestParameters.confirmationActiveRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ConfirmationActiveResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * _version 16.0+_  Returns list of active elections roots (excluding stopped & aborted elections). Find info about specific root with confirmation_info  The roots provided are two parts and differ between the first account block and subsequent blocks:  * First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key * Other blocks: previous hash + previous hash
	     */
	    confirmationActive(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.confirmationActiveRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * _version 12.0+_ _duration, time, confirmation_stats: version 17.0+_  Returns hash, tally weight, election duration (in milliseconds), election confirmation timestamp for recent elections winners. Also returns stats: count of elections in history (limited to 2048) & average duration time  With version 19.0+ `confirmation_history_size` can be managed in [config.json](https://docs.nano.org/running-a-node/configuration/#example-file) to adjust the number of elections to be kept in history and returned by this call. Due to timings inside the node, the default 2048 limit will return all confirmations up to traffic levels of  approximately 56 confirmations/sec. To properly track levels above this, increase this value or use the confirmation subscription through the [websocket](https://docs.nano.org/integration-guides/advanced/#websocket-support) instead.
	     */
	    confirmationHistoryRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#confirmation_history`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ConfirmationHistoryRequestToJSON(requestParameters.confirmationHistoryRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ConfirmationHistoryResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * _version 12.0+_ _duration, time, confirmation_stats: version 17.0+_  Returns hash, tally weight, election duration (in milliseconds), election confirmation timestamp for recent elections winners. Also returns stats: count of elections in history (limited to 2048) & average duration time  With version 19.0+ `confirmation_history_size` can be managed in [config.json](https://docs.nano.org/running-a-node/configuration/#example-file) to adjust the number of elections to be kept in history and returned by this call. Due to timings inside the node, the default 2048 limit will return all confirmations up to traffic levels of  approximately 56 confirmations/sec. To properly track levels above this, increase this value or use the confirmation subscription through the [websocket](https://docs.nano.org/integration-guides/advanced/#websocket-support) instead.
	     */
	    confirmationHistory(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.confirmationHistoryRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * _version 16.0+_  Returns info about active election by *root*. Including announcements count, last winner (initially local ledger block), total tally of voted representatives, concurrent blocks with tally & block contents for each. Using the optional `json_block` is recommended since v19.0.  The roots provided are two parts and differ between the first account block and subsequent blocks:  * First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key * Other blocks: previous hash + previous hash
	     */
	    confirmationInfoRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#confirmation_info`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ConfirmationInfoRequestToJSON(requestParameters.confirmationInfoRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ConfirmationInfoResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * _version 16.0+_  Returns info about active election by *root*. Including announcements count, last winner (initially local ledger block), total tally of voted representatives, concurrent blocks with tally & block contents for each. Using the optional `json_block` is recommended since v19.0.  The roots provided are two parts and differ between the first account block and subsequent blocks:  * First account block (open): 0000000000000000000000000000000000000000000000000000000000000000 + account public key * Other blocks: previous hash + previous hash
	     */
	    confirmationInfo(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.confirmationInfoRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Generates an **adhoc random** keypair
	     */
	    keyCreateRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#key_create`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.KeyCreateRequestToJSON(requestParameters.keyCreateRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.KeyCreateResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Generates an **adhoc random** keypair
	     */
	    keyCreate(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.keyCreateRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Derive public key and account number from **private key**
	     */
	    keyExpandRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#key_expand`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.KeyExpandRequestToJSON(requestParameters.keyExpandRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.KeyExpandResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Derive public key and account number from **private key**
	     */
	    keyExpand(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.keyExpandRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Returns a list of block hashes which have not yet been received by this account.  **Optional `include_only_confirmed` recommended**:  By default this will return blocks not in active elections but unconfirmed (e.g., block was received but node was restarted, election was dropped, new ledger with reset confirmation height).  **To avoid potential issues related to these situations setting the include_only_confirmed = true is recommended for most use cases.**
	     */
	    pendingRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#pending`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.PendingRequestToJSON(requestParameters.pendingRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.PendingResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Returns a list of block hashes which have not yet been received by this account.  **Optional `include_only_confirmed` recommended**:  By default this will return blocks not in active elections but unconfirmed (e.g., block was received but node was restarted, election was dropped, new ledger with reset confirmation height).  **To avoid potential issues related to these situations setting the include_only_confirmed = true is recommended for most use cases.**
	     */
	    pending(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.pendingRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Publish block to the network
	     */
	    processRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#process`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ProcessRequestToJSON(requestParameters.processRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ProcessResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Publish block to the network
	     */
	    process(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.processRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key
	     */
	    workGenerateRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#work_generate`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.WorkGenerateRequestToJSON(requestParameters.workGenerateRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.WorkGenerateResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Generates work for block. hash is the frontier of the account or in the case of an open block, the public key representation of the account which can be found with account_key
	     */
	    workGenerate(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.workGenerateRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	}
	exports.NodeRPCsApi = NodeRPCsApi;
	});

	/*@__PURE__*/getDefaultExportFromCjs(NodeRPCsApi_1);

	var WalletApi_1 = createCommonjsModule(function (module, exports) {
	/* tslint:disable */
	/* eslint-disable */
	/**
	 * nano-rpc-api
	 * API specification for the [Nano Node RPC API](https://docs.nano.org/commands/rpc-protocol)
	 *
	 * The version of the OpenAPI document: 19.0.0-alpha
	 *
	 *
	 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
	 * https://openapi-generator.tech
	 * Do not edit the class manually.
	 */
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	/**
	 *
	 */
	class WalletApi extends runtime$1.BaseAPI {
	    /**
	     * Creates new accounts, insert next deterministic keys in wallet up to count
	     */
	    accountsCreateRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#accounts_create`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.AccountsCreateRequestToJSON(requestParameters.accountsCreateRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.AccountsCreateResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Creates new accounts, insert next deterministic keys in wallet up to count
	     */
	    accountsCreate(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.accountsCreateRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Receive pending block for account in wallet
	     */
	    receiveRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#receive`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.ReceiveRequestToJSON(requestParameters.receiveRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.ReceiveResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Receive pending block for account in wallet
	     */
	    receive(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.receiveRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	    /**
	     * Creates a new random wallet id
	     */
	    walletCreateRaw(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const queryParameters = {};
	            const headerParameters = {};
	            headerParameters['Content-Type'] = 'application/json';
	            const response = yield this.request({
	                path: `/#wallet_create`,
	                method: 'POST',
	                headers: headerParameters,
	                query: queryParameters,
	                body: models.WalletCreateRequestToJSON(requestParameters.walletCreateRequest),
	            });
	            return new runtime$1.JSONApiResponse(response, (jsonValue) => models.WalletCreateResponseFromJSON(jsonValue));
	        });
	    }
	    /**
	     * Creates a new random wallet id
	     */
	    walletCreate(requestParameters) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const response = yield this.walletCreateRaw(requestParameters);
	            return yield response.value();
	        });
	    }
	}
	exports.WalletApi = WalletApi;
	});

	var apis = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(DebugApi_1);
	__export(NodeRPCsApi_1);
	__export(WalletApi_1);
	});

	var dist$1 = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(runtime$1);
	__export(apis);
	__export(models);
	});

	var nanoApi = new dist$1.NodeRPCsApi(new dist$1.Configuration({
	  basePath: 'https://kaiak.cc/node'
	}));
	function process(_x, _x2) {
	  return _process.apply(this, arguments);
	}

	function _process() {
	  _process = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(block, subtype) {
	    var response;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return nanoApi.process({
	              processRequest: {
	                action: dist$1.ProcessRequestActionEnum.Process,
	                block: block,
	                jsonBlock: dist$1.ModelBoolean.True,
	                subtype: subtype
	              }
	            });

	          case 2:
	            response = _context.sent;

	            if (!response.hash) {
	              _context.next = 7;
	              break;
	            }

	            return _context.abrupt("return", response);

	          case 7:
	            throw Error('unable to process');

	          case 8:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _process.apply(this, arguments);
	}

	function generateWork(_x3, _x4) {
	  return _generateWork.apply(this, arguments);
	}

	function _generateWork() {
	  _generateWork = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(frontier, work) {
	    var response;
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.next = 2;
	            return nanoApi.workGenerate({
	              workGenerateRequest: {
	                action: dist$1.WorkGenerateRequestActionEnum.WorkGenerate,
	                hash: frontier,
	                difficulty: work
	              }
	            });

	          case 2:
	            response = _context2.sent;
	            return _context2.abrupt("return", response.work);

	          case 4:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _generateWork.apply(this, arguments);
	}

	function getHistory(_x5) {
	  return _getHistory.apply(this, arguments);
	}

	function _getHistory() {
	  _getHistory = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(address) {
	    var history;
	    return regenerator.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.prev = 0;
	            _context3.next = 3;
	            return nanoApi.accountHistory({
	              accountHistoryRequest: {
	                action: dist$1.AccountHistoryRequestActionEnum.AccountHistory,
	                account: address,
	                count: '10'
	              }
	            });

	          case 3:
	            history = _context3.sent;
	            return _context3.abrupt("return", history.history.map(function (block) {
	              return {
	                account: block.account,
	                amount: {
	                  raw: block.amount.toString()
	                },
	                type: block.type,
	                localTimestamp: block.localTimestamp
	              };
	            }));

	          case 7:
	            _context3.prev = 7;
	            _context3.t0 = _context3["catch"](0);
	            return _context3.abrupt("return", []);

	          case 10:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3, null, [[0, 7]]);
	  }));
	  return _getHistory.apply(this, arguments);
	}

	function getPending(_x6) {
	  return _getPending.apply(this, arguments);
	}

	function _getPending() {
	  _getPending = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(address) {
	    var response, blocks, _blocks$, blockHash, amount;

	    return regenerator.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            _context4.next = 2;
	            return nanoApi.pending({
	              pendingRequest: {
	                action: dist$1.PendingRequestActionEnum.Pending,
	                account: address,
	                includeOnlyConfirmed: dist$1.ModelBoolean.True,
	                sorting: dist$1.ModelBoolean.True,
	                source: dist$1.ModelBoolean.True
	              }
	            });

	          case 2:
	            response = _context4.sent;
	            blocks = Object.entries(response.blocks);

	            if (!(blocks.length > 0)) {
	              _context4.next = 9;
	              break;
	            }

	            _blocks$ = slicedToArray(blocks[0], 2), blockHash = _blocks$[0], amount = _blocks$[1].amount;
	            return _context4.abrupt("return", {
	              hash: blockHash,
	              amount: {
	                raw: amount
	              }
	            });

	          case 9:
	            return _context4.abrupt("return", undefined);

	          case 10:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4);
	  }));
	  return _getPending.apply(this, arguments);
	}

	function accountInfo(_x7) {
	  return _accountInfo.apply(this, arguments);
	}

	function _accountInfo() {
	  _accountInfo = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(account) {
	    var response;
	    return regenerator.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return nanoApi.accountInfo({
	              accountInfoRequest: {
	                action: dist$1.AccountInfoRequestActionEnum.AccountInfo,
	                account: account,
	                representative: dist$1.ModelBoolean.True
	              }
	            });

	          case 2:
	            response = _context5.sent;

	            if (!(response.representative === undefined || response.balance === undefined || response.frontier === undefined)) {
	              _context5.next = 7;
	              break;
	            }

	            return _context5.abrupt("return", undefined);

	          case 7:
	            return _context5.abrupt("return", {
	              representative: response.representative,
	              balance: {
	                raw: response.balance.toString()
	              },
	              frontier: response.frontier
	            });

	          case 8:
	          case "end":
	            return _context5.stop();
	        }
	      }
	    }, _callee5);
	  }));
	  return _accountInfo.apply(this, arguments);
	}

	/** This file combines nanocurrency-web and nano-rpc-fetch */

	var DEFAULT_REP = 'nano_1kaiak5dbaaqpenb7nshqgq9tehgb5wy9y9ju9ehunexzmkzmzphk8yw8r7u';
	var OPEN_FRONTIER = '0000000000000000000000000000000000000000000000000000000000000000';
	var SEND_WORK = 'fffffff800000000';
	var RECEIVE_WORK = 'fffffe0000000000';
	/** Calls itself until transactions are pocketed */

	function loadAndResolveAccountData(_x) {
	  return _loadAndResolveAccountData.apply(this, arguments);
	}

	function _loadAndResolveAccountData() {
	  _loadAndResolveAccountData = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(account) {
	    var resolvedCount,
	        info,
	        block,
	        _args = arguments;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            resolvedCount = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;
	            _context.prev = 1;
	            _context.next = 4;
	            return accountInfo(account.address);

	          case 4:
	            info = _context.sent;
	            // Set rep from account info, with fallback to cached and default
	            account.representative = (info === null || info === void 0 ? void 0 : info.representative) || account.representative || DEFAULT_REP; // Use balance received

	            account.balance = (info === null || info === void 0 ? void 0 : info.balance) || {
	              raw: '0'
	            };
	            _context.next = 9;
	            return getPending(account.address);

	          case 9:
	            block = _context.sent;

	            if (!block) {
	              _context.next = 14;
	              break;
	            }

	            _context.next = 13;
	            return receiveBlock(account, info === null || info === void 0 ? void 0 : info.frontier, block);

	          case 13:
	            return _context.abrupt("return", loadAndResolveAccountData(account, resolvedCount + 1));

	          case 14:
	            return _context.abrupt("return", {
	              account: account,
	              resolvedCount: resolvedCount
	            });

	          case 17:
	            _context.prev = 17;
	            _context.t0 = _context["catch"](1);
	            return _context.abrupt("return", {
	              account: account,
	              resolvedCount: resolvedCount,
	              error: 'unable-to-fetch'
	            });

	          case 20:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, null, [[1, 17]]);
	  }));
	  return _loadAndResolveAccountData.apply(this, arguments);
	}

	function receiveBlock(_x2, _x3, _x4) {
	  return _receiveBlock.apply(this, arguments);
	}

	function _receiveBlock() {
	  _receiveBlock = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(account, frontier, pending) {
	    var work, receiveBlock;
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.next = 2;
	            return generateWork(frontier || account.publicKey, RECEIVE_WORK);

	          case 2:
	            work = _context2.sent;
	            receiveBlock = signReceiveBlock(account.address, account.privateKey, work, frontier || OPEN_FRONTIER, account.balance, account.representative, pending.hash, pending.amount);
	            _context2.next = 6;
	            return process(receiveBlock, dist$1.SubType.Receive);

	          case 6:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _receiveBlock.apply(this, arguments);
	}

	function sendNano(_x5, _x6, _x7) {
	  return _sendNano.apply(this, arguments);
	}

	function _sendNano() {
	  _sendNano = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(account, toAddress, amount) {
	    var info, workHash, signed;
	    return regenerator.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.prev = 0;
	            _context3.next = 3;
	            return accountInfo(account.address);

	          case 3:
	            info = _context3.sent;

	            if (!info) {
	              _context3.next = 14;
	              break;
	            }

	            _context3.next = 7;
	            return generateWork(info.frontier, SEND_WORK);

	          case 7:
	            workHash = _context3.sent;
	            signed = signSendBlock(account.privateKey, info.balance, account.address, toAddress, info.frontier, amount, workHash, info.representative);
	            _context3.next = 11;
	            return process(signed, dist$1.SubType.Send);

	          case 11:
	            return _context3.abrupt("return", updateWalletAccount(account));

	          case 14:
	            return _context3.abrupt("return", account);

	          case 15:
	            _context3.next = 20;
	            break;

	          case 17:
	            _context3.prev = 17;
	            _context3.t0 = _context3["catch"](0);
	            console.log(_context3.t0);

	          case 20:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3, null, [[0, 17]]);
	  }));
	  return _sendNano.apply(this, arguments);
	}

	function setRepresentative(_x8) {
	  return _setRepresentative.apply(this, arguments);
	}

	function _setRepresentative() {
	  _setRepresentative = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(account) {
	    var info, workHash, signed;
	    return regenerator.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            _context4.prev = 0;
	            _context4.next = 3;
	            return accountInfo(account.address);

	          case 3:
	            info = _context4.sent;

	            if (!info) {
	              _context4.next = 11;
	              break;
	            }

	            _context4.next = 7;
	            return generateWork(info.frontier, SEND_WORK);

	          case 7:
	            workHash = _context4.sent;
	            signed = signRepresentativeBlock(account.privateKey, account.balance, account.address, account.representative, info.frontier, workHash);
	            _context4.next = 11;
	            return process(signed, dist$1.SubType.Change);

	          case 11:
	            _context4.next = 17;
	            break;

	          case 13:
	            _context4.prev = 13;
	            _context4.t0 = _context4["catch"](0);
	            console.log(_context4.t0);
	            return _context4.abrupt("return", undefined);

	          case 17:
	          case "end":
	            return _context4.stop();
	        }
	      }
	    }, _callee4, null, [[0, 13]]);
	  }));
	  return _setRepresentative.apply(this, arguments);
	}

	function updateWalletAccount(_x9) {
	  return _updateWalletAccount.apply(this, arguments);
	}
	/** Updates account in account list */


	function _updateWalletAccount() {
	  _updateWalletAccount = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(account) {
	    var info;
	    return regenerator.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return accountInfo(account.address);

	          case 2:
	            info = _context5.sent;
	            return _context5.abrupt("return", Object.assign(Object.assign({}, account), {
	              balance: info.balance,
	              representative: info.representative
	            }));

	          case 4:
	          case "end":
	            return _context5.stop();
	        }
	      }
	    }, _callee5);
	  }));
	  return _updateWalletAccount.apply(this, arguments);
	}

	function updateAccountInWallet(updatedAccount, wallet) {
	  wallet.accounts = wallet.accounts.map(function (account) {
	    return account.address === updatedAccount.address ? updatedAccount : account;
	  });
	  return wallet;
	}

	function setWalletState(walletState) {
	  walletStore.set(walletState);
	}
	function updateWalletState(_x, _x2, _x3, _x4) {
	  return _updateWalletState.apply(this, arguments);
	}
	/** Handles updates of wallet */

	function _updateWalletState() {
	  _updateWalletState = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(nanoAccount, wallet, sendToAddress, mobileNumber) {
	    var _yield$loadAndResolve, updatedAccount, resolvedCount, error, resolvedTransactions;

	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return loadAndResolveAccountData(nanoAccount, 0);

	          case 2:
	            _yield$loadAndResolve = _context.sent;
	            updatedAccount = _yield$loadAndResolve.account;
	            resolvedCount = _yield$loadAndResolve.resolvedCount;
	            error = _yield$loadAndResolve.error;
	            _context.next = 8;
	            return getHistory(nanoAccount.address);

	          case 8:
	            resolvedTransactions = _context.sent;

	            if (resolvedCount > 0) {
	              pushToast({
	                languageId: 'got-new-transactions',
	                type: 'success'
	              });
	            } else if (error) {
	              pushToast({
	                languageId: error,
	                type: 'warn'
	              });
	            }

	            setWalletState({
	              wallet: updateAccountInWallet(updatedAccount, wallet),
	              account: updatedAccount,
	              transactions: resolvedTransactions,
	              sendToAddress: sendToAddress,
	              mobileNumber: mobileNumber
	            });

	          case 11:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _updateWalletState.apply(this, arguments);
	}

	var walletStore = writable({
	  wallet: undefined,
	  transactions: undefined,
	  mobileNumber: undefined,
	  mobileNumberToVerify: undefined
	});

	var loaderStore = writable(undefined);
	function load(_x) {
	  return _load.apply(this, arguments);
	}

	function _load() {
	  _load = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(loader) {
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            loaderStore.set(loader);
	            setTimeout( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	              return regenerator.wrap(function _callee$(_context) {
	                while (1) {
	                  switch (_context.prev = _context.next) {
	                    case 0:
	                      _context.next = 2;
	                      return loader.load().then(function () {
	                        return loaderStore.set(undefined);
	                      })["catch"](function () {
	                        var _a;

	                        (_a = loader.onError) === null || _a === void 0 ? void 0 : _a.call(loader);
	                        loaderStore.set(undefined);
	                      });

	                    case 2:
	                      return _context.abrupt("return", _context.sent);

	                    case 3:
	                    case "end":
	                      return _context.stop();
	                  }
	                }
	              }, _callee);
	            })), 50 // TODO: HACK to get loading screen to show
	            );

	          case 2:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _load.apply(this, arguments);
	}

	function _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$f(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$f() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var console_1 = globals.console;

	function create_default_slot$7(ctx) {
	  var numberinput;
	  var updating_value;
	  var current;

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[1].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "unlock-label",
	    placeholderLanguage: "unlock-label"
	  };

	  if (
	  /*inputPhrase*/
	  ctx[0] !== void 0) {
	    numberinput_props.value =
	    /*inputPhrase*/
	    ctx[0];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(numberinput.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(numberinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var numberinput_changes = {};

	      if (!updating_value && dirty &
	      /*inputPhrase*/
	      1) {
	        updating_value = true;
	        numberinput_changes.value =
	        /*inputPhrase*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(numberinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$7.name,
	    type: "slot",
	    source: "(61:0) <Content titleKey=\\\"unlock-wallet\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$e(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "unlock-wallet",
	      $$slots: {
	        "default": [create_default_slot$7]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, inputPhrase*/
	      33) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$e.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$e($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("UnlockWallet", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var inputPhrase;

	  var unlock = function unlock() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return load({
	                languageId: "unlocking-wallet",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                    var data, mobileNumber;
	                    return regenerator.wrap(function _callee$(_context) {
	                      while (1) {
	                        switch (_context.prev = _context.next) {
	                          case 0:
	                            _context.next = 2;
	                            return unlockWallet(inputPhrase);

	                          case 2:
	                            data = _context.sent;
	                            _context.next = 5;
	                            return getMobileNumber(inputPhrase);

	                          case 5:
	                            mobileNumber = _context.sent;
	                            console.log("Retrieved mobile number", mobileNumber);

	                            if (data) {
	                              pushState({
	                                menu: "accounts",
	                                accountAction: undefined,
	                                onboardState: undefined
	                              });
	                              setWalletState({
	                                wallet: data,
	                                account: undefined,
	                                mobileNumber: mobileNumber
	                              });
	                            } else {
	                              pushToast({
	                                languageId: "wrong-pin"
	                              });
	                            }

	                          case 8:
	                          case "end":
	                            return _context.stop();
	                        }
	                      }
	                    }, _callee);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));
	  };

	  var softwareKeys = function softwareKeys(disabledUnlock) {
	    return {
	      leftKey: {
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
	            return regenerator.wrap(function _callee3$(_context3) {
	              while (1) {
	                switch (_context3.prev = _context3.next) {
	                  case 0:
	                    return _context3.abrupt("return", pushOnboardState({
	                      view: undefined
	                    }));

	                  case 1:
	                  case "end":
	                    return _context3.stop();
	                }
	              }
	            }, _callee3);
	          }));
	        },
	        languageId: "create-new-wallet"
	      },
	      middleKey: {
	        disabled: disabledUnlock,
	        onClick: unlock,
	        languageId: "unlock-wallet"
	      },
	      rightKey: {
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
	            return regenerator.wrap(function _callee4$(_context4) {
	              while (1) {
	                switch (_context4.prev = _context4.next) {
	                  case 0:
	                    return _context4.abrupt("return", pushMenu("about"));

	                  case 1:
	                  case "end":
	                    return _context4.stop();
	                }
	              }
	            }, _callee4);
	          }));
	        },
	        languageId: "about"
	      }
	    };
	  };

	  onMount(function () {
	    return navigationReload(softwareKeys(true));
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn("<UnlockWallet> was created with unknown prop '".concat(key, "'"));
	  });

	  function numberinput_value_binding(value) {
	    inputPhrase = value;
	    $$invalidate(0, inputPhrase);
	  }

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Content: Content,
	      navigationReload: navigationReload,
	      pushMenu: pushMenu,
	      pushOnboardState: pushOnboardState,
	      pushState: pushState,
	      pushToast: pushToast,
	      getMobileNumber: getMobileNumber,
	      unlockWallet: unlockWallet,
	      onMount: onMount,
	      setWalletState: setWalletState,
	      load: load,
	      NumberInput: NumberInput,
	      setSoftwareKeys: setSoftwareKeys,
	      inputPhrase: inputPhrase,
	      unlock: unlock,
	      softwareKeys: softwareKeys
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("inputPhrase" in $$props) $$invalidate(0, inputPhrase = $$props.inputPhrase);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*inputPhrase*/
	    1) {
	       {
	        var valid = inputPhrase && inputPhrase.length >= 4;
	        setSoftwareKeys(softwareKeys(!valid));
	      }
	    }
	  };

	  return [inputPhrase, numberinput_value_binding];
	}

	var UnlockWallet = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(UnlockWallet, _SvelteComponentDev);

	  var _super = _createSuper$f(UnlockWallet);

	  function UnlockWallet(options) {
	    var _this;

	    classCallCheck(this, UnlockWallet);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$e, create_fragment$e, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "UnlockWallet",
	      options: options,
	      id: create_fragment$e.name
	    });
	    return _this;
	  }

	  return UnlockWallet;
	}(SvelteComponentDev);

	function _createSuper$g(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$g() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$a = "src/view/SoftwareKeys.svelte";

	function create_fragment$f(ctx) {
	  var div;
	  var h50;
	  var t0;
	  var h50_data_l__n_id_value;
	  var t1;
	  var h51;
	  var t2;
	  var h51_data_l__n_id_value;
	  var t3;
	  var h52;
	  var t4;
	  var h52_data_l__n_id_value;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      var _ctx$, _ctx$2, _ctx$3, _ctx$4, _ctx$5, _ctx$6;

	      div = element("div");
	      h50 = element("h5");
	      t0 = text("|");
	      t1 = space();
	      h51 = element("h5");
	      t2 = text("|");
	      t3 = space();
	      h52 = element("h5");
	      t4 = text("|");
	      attr_dev(h50, "class", "kui-software-key-left svelte-ezp83e");
	      attr_dev(h50, "data-l10n-id", h50_data_l__n_id_value =
	      /*leftKey*/
	      (_ctx$ = ctx[0]) === null || _ctx$ === void 0 ? void 0 : _ctx$.languageId);
	      toggle_class(h50, "hidden", !
	      /*leftKey*/
	      ctx[0]);
	      toggle_class(h50, "disabled",
	      /*leftKey*/
	      ((_ctx$2 = ctx[0]) === null || _ctx$2 === void 0 ? void 0 : _ctx$2.disabled) === true);
	      toggle_class(h50, "rtl",
	      /*rightToLeft*/
	      ctx[3]);
	      add_location(h50, file$a, 79, 4, 1832);
	      attr_dev(h51, "class", "kui-software-key-center svelte-ezp83e");
	      attr_dev(h51, "data-l10n-id", h51_data_l__n_id_value =
	      /*middleKey*/
	      (_ctx$3 = ctx[1]) === null || _ctx$3 === void 0 ? void 0 : _ctx$3.languageId);
	      toggle_class(h51, "hidden", !
	      /*middleKey*/
	      ctx[1]);
	      toggle_class(h51, "disabled",
	      /*middleKey*/
	      ((_ctx$4 = ctx[1]) === null || _ctx$4 === void 0 ? void 0 : _ctx$4.disabled) === true);
	      add_location(h51, file$a, 80, 4, 2037);
	      attr_dev(h52, "class", "kui-software-key-right svelte-ezp83e");
	      attr_dev(h52, "data-l10n-id", h52_data_l__n_id_value =
	      /*rightKey*/
	      (_ctx$5 = ctx[2]) === null || _ctx$5 === void 0 ? void 0 : _ctx$5.languageId);
	      toggle_class(h52, "hidden", !
	      /*rightKey*/
	      ctx[2]);
	      toggle_class(h52, "disabled",
	      /*rightKey*/
	      ((_ctx$6 = ctx[2]) === null || _ctx$6 === void 0 ? void 0 : _ctx$6.disabled) === true);
	      toggle_class(h52, "rtl",
	      /*rightToLeft*/
	      ctx[3]);
	      add_location(h52, file$a, 81, 4, 2228);
	      attr_dev(div, "class", "kui-software-key svelte-ezp83e");
	      add_location(div, file$a, 78, 0, 1797);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, h50);
	      append_dev(h50, t0);
	      append_dev(div, t1);
	      append_dev(div, h51);
	      append_dev(h51, t2);
	      append_dev(div, t3);
	      append_dev(div, h52);
	      append_dev(h52, t4);

	      if (!mounted) {
	        dispose = [listen_dev(h50, "click", function () {
	          if (is_function(
	          /*getOnClicker*/
	          ctx[4](
	          /*leftKey*/
	          ctx[0])))
	            /*getOnClicker*/
	            ctx[4](
	            /*leftKey*/
	            ctx[0]).apply(this, arguments);
	        }, false, false, false), listen_dev(h51, "click", function () {
	          if (is_function(
	          /*getOnClicker*/
	          ctx[4](
	          /*middleKey*/
	          ctx[1])))
	            /*getOnClicker*/
	            ctx[4](
	            /*middleKey*/
	            ctx[1]).apply(this, arguments);
	        }, false, false, false), listen_dev(h52, "click", function () {
	          if (is_function(
	          /*getOnClicker*/
	          ctx[4](
	          /*rightKey*/
	          ctx[2])))
	            /*getOnClicker*/
	            ctx[4](
	            /*rightKey*/
	            ctx[2]).apply(this, arguments);
	        }, false, false, false)];
	        mounted = true;
	      }
	    },
	    p: function update(new_ctx, _ref) {
	      var _ctx$7, _ctx$9, _ctx$11;

	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      ctx = new_ctx;

	      if (dirty &
	      /*leftKey*/
	      1 && h50_data_l__n_id_value !== (h50_data_l__n_id_value =
	      /*leftKey*/
	      (_ctx$7 = ctx[0]) === null || _ctx$7 === void 0 ? void 0 : _ctx$7.languageId)) {
	        attr_dev(h50, "data-l10n-id", h50_data_l__n_id_value);
	      }

	      if (dirty &
	      /*leftKey*/
	      1) {
	        toggle_class(h50, "hidden", !
	        /*leftKey*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*leftKey*/
	      1) {
	        var _ctx$8;

	        toggle_class(h50, "disabled",
	        /*leftKey*/
	        ((_ctx$8 = ctx[0]) === null || _ctx$8 === void 0 ? void 0 : _ctx$8.disabled) === true);
	      }

	      if (dirty &
	      /*rightToLeft*/
	      8) {
	        toggle_class(h50, "rtl",
	        /*rightToLeft*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*middleKey*/
	      2 && h51_data_l__n_id_value !== (h51_data_l__n_id_value =
	      /*middleKey*/
	      (_ctx$9 = ctx[1]) === null || _ctx$9 === void 0 ? void 0 : _ctx$9.languageId)) {
	        attr_dev(h51, "data-l10n-id", h51_data_l__n_id_value);
	      }

	      if (dirty &
	      /*middleKey*/
	      2) {
	        toggle_class(h51, "hidden", !
	        /*middleKey*/
	        ctx[1]);
	      }

	      if (dirty &
	      /*middleKey*/
	      2) {
	        var _ctx$10;

	        toggle_class(h51, "disabled",
	        /*middleKey*/
	        ((_ctx$10 = ctx[1]) === null || _ctx$10 === void 0 ? void 0 : _ctx$10.disabled) === true);
	      }

	      if (dirty &
	      /*rightKey*/
	      4 && h52_data_l__n_id_value !== (h52_data_l__n_id_value =
	      /*rightKey*/
	      (_ctx$11 = ctx[2]) === null || _ctx$11 === void 0 ? void 0 : _ctx$11.languageId)) {
	        attr_dev(h52, "data-l10n-id", h52_data_l__n_id_value);
	      }

	      if (dirty &
	      /*rightKey*/
	      4) {
	        toggle_class(h52, "hidden", !
	        /*rightKey*/
	        ctx[2]);
	      }

	      if (dirty &
	      /*rightKey*/
	      4) {
	        var _ctx$12;

	        toggle_class(h52, "disabled",
	        /*rightKey*/
	        ((_ctx$12 = ctx[2]) === null || _ctx$12 === void 0 ? void 0 : _ctx$12.disabled) === true);
	      }

	      if (dirty &
	      /*rightToLeft*/
	      8) {
	        toggle_class(h52, "rtl",
	        /*rightToLeft*/
	        ctx[3]);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$f.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$f($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SoftwareKeys", slots, []);
	  var leftKey = undefined;
	  var middleKey = undefined;
	  var rightKey = undefined;
	  var keys = [];
	  var rightToLeft = false;
	  var unsubscribe = softwareKeysStore.subscribe(function (value) {
	    $$invalidate(0, leftKey = value.leftKey);
	    $$invalidate(1, middleKey = value.middleKey);
	    $$invalidate(2, rightKey = value.rightKey);
	  });
	  var languageUnsubscribe = languageStore.subscribe(function () {
	    $$invalidate(3, rightToLeft = document.dir === "rtl");
	  });

	  var getOnClicker = function getOnClicker(key) {
	    if (!key || key.disabled === true) {
	      return undefined;
	    } else {
	      return key === null || key === void 0 ? void 0 : key.onClick;
	    }
	  };

	  onDestroy(function () {
	    unsubscribe();
	    languageUnsubscribe();
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SoftwareKeys> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      softwareKeysStore: softwareKeysStore,
	      onDestroy: onDestroy,
	      onMount: onMount,
	      languageStore: languageStore,
	      leftKey: leftKey,
	      middleKey: middleKey,
	      rightKey: rightKey,
	      keys: keys,
	      rightToLeft: rightToLeft,
	      unsubscribe: unsubscribe,
	      languageUnsubscribe: languageUnsubscribe,
	      getOnClicker: getOnClicker
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("leftKey" in $$props) $$invalidate(0, leftKey = $$props.leftKey);
	    if ("middleKey" in $$props) $$invalidate(1, middleKey = $$props.middleKey);
	    if ("rightKey" in $$props) $$invalidate(2, rightKey = $$props.rightKey);
	    if ("keys" in $$props) keys = $$props.keys;
	    if ("rightToLeft" in $$props) $$invalidate(3, rightToLeft = $$props.rightToLeft);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [leftKey, middleKey, rightKey, rightToLeft, getOnClicker];
	}

	var SoftwareKeys = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(SoftwareKeys, _SvelteComponentDev);

	  var _super = _createSuper$g(SoftwareKeys);

	  function SoftwareKeys(options) {
	    var _this;

	    classCallCheck(this, SoftwareKeys);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$f, create_fragment$f, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "SoftwareKeys",
	      options: options,
	      id: create_fragment$f.name
	    });
	    return _this;
	  }

	  return SoftwareKeys;
	}(SvelteComponentDev);

	function cubicOut(t) {
	  var f = t - 1.0;
	  return f * f * f + 1.0;
	}

	function slide(node, _ref4) {
	  var _ref4$delay = _ref4.delay,
	      delay = _ref4$delay === void 0 ? 0 : _ref4$delay,
	      _ref4$duration = _ref4.duration,
	      duration = _ref4$duration === void 0 ? 400 : _ref4$duration,
	      _ref4$easing = _ref4.easing,
	      easing = _ref4$easing === void 0 ? cubicOut : _ref4$easing;
	  var style = getComputedStyle(node);
	  var opacity = +style.opacity;
	  var height = parseFloat(style.height);
	  var padding_top = parseFloat(style.paddingTop);
	  var padding_bottom = parseFloat(style.paddingBottom);
	  var margin_top = parseFloat(style.marginTop);
	  var margin_bottom = parseFloat(style.marginBottom);
	  var border_top_width = parseFloat(style.borderTopWidth);
	  var border_bottom_width = parseFloat(style.borderBottomWidth);
	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t) {
	      return 'overflow: hidden;' + "opacity: ".concat(Math.min(t * 20, 1) * opacity, ";") + "height: ".concat(t * height, "px;") + "padding-top: ".concat(t * padding_top, "px;") + "padding-bottom: ".concat(t * padding_bottom, "px;") + "margin-top: ".concat(t * margin_top, "px;") + "margin-bottom: ".concat(t * margin_bottom, "px;") + "border-top-width: ".concat(t * border_top_width, "px;") + "border-bottom-width: ".concat(t * border_bottom_width, "px;");
	    }
	  };
	}

	function _createSuper$h(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$h(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$h() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$b = "src/components/Toast.svelte"; // (57:0) {#if visible}

	function create_if_block$5(ctx) {
	  var div;
	  var p;
	  var div_outro;
	  var current;
	  var block = {
	    c: function create() {
	      div = element("div");
	      p = element("p");
	      attr_dev(p, "class", "kui-pri svelte-1bzbr6i");
	      attr_dev(p, "data-l10n-id",
	      /*languageId*/
	      ctx[0]);
	      add_location(p, file$b, 58, 8, 1437);
	      attr_dev(div, "class", "kui-toast svelte-1bzbr6i");
	      toggle_class(div, "success",
	      /*toastType*/
	      ctx[1] === "success");
	      toggle_class(div, "warn",
	      /*toastType*/
	      ctx[1] === "warn");
	      add_location(div, file$b, 57, 4, 1321);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, p);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (!current || dirty &
	      /*languageId*/
	      1) {
	        attr_dev(p, "data-l10n-id",
	        /*languageId*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*toastType*/
	      2) {
	        toggle_class(div, "success",
	        /*toastType*/
	        ctx[1] === "success");
	      }

	      if (dirty &
	      /*toastType*/
	      2) {
	        toggle_class(div, "warn",
	        /*toastType*/
	        ctx[1] === "warn");
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      if (div_outro) div_outro.end(1);
	      current = true;
	    },
	    o: function outro(local) {
	      div_outro = create_out_transition(div, slide, {});
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (detaching && div_outro) div_outro.end();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$5.name,
	    type: "if",
	    source: "(57:0) {#if visible}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$g(ctx) {
	  var if_block_anchor;
	  var current;
	  var if_block =
	  /*visible*/
	  ctx[2] && create_if_block$5(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*visible*/
	      ctx[2]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*visible*/
	          4) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$5(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$g.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$g($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Toast", slots, []);
	  var languageId;
	  var toastType;
	  var visible = false;
	  toastStore.subscribe(function (value) {
	    if (!!value.languageId) {
	      $$invalidate(2, visible = true);
	      $$invalidate(0, languageId = value.languageId);
	      $$invalidate(1, toastType = value.type || "info");
	      var timeout = languageId.length * 300;
	      setTimeout(function () {
	        $$invalidate(2, visible = false);
	      }, timeout);
	    }
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Toast> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      toastStore: toastStore,
	      slide: slide,
	      languageId: languageId,
	      toastType: toastType,
	      visible: visible
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("toastType" in $$props) $$invalidate(1, toastType = $$props.toastType);
	    if ("visible" in $$props) $$invalidate(2, visible = $$props.visible);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId, toastType, visible];
	}

	var Toast = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Toast, _SvelteComponentDev);

	  var _super = _createSuper$h(Toast);

	  function Toast(options) {
	    var _this;

	    classCallCheck(this, Toast);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$g, create_fragment$g, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Toast",
	      options: options,
	      id: create_fragment$g.name
	    });
	    return _this;
	  }

	  return Toast;
	}(SvelteComponentDev);

	function _createSuper$i(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$i(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$i() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$h(ctx) {
	  var seperator0;
	  var t0;
	  var text0;
	  var t1;
	  var seperator1;
	  var t2;
	  var text1;
	  var current;
	  seperator0 = new Seperator({
	    props: {
	      languageId: "onboard-seed-title"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      languageId: "onboard-disclaimer-text"
	    },
	    $$inline: true
	  });
	  seperator1 = new Seperator({
	    props: {
	      languageId: "onboard-important-title"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "onboard-important-description"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator0.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(seperator1.$$.fragment);
	      t2 = space();
	      create_component(text1.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(seperator1, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(text1, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator0.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(seperator1.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator0.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(seperator1.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(seperator1, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(text1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$h.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$h($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Disclaimer", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  afterUpdate(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "onboard-disclaimer-ok",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	            return regenerator.wrap(function _callee2$(_context2) {
	              while (1) {
	                switch (_context2.prev = _context2.next) {
	                  case 0:
	                    _context2.next = 2;
	                    return load({
	                      languageId: "creating-wallet",
	                      load: function load() {
	                        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                          var walletResult;
	                          return regenerator.wrap(function _callee$(_context) {
	                            while (1) {
	                              switch (_context.prev = _context.next) {
	                                case 0:
	                                  _context.next = 2;
	                                  return generateWallet();

	                                case 2:
	                                  walletResult = _context.sent;
	                                  pushOnboardState({
	                                    view: "seed",
	                                    walletResult: walletResult
	                                  });

	                                case 4:
	                                case "end":
	                                  return _context.stop();
	                              }
	                            }
	                          }, _callee);
	                        }));
	                      }
	                    });

	                  case 2:
	                  case "end":
	                    return _context2.stop();
	                }
	              }
	            }, _callee2);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Disclaimer> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Text: Text,
	      afterUpdate: afterUpdate,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      Seperator: Seperator,
	      generateWallet: generateWallet,
	      load: load
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [];
	}

	var Disclaimer = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Disclaimer, _SvelteComponentDev);

	  var _super = _createSuper$i(Disclaimer);

	  function Disclaimer(options) {
	    var _this;

	    classCallCheck(this, Disclaimer);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$h, create_fragment$h, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Disclaimer",
	      options: options,
	      id: create_fragment$h.name
	    });
	    return _this;
	  }

	  return Disclaimer;
	}(SvelteComponentDev);

	function _createSuper$j(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$j(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$j() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$c = "src/components/input/Checkbox.svelte"; // (11:0) <LabelInput languageId={languageId} row={true}>

	function create_default_slot$8(ctx) {
	  var input;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      input = element("input");
	      attr_dev(input, "type", "checkbox");
	      attr_dev(input, "class", "navigation svelte-k6q2kv");
	      attr_dev(input, "id",
	      /*languageId*/
	      ctx[1]);
	      add_location(input, file$c, 11, 4, 236);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, input, anchor);
	      input.checked =
	      /*checked*/
	      ctx[0];

	      if (!mounted) {
	        dispose = [listen_dev(input, "change",
	        /*change_handler*/
	        ctx[2], false, false, false), listen_dev(input, "focus",
	        /*focus_handler*/
	        ctx[3], false, false, false), listen_dev(input, "change",
	        /*input_change_handler*/
	        ctx[4])];
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*languageId*/
	      2) {
	        attr_dev(input, "id",
	        /*languageId*/
	        ctx[1]);
	      }

	      if (dirty &
	      /*checked*/
	      1) {
	        input.checked =
	        /*checked*/
	        ctx[0];
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(input);
	      mounted = false;
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$8.name,
	    type: "slot",
	    source: "(11:0) <LabelInput languageId={languageId} row={true}>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$i(ctx) {
	  var labelinput;
	  var current;
	  labelinput = new LabelInput({
	    props: {
	      languageId:
	      /*languageId*/
	      ctx[1],
	      row: true,
	      $$slots: {
	        "default": [create_default_slot$8]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(labelinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(labelinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var labelinput_changes = {};
	      if (dirty &
	      /*languageId*/
	      2) labelinput_changes.languageId =
	      /*languageId*/
	      ctx[1];

	      if (dirty &
	      /*$$scope, languageId, checked*/
	      35) {
	        labelinput_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      labelinput.$set(labelinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(labelinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(labelinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(labelinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$i.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$i($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Checkbox", slots, []);
	  var languageId = $$props.languageId;
	  var checked = $$props.checked;
	  var writable_props = ["languageId", "checked"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Checkbox> was created with unknown prop '".concat(key, "'"));
	  });

	  function change_handler(event) {
	    bubble($$self, event);
	  }

	  function focus_handler(event) {
	    bubble($$self, event);
	  }

	  function input_change_handler() {
	    checked = this.checked;
	    $$invalidate(0, checked);
	  }

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(1, languageId = $$props.languageId);
	    if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
	  };

	  $$self.$capture_state = function () {
	    return {
	      LabelInput: LabelInput,
	      languageId: languageId,
	      checked: checked
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(1, languageId = $$props.languageId);
	    if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [checked, languageId, change_handler, focus_handler, input_change_handler];
	}

	var Checkbox = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Checkbox, _SvelteComponentDev);

	  var _super = _createSuper$j(Checkbox);

	  function Checkbox(options) {
	    var _this;

	    classCallCheck(this, Checkbox);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$i, create_fragment$i, safe_not_equal, {
	      languageId: 1,
	      checked: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Checkbox",
	      options: options,
	      id: create_fragment$i.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[1] === undefined && !("languageId" in props)) {
	      console.warn("<Checkbox> was created without expected prop 'languageId'");
	    }

	    if (
	    /*checked*/
	    ctx[0] === undefined && !("checked" in props)) {
	      console.warn("<Checkbox> was created without expected prop 'checked'");
	    }

	    return _this;
	  }

	  createClass(Checkbox, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "checked",
	    get: function get() {
	      throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Checkbox;
	}(SvelteComponentDev);

	function _createSuper$k(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$k(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$k() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_default_slot$9(ctx) {
	  var t_value =
	  /*walletResult*/
	  ctx[0].seed + "";
	  var t;
	  var block = {
	    c: function create() {
	      t = text(t_value);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*walletResult*/
	      1 && t_value !== (t_value =
	      /*walletResult*/
	      ctx[0].seed + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$9.name,
	    type: "slot",
	    source: "(60:0) <Text breakAll={true} preventNavigation={true}>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$j(ctx) {
	  var seperator0;
	  var t0;
	  var text0;
	  var t1;
	  var text1;
	  var t2;
	  var t3;
	  var seperator1;
	  var t4;
	  var checkbox;
	  var updating_checked;
	  var current;
	  seperator0 = new Seperator({
	    props: {
	      languageId: "wallet-seed"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      breakAll: true,
	      preventNavigation: true,
	      $$slots: {
	        "default": [create_default_slot$9]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "seed-checksum"
	    },
	    $$inline: true
	  });
	  seperator1 = new Seperator({
	    props: {
	      languageId: "wallet-accept"
	    },
	    $$inline: true
	  });

	  function checkbox_checked_binding(value) {
	    /*checkbox_checked_binding*/
	    ctx[5].call(null, value);
	  }

	  var checkbox_props = {
	    languageId: "wallet-accept-text"
	  };

	  if (
	  /*checked*/
	  ctx[1] !== void 0) {
	    checkbox_props.checked =
	    /*checked*/
	    ctx[1];
	  }

	  checkbox = new Checkbox({
	    props: checkbox_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(checkbox, "checked", checkbox_checked_binding);
	  });
	  checkbox.$on("change",
	  /*accept*/
	  ctx[4]);
	  checkbox.$on("focus",
	  /*showAccept*/
	  ctx[3]);
	  var block = {
	    c: function create() {
	      create_component(seperator0.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(text1.$$.fragment);
	      t2 = text(
	      /*hashCode*/
	      ctx[2]);
	      t3 = space();
	      create_component(seperator1.$$.fragment);
	      t4 = space();
	      create_component(checkbox.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(text1, target, anchor);
	      insert_dev(target, t2, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(seperator1, target, anchor);
	      insert_dev(target, t4, anchor);
	      mount_component(checkbox, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var text0_changes = {};

	      if (dirty &
	      /*$$scope, walletResult*/
	      513) {
	        text0_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      text0.$set(text0_changes);
	      var checkbox_changes = {};

	      if (!updating_checked && dirty &
	      /*checked*/
	      2) {
	        updating_checked = true;
	        checkbox_changes.checked =
	        /*checked*/
	        ctx[1];
	        add_flush_callback(function () {
	          return updating_checked = false;
	        });
	      }

	      checkbox.$set(checkbox_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator0.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      transition_in(seperator1.$$.fragment, local);
	      transition_in(checkbox.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator0.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      transition_out(seperator1.$$.fragment, local);
	      transition_out(checkbox.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(text1, detaching);
	      if (detaching) detach_dev(t2);
	      if (detaching) detach_dev(t3);
	      destroy_component(seperator1, detaching);
	      if (detaching) detach_dev(t4);
	      destroy_component(checkbox, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$j.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$j($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CreateSeed", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletResult = $$props.walletResult;
	  var checked = false;
	  var hashCode = hashString(walletResult.seed);

	  var createKeyWithEnabledState = function createKeyWithEnabledState(disabled) {
	    return {
	      middleKey: {
	        disabled: disabled,
	        languageId: "continue",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    pushOnboardState({
	                      view: "account",
	                      walletResult: walletResult,
	                      alias: undefined
	                    });

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    };
	  };

	  var createAcceptKey = function createAcceptKey(disabled) {
	    return {
	      middleKey: {
	        disabled: disabled,
	        languageId: "accept",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	            return regenerator.wrap(function _callee2$(_context2) {
	              while (1) {
	                switch (_context2.prev = _context2.next) {
	                  case 0:
	                    $$invalidate(1, checked = !checked);
	                    setSoftwareKeys(createKeyWithEnabledState(!checked));

	                  case 2:
	                  case "end":
	                    return _context2.stop();
	                }
	              }
	            }, _callee2);
	          }));
	        }
	      }
	    };
	  };

	  var showAccept = function showAccept(event) {
	    if (!checked) {
	      setSoftwareKeys(createAcceptKey(false));
	    }
	  };

	  var accept = function accept(event) {
	    $$invalidate(1, checked = event.target.checked);
	    setSoftwareKeys(createKeyWithEnabledState(!checked));
	  };

	  afterUpdate(function () {
	    if (!checked) navigationReload(createAcceptKey(false));
	  });
	  var writable_props = ["walletResult"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CreateSeed> was created with unknown prop '".concat(key, "'"));
	  });

	  function checkbox_checked_binding(value) {
	    checked = value;
	    $$invalidate(1, checked);
	  }

	  $$self.$$set = function ($$props) {
	    if ("walletResult" in $$props) $$invalidate(0, walletResult = $$props.walletResult);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Text: Text,
	      afterUpdate: afterUpdate,
	      Seperator: Seperator,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      setSoftwareKeys: setSoftwareKeys,
	      Checkbox: Checkbox,
	      hashString: hashString,
	      walletResult: walletResult,
	      checked: checked,
	      hashCode: hashCode,
	      createKeyWithEnabledState: createKeyWithEnabledState,
	      createAcceptKey: createAcceptKey,
	      showAccept: showAccept,
	      accept: accept
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletResult" in $$props) $$invalidate(0, walletResult = $$props.walletResult);
	    if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
	    if ("hashCode" in $$props) $$invalidate(2, hashCode = $$props.hashCode);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [walletResult, checked, hashCode, showAccept, accept, checkbox_checked_binding];
	}

	var CreateSeed = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(CreateSeed, _SvelteComponentDev);

	  var _super = _createSuper$k(CreateSeed);

	  function CreateSeed(options) {
	    var _this;

	    classCallCheck(this, CreateSeed);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$j, create_fragment$j, safe_not_equal, {
	      walletResult: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "CreateSeed",
	      options: options,
	      id: create_fragment$j.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletResult*/
	    ctx[0] === undefined && !("walletResult" in props)) {
	      console.warn("<CreateSeed> was created without expected prop 'walletResult'");
	    }

	    return _this;
	  }

	  createClass(CreateSeed, [{
	    key: "walletResult",
	    get: function get() {
	      throw new Error("<CreateSeed>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CreateSeed>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return CreateSeed;
	}(SvelteComponentDev);

	function _createSuper$l(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$l(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$l() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$d = "src/components/input/TextInput.svelte"; // (15:0) <LabelInput languageId={languageId} text={text} >

	function create_default_slot$a(ctx) {
	  var input;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      input = element("input");
	      attr_dev(input, "id",
	      /*languageId*/
	      ctx[0]);
	      attr_dev(input, "type", "text");
	      attr_dev(input, "class", "kui-input kui-text navigation svelte-70wxe5");
	      attr_dev(input, "data-l10n-id",
	      /*placeholderLanguage*/
	      ctx[2]);
	      attr_dev(input, "lang", "en");
	      input.value =
	      /*value*/
	      ctx[3];
	      attr_dev(input, "autocomplete", "off");
	      add_location(input, file$d, 15, 4, 395);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, input, anchor);

	      if (!mounted) {
	        dispose = listen_dev(input, "input",
	        /*input_handler*/
	        ctx[4], false, false, false);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*languageId*/
	      1) {
	        attr_dev(input, "id",
	        /*languageId*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*placeholderLanguage*/
	      4) {
	        attr_dev(input, "data-l10n-id",
	        /*placeholderLanguage*/
	        ctx[2]);
	      }

	      if (dirty &
	      /*value*/
	      8 && input.value !==
	      /*value*/
	      ctx[3]) {
	        prop_dev(input, "value",
	        /*value*/
	        ctx[3]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(input);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$a.name,
	    type: "slot",
	    source: "(15:0) <LabelInput languageId={languageId} text={text} >",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$k(ctx) {
	  var labelinput;
	  var current;
	  labelinput = new LabelInput({
	    props: {
	      languageId:
	      /*languageId*/
	      ctx[0],
	      text:
	      /*text*/
	      ctx[1],
	      $$slots: {
	        "default": [create_default_slot$a]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(labelinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(labelinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var labelinput_changes = {};
	      if (dirty &
	      /*languageId*/
	      1) labelinput_changes.languageId =
	      /*languageId*/
	      ctx[0];
	      if (dirty &
	      /*text*/
	      2) labelinput_changes.text =
	      /*text*/
	      ctx[1];

	      if (dirty &
	      /*$$scope, languageId, placeholderLanguage, value*/
	      45) {
	        labelinput_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      labelinput.$set(labelinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(labelinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(labelinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(labelinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$k.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$k($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("TextInput", slots, []);
	  var languageId = $$props.languageId;
	  var text = $$props.text;
	  var placeholderLanguage = $$props.placeholderLanguage;
	  var _$$props$value = $$props.value,
	      value = _$$props$value === void 0 ? "" : _$$props$value;
	  var writable_props = ["languageId", "text", "placeholderLanguage", "value"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<TextInput> was created with unknown prop '".concat(key, "'"));
	  });

	  function input_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(1, text = $$props.text);
	    if ("placeholderLanguage" in $$props) $$invalidate(2, placeholderLanguage = $$props.placeholderLanguage);
	    if ("value" in $$props) $$invalidate(3, value = $$props.value);
	  };

	  $$self.$capture_state = function () {
	    return {
	      LabelInput: LabelInput,
	      languageId: languageId,
	      text: text,
	      placeholderLanguage: placeholderLanguage,
	      value: value
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(1, text = $$props.text);
	    if ("placeholderLanguage" in $$props) $$invalidate(2, placeholderLanguage = $$props.placeholderLanguage);
	    if ("value" in $$props) $$invalidate(3, value = $$props.value);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId, text, placeholderLanguage, value, input_handler];
	}

	var TextInput = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(TextInput, _SvelteComponentDev);

	  var _super = _createSuper$l(TextInput);

	  function TextInput(options) {
	    var _this;

	    classCallCheck(this, TextInput);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$k, create_fragment$k, safe_not_equal, {
	      languageId: 0,
	      text: 1,
	      placeholderLanguage: 2,
	      value: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "TextInput",
	      options: options,
	      id: create_fragment$k.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[0] === undefined && !("languageId" in props)) {
	      console.warn("<TextInput> was created without expected prop 'languageId'");
	    }

	    if (
	    /*text*/
	    ctx[1] === undefined && !("text" in props)) {
	      console.warn("<TextInput> was created without expected prop 'text'");
	    }

	    if (
	    /*placeholderLanguage*/
	    ctx[2] === undefined && !("placeholderLanguage" in props)) {
	      console.warn("<TextInput> was created without expected prop 'placeholderLanguage'");
	    }

	    return _this;
	  }

	  createClass(TextInput, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "text",
	    get: function get() {
	      throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "placeholderLanguage",
	    get: function get() {
	      throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return TextInput;
	}(SvelteComponentDev);

	function _createSuper$m(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$m(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$m() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$l(ctx) {
	  var seperator;
	  var t0;
	  var text_1;
	  var t1;
	  var textinput;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "onboard-set-alias"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      languageId: "onboard-set-alias-text"
	    },
	    $$inline: true
	  });
	  textinput = new TextInput({
	    props: {
	      languageId: "account-alias"
	    },
	    $$inline: true
	  });
	  textinput.$on("input",
	  /*changeAlias*/
	  ctx[0]);
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text_1.$$.fragment);
	      t1 = space();
	      create_component(textinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(textinput, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      transition_in(textinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      transition_out(textinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(textinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$l.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$l($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("AccountAlias", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletResult = $$props.walletResult;
	  var accountAlias;

	  var changeAlias = function changeAlias(event) {
	    accountAlias = event.target.value;

	    if (accountAlias && accountAlias.length >= 3) {
	      setSoftwareKeys(createAliasKey(false));
	    }
	  };

	  var setAlias = function setAlias() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              pushOnboardState({
	                view: "pin",
	                walletResult: walletResult,
	                alias: accountAlias
	              });

	            case 1:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));
	  };

	  var createAliasKey = function createAliasKey(disabled) {
	    return {
	      middleKey: {
	        disabled: disabled,
	        languageId: "onboard-set-alias-button",
	        onClick: setAlias
	      }
	    };
	  };

	  afterUpdate(function () {
	    return navigationReload(createAliasKey(true));
	  });
	  var writable_props = ["walletResult"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<AccountAlias> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("walletResult" in $$props) $$invalidate(1, walletResult = $$props.walletResult);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      Text: Text,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      pushToast: pushToast,
	      afterUpdate: afterUpdate,
	      TextInput: TextInput,
	      setSoftwareKeys: setSoftwareKeys,
	      walletResult: walletResult,
	      accountAlias: accountAlias,
	      changeAlias: changeAlias,
	      setAlias: setAlias,
	      createAliasKey: createAliasKey
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletResult" in $$props) $$invalidate(1, walletResult = $$props.walletResult);
	    if ("accountAlias" in $$props) accountAlias = $$props.accountAlias;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [changeAlias, walletResult];
	}

	var AccountAlias = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(AccountAlias, _SvelteComponentDev);

	  var _super = _createSuper$m(AccountAlias);

	  function AccountAlias(options) {
	    var _this;

	    classCallCheck(this, AccountAlias);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$l, create_fragment$l, safe_not_equal, {
	      walletResult: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "AccountAlias",
	      options: options,
	      id: create_fragment$l.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletResult*/
	    ctx[1] === undefined && !("walletResult" in props)) {
	      console.warn("<AccountAlias> was created without expected prop 'walletResult'");
	    }

	    return _this;
	  }

	  createClass(AccountAlias, [{
	    key: "walletResult",
	    get: function get() {
	      throw new Error("<AccountAlias>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<AccountAlias>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return AccountAlias;
	}(SvelteComponentDev);

	function _createSuper$n(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$n(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$n() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$m(ctx) {
	  var seperator;
	  var t0;
	  var text_1;
	  var t1;
	  var numberinput;
	  var updating_value;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "wallet-password"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      languageId: "onboard-set-wallet-pin-text"
	    },
	    $$inline: true
	  });

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[4].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "onboard-wallet-pin"
	  };

	  if (
	  /*inputPhrase*/
	  ctx[0] !== void 0) {
	    numberinput_props.value =
	    /*inputPhrase*/
	    ctx[0];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text_1.$$.fragment);
	      t1 = space();
	      create_component(numberinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(numberinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var numberinput_changes = {};

	      if (!updating_value && dirty &
	      /*inputPhrase*/
	      1) {
	        updating_value = true;
	        numberinput_changes.value =
	        /*inputPhrase*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(numberinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$m.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$m($$self, $$props, $$invalidate) {
	  var valid;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SetPIN", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletResult = $$props.walletResult;
	  var alias = $$props.alias;
	  var inputPhrase;

	  var createFinishKey = function createFinishKey(disabled) {
	    return {
	      middleKey: {
	        disabled: disabled,
	        languageId: "onboard-finish-button",
	        onClick: tryToStore
	      }
	    };
	  };

	  var tryToStore = function tryToStore() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return load({
	                languageId: "storing-wallet",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                    var storedWallet;
	                    return regenerator.wrap(function _callee$(_context) {
	                      while (1) {
	                        switch (_context.prev = _context.next) {
	                          case 0:
	                            _context.next = 2;
	                            return createWallet(walletResult, inputPhrase, alias);

	                          case 2:
	                            storedWallet = _context.sent;

	                            if (storedWallet) {
	                              reset();
	                              pushMenu("unlock");
	                            } else {
	                              pushToast({
	                                languageId: "onboard-store-wallet-failed"
	                              });
	                            }

	                          case 4:
	                          case "end":
	                            return _context.stop();
	                        }
	                      }
	                    }, _callee);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));
	  };

	  onMount(function () {
	    return navigationReload(createFinishKey(!valid));
	  });
	  var writable_props = ["walletResult", "alias"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SetPIN> was created with unknown prop '".concat(key, "'"));
	  });

	  function numberinput_value_binding(value) {
	    inputPhrase = value;
	    $$invalidate(0, inputPhrase);
	  }

	  $$self.$$set = function ($$props) {
	    if ("walletResult" in $$props) $$invalidate(1, walletResult = $$props.walletResult);
	    if ("alias" in $$props) $$invalidate(2, alias = $$props.alias);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      createWallet: createWallet,
	      navigationReload: navigationReload,
	      pushMenu: pushMenu,
	      pushToast: pushToast,
	      reset: reset,
	      afterUpdate: afterUpdate,
	      onMount: onMount,
	      load: load,
	      NumberInput: NumberInput,
	      Text: Text,
	      setSoftwareKeys: setSoftwareKeys,
	      walletResult: walletResult,
	      alias: alias,
	      inputPhrase: inputPhrase,
	      createFinishKey: createFinishKey,
	      tryToStore: tryToStore,
	      valid: valid
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletResult" in $$props) $$invalidate(1, walletResult = $$props.walletResult);
	    if ("alias" in $$props) $$invalidate(2, alias = $$props.alias);
	    if ("inputPhrase" in $$props) $$invalidate(0, inputPhrase = $$props.inputPhrase);
	    if ("valid" in $$props) $$invalidate(3, valid = $$props.valid);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*inputPhrase*/
	    1) {
	       $$invalidate(3, valid = inputPhrase && inputPhrase.length >= 4);
	    }

	    if ($$self.$$.dirty &
	    /*valid*/
	    8) {
	       {
	        setSoftwareKeys(createFinishKey(!valid));
	      }
	    }
	  };

	  return [inputPhrase, walletResult, alias, valid, numberinput_value_binding];
	}

	var SetPIN = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(SetPIN, _SvelteComponentDev);

	  var _super = _createSuper$n(SetPIN);

	  function SetPIN(options) {
	    var _this;

	    classCallCheck(this, SetPIN);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$m, create_fragment$m, safe_not_equal, {
	      walletResult: 1,
	      alias: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "SetPIN",
	      options: options,
	      id: create_fragment$m.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletResult*/
	    ctx[1] === undefined && !("walletResult" in props)) {
	      console.warn("<SetPIN> was created without expected prop 'walletResult'");
	    }

	    if (
	    /*alias*/
	    ctx[2] === undefined && !("alias" in props)) {
	      console.warn("<SetPIN> was created without expected prop 'alias'");
	    }

	    return _this;
	  }

	  createClass(SetPIN, [{
	    key: "walletResult",
	    get: function get() {
	      throw new Error("<SetPIN>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SetPIN>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "alias",
	    get: function get() {
	      throw new Error("<SetPIN>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SetPIN>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return SetPIN;
	}(SvelteComponentDev);

	function _createSuper$o(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$o(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$o() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$n(ctx) {
	  var seperator;
	  var t0;
	  var text0;
	  var t1;
	  var text1;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "import-seed-title"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      languageId: "import-disclaimer-text"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "import-disclaimer-text-2"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(text1.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(text1, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(text1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$n.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$n($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("DisclaimerImport", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  afterUpdate(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "onboard-disclaimer-ok",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    pushOnboardState({
	                      view: "keyboard-change"
	                    });

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<DisclaimerImport> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      afterUpdate: afterUpdate,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      Seperator: Seperator,
	      Text: Text
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [];
	}

	var DisclaimerImport = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(DisclaimerImport, _SvelteComponentDev);

	  var _super = _createSuper$o(DisclaimerImport);

	  function DisclaimerImport(options) {
	    var _this;

	    classCallCheck(this, DisclaimerImport);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$n, create_fragment$n, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "DisclaimerImport",
	      options: options,
	      id: create_fragment$n.name
	    });
	    return _this;
	  }

	  return DisclaimerImport;
	}(SvelteComponentDev);

	function _createSuper$p(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$p(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$p() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$e = "src/components/input/TextArea.svelte"; // (23:0) <LabelInput languageId={languageId} text={text}>

	function create_default_slot$b(ctx) {
	  var textarea;
	  var mounted;
	  var dispose;
	  var block = {
	    c: function create() {
	      textarea = element("textarea");
	      attr_dev(textarea, "id",
	      /*languageId*/
	      ctx[1]);
	      attr_dev(textarea, "class", "kui-input kui-text navigation svelte-1m423qv");
	      attr_dev(textarea, "data-l10n-id",
	      /*placeholderLanguage*/
	      ctx[3]);
	      attr_dev(textarea, "rows", "3");
	      attr_dev(textarea, "lang", "en");
	      add_location(textarea, file$e, 23, 4, 495);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, textarea, anchor);
	      set_input_value(textarea,
	      /*value*/
	      ctx[0]);

	      if (!mounted) {
	        dispose = listen_dev(textarea, "input",
	        /*textarea_input_handler*/
	        ctx[4]);
	        mounted = true;
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*languageId*/
	      2) {
	        attr_dev(textarea, "id",
	        /*languageId*/
	        ctx[1]);
	      }

	      if (dirty &
	      /*placeholderLanguage*/
	      8) {
	        attr_dev(textarea, "data-l10n-id",
	        /*placeholderLanguage*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*value*/
	      1) {
	        set_input_value(textarea,
	        /*value*/
	        ctx[0]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(textarea);
	      mounted = false;
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$b.name,
	    type: "slot",
	    source: "(23:0) <LabelInput languageId={languageId} text={text}>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$o(ctx) {
	  var labelinput;
	  var current;
	  labelinput = new LabelInput({
	    props: {
	      languageId:
	      /*languageId*/
	      ctx[1],
	      text:
	      /*text*/
	      ctx[2],
	      $$slots: {
	        "default": [create_default_slot$b]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(labelinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(labelinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var labelinput_changes = {};
	      if (dirty &
	      /*languageId*/
	      2) labelinput_changes.languageId =
	      /*languageId*/
	      ctx[1];
	      if (dirty &
	      /*text*/
	      4) labelinput_changes.text =
	      /*text*/
	      ctx[2];

	      if (dirty &
	      /*$$scope, languageId, placeholderLanguage, value*/
	      43) {
	        labelinput_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      labelinput.$set(labelinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(labelinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(labelinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(labelinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$o.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$o($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("TextArea", slots, []);
	  var languageId = $$props.languageId;
	  var text = $$props.text;
	  var placeholderLanguage = $$props.placeholderLanguage;
	  var _$$props$value = $$props.value,
	      value = _$$props$value === void 0 ? "" : _$$props$value;
	  var writable_props = ["languageId", "text", "placeholderLanguage", "value"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<TextArea> was created with unknown prop '".concat(key, "'"));
	  });

	  function textarea_input_handler() {
	    value = this.value;
	    $$invalidate(0, value);
	  }

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(1, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(2, text = $$props.text);
	    if ("placeholderLanguage" in $$props) $$invalidate(3, placeholderLanguage = $$props.placeholderLanguage);
	    if ("value" in $$props) $$invalidate(0, value = $$props.value);
	  };

	  $$self.$capture_state = function () {
	    return {
	      LabelInput: LabelInput,
	      languageId: languageId,
	      text: text,
	      placeholderLanguage: placeholderLanguage,
	      value: value
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(1, languageId = $$props.languageId);
	    if ("text" in $$props) $$invalidate(2, text = $$props.text);
	    if ("placeholderLanguage" in $$props) $$invalidate(3, placeholderLanguage = $$props.placeholderLanguage);
	    if ("value" in $$props) $$invalidate(0, value = $$props.value);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [value, languageId, text, placeholderLanguage, textarea_input_handler];
	}

	var TextArea = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(TextArea, _SvelteComponentDev);

	  var _super = _createSuper$p(TextArea);

	  function TextArea(options) {
	    var _this;

	    classCallCheck(this, TextArea);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$o, create_fragment$o, safe_not_equal, {
	      languageId: 1,
	      text: 2,
	      placeholderLanguage: 3,
	      value: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "TextArea",
	      options: options,
	      id: create_fragment$o.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[1] === undefined && !("languageId" in props)) {
	      console.warn("<TextArea> was created without expected prop 'languageId'");
	    }

	    if (
	    /*text*/
	    ctx[2] === undefined && !("text" in props)) {
	      console.warn("<TextArea> was created without expected prop 'text'");
	    }

	    if (
	    /*placeholderLanguage*/
	    ctx[3] === undefined && !("placeholderLanguage" in props)) {
	      console.warn("<TextArea> was created without expected prop 'placeholderLanguage'");
	    }

	    return _this;
	  }

	  createClass(TextArea, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "text",
	    get: function get() {
	      throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "placeholderLanguage",
	    get: function get() {
	      throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      throw new Error("<TextArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<TextArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return TextArea;
	}(SvelteComponentDev);

	function _createSuper$q(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$q(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$q() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_if_block$6(ctx) {
	  var text_1;
	  var t;
	  var current;
	  text_1 = new Text({
	    props: {
	      languageId: "seed-checksum"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(text_1.$$.fragment);
	      t = text(
	      /*seedChecksum*/
	      ctx[1]);
	    },
	    m: function mount(target, anchor) {
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (!current || dirty &
	      /*seedChecksum*/
	      2) set_data_dev(t,
	      /*seedChecksum*/
	      ctx[1]);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(text_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(text_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$6.name,
	    type: "if",
	    source: "(53:0) {#if seedChecksum}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$p(ctx) {
	  var seperator;
	  var t0;
	  var text_1;
	  var t1;
	  var textarea;
	  var updating_value;
	  var t2;
	  var if_block_anchor;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "onboard-keyboard-seed-title"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      languageId: "import-from-seed-text"
	    },
	    $$inline: true
	  });

	  function textarea_value_binding(value) {
	    /*textarea_value_binding*/
	    ctx[2].call(null, value);
	  }

	  var textarea_props = {
	    languageId: "import-from-seed"
	  };

	  if (
	  /*seedInputValue*/
	  ctx[0] !== void 0) {
	    textarea_props.value =
	    /*seedInputValue*/
	    ctx[0];
	  }

	  textarea = new TextArea({
	    props: textarea_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(textarea, "value", textarea_value_binding);
	  });
	  var if_block =
	  /*seedChecksum*/
	  ctx[1] && create_if_block$6(ctx);
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text_1.$$.fragment);
	      t1 = space();
	      create_component(textarea.$$.fragment);
	      t2 = space();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(textarea, target, anchor);
	      insert_dev(target, t2, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var textarea_changes = {};

	      if (!updating_value && dirty &
	      /*seedInputValue*/
	      1) {
	        updating_value = true;
	        textarea_changes.value =
	        /*seedInputValue*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      textarea.$set(textarea_changes);

	      if (
	      /*seedChecksum*/
	      ctx[1]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*seedChecksum*/
	          2) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$6(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      transition_in(textarea.$$.fragment, local);
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      transition_out(textarea.$$.fragment, local);
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(textarea, detaching);
	      if (detaching) detach_dev(t2);
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$p.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$p($$self, $$props, $$invalidate) {
	  var seedChecksum;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("InputSeed", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var seedInputValue = $$props.seedInputValue;

	  var isValidInput = function isValidInput() {
	    var seedLength = seedInputValue.length;
	    return seedLength === BIP39_SEED_LENGTH || seedLength === NANO_SEED_LENGTH;
	  };

	  onMount(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "import-wallet",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	            return regenerator.wrap(function _callee2$(_context2) {
	              while (1) {
	                switch (_context2.prev = _context2.next) {
	                  case 0:
	                    if (isValidInput()) {
	                      _context2.next = 3;
	                      break;
	                    }

	                    pushToast({
	                      languageId: "invalid-seed-length",
	                      type: "info"
	                    });
	                    return _context2.abrupt("return");

	                  case 3:
	                    _context2.next = 5;
	                    return load({
	                      languageId: "creating-wallet",
	                      load: function load() {
	                        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                          var walletResult;
	                          return regenerator.wrap(function _callee$(_context) {
	                            while (1) {
	                              switch (_context.prev = _context.next) {
	                                case 0:
	                                  _context.next = 2;
	                                  return importWalletFromSeed(seedInputValue);

	                                case 2:
	                                  walletResult = _context.sent;
	                                  pushToast({
	                                    languageId: "import-success",
	                                    type: "success"
	                                  });
	                                  pushOnboardState({
	                                    view: "account",
	                                    walletResult: walletResult,
	                                    alias: undefined
	                                  });

	                                case 5:
	                                case "end":
	                                  return _context.stop();
	                              }
	                            }
	                          }, _callee);
	                        }));
	                      },
	                      onError: function onError() {
	                        pushToast({
	                          languageId: "invalid-seed",
	                          type: "warn"
	                        });
	                        pushOnboardState({
	                          view: "input-import",
	                          attemptedSeedImport: seedInputValue
	                        });
	                      }
	                    });

	                  case 5:
	                  case "end":
	                    return _context2.stop();
	                }
	              }
	            }, _callee2);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = ["seedInputValue"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<InputSeed> was created with unknown prop '".concat(key, "'"));
	  });

	  function textarea_value_binding(value) {
	    seedInputValue = value;
	    $$invalidate(0, seedInputValue);
	  }

	  $$self.$$set = function ($$props) {
	    if ("seedInputValue" in $$props) $$invalidate(0, seedInputValue = $$props.seedInputValue);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      onMount: onMount,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      pushToast: pushToast,
	      load: load,
	      BIP39_SEED_LENGTH: BIP39_SEED_LENGTH,
	      importWalletFromSeed: importWalletFromSeed,
	      NANO_SEED_LENGTH: NANO_SEED_LENGTH,
	      Text: Text,
	      TextArea: TextArea,
	      Seperator: Seperator,
	      hashString: hashString,
	      seedInputValue: seedInputValue,
	      isValidInput: isValidInput,
	      seedChecksum: seedChecksum
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("seedInputValue" in $$props) $$invalidate(0, seedInputValue = $$props.seedInputValue);
	    if ("seedChecksum" in $$props) $$invalidate(1, seedChecksum = $$props.seedChecksum);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*seedInputValue*/
	    1) {
	       $$invalidate(1, seedChecksum = seedInputValue ? hashString(seedInputValue) : undefined);
	    }
	  };

	  return [seedInputValue, seedChecksum, textarea_value_binding];
	}

	var InputSeed = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(InputSeed, _SvelteComponentDev);

	  var _super = _createSuper$q(InputSeed);

	  function InputSeed(options) {
	    var _this;

	    classCallCheck(this, InputSeed);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$p, create_fragment$p, safe_not_equal, {
	      seedInputValue: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "InputSeed",
	      options: options,
	      id: create_fragment$p.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*seedInputValue*/
	    ctx[0] === undefined && !("seedInputValue" in props)) {
	      console.warn("<InputSeed> was created without expected prop 'seedInputValue'");
	    }

	    return _this;
	  }

	  createClass(InputSeed, [{
	    key: "seedInputValue",
	    get: function get() {
	      throw new Error("<InputSeed>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<InputSeed>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return InputSeed;
	}(SvelteComponentDev);

	function _createSuper$r(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$r(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$r() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$q(ctx) {
	  var seperator0;
	  var t0;
	  var text0;
	  var t1;
	  var seperator1;
	  var t2;
	  var text1;
	  var t3;
	  var seperator2;
	  var t4;
	  var text2;
	  var current;
	  seperator0 = new Seperator({
	    props: {
	      languageId: "onboard-keyboard-seed-title"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      languageId: "onboard-keyboard-seed-text"
	    },
	    $$inline: true
	  });
	  seperator1 = new Seperator({
	    props: {
	      languageId: "onboard-keyboard-add-title"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "onboard-keyboard-add-text"
	    },
	    $$inline: true
	  });
	  seperator2 = new Seperator({
	    props: {
	      languageId: "onboard-keyboard-change-title"
	    },
	    $$inline: true
	  });
	  text2 = new Text({
	    props: {
	      languageId: "onboard-keyboard-change-text"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator0.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(seperator1.$$.fragment);
	      t2 = space();
	      create_component(text1.$$.fragment);
	      t3 = space();
	      create_component(seperator2.$$.fragment);
	      t4 = space();
	      create_component(text2.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(seperator1, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(text1, target, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(seperator2, target, anchor);
	      insert_dev(target, t4, anchor);
	      mount_component(text2, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator0.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(seperator1.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      transition_in(seperator2.$$.fragment, local);
	      transition_in(text2.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator0.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(seperator1.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      transition_out(seperator2.$$.fragment, local);
	      transition_out(text2.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(seperator1, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(text1, detaching);
	      if (detaching) detach_dev(t3);
	      destroy_component(seperator2, detaching);
	      if (detaching) detach_dev(t4);
	      destroy_component(text2, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$q.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$q($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("KeyboardLayout", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  afterUpdate(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "onboard-keyboard-done",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    pushOnboardState({
	                      view: "input-import"
	                    });

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<KeyboardLayout> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      afterUpdate: afterUpdate,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      Seperator: Seperator,
	      Text: Text
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [];
	}

	var KeyboardLayout = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(KeyboardLayout, _SvelteComponentDev);

	  var _super = _createSuper$r(KeyboardLayout);

	  function KeyboardLayout(options) {
	    var _this;

	    classCallCheck(this, KeyboardLayout);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$q, create_fragment$q, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "KeyboardLayout",
	      options: options,
	      id: create_fragment$q.name
	    });
	    return _this;
	  }

	  return KeyboardLayout;
	}(SvelteComponentDev);

	function _createSuper$s(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$s(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$s() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$f = "src/components/Title.svelte";

	function create_fragment$r(ctx) {
	  var h2;
	  var block = {
	    c: function create() {
	      h2 = element("h2");
	      attr_dev(h2, "data-l10n-id",
	      /*languageId*/
	      ctx[0]);
	      attr_dev(h2, "class", "svelte-1n5hcwz");
	      toggle_class(h2, "warning",
	      /*warning*/
	      ctx[1]);
	      add_location(h2, file$f, 16, 0, 246);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, h2, anchor);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*languageId*/
	      1) {
	        attr_dev(h2, "data-l10n-id",
	        /*languageId*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*warning*/
	      2) {
	        toggle_class(h2, "warning",
	        /*warning*/
	        ctx[1]);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(h2);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$r.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$r($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Title", slots, []);
	  var languageId = $$props.languageId;
	  var _$$props$warning = $$props.warning,
	      warning = _$$props$warning === void 0 ? false : _$$props$warning;
	  var writable_props = ["languageId", "warning"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Title> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("warning" in $$props) $$invalidate(1, warning = $$props.warning);
	  };

	  $$self.$capture_state = function () {
	    return {
	      languageId: languageId,
	      warning: warning
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	    if ("warning" in $$props) $$invalidate(1, warning = $$props.warning);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId, warning];
	}

	var Title = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Title, _SvelteComponentDev);

	  var _super = _createSuper$s(Title);

	  function Title(options) {
	    var _this;

	    classCallCheck(this, Title);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$r, create_fragment$r, safe_not_equal, {
	      languageId: 0,
	      warning: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Title",
	      options: options,
	      id: create_fragment$r.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[0] === undefined && !("languageId" in props)) {
	      console.warn("<Title> was created without expected prop 'languageId'");
	    }

	    return _this;
	  }

	  createClass(Title, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<Title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "warning",
	    get: function get() {
	      throw new Error("<Title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Title;
	}(SvelteComponentDev);

	function _createSuper$t(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$t(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$t() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$s(ctx) {
	  var title;
	  var t0;
	  var seperator;
	  var t1;
	  var text_1;
	  var current;
	  title = new Title({
	    props: {
	      languageId: "title"
	    },
	    $$inline: true
	  });
	  seperator = new Seperator({
	    props: {
	      languageId: "what-is-nano-title"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      languageId: "onboard-title"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(title.$$.fragment);
	      t0 = space();
	      create_component(seperator.$$.fragment);
	      t1 = space();
	      create_component(text_1.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(title, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(text_1, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(title.$$.fragment, local);
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(title.$$.fragment, local);
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(title, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(text_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$s.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$s($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Intro", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  onMount(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "continue",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    pushOnboardState({
	                      view: "license",
	                      walletResult: undefined,
	                      alias: undefined
	                    });

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Intro> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      Text: Text,
	      onMount: onMount,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      Title: Title,
	      Link: Link
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [];
	}

	var Intro = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Intro, _SvelteComponentDev);

	  var _super = _createSuper$t(Intro);

	  function Intro(options) {
	    var _this;

	    classCallCheck(this, Intro);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$s, create_fragment$s, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Intro",
	      options: options,
	      id: create_fragment$s.name
	    });
	    return _this;
	  }

	  return Intro;
	}(SvelteComponentDev);

	function _createSuper$u(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$u(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$u() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_default_slot$c(ctx) {
	  var t;
	  var block = {
	    c: function create() {
	      t = text("GPLv2 License Agreement");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$c.name,
	    type: "slot",
	    source: "(26:0) <Link href=\\\"https://www.gnu.org/licenses/gpl-2.0.html\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$t(ctx) {
	  var seperator;
	  var t0;
	  var text0;
	  var t1;
	  var text1;
	  var t2;
	  var link;
	  var t3;
	  var text2;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "license-title"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      languageId: "license-text"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "license-text2"
	    },
	    $$inline: true
	  });
	  link = new Link({
	    props: {
	      href: "https://www.gnu.org/licenses/gpl-2.0.html",
	      $$slots: {
	        "default": [create_default_slot$c]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  text2 = new Text({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(text1.$$.fragment);
	      t2 = space();
	      create_component(link.$$.fragment);
	      t3 = space();
	      create_component(text2.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(text1, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(link, target, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(text2, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var link_changes = {};

	      if (dirty &
	      /*$$scope*/
	      2) {
	        link_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      link.$set(link_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      transition_in(link.$$.fragment, local);
	      transition_in(text2.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      transition_out(link.$$.fragment, local);
	      transition_out(text2.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(text1, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(link, detaching);
	      if (detaching) detach_dev(t3);
	      destroy_component(text2, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$t.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$t($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("LicenseAgreement", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  afterUpdate(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "onboard-disclaimer-agree",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    pushOnboardState({
	                      view: "create-or-import"
	                    });

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<LicenseAgreement> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      afterUpdate: afterUpdate,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      Seperator: Seperator,
	      Text: Text,
	      Link: Link
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [];
	}

	var LicenseAgreement = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(LicenseAgreement, _SvelteComponentDev);

	  var _super = _createSuper$u(LicenseAgreement);

	  function LicenseAgreement(options) {
	    var _this;

	    classCallCheck(this, LicenseAgreement);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$t, create_fragment$t, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "LicenseAgreement",
	      options: options,
	      id: create_fragment$t.name
	    });
	    return _this;
	  }

	  return LicenseAgreement;
	}(SvelteComponentDev);

	function _createSuper$v(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$v(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$v() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_if_block$7(ctx) {
	  var seperator;
	  var t;
	  var title;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "onboard-important-title"
	    },
	    $$inline: true
	  });
	  title = new Title({
	    props: {
	      languageId: "onboard-existing-wallet",
	      warning:
	      /*existingWallet*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t = space();
	      create_component(title.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(title, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var title_changes = {};
	      if (dirty &
	      /*existingWallet*/
	      1) title_changes.warning =
	      /*existingWallet*/
	      ctx[0];
	      title.$set(title_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(title.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(title.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(title, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$7.name,
	    type: "if",
	    source: "(36:0) {#if existingWallet}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$u(ctx) {
	  var seperator;
	  var t0;
	  var text_1;
	  var t1;
	  var if_block_anchor;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "onboard-import-or-create"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      breakAll: false,
	      languageId: "onboard-description"
	    },
	    $$inline: true
	  });
	  var if_block =
	  /*existingWallet*/
	  ctx[0] && create_if_block$7(ctx);
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t0 = space();
	      create_component(text_1.$$.fragment);
	      t1 = space();
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t1, anchor);
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*existingWallet*/
	      ctx[0]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);

	          if (dirty &
	          /*existingWallet*/
	          1) {
	            transition_in(if_block, 1);
	          }
	        } else {
	          if_block = create_if_block$7(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t1);
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$u.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$u($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CreateOrImport", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var existingWallet = false;
	  onMount(function () {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
	      return regenerator.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.t0 = $$invalidate;
	              _context3.next = 3;
	              return walletExists();

	            case 3:
	              _context3.t1 = existingWallet = _context3.sent;
	              (0, _context3.t0)(0, _context3.t1);
	              navigationReload({
	                leftKey: {
	                  languageId: "create",
	                  onClick: function onClick() {
	                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                      return regenerator.wrap(function _callee$(_context) {
	                        while (1) {
	                          switch (_context.prev = _context.next) {
	                            case 0:
	                              pushOnboardState({
	                                view: "disclaimer",
	                                walletResult: undefined,
	                                alias: undefined
	                              });

	                            case 1:
	                            case "end":
	                              return _context.stop();
	                          }
	                        }
	                      }, _callee);
	                    }));
	                  }
	                },
	                rightKey: {
	                  onClick: function onClick() {
	                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	                      return regenerator.wrap(function _callee2$(_context2) {
	                        while (1) {
	                          switch (_context2.prev = _context2.next) {
	                            case 0:
	                              return _context2.abrupt("return", pushOnboardState({
	                                view: "disclaimer-import"
	                              }));

	                            case 1:
	                            case "end":
	                              return _context2.stop();
	                          }
	                        }
	                      }, _callee2);
	                    }));
	                  },
	                  languageId: "import-wallet"
	                }
	              });

	            case 6:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }));
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<CreateOrImport> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      Text: Text,
	      onMount: onMount,
	      navigationReload: navigationReload,
	      pushOnboardState: pushOnboardState,
	      walletExists: walletExists,
	      Title: Title,
	      existingWallet: existingWallet
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("existingWallet" in $$props) $$invalidate(0, existingWallet = $$props.existingWallet);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [existingWallet];
	}

	var CreateOrImport = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(CreateOrImport, _SvelteComponentDev);

	  var _super = _createSuper$v(CreateOrImport);

	  function CreateOrImport(options) {
	    var _this;

	    classCallCheck(this, CreateOrImport);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$u, create_fragment$u, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "CreateOrImport",
	      options: options,
	      id: create_fragment$u.name
	    });
	    return _this;
	  }

	  return CreateOrImport;
	}(SvelteComponentDev);

	function _createSuper$w(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$w(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$w() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_if_block_9(ctx) {
	  var inputseed;
	  var current;
	  inputseed = new InputSeed({
	    props: {
	      seedInputValue:
	      /*attemptedSeedInput*/
	      ctx[3]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(inputseed.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(inputseed, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var inputseed_changes = {};
	      if (dirty &
	      /*attemptedSeedInput*/
	      8) inputseed_changes.seedInputValue =
	      /*attemptedSeedInput*/
	      ctx[3];
	      inputseed.$set(inputseed_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(inputseed.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(inputseed.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(inputseed, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_9.name,
	    type: "if",
	    source: "(53:38) ",
	    ctx: ctx
	  });
	  return block;
	} // (51:43) 


	function create_if_block_8(ctx) {
	  var keyboardlayout;
	  var current;
	  keyboardlayout = new KeyboardLayout({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(keyboardlayout.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(keyboardlayout, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(keyboardlayout.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(keyboardlayout.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(keyboardlayout, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_8.name,
	    type: "if",
	    source: "(51:43) ",
	    ctx: ctx
	  });
	  return block;
	} // (49:41) 


	function create_if_block_7(ctx) {
	  var disclaimerimport;
	  var current;
	  disclaimerimport = new DisclaimerImport({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(disclaimerimport.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(disclaimerimport, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(disclaimerimport.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(disclaimerimport.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(disclaimerimport, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_7.name,
	    type: "if",
	    source: "(49:41) ",
	    ctx: ctx
	  });
	  return block;
	} // (47:29) 


	function create_if_block_6(ctx) {
	  var setpin;
	  var current;
	  setpin = new SetPIN({
	    props: {
	      walletResult:
	      /*walletResult*/
	      ctx[1],
	      alias:
	      /*accountAlias*/
	      ctx[2]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(setpin.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(setpin, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var setpin_changes = {};
	      if (dirty &
	      /*walletResult*/
	      2) setpin_changes.walletResult =
	      /*walletResult*/
	      ctx[1];
	      if (dirty &
	      /*accountAlias*/
	      4) setpin_changes.alias =
	      /*accountAlias*/
	      ctx[2];
	      setpin.$set(setpin_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(setpin.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(setpin.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(setpin, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_6.name,
	    type: "if",
	    source: "(47:29) ",
	    ctx: ctx
	  });
	  return block;
	} // (45:33) 


	function create_if_block_5(ctx) {
	  var accountalias;
	  var current;
	  accountalias = new AccountAlias({
	    props: {
	      walletResult:
	      /*walletResult*/
	      ctx[1]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(accountalias.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(accountalias, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var accountalias_changes = {};
	      if (dirty &
	      /*walletResult*/
	      2) accountalias_changes.walletResult =
	      /*walletResult*/
	      ctx[1];
	      accountalias.$set(accountalias_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(accountalias.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(accountalias.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(accountalias, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_5.name,
	    type: "if",
	    source: "(45:33) ",
	    ctx: ctx
	  });
	  return block;
	} // (43:30) 


	function create_if_block_4(ctx) {
	  var createseed;
	  var current;
	  createseed = new CreateSeed({
	    props: {
	      walletResult:
	      /*walletResult*/
	      ctx[1]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(createseed.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(createseed, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var createseed_changes = {};
	      if (dirty &
	      /*walletResult*/
	      2) createseed_changes.walletResult =
	      /*walletResult*/
	      ctx[1];
	      createseed.$set(createseed_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(createseed.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(createseed.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(createseed, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4.name,
	    type: "if",
	    source: "(43:30) ",
	    ctx: ctx
	  });
	  return block;
	} // (41:36) 


	function create_if_block_3(ctx) {
	  var disclaimer;
	  var current;
	  disclaimer = new Disclaimer({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(disclaimer.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(disclaimer, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(disclaimer.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(disclaimer.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(disclaimer, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3.name,
	    type: "if",
	    source: "(41:36) ",
	    ctx: ctx
	  });
	  return block;
	} // (39:42) 


	function create_if_block_2(ctx) {
	  var createorimport;
	  var current;
	  createorimport = new CreateOrImport({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(createorimport.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(createorimport, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(createorimport.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(createorimport.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(createorimport, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2.name,
	    type: "if",
	    source: "(39:42) ",
	    ctx: ctx
	  });
	  return block;
	} // (37:33) 


	function create_if_block_1$1(ctx) {
	  var licenseagreement;
	  var current;
	  licenseagreement = new LicenseAgreement({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(licenseagreement.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(licenseagreement, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(licenseagreement.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(licenseagreement.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(licenseagreement, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$1.name,
	    type: "if",
	    source: "(37:33) ",
	    ctx: ctx
	  });
	  return block;
	} // (35:4) {#if view === 'intro' || view === undefined}


	function create_if_block$8(ctx) {
	  var intro;
	  var current;
	  intro = new Intro({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(intro.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(intro, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro$1(local) {
	      if (current) return;
	      transition_in(intro.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(intro.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(intro, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$8.name,
	    type: "if",
	    source: "(35:4) {#if view === 'intro' || view === undefined}",
	    ctx: ctx
	  });
	  return block;
	} // (34:0) <Content titleKey="create-wallet">


	function create_default_slot$d(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var if_block_anchor;
	  var current;
	  var if_block_creators = [create_if_block$8, create_if_block_1$1, create_if_block_2, create_if_block_3, create_if_block_4, create_if_block_5, create_if_block_6, create_if_block_7, create_if_block_8, create_if_block_9];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*view*/
	    ctx[0] === "intro" ||
	    /*view*/
	    ctx[0] === undefined) return 0;
	    if (
	    /*view*/
	    ctx[0] === "license") return 1;
	    if (
	    /*view*/
	    ctx[0] === "create-or-import") return 2;
	    if (
	    /*view*/
	    ctx[0] === "disclaimer") return 3;
	    if (
	    /*view*/
	    ctx[0] === "seed") return 4;
	    if (
	    /*view*/
	    ctx[0] === "account") return 5;
	    if (
	    /*view*/
	    ctx[0] === "pin") return 6;
	    if (
	    /*view*/
	    ctx[0] === "keyboard-change") return 7;
	    if (
	    /*view*/
	    ctx[0] === "disclaimer-import") return 8;
	    if (
	    /*view*/
	    ctx[0] === "input-import") return 9;
	    return -1;
	  }

	  if (~(current_block_type_index = select_block_type(ctx))) {
	    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  }

	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    m: function mount(target, anchor) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].m(target, anchor);
	      }

	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if (~current_block_type_index) {
	          if_blocks[current_block_type_index].p(ctx, dirty);
	        }
	      } else {
	        if (if_block) {
	          group_outros();
	          transition_out(if_blocks[previous_block_index], 1, 1, function () {
	            if_blocks[previous_block_index] = null;
	          });
	          check_outros();
	        }

	        if (~current_block_type_index) {
	          if_block = if_blocks[current_block_type_index];

	          if (!if_block) {
	            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	            if_block.c();
	          } else {
	            if_block.p(ctx, dirty);
	          }

	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        } else {
	          if_block = null;
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].d(detaching);
	      }

	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$d.name,
	    type: "slot",
	    source: "(34:0) <Content titleKey=\\\"create-wallet\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$v(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "create-wallet",
	      $$slots: {
	        "default": [create_default_slot$d]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, view, walletResult, accountAlias, attemptedSeedInput*/
	      143) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$v.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$v($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Onboard", slots, []);
	  var onboardState = undefined;
	  var state = undefined;
	  var view = undefined;
	  var walletResult = undefined;
	  var accountAlias = undefined;
	  var attemptedSeedInput = undefined;
	  var naviStore = navigationStore.subscribe(function (value) {
	    state = value;
	    onboardState = state === null || state === void 0 ? void 0 : state.onboardState;
	    $$invalidate(0, view = onboardState === null || onboardState === void 0 ? void 0 : onboardState.view);
	    $$invalidate(1, walletResult = onboardState === null || onboardState === void 0 ? void 0 : onboardState.walletResult);
	    $$invalidate(2, accountAlias = onboardState === null || onboardState === void 0 ? void 0 : onboardState.alias);
	    $$invalidate(3, attemptedSeedInput = onboardState === null || onboardState === void 0 ? void 0 : onboardState.attemptedSeedImport);
	  });
	  onDestroy(function () {
	    return naviStore();
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Onboard> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      Content: Content,
	      onDestroy: onDestroy,
	      navigationStore: navigationStore,
	      Disclaimer: Disclaimer,
	      CreateSeed: CreateSeed,
	      AccountAlias: AccountAlias,
	      SetPIN: SetPIN,
	      DisclaimerImport: DisclaimerImport,
	      InputSeed: InputSeed,
	      KeyboardLayout: KeyboardLayout,
	      Intro: Intro,
	      LicenseAgreement: LicenseAgreement,
	      CreateOrImport: CreateOrImport,
	      onboardState: onboardState,
	      state: state,
	      view: view,
	      walletResult: walletResult,
	      accountAlias: accountAlias,
	      attemptedSeedInput: attemptedSeedInput,
	      naviStore: naviStore
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("onboardState" in $$props) onboardState = $$props.onboardState;
	    if ("state" in $$props) state = $$props.state;
	    if ("view" in $$props) $$invalidate(0, view = $$props.view);
	    if ("walletResult" in $$props) $$invalidate(1, walletResult = $$props.walletResult);
	    if ("accountAlias" in $$props) $$invalidate(2, accountAlias = $$props.accountAlias);
	    if ("attemptedSeedInput" in $$props) $$invalidate(3, attemptedSeedInput = $$props.attemptedSeedInput);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [view, walletResult, accountAlias, attemptedSeedInput];
	}

	var Onboard = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Onboard, _SvelteComponentDev);

	  var _super = _createSuper$w(Onboard);

	  function Onboard(options) {
	    var _this;

	    classCallCheck(this, Onboard);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$v, create_fragment$v, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Onboard",
	      options: options,
	      id: create_fragment$v.name
	    });
	    return _this;
	  }

	  return Onboard;
	}(SvelteComponentDev);

	function _createSuper$x(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$x(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$x() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$g = "node_modules/svelte-spinner/src/index.svelte";

	function create_fragment$w(ctx) {
	  var svg;
	  var circle;
	  var circle_stroke_dasharray_value;
	  var block = {
	    c: function create() {
	      svg = svg_element("svg");
	      circle = svg_element("circle");
	      attr_dev(circle, "role", "presentation");
	      attr_dev(circle, "cx", "16");
	      attr_dev(circle, "cy", "16");
	      attr_dev(circle, "r",
	      /*radius*/
	      ctx[4]);
	      attr_dev(circle, "stroke",
	      /*color*/
	      ctx[2]);
	      attr_dev(circle, "fill", "none");
	      attr_dev(circle, "stroke-width",
	      /*thickness*/
	      ctx[3]);
	      attr_dev(circle, "stroke-dasharray", circle_stroke_dasharray_value = "" + (
	      /*dash*/
	      ctx[5] + ",100"));
	      attr_dev(circle, "stroke-linecap", "round");
	      add_location(circle, file$g, 19, 2, 384);
	      attr_dev(svg, "height",
	      /*size*/
	      ctx[0]);
	      attr_dev(svg, "width",
	      /*size*/
	      ctx[0]);
	      set_style(svg, "animation-duration",
	      /*speed*/
	      ctx[1] + "ms");
	      attr_dev(svg, "class", "svelte-spinner svelte-1bbsd2f");
	      attr_dev(svg, "viewBox", "0 0 32 32");
	      add_location(svg, file$g, 12, 0, 253);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, svg, anchor);
	      append_dev(svg, circle);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*radius*/
	      16) {
	        attr_dev(circle, "r",
	        /*radius*/
	        ctx[4]);
	      }

	      if (dirty &
	      /*color*/
	      4) {
	        attr_dev(circle, "stroke",
	        /*color*/
	        ctx[2]);
	      }

	      if (dirty &
	      /*thickness*/
	      8) {
	        attr_dev(circle, "stroke-width",
	        /*thickness*/
	        ctx[3]);
	      }

	      if (dirty &
	      /*dash*/
	      32 && circle_stroke_dasharray_value !== (circle_stroke_dasharray_value = "" + (
	      /*dash*/
	      ctx[5] + ",100"))) {
	        attr_dev(circle, "stroke-dasharray", circle_stroke_dasharray_value);
	      }

	      if (dirty &
	      /*size*/
	      1) {
	        attr_dev(svg, "height",
	        /*size*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*size*/
	      1) {
	        attr_dev(svg, "width",
	        /*size*/
	        ctx[0]);
	      }

	      if (dirty &
	      /*speed*/
	      2) {
	        set_style(svg, "animation-duration",
	        /*speed*/
	        ctx[1] + "ms");
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(svg);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$w.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$w($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Src", slots, []);
	  var _$$props$size = $$props.size,
	      size = _$$props$size === void 0 ? 25 : _$$props$size;
	  var _$$props$speed = $$props.speed,
	      speed = _$$props$speed === void 0 ? 750 : _$$props$speed;
	  var _$$props$color = $$props.color,
	      color = _$$props$color === void 0 ? "rgba(0,0,0,0.4)" : _$$props$color;
	  var _$$props$thickness = $$props.thickness,
	      thickness = _$$props$thickness === void 0 ? 2 : _$$props$thickness;
	  var _$$props$gap = $$props.gap,
	      gap = _$$props$gap === void 0 ? 40 : _$$props$gap;
	  var _$$props$radius = $$props.radius,
	      radius = _$$props$radius === void 0 ? 10 : _$$props$radius;
	  var dash;
	  var writable_props = ["size", "speed", "color", "thickness", "gap", "radius"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Src> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("size" in $$props) $$invalidate(0, size = $$props.size);
	    if ("speed" in $$props) $$invalidate(1, speed = $$props.speed);
	    if ("color" in $$props) $$invalidate(2, color = $$props.color);
	    if ("thickness" in $$props) $$invalidate(3, thickness = $$props.thickness);
	    if ("gap" in $$props) $$invalidate(6, gap = $$props.gap);
	    if ("radius" in $$props) $$invalidate(4, radius = $$props.radius);
	  };

	  $$self.$capture_state = function () {
	    return {
	      size: size,
	      speed: speed,
	      color: color,
	      thickness: thickness,
	      gap: gap,
	      radius: radius,
	      dash: dash
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("size" in $$props) $$invalidate(0, size = $$props.size);
	    if ("speed" in $$props) $$invalidate(1, speed = $$props.speed);
	    if ("color" in $$props) $$invalidate(2, color = $$props.color);
	    if ("thickness" in $$props) $$invalidate(3, thickness = $$props.thickness);
	    if ("gap" in $$props) $$invalidate(6, gap = $$props.gap);
	    if ("radius" in $$props) $$invalidate(4, radius = $$props.radius);
	    if ("dash" in $$props) $$invalidate(5, dash = $$props.dash);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*radius, gap*/
	    80) {
	       $$invalidate(5, dash = 2 * Math.PI * radius * (100 - gap) / 100);
	    }
	  };

	  return [size, speed, color, thickness, radius, dash, gap];
	}

	var Src = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Src, _SvelteComponentDev);

	  var _super = _createSuper$x(Src);

	  function Src(options) {
	    var _this;

	    classCallCheck(this, Src);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$w, create_fragment$w, safe_not_equal, {
	      size: 0,
	      speed: 1,
	      color: 2,
	      thickness: 3,
	      gap: 6,
	      radius: 4
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Src",
	      options: options,
	      id: create_fragment$w.name
	    });
	    return _this;
	  }

	  createClass(Src, [{
	    key: "size",
	    get: function get() {
	      throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "speed",
	    get: function get() {
	      throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "color",
	    get: function get() {
	      throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "thickness",
	    get: function get() {
	      throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "gap",
	    get: function get() {
	      throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "radius",
	    get: function get() {
	      throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Src;
	}(SvelteComponentDev);

	function _createSuper$y(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$y(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$y() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$h = "src/components/LabelledLoader.svelte";

	function create_fragment$x(ctx) {
	  var div;
	  var span;
	  var t;
	  var spinner;
	  var current;
	  spinner = new Src({
	    props: {
	      size: "50",
	      speed: "750",
	      color: "#4A90E2",
	      thickness: "3",
	      gap: "40"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      div = element("div");
	      span = element("span");
	      t = space();
	      create_component(spinner.$$.fragment);
	      attr_dev(span, "data-l10n-id",
	      /*languageId*/
	      ctx[0]);
	      add_location(span, file$h, 15, 4, 314);
	      attr_dev(div, "class", "spinner svelte-1bghbqb");
	      add_location(div, file$h, 14, 0, 288);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, span);
	      append_dev(div, t);
	      mount_component(spinner, div, null);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (!current || dirty &
	      /*languageId*/
	      1) {
	        attr_dev(span, "data-l10n-id",
	        /*languageId*/
	        ctx[0]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(spinner.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(spinner.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      destroy_component(spinner);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$x.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$x($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("LabelledLoader", slots, []);
	  var languageId = $$props.languageId;
	  var writable_props = ["languageId"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<LabelledLoader> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	  };

	  $$self.$capture_state = function () {
	    return {
	      Spinner: Src,
	      languageId: languageId
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("languageId" in $$props) $$invalidate(0, languageId = $$props.languageId);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [languageId];
	}

	var LabelledLoader = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(LabelledLoader, _SvelteComponentDev);

	  var _super = _createSuper$y(LabelledLoader);

	  function LabelledLoader(options) {
	    var _this;

	    classCallCheck(this, LabelledLoader);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$x, create_fragment$x, safe_not_equal, {
	      languageId: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "LabelledLoader",
	      options: options,
	      id: create_fragment$x.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*languageId*/
	    ctx[0] === undefined && !("languageId" in props)) {
	      console.warn("<LabelledLoader> was created without expected prop 'languageId'");
	    }

	    return _this;
	  }

	  createClass(LabelledLoader, [{
	    key: "languageId",
	    get: function get() {
	      throw new Error("<LabelledLoader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<LabelledLoader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return LabelledLoader;
	}(SvelteComponentDev);

	function _createSuper$z(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$z(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$z() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function get_each_context(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[7] = list[i];
	  return child_ctx;
	} // (64:8) {#each wallet.accounts as account}


	function create_each_block(ctx) {
	  var withsecondary;
	  var current;

	  function click_handler() {
	    return (
	      /*click_handler*/
	      ctx[3](
	      /*account*/
	      ctx[7])
	    );
	  }

	  withsecondary = new WithSecondary({
	    props: {
	      primaryText:
	      /*account*/
	      ctx[7].alias,
	      primaryLanguageId: accountAliasOrFallback(
	      /*account*/
	      ctx[7]),
	      secondaryText: truncateNanoAddress(
	      /*account*/
	      ctx[7].address)
	    },
	    $$inline: true
	  });
	  withsecondary.$on("click", click_handler);
	  var block = {
	    c: function create() {
	      create_component(withsecondary.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(withsecondary, target, anchor);
	      current = true;
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(withsecondary.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(withsecondary.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(withsecondary, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block.name,
	    type: "each",
	    source: "(64:8) {#each wallet.accounts as account}",
	    ctx: ctx
	  });
	  return block;
	} // (63:4) <List>


	function create_default_slot_1$3(ctx) {
	  var each_1_anchor;
	  var current;
	  var each_value =
	  /*wallet*/
	  ctx[0].accounts;
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	  }

	  var out = function out(i) {
	    return transition_out(each_blocks[i], 1, 1, function () {
	      each_blocks[i] = null;
	    });
	  };

	  var block = {
	    c: function create() {
	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      each_1_anchor = empty();
	    },
	    m: function mount(target, anchor) {
	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(target, anchor);
	      }

	      insert_dev(target, each_1_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*wallet, accountAliasOrFallback, truncateNanoAddress, selectAccount*/
	      3) {
	        each_value =
	        /*wallet*/
	        ctx[0].accounts;
	        validate_each_argument(each_value);

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);

	            transition_in(each_blocks[_i3], 1);
	          } else {
	            each_blocks[_i3] = create_each_block(child_ctx);

	            each_blocks[_i3].c();

	            transition_in(each_blocks[_i3], 1);

	            each_blocks[_i3].m(each_1_anchor.parentNode, each_1_anchor);
	          }
	        }

	        group_outros();

	        for (_i3 = each_value.length; _i3 < each_blocks.length; _i3 += 1) {
	          out(_i3);
	        }

	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i4 = 0; _i4 < each_value.length; _i4 += 1) {
	        transition_in(each_blocks[_i4]);
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      each_blocks = each_blocks.filter(Boolean);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        transition_out(each_blocks[_i5]);
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_each(each_blocks, detaching);
	      if (detaching) detach_dev(each_1_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_1$3.name,
	    type: "slot",
	    source: "(63:4) <List>",
	    ctx: ctx
	  });
	  return block;
	} // (62:0) <Content titleKey="wallet">


	function create_default_slot$e(ctx) {
	  var list;
	  var current;
	  list = new List({
	    props: {
	      $$slots: {
	        "default": [create_default_slot_1$3]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(list.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(list, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var list_changes = {};

	      if (dirty &
	      /*$$scope*/
	      1024) {
	        list_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      list.$set(list_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(list.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(list.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(list, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$e.name,
	    type: "slot",
	    source: "(62:0) <Content titleKey=\\\"wallet\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$y(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "wallet",
	      $$slots: {
	        "default": [create_default_slot$e]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope*/
	      1024) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$y.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$y($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("AccountList", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletState = $$props.walletState;
	  var _walletState = walletState,
	      wallet = _walletState.wallet,
	      mobileNumber = _walletState.mobileNumber;

	  var selectAccount = function selectAccount(account) {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return load({
	                languageId: "loading-account",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                    return regenerator.wrap(function _callee$(_context) {
	                      while (1) {
	                        switch (_context.prev = _context.next) {
	                          case 0:
	                            _context.next = 2;
	                            return updateWalletState(account, wallet, undefined, mobileNumber);

	                          case 2:
	                            pushAccountAction("menu");

	                          case 3:
	                          case "end":
	                            return _context.stop();
	                        }
	                      }
	                    }, _callee);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));
	  };

	  var addAccount = function addAccount() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
	      return regenerator.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return load({
	                languageId: "adding-account",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
	                    var updatedNanoWallet;
	                    return regenerator.wrap(function _callee3$(_context3) {
	                      while (1) {
	                        switch (_context3.prev = _context3.next) {
	                          case 0:
	                            _context3.next = 2;
	                            return addNanoAccount(wallet);

	                          case 2:
	                            updatedNanoWallet = _context3.sent;

	                            if (updatedNanoWallet) {
	                              setWalletState({
	                                wallet: updatedNanoWallet,
	                                mobileNumber: mobileNumber
	                              });
	                            } else {
	                              pushToast({
	                                languageId: "unable-to-store"
	                              });
	                            }

	                          case 4:
	                          case "end":
	                            return _context3.stop();
	                        }
	                      }
	                    }, _callee3);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4);
	    }));
	  };

	  afterUpdate(function () {
	    navigationReload({
	      leftKey: {
	        languageId: "add-account",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
	            return regenerator.wrap(function _callee5$(_context5) {
	              while (1) {
	                switch (_context5.prev = _context5.next) {
	                  case 0:
	                    return _context5.abrupt("return", addAccount());

	                  case 1:
	                  case "end":
	                    return _context5.stop();
	                }
	              }
	            }, _callee5);
	          }));
	        }
	      },
	      middleKey: SOFT_KEY_SELECT,
	      rightKey: {
	        languageId: "menu",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
	            return regenerator.wrap(function _callee6$(_context6) {
	              while (1) {
	                switch (_context6.prev = _context6.next) {
	                  case 0:
	                    return _context6.abrupt("return", pushMenu("menu"));

	                  case 1:
	                  case "end":
	                    return _context6.stop();
	                }
	              }
	            }, _callee6);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = ["walletState"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<AccountList> was created with unknown prop '".concat(key, "'"));
	  });

	  var click_handler = function click_handler(account) {
	    return selectAccount(account);
	  };

	  $$self.$$set = function ($$props) {
	    if ("walletState" in $$props) $$invalidate(2, walletState = $$props.walletState);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      List: List,
	      Content: Content,
	      WithSecondary: WithSecondary,
	      setWalletState: setWalletState,
	      updateWalletState: updateWalletState,
	      navigationReload: navigationReload,
	      pushAccountAction: pushAccountAction,
	      pushMenu: pushMenu,
	      pushToast: pushToast,
	      afterUpdate: afterUpdate,
	      load: load,
	      addNanoAccount: addNanoAccount,
	      truncateNanoAddress: truncateNanoAddress,
	      accountAliasOrFallback: accountAliasOrFallback,
	      SOFT_KEY_SELECT: SOFT_KEY_SELECT,
	      walletState: walletState,
	      wallet: wallet,
	      mobileNumber: mobileNumber,
	      selectAccount: selectAccount,
	      addAccount: addAccount
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletState" in $$props) $$invalidate(2, walletState = $$props.walletState);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [wallet, selectAccount, walletState, click_handler];
	}

	var AccountList = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(AccountList, _SvelteComponentDev);

	  var _super = _createSuper$z(AccountList);

	  function AccountList(options) {
	    var _this;

	    classCallCheck(this, AccountList);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$y, create_fragment$y, safe_not_equal, {
	      walletState: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "AccountList",
	      options: options,
	      id: create_fragment$y.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletState*/
	    ctx[2] === undefined && !("walletState" in props)) {
	      console.warn("<AccountList> was created without expected prop 'walletState'");
	    }

	    return _this;
	  }

	  createClass(AccountList, [{
	    key: "walletState",
	    get: function get() {
	      throw new Error("<AccountList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<AccountList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return AccountList;
	}(SvelteComponentDev);

	function _createSuper$A(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$A(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$A() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var Object_1 = globals.Object;

	function get_each_context$1(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[5] = list[i];
	  return child_ctx;
	} // (30:0) {:else}


	function create_else_block$1(ctx) {
	  var text_1;
	  var current;
	  text_1 = new Text({
	    props: {
	      languageId: "no-transactions"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(text_1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(text_1, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(text_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(text_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(text_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block$1.name,
	    type: "else",
	    source: "(30:0) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (24:0) {#if transactions.length > 0}


	function create_if_block$9(ctx) {
	  var list;
	  var current;
	  list = new List({
	    props: {
	      $$slots: {
	        "default": [create_default_slot$f]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(list.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(list, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var list_changes = {};

	      if (dirty &
	      /*$$scope, transactions*/
	      257) {
	        list_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      list.$set(list_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(list.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(list.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(list, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$9.name,
	    type: "if",
	    source: "(24:0) {#if transactions.length > 0}",
	    ctx: ctx
	  });
	  return block;
	} // (26:8) {#each transactions as transaction}


	function create_each_block$1(ctx) {
	  var primary;
	  var current;

	  function click_handler() {
	    return (
	      /*click_handler*/
	      ctx[2](
	      /*transaction*/
	      ctx[5])
	    );
	  }

	  primary = new Primary({
	    props: {
	      primaryText: transactionText(
	      /*transaction*/
	      ctx[5])
	    },
	    $$inline: true
	  });
	  primary.$on("click", click_handler);
	  var block = {
	    c: function create() {
	      create_component(primary.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(primary, target, anchor);
	      current = true;
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      var primary_changes = {};
	      if (dirty &
	      /*transactions*/
	      1) primary_changes.primaryText = transactionText(
	      /*transaction*/
	      ctx[5]);
	      primary.$set(primary_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(primary.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(primary.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(primary, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$1.name,
	    type: "each",
	    source: "(26:8) {#each transactions as transaction}",
	    ctx: ctx
	  });
	  return block;
	} // (25:4) <List>


	function create_default_slot$f(ctx) {
	  var each_1_anchor;
	  var current;
	  var each_value =
	  /*transactions*/
	  ctx[0];
	  validate_each_argument(each_value);
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	  }

	  var out = function out(i) {
	    return transition_out(each_blocks[i], 1, 1, function () {
	      each_blocks[i] = null;
	    });
	  };

	  var block = {
	    c: function create() {
	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      each_1_anchor = empty();
	    },
	    m: function mount(target, anchor) {
	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(target, anchor);
	      }

	      insert_dev(target, each_1_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*transactionText, transactions, setSelected*/
	      3) {
	        each_value =
	        /*transactions*/
	        ctx[0];
	        validate_each_argument(each_value);

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context$1(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);

	            transition_in(each_blocks[_i3], 1);
	          } else {
	            each_blocks[_i3] = create_each_block$1(child_ctx);

	            each_blocks[_i3].c();

	            transition_in(each_blocks[_i3], 1);

	            each_blocks[_i3].m(each_1_anchor.parentNode, each_1_anchor);
	          }
	        }

	        group_outros();

	        for (_i3 = each_value.length; _i3 < each_blocks.length; _i3 += 1) {
	          out(_i3);
	        }

	        check_outros();
	      }
	    },
	    i: function intro(local) {
	      if (current) return;

	      for (var _i4 = 0; _i4 < each_value.length; _i4 += 1) {
	        transition_in(each_blocks[_i4]);
	      }

	      current = true;
	    },
	    o: function outro(local) {
	      each_blocks = each_blocks.filter(Boolean);

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        transition_out(each_blocks[_i5]);
	      }

	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_each(each_blocks, detaching);
	      if (detaching) detach_dev(each_1_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$f.name,
	    type: "slot",
	    source: "(25:4) <List>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$z(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var if_block_anchor;
	  var current;
	  var if_block_creators = [create_if_block$9, create_else_block$1];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*transactions*/
	    ctx[0].length > 0) return 0;
	    return 1;
	  }

	  current_block_type_index = select_block_type(ctx);
	  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  var block = {
	    c: function create() {
	      if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if_blocks[current_block_type_index].m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if_blocks[current_block_type_index].p(ctx, dirty);
	      } else {
	        group_outros();
	        transition_out(if_blocks[previous_block_index], 1, 1, function () {
	          if_blocks[previous_block_index] = null;
	        });
	        check_outros();
	        if_block = if_blocks[current_block_type_index];

	        if (!if_block) {
	          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	          if_block.c();
	        } else {
	          if_block.p(ctx, dirty);
	        }

	        transition_in(if_block, 1);
	        if_block.m(if_block_anchor.parentNode, if_block_anchor);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if_blocks[current_block_type_index].d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$z.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$z($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Transactions", slots, []);
	  var transactions = $$props.transactions;
	  var wallet = undefined;
	  var unsubscribe = walletStore.subscribe(function (value) {
	    return wallet = value;
	  });

	  var setSelected = function setSelected(transaction) {
	    setWalletState(Object.assign(Object.assign({}, wallet), {
	      transaction: transaction
	    }));
	    pushAccountAction("transaction");
	  };

	  onMount(function () {
	    return navigationReload(transactions.length > 0 ? {
	      middleKey: SOFT_KEY_SELECT
	    } : undefined);
	  });
	  onDestroy(function () {
	    return unsubscribe();
	  });
	  var writable_props = ["transactions"];
	  Object_1.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Transactions> was created with unknown prop '".concat(key, "'"));
	  });

	  var click_handler = function click_handler(transaction) {
	    return setSelected(transaction);
	  };

	  $$self.$$set = function ($$props) {
	    if ("transactions" in $$props) $$invalidate(0, transactions = $$props.transactions);
	  };

	  $$self.$capture_state = function () {
	    return {
	      List: List,
	      onDestroy: onDestroy,
	      onMount: onMount,
	      navigationReload: navigationReload,
	      pushAccountAction: pushAccountAction,
	      Primary: Primary,
	      Text: Text,
	      setWalletState: setWalletState,
	      walletStore: walletStore,
	      transactionText: transactionText,
	      SOFT_KEY_SELECT: SOFT_KEY_SELECT,
	      transactions: transactions,
	      wallet: wallet,
	      unsubscribe: unsubscribe,
	      setSelected: setSelected
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("transactions" in $$props) $$invalidate(0, transactions = $$props.transactions);
	    if ("wallet" in $$props) wallet = $$props.wallet;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [transactions, setSelected, click_handler];
	}

	var Transactions = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Transactions, _SvelteComponentDev);

	  var _super = _createSuper$A(Transactions);

	  function Transactions(options) {
	    var _this;

	    classCallCheck(this, Transactions);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$z, create_fragment$z, safe_not_equal, {
	      transactions: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Transactions",
	      options: options,
	      id: create_fragment$z.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*transactions*/
	    ctx[0] === undefined && !("transactions" in props)) {
	      console.warn("<Transactions> was created without expected prop 'transactions'");
	    }

	    return _this;
	  }

	  createClass(Transactions, [{
	    key: "transactions",
	    get: function get() {
	      throw new Error("<Transactions>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Transactions>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Transactions;
	}(SvelteComponentDev);

	// can-promise has a crash in some versions of react native that dont have
	// standard global objects
	// https://github.com/soldair/node-qrcode/issues/157

	var canPromise = function () {
	  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
	};

	var toString$1 = {}.toString;

	var isarray = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	function typedArraySupport () {
	  // Can typed array instances be augmented?
	  try {
	    var arr = new Uint8Array(1);
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}

	Buffer$1.TYPED_ARRAY_SUPPORT = typedArraySupport();

	var K_MAX_LENGTH = Buffer$1.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff;

	function Buffer$1 (arg, offset, length) {
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
	    return new Buffer$1(arg, offset, length)
	  }

	  if (typeof arg === 'number') {
	    return allocUnsafe$1(this, arg)
	  }

	  return from$1(this, arg, offset, length)
	}

	if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	  Buffer$1.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$1.__proto__ = Uint8Array;

	  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer$1[Symbol.species] === Buffer$1) {
	    Object.defineProperty(Buffer$1, Symbol.species, {
	      value: null,
	      configurable: true,
	      enumerable: false,
	      writable: false
	    });
	  }
	}

	function checked$1 (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function isnan$1 (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	function createBuffer$1 (that, length) {
	  var buf;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    buf = new Uint8Array(length);
	    buf.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    buf = that;
	    if (buf === null) {
	      buf = new Buffer$1(length);
	    }
	    buf.length = length;
	  }

	  return buf
	}

	function allocUnsafe$1 (that, size) {
	  var buf = createBuffer$1(that, size < 0 ? 0 : checked$1(size) | 0);

	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      buf[i] = 0;
	    }
	  }

	  return buf
	}

	function fromString$1 (that, string) {
	  var length = byteLength$1(string) | 0;
	  var buf = createBuffer$1(that, length);

	  var actual = buf.write(string);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    buf = buf.slice(0, actual);
	  }

	  return buf
	}

	function fromArrayLike$1 (that, array) {
	  var length = array.length < 0 ? 0 : checked$1(array.length) | 0;
	  var buf = createBuffer$1(that, length);
	  for (var i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255;
	  }
	  return buf
	}

	function fromArrayBuffer$1 (that, array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  var buf;
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array);
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset);
	  } else {
	    buf = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    buf.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    buf = fromArrayLike$1(that, buf);
	  }

	  return buf
	}

	function fromObject$1 (that, obj) {
	  if (Buffer$1.isBuffer(obj)) {
	    var len = checked$1(obj.length) | 0;
	    var buf = createBuffer$1(that, len);

	    if (buf.length === 0) {
	      return buf
	    }

	    obj.copy(buf, 0, 0, len);
	    return buf
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan$1(obj.length)) {
	        return createBuffer$1(that, 0)
	      }
	      return fromArrayLike$1(that, obj)
	    }

	    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	      return fromArrayLike$1(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function utf8ToBytes$1 (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function byteLength$1 (string) {
	  if (Buffer$1.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  return utf8ToBytes$1(string).length
	}

	function blitBuffer$1 (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function utf8Write$1 (buf, string, offset, length) {
	  return blitBuffer$1(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
	}

	function from$1 (that, value, offset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer$1(that, value, offset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString$1(that, value)
	  }

	  return fromObject$1(that, value)
	}

	Buffer$1.prototype.write = function write (string, offset, length) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	    } else {
	      length = undefined;
	    }
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  return utf8Write$1(this, string, offset, length)
	};

	Buffer$1.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    // Return an augmented `Uint8Array` instance
	    newBuf.__proto__ = Buffer$1.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$1(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	Buffer$1.prototype.fill = function fill (val, start, end) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = Buffer$1.isBuffer(val)
	      ? val
	      : new Buffer$1(val);
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	Buffer$1.concat = function concat (list, length) {
	  if (!isarray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return createBuffer$1(null, 0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = allocUnsafe$1(null, length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!Buffer$1.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	Buffer$1.byteLength = byteLength$1;

	Buffer$1.prototype._isBuffer = true;
	Buffer$1.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	};

	var alloc$1 = function (size) {
	  var buffer = new Buffer$1(size);
	  buffer.fill(0);
	  return buffer
	};

	var from_1 = function (data) {
	  return new Buffer$1(data)
	};

	var typedarrayBuffer = {
		alloc: alloc$1,
		from: from_1
	};

	var toSJISFunction;
	var CODEWORDS_COUNT = [
	  0, // Not used
	  26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
	  404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
	  1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
	  2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
	];

	/**
	 * Returns the QR Code size for the specified version
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         size of QR code
	 */
	var getSymbolSize = function getSymbolSize (version) {
	  if (!version) throw new Error('"version" cannot be null or undefined')
	  if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
	  return version * 4 + 17
	};

	/**
	 * Returns the total number of codewords used to store data and EC information.
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         Data length in bits
	 */
	var getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {
	  return CODEWORDS_COUNT[version]
	};

	/**
	 * Encode data with Bose-Chaudhuri-Hocquenghem
	 *
	 * @param  {Number} data Value to encode
	 * @return {Number}      Encoded value
	 */
	var getBCHDigit = function (data) {
	  var digit = 0;

	  while (data !== 0) {
	    digit++;
	    data >>>= 1;
	  }

	  return digit
	};

	var setToSJISFunction = function setToSJISFunction (f) {
	  if (typeof f !== 'function') {
	    throw new Error('"toSJISFunc" is not a valid function.')
	  }

	  toSJISFunction = f;
	};

	var isKanjiModeEnabled = function () {
	  return typeof toSJISFunction !== 'undefined'
	};

	var toSJIS = function toSJIS (kanji) {
	  return toSJISFunction(kanji)
	};

	var utils = {
		getSymbolSize: getSymbolSize,
		getSymbolTotalCodewords: getSymbolTotalCodewords,
		getBCHDigit: getBCHDigit,
		setToSJISFunction: setToSJISFunction,
		isKanjiModeEnabled: isKanjiModeEnabled,
		toSJIS: toSJIS
	};

	var errorCorrectionLevel = createCommonjsModule(function (module, exports) {
	exports.L = { bit: 1 };
	exports.M = { bit: 0 };
	exports.Q = { bit: 3 };
	exports.H = { bit: 2 };

	function fromString (string) {
	  if (typeof string !== 'string') {
	    throw new Error('Param is not a string')
	  }

	  var lcStr = string.toLowerCase();

	  switch (lcStr) {
	    case 'l':
	    case 'low':
	      return exports.L

	    case 'm':
	    case 'medium':
	      return exports.M

	    case 'q':
	    case 'quartile':
	      return exports.Q

	    case 'h':
	    case 'high':
	      return exports.H

	    default:
	      throw new Error('Unknown EC Level: ' + string)
	  }
	}

	exports.isValid = function isValid (level) {
	  return level && typeof level.bit !== 'undefined' &&
	    level.bit >= 0 && level.bit < 4
	};

	exports.from = function from (value, defaultValue) {
	  if (exports.isValid(value)) {
	    return value
	  }

	  try {
	    return fromString(value)
	  } catch (e) {
	    return defaultValue
	  }
	};
	});

	function BitBuffer () {
	  this.buffer = [];
	  this.length = 0;
	}

	BitBuffer.prototype = {

	  get: function (index) {
	    var bufIndex = Math.floor(index / 8);
	    return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
	  },

	  put: function (num, length) {
	    for (var i = 0; i < length; i++) {
	      this.putBit(((num >>> (length - i - 1)) & 1) === 1);
	    }
	  },

	  getLengthInBits: function () {
	    return this.length
	  },

	  putBit: function (bit) {
	    var bufIndex = Math.floor(this.length / 8);
	    if (this.buffer.length <= bufIndex) {
	      this.buffer.push(0);
	    }

	    if (bit) {
	      this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
	    }

	    this.length++;
	  }
	};

	var bitBuffer = BitBuffer;

	/**
	 * Helper class to handle QR Code symbol modules
	 *
	 * @param {Number} size Symbol size
	 */
	function BitMatrix (size) {
	  if (!size || size < 1) {
	    throw new Error('BitMatrix size must be defined and greater than 0')
	  }

	  this.size = size;
	  this.data = typedarrayBuffer.alloc(size * size);
	  this.reservedBit = typedarrayBuffer.alloc(size * size);
	}

	/**
	 * Set bit value at specified location
	 * If reserved flag is set, this bit will be ignored during masking process
	 *
	 * @param {Number}  row
	 * @param {Number}  col
	 * @param {Boolean} value
	 * @param {Boolean} reserved
	 */
	BitMatrix.prototype.set = function (row, col, value, reserved) {
	  var index = row * this.size + col;
	  this.data[index] = value;
	  if (reserved) this.reservedBit[index] = true;
	};

	/**
	 * Returns bit value at specified location
	 *
	 * @param  {Number}  row
	 * @param  {Number}  col
	 * @return {Boolean}
	 */
	BitMatrix.prototype.get = function (row, col) {
	  return this.data[row * this.size + col]
	};

	/**
	 * Applies xor operator at specified location
	 * (used during masking process)
	 *
	 * @param {Number}  row
	 * @param {Number}  col
	 * @param {Boolean} value
	 */
	BitMatrix.prototype.xor = function (row, col, value) {
	  this.data[row * this.size + col] ^= value;
	};

	/**
	 * Check if bit at specified location is reserved
	 *
	 * @param {Number}   row
	 * @param {Number}   col
	 * @return {Boolean}
	 */
	BitMatrix.prototype.isReserved = function (row, col) {
	  return this.reservedBit[row * this.size + col]
	};

	var bitMatrix = BitMatrix;

	var alignmentPattern = createCommonjsModule(function (module, exports) {
	/**
	 * Alignment pattern are fixed reference pattern in defined positions
	 * in a matrix symbology, which enables the decode software to re-synchronise
	 * the coordinate mapping of the image modules in the event of moderate amounts
	 * of distortion of the image.
	 *
	 * Alignment patterns are present only in QR Code symbols of version 2 or larger
	 * and their number depends on the symbol version.
	 */

	var getSymbolSize = utils.getSymbolSize;

	/**
	 * Calculate the row/column coordinates of the center module of each alignment pattern
	 * for the specified QR Code version.
	 *
	 * The alignment patterns are positioned symmetrically on either side of the diagonal
	 * running from the top left corner of the symbol to the bottom right corner.
	 *
	 * Since positions are simmetrical only half of the coordinates are returned.
	 * Each item of the array will represent in turn the x and y coordinate.
	 * @see {@link getPositions}
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinate
	 */
	exports.getRowColCoords = function getRowColCoords (version) {
	  if (version === 1) return []

	  var posCount = Math.floor(version / 7) + 2;
	  var size = getSymbolSize(version);
	  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
	  var positions = [size - 7]; // Last coord is always (size - 7)

	  for (var i = 1; i < posCount - 1; i++) {
	    positions[i] = positions[i - 1] - intervals;
	  }

	  positions.push(6); // First coord is always 6

	  return positions.reverse()
	};

	/**
	 * Returns an array containing the positions of each alignment pattern.
	 * Each array's element represent the center point of the pattern as (x, y) coordinates
	 *
	 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
	 * and filtering out the items that overlaps with finder pattern
	 *
	 * @example
	 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
	 * The alignment patterns, therefore, are to be centered on (row, column)
	 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
	 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
	 * and are not therefore used for alignment patterns.
	 *
	 * var pos = getPositions(7)
	 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinates
	 */
	exports.getPositions = function getPositions (version) {
	  var coords = [];
	  var pos = exports.getRowColCoords(version);
	  var posLength = pos.length;

	  for (var i = 0; i < posLength; i++) {
	    for (var j = 0; j < posLength; j++) {
	      // Skip if position is occupied by finder patterns
	      if ((i === 0 && j === 0) ||             // top-left
	          (i === 0 && j === posLength - 1) || // bottom-left
	          (i === posLength - 1 && j === 0)) { // top-right
	        continue
	      }

	      coords.push([pos[i], pos[j]]);
	    }
	  }

	  return coords
	};
	});

	var getSymbolSize$1 = utils.getSymbolSize;
	var FINDER_PATTERN_SIZE = 7;

	/**
	 * Returns an array containing the positions of each finder pattern.
	 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
	 *
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of coordinates
	 */
	var getPositions = function getPositions (version) {
	  var size = getSymbolSize$1(version);

	  return [
	    // top-left
	    [0, 0],
	    // top-right
	    [size - FINDER_PATTERN_SIZE, 0],
	    // bottom-left
	    [0, size - FINDER_PATTERN_SIZE]
	  ]
	};

	var finderPattern = {
		getPositions: getPositions
	};

	var maskPattern = createCommonjsModule(function (module, exports) {
	/**
	 * Data mask pattern reference
	 * @type {Object}
	 */
	exports.Patterns = {
	  PATTERN000: 0,
	  PATTERN001: 1,
	  PATTERN010: 2,
	  PATTERN011: 3,
	  PATTERN100: 4,
	  PATTERN101: 5,
	  PATTERN110: 6,
	  PATTERN111: 7
	};

	/**
	 * Weighted penalty scores for the undesirable features
	 * @type {Object}
	 */
	var PenaltyScores = {
	  N1: 3,
	  N2: 3,
	  N3: 40,
	  N4: 10
	};

	/**
	 * Check if mask pattern value is valid
	 *
	 * @param  {Number}  mask    Mask pattern
	 * @return {Boolean}         true if valid, false otherwise
	 */
	exports.isValid = function isValid (mask) {
	  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
	};

	/**
	 * Returns mask pattern from a value.
	 * If value is not valid, returns undefined
	 *
	 * @param  {Number|String} value        Mask pattern value
	 * @return {Number}                     Valid mask pattern or undefined
	 */
	exports.from = function from (value) {
	  return exports.isValid(value) ? parseInt(value, 10) : undefined
	};

	/**
	* Find adjacent modules in row/column with the same color
	* and assign a penalty value.
	*
	* Points: N1 + i
	* i is the amount by which the number of adjacent modules of the same color exceeds 5
	*/
	exports.getPenaltyN1 = function getPenaltyN1 (data) {
	  var size = data.size;
	  var points = 0;
	  var sameCountCol = 0;
	  var sameCountRow = 0;
	  var lastCol = null;
	  var lastRow = null;

	  for (var row = 0; row < size; row++) {
	    sameCountCol = sameCountRow = 0;
	    lastCol = lastRow = null;

	    for (var col = 0; col < size; col++) {
	      var module = data.get(row, col);
	      if (module === lastCol) {
	        sameCountCol++;
	      } else {
	        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
	        lastCol = module;
	        sameCountCol = 1;
	      }

	      module = data.get(col, row);
	      if (module === lastRow) {
	        sameCountRow++;
	      } else {
	        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
	        lastRow = module;
	        sameCountRow = 1;
	      }
	    }

	    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
	    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
	  }

	  return points
	};

	/**
	 * Find 2x2 blocks with the same color and assign a penalty value
	 *
	 * Points: N2 * (m - 1) * (n - 1)
	 */
	exports.getPenaltyN2 = function getPenaltyN2 (data) {
	  var size = data.size;
	  var points = 0;

	  for (var row = 0; row < size - 1; row++) {
	    for (var col = 0; col < size - 1; col++) {
	      var last = data.get(row, col) +
	        data.get(row, col + 1) +
	        data.get(row + 1, col) +
	        data.get(row + 1, col + 1);

	      if (last === 4 || last === 0) points++;
	    }
	  }

	  return points * PenaltyScores.N2
	};

	/**
	 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
	 * preceded or followed by light area 4 modules wide
	 *
	 * Points: N3 * number of pattern found
	 */
	exports.getPenaltyN3 = function getPenaltyN3 (data) {
	  var size = data.size;
	  var points = 0;
	  var bitsCol = 0;
	  var bitsRow = 0;

	  for (var row = 0; row < size; row++) {
	    bitsCol = bitsRow = 0;
	    for (var col = 0; col < size; col++) {
	      bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col);
	      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;

	      bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row);
	      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
	    }
	  }

	  return points * PenaltyScores.N3
	};

	/**
	 * Calculate proportion of dark modules in entire symbol
	 *
	 * Points: N4 * k
	 *
	 * k is the rating of the deviation of the proportion of dark modules
	 * in the symbol from 50% in steps of 5%
	 */
	exports.getPenaltyN4 = function getPenaltyN4 (data) {
	  var darkCount = 0;
	  var modulesCount = data.data.length;

	  for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];

	  var k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10);

	  return k * PenaltyScores.N4
	};

	/**
	 * Return mask value at given position
	 *
	 * @param  {Number} maskPattern Pattern reference value
	 * @param  {Number} i           Row
	 * @param  {Number} j           Column
	 * @return {Boolean}            Mask value
	 */
	function getMaskAt (maskPattern, i, j) {
	  switch (maskPattern) {
	    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
	    case exports.Patterns.PATTERN001: return i % 2 === 0
	    case exports.Patterns.PATTERN010: return j % 3 === 0
	    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
	    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
	    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
	    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
	    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

	    default: throw new Error('bad maskPattern:' + maskPattern)
	  }
	}

	/**
	 * Apply a mask pattern to a BitMatrix
	 *
	 * @param  {Number}    pattern Pattern reference number
	 * @param  {BitMatrix} data    BitMatrix data
	 */
	exports.applyMask = function applyMask (pattern, data) {
	  var size = data.size;

	  for (var col = 0; col < size; col++) {
	    for (var row = 0; row < size; row++) {
	      if (data.isReserved(row, col)) continue
	      data.xor(row, col, getMaskAt(pattern, row, col));
	    }
	  }
	};

	/**
	 * Returns the best mask pattern for data
	 *
	 * @param  {BitMatrix} data
	 * @return {Number} Mask pattern reference number
	 */
	exports.getBestMask = function getBestMask (data, setupFormatFunc) {
	  var numPatterns = Object.keys(exports.Patterns).length;
	  var bestPattern = 0;
	  var lowerPenalty = Infinity;

	  for (var p = 0; p < numPatterns; p++) {
	    setupFormatFunc(p);
	    exports.applyMask(p, data);

	    // Calculate penalty
	    var penalty =
	      exports.getPenaltyN1(data) +
	      exports.getPenaltyN2(data) +
	      exports.getPenaltyN3(data) +
	      exports.getPenaltyN4(data);

	    // Undo previously applied mask
	    exports.applyMask(p, data);

	    if (penalty < lowerPenalty) {
	      lowerPenalty = penalty;
	      bestPattern = p;
	    }
	  }

	  return bestPattern
	};
	});

	var EC_BLOCKS_TABLE = [
	// L  M  Q  H
	  1, 1, 1, 1,
	  1, 1, 1, 1,
	  1, 1, 2, 2,
	  1, 2, 2, 4,
	  1, 2, 4, 4,
	  2, 4, 4, 4,
	  2, 4, 6, 5,
	  2, 4, 6, 6,
	  2, 5, 8, 8,
	  4, 5, 8, 8,
	  4, 5, 8, 11,
	  4, 8, 10, 11,
	  4, 9, 12, 16,
	  4, 9, 16, 16,
	  6, 10, 12, 18,
	  6, 10, 17, 16,
	  6, 11, 16, 19,
	  6, 13, 18, 21,
	  7, 14, 21, 25,
	  8, 16, 20, 25,
	  8, 17, 23, 25,
	  9, 17, 23, 34,
	  9, 18, 25, 30,
	  10, 20, 27, 32,
	  12, 21, 29, 35,
	  12, 23, 34, 37,
	  12, 25, 34, 40,
	  13, 26, 35, 42,
	  14, 28, 38, 45,
	  15, 29, 40, 48,
	  16, 31, 43, 51,
	  17, 33, 45, 54,
	  18, 35, 48, 57,
	  19, 37, 51, 60,
	  19, 38, 53, 63,
	  20, 40, 56, 66,
	  21, 43, 59, 70,
	  22, 45, 62, 74,
	  24, 47, 65, 77,
	  25, 49, 68, 81
	];

	var EC_CODEWORDS_TABLE = [
	// L  M  Q  H
	  7, 10, 13, 17,
	  10, 16, 22, 28,
	  15, 26, 36, 44,
	  20, 36, 52, 64,
	  26, 48, 72, 88,
	  36, 64, 96, 112,
	  40, 72, 108, 130,
	  48, 88, 132, 156,
	  60, 110, 160, 192,
	  72, 130, 192, 224,
	  80, 150, 224, 264,
	  96, 176, 260, 308,
	  104, 198, 288, 352,
	  120, 216, 320, 384,
	  132, 240, 360, 432,
	  144, 280, 408, 480,
	  168, 308, 448, 532,
	  180, 338, 504, 588,
	  196, 364, 546, 650,
	  224, 416, 600, 700,
	  224, 442, 644, 750,
	  252, 476, 690, 816,
	  270, 504, 750, 900,
	  300, 560, 810, 960,
	  312, 588, 870, 1050,
	  336, 644, 952, 1110,
	  360, 700, 1020, 1200,
	  390, 728, 1050, 1260,
	  420, 784, 1140, 1350,
	  450, 812, 1200, 1440,
	  480, 868, 1290, 1530,
	  510, 924, 1350, 1620,
	  540, 980, 1440, 1710,
	  570, 1036, 1530, 1800,
	  570, 1064, 1590, 1890,
	  600, 1120, 1680, 1980,
	  630, 1204, 1770, 2100,
	  660, 1260, 1860, 2220,
	  720, 1316, 1950, 2310,
	  750, 1372, 2040, 2430
	];

	/**
	 * Returns the number of error correction block that the QR Code should contain
	 * for the specified version and error correction level.
	 *
	 * @param  {Number} version              QR Code version
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @return {Number}                      Number of error correction blocks
	 */
	var getBlocksCount = function getBlocksCount (version, errorCorrectionLevel$1) {
	  switch (errorCorrectionLevel$1) {
	    case errorCorrectionLevel.L:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
	    case errorCorrectionLevel.M:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
	    case errorCorrectionLevel.Q:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
	    case errorCorrectionLevel.H:
	      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
	    default:
	      return undefined
	  }
	};

	/**
	 * Returns the number of error correction codewords to use for the specified
	 * version and error correction level.
	 *
	 * @param  {Number} version              QR Code version
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @return {Number}                      Number of error correction codewords
	 */
	var getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel$1) {
	  switch (errorCorrectionLevel$1) {
	    case errorCorrectionLevel.L:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
	    case errorCorrectionLevel.M:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
	    case errorCorrectionLevel.Q:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
	    case errorCorrectionLevel.H:
	      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
	    default:
	      return undefined
	  }
	};

	var errorCorrectionCode = {
		getBlocksCount: getBlocksCount,
		getTotalCodewordsCount: getTotalCodewordsCount
	};

	var EXP_TABLE = typedarrayBuffer.alloc(512);
	var LOG_TABLE = typedarrayBuffer.alloc(256)
	/**
	 * Precompute the log and anti-log tables for faster computation later
	 *
	 * For each possible value in the galois field 2^8, we will pre-compute
	 * the logarithm and anti-logarithm (exponential) of this value
	 *
	 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
	 */
	;(function initTables () {
	  var x = 1;
	  for (var i = 0; i < 255; i++) {
	    EXP_TABLE[i] = x;
	    LOG_TABLE[x] = i;

	    x <<= 1; // multiply by 2

	    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
	    // This means that when a number is 256 or larger, it should be XORed with 0x11D.
	    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
	      x ^= 0x11D;
	    }
	  }

	  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
	  // stay inside the bounds (because we will mainly use this table for the multiplication of
	  // two GF numbers, no more).
	  // @see {@link mul}
	  for (i = 255; i < 512; i++) {
	    EXP_TABLE[i] = EXP_TABLE[i - 255];
	  }
	}());

	/**
	 * Returns log value of n inside Galois Field
	 *
	 * @param  {Number} n
	 * @return {Number}
	 */
	var log = function log (n) {
	  if (n < 1) throw new Error('log(' + n + ')')
	  return LOG_TABLE[n]
	};

	/**
	 * Returns anti-log value of n inside Galois Field
	 *
	 * @param  {Number} n
	 * @return {Number}
	 */
	var exp = function exp (n) {
	  return EXP_TABLE[n]
	};

	/**
	 * Multiplies two number inside Galois Field
	 *
	 * @param  {Number} x
	 * @param  {Number} y
	 * @return {Number}
	 */
	var mul = function mul (x, y) {
	  if (x === 0 || y === 0) return 0

	  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
	  // @see {@link initTables}
	  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
	};

	var galoisField = {
		log: log,
		exp: exp,
		mul: mul
	};

	var polynomial = createCommonjsModule(function (module, exports) {
	/**
	 * Multiplies two polynomials inside Galois Field
	 *
	 * @param  {Buffer} p1 Polynomial
	 * @param  {Buffer} p2 Polynomial
	 * @return {Buffer}    Product of p1 and p2
	 */
	exports.mul = function mul (p1, p2) {
	  var coeff = typedarrayBuffer.alloc(p1.length + p2.length - 1);

	  for (var i = 0; i < p1.length; i++) {
	    for (var j = 0; j < p2.length; j++) {
	      coeff[i + j] ^= galoisField.mul(p1[i], p2[j]);
	    }
	  }

	  return coeff
	};

	/**
	 * Calculate the remainder of polynomials division
	 *
	 * @param  {Buffer} divident Polynomial
	 * @param  {Buffer} divisor  Polynomial
	 * @return {Buffer}          Remainder
	 */
	exports.mod = function mod (divident, divisor) {
	  var result = typedarrayBuffer.from(divident);

	  while ((result.length - divisor.length) >= 0) {
	    var coeff = result[0];

	    for (var i = 0; i < divisor.length; i++) {
	      result[i] ^= galoisField.mul(divisor[i], coeff);
	    }

	    // remove all zeros from buffer head
	    var offset = 0;
	    while (offset < result.length && result[offset] === 0) offset++;
	    result = result.slice(offset);
	  }

	  return result
	};

	/**
	 * Generate an irreducible generator polynomial of specified degree
	 * (used by Reed-Solomon encoder)
	 *
	 * @param  {Number} degree Degree of the generator polynomial
	 * @return {Buffer}        Buffer containing polynomial coefficients
	 */
	exports.generateECPolynomial = function generateECPolynomial (degree) {
	  var poly = typedarrayBuffer.from([1]);
	  for (var i = 0; i < degree; i++) {
	    poly = exports.mul(poly, [1, galoisField.exp(i)]);
	  }

	  return poly
	};
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

	var Buffer$2 = require$$0.Buffer;

	function ReedSolomonEncoder (degree) {
	  this.genPoly = undefined;
	  this.degree = degree;

	  if (this.degree) this.initialize(this.degree);
	}

	/**
	 * Initialize the encoder.
	 * The input param should correspond to the number of error correction codewords.
	 *
	 * @param  {Number} degree
	 */
	ReedSolomonEncoder.prototype.initialize = function initialize (degree) {
	  // create an irreducible generator polynomial
	  this.degree = degree;
	  this.genPoly = polynomial.generateECPolynomial(this.degree);
	};

	/**
	 * Encodes a chunk of data
	 *
	 * @param  {Buffer} data Buffer containing input data
	 * @return {Buffer}      Buffer containing encoded data
	 */
	ReedSolomonEncoder.prototype.encode = function encode (data) {
	  if (!this.genPoly) {
	    throw new Error('Encoder not initialized')
	  }

	  // Calculate EC for this data block
	  // extends data size to data+genPoly size
	  var pad = typedarrayBuffer.alloc(this.degree);
	  var paddedData = Buffer$2.concat([data, pad], data.length + this.degree);

	  // The error correction codewords are the remainder after dividing the data codewords
	  // by a generator polynomial
	  var remainder = polynomial.mod(paddedData, this.genPoly);

	  // return EC data blocks (last n byte, where n is the degree of genPoly)
	  // If coefficients number in remainder are less than genPoly degree,
	  // pad with 0s to the left to reach the needed number of coefficients
	  var start = this.degree - remainder.length;
	  if (start > 0) {
	    var buff = typedarrayBuffer.alloc(this.degree);
	    remainder.copy(buff, start);

	    return buff
	  }

	  return remainder
	};

	var reedSolomonEncoder = ReedSolomonEncoder;

	/**
	 * Check if QR Code version is valid
	 *
	 * @param  {Number}  version QR Code version
	 * @return {Boolean}         true if valid version, false otherwise
	 */
	var isValid = function isValid (version) {
	  return !isNaN(version) && version >= 1 && version <= 40
	};

	var versionCheck = {
		isValid: isValid
	};

	var numeric = '[0-9]+';
	var alphanumeric = '[A-Z $%*+\\-./:]+';
	var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
	  '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
	  '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
	  '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
	kanji = kanji.replace(/u/g, '\\u');

	var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';

	var KANJI = new RegExp(kanji, 'g');
	var BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
	var BYTE = new RegExp(byte, 'g');
	var NUMERIC = new RegExp(numeric, 'g');
	var ALPHANUMERIC = new RegExp(alphanumeric, 'g');

	var TEST_KANJI = new RegExp('^' + kanji + '$');
	var TEST_NUMERIC = new RegExp('^' + numeric + '$');
	var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

	var testKanji = function testKanji (str) {
	  return TEST_KANJI.test(str)
	};

	var testNumeric = function testNumeric (str) {
	  return TEST_NUMERIC.test(str)
	};

	var testAlphanumeric = function testAlphanumeric (str) {
	  return TEST_ALPHANUMERIC.test(str)
	};

	var regex = {
		KANJI: KANJI,
		BYTE_KANJI: BYTE_KANJI,
		BYTE: BYTE,
		NUMERIC: NUMERIC,
		ALPHANUMERIC: ALPHANUMERIC,
		testKanji: testKanji,
		testNumeric: testNumeric,
		testAlphanumeric: testAlphanumeric
	};

	var mode = createCommonjsModule(function (module, exports) {
	/**
	 * Numeric mode encodes data from the decimal digit set (0 - 9)
	 * (byte values 30HEX to 39HEX).
	 * Normally, 3 data characters are represented by 10 bits.
	 *
	 * @type {Object}
	 */
	exports.NUMERIC = {
	  id: 'Numeric',
	  bit: 1 << 0,
	  ccBits: [10, 12, 14]
	};

	/**
	 * Alphanumeric mode encodes data from a set of 45 characters,
	 * i.e. 10 numeric digits (0 - 9),
	 *      26 alphabetic characters (A - Z),
	 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
	 * Normally, two input characters are represented by 11 bits.
	 *
	 * @type {Object}
	 */
	exports.ALPHANUMERIC = {
	  id: 'Alphanumeric',
	  bit: 1 << 1,
	  ccBits: [9, 11, 13]
	};

	/**
	 * In byte mode, data is encoded at 8 bits per character.
	 *
	 * @type {Object}
	 */
	exports.BYTE = {
	  id: 'Byte',
	  bit: 1 << 2,
	  ccBits: [8, 16, 16]
	};

	/**
	 * The Kanji mode efficiently encodes Kanji characters in accordance with
	 * the Shift JIS system based on JIS X 0208.
	 * The Shift JIS values are shifted from the JIS X 0208 values.
	 * JIS X 0208 gives details of the shift coded representation.
	 * Each two-byte character value is compacted to a 13-bit binary codeword.
	 *
	 * @type {Object}
	 */
	exports.KANJI = {
	  id: 'Kanji',
	  bit: 1 << 3,
	  ccBits: [8, 10, 12]
	};

	/**
	 * Mixed mode will contain a sequences of data in a combination of any of
	 * the modes described above
	 *
	 * @type {Object}
	 */
	exports.MIXED = {
	  bit: -1
	};

	/**
	 * Returns the number of bits needed to store the data length
	 * according to QR Code specifications.
	 *
	 * @param  {Mode}   mode    Data mode
	 * @param  {Number} version QR Code version
	 * @return {Number}         Number of bits
	 */
	exports.getCharCountIndicator = function getCharCountIndicator (mode, version) {
	  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

	  if (!versionCheck.isValid(version)) {
	    throw new Error('Invalid version: ' + version)
	  }

	  if (version >= 1 && version < 10) return mode.ccBits[0]
	  else if (version < 27) return mode.ccBits[1]
	  return mode.ccBits[2]
	};

	/**
	 * Returns the most efficient mode to store the specified data
	 *
	 * @param  {String} dataStr Input data string
	 * @return {Mode}           Best mode
	 */
	exports.getBestModeForData = function getBestModeForData (dataStr) {
	  if (regex.testNumeric(dataStr)) return exports.NUMERIC
	  else if (regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
	  else if (regex.testKanji(dataStr)) return exports.KANJI
	  else return exports.BYTE
	};

	/**
	 * Return mode name as string
	 *
	 * @param {Mode} mode Mode object
	 * @returns {String}  Mode name
	 */
	exports.toString = function toString (mode) {
	  if (mode && mode.id) return mode.id
	  throw new Error('Invalid mode')
	};

	/**
	 * Check if input param is a valid mode object
	 *
	 * @param   {Mode}    mode Mode object
	 * @returns {Boolean} True if valid mode, false otherwise
	 */
	exports.isValid = function isValid (mode) {
	  return mode && mode.bit && mode.ccBits
	};

	/**
	 * Get mode object from its name
	 *
	 * @param   {String} string Mode name
	 * @returns {Mode}          Mode object
	 */
	function fromString (string) {
	  if (typeof string !== 'string') {
	    throw new Error('Param is not a string')
	  }

	  var lcStr = string.toLowerCase();

	  switch (lcStr) {
	    case 'numeric':
	      return exports.NUMERIC
	    case 'alphanumeric':
	      return exports.ALPHANUMERIC
	    case 'kanji':
	      return exports.KANJI
	    case 'byte':
	      return exports.BYTE
	    default:
	      throw new Error('Unknown mode: ' + string)
	  }
	}

	/**
	 * Returns mode from a value.
	 * If value is not a valid mode, returns defaultValue
	 *
	 * @param  {Mode|String} value        Encoding mode
	 * @param  {Mode}        defaultValue Fallback value
	 * @return {Mode}                     Encoding mode
	 */
	exports.from = function from (value, defaultValue) {
	  if (exports.isValid(value)) {
	    return value
	  }

	  try {
	    return fromString(value)
	  } catch (e) {
	    return defaultValue
	  }
	};
	});

	var version = createCommonjsModule(function (module, exports) {
	// Generator polynomial used to encode version information
	var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
	var G18_BCH = utils.getBCHDigit(G18);

	function getBestVersionForDataLength (mode, length, errorCorrectionLevel) {
	  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
	    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
	      return currentVersion
	    }
	  }

	  return undefined
	}

	function getReservedBitsCount (mode$1, version) {
	  // Character count indicator + mode indicator bits
	  return mode.getCharCountIndicator(mode$1, version) + 4
	}

	function getTotalBitsFromDataArray (segments, version) {
	  var totalBits = 0;

	  segments.forEach(function (data) {
	    var reservedBits = getReservedBitsCount(data.mode, version);
	    totalBits += reservedBits + data.getBitsLength();
	  });

	  return totalBits
	}

	function getBestVersionForMixedData (segments, errorCorrectionLevel) {
	  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
	    var length = getTotalBitsFromDataArray(segments, currentVersion);
	    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode.MIXED)) {
	      return currentVersion
	    }
	  }

	  return undefined
	}

	/**
	 * Returns version number from a value.
	 * If value is not a valid version, returns defaultValue
	 *
	 * @param  {Number|String} value        QR Code version
	 * @param  {Number}        defaultValue Fallback value
	 * @return {Number}                     QR Code version number
	 */
	exports.from = function from (value, defaultValue) {
	  if (versionCheck.isValid(value)) {
	    return parseInt(value, 10)
	  }

	  return defaultValue
	};

	/**
	 * Returns how much data can be stored with the specified QR code version
	 * and error correction level
	 *
	 * @param  {Number} version              QR Code version (1-40)
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @param  {Mode}   mode                 Data mode
	 * @return {Number}                      Quantity of storable data
	 */
	exports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode$1) {
	  if (!versionCheck.isValid(version)) {
	    throw new Error('Invalid QR Code version')
	  }

	  // Use Byte mode as default
	  if (typeof mode$1 === 'undefined') mode$1 = mode.BYTE;

	  // Total codewords for this QR code version (Data + Error correction)
	  var totalCodewords = utils.getSymbolTotalCodewords(version);

	  // Total number of error correction codewords
	  var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

	  // Total number of data codewords
	  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

	  if (mode$1 === mode.MIXED) return dataTotalCodewordsBits

	  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode$1, version);

	  // Return max number of storable codewords
	  switch (mode$1) {
	    case mode.NUMERIC:
	      return Math.floor((usableBits / 10) * 3)

	    case mode.ALPHANUMERIC:
	      return Math.floor((usableBits / 11) * 2)

	    case mode.KANJI:
	      return Math.floor(usableBits / 13)

	    case mode.BYTE:
	    default:
	      return Math.floor(usableBits / 8)
	  }
	};

	/**
	 * Returns the minimum version needed to contain the amount of data
	 *
	 * @param  {Segment} data                    Segment of data
	 * @param  {Number} [errorCorrectionLevel=H] Error correction level
	 * @param  {Mode} mode                       Data mode
	 * @return {Number}                          QR Code version
	 */
	exports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel$1) {
	  var seg;

	  var ecl = errorCorrectionLevel.from(errorCorrectionLevel$1, errorCorrectionLevel.M);

	  if (isarray(data)) {
	    if (data.length > 1) {
	      return getBestVersionForMixedData(data, ecl)
	    }

	    if (data.length === 0) {
	      return 1
	    }

	    seg = data[0];
	  } else {
	    seg = data;
	  }

	  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
	};

	/**
	 * Returns version information with relative error correction bits
	 *
	 * The version information is included in QR Code symbols of version 7 or larger.
	 * It consists of an 18-bit sequence containing 6 data bits,
	 * with 12 error correction bits calculated using the (18, 6) Golay code.
	 *
	 * @param  {Number} version QR Code version
	 * @return {Number}         Encoded version info bits
	 */
	exports.getEncodedBits = function getEncodedBits (version) {
	  if (!versionCheck.isValid(version) || version < 7) {
	    throw new Error('Invalid QR Code version')
	  }

	  var d = version << 12;

	  while (utils.getBCHDigit(d) - G18_BCH >= 0) {
	    d ^= (G18 << (utils.getBCHDigit(d) - G18_BCH));
	  }

	  return (version << 12) | d
	};
	});

	var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
	var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
	var G15_BCH = utils.getBCHDigit(G15);

	/**
	 * Returns format information with relative error correction bits
	 *
	 * The format information is a 15-bit sequence containing 5 data bits,
	 * with 10 error correction bits calculated using the (15, 5) BCH code.
	 *
	 * @param  {Number} errorCorrectionLevel Error correction level
	 * @param  {Number} mask                 Mask pattern
	 * @return {Number}                      Encoded format information bits
	 */
	var getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {
	  var data = ((errorCorrectionLevel.bit << 3) | mask);
	  var d = data << 10;

	  while (utils.getBCHDigit(d) - G15_BCH >= 0) {
	    d ^= (G15 << (utils.getBCHDigit(d) - G15_BCH));
	  }

	  // xor final data with mask pattern in order to ensure that
	  // no combination of Error Correction Level and data mask pattern
	  // will result in an all-zero data string
	  return ((data << 10) | d) ^ G15_MASK
	};

	var formatInfo = {
		getEncodedBits: getEncodedBits
	};

	function NumericData (data) {
	  this.mode = mode.NUMERIC;
	  this.data = data.toString();
	}

	NumericData.getBitsLength = function getBitsLength (length) {
	  return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
	};

	NumericData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	NumericData.prototype.getBitsLength = function getBitsLength () {
	  return NumericData.getBitsLength(this.data.length)
	};

	NumericData.prototype.write = function write (bitBuffer) {
	  var i, group, value;

	  // The input data string is divided into groups of three digits,
	  // and each group is converted to its 10-bit binary equivalent.
	  for (i = 0; i + 3 <= this.data.length; i += 3) {
	    group = this.data.substr(i, 3);
	    value = parseInt(group, 10);

	    bitBuffer.put(value, 10);
	  }

	  // If the number of input digits is not an exact multiple of three,
	  // the final one or two digits are converted to 4 or 7 bits respectively.
	  var remainingNum = this.data.length - i;
	  if (remainingNum > 0) {
	    group = this.data.substr(i);
	    value = parseInt(group, 10);

	    bitBuffer.put(value, remainingNum * 3 + 1);
	  }
	};

	var numericData = NumericData;

	/**
	 * Array of characters available in alphanumeric mode
	 *
	 * As per QR Code specification, to each character
	 * is assigned a value from 0 to 44 which in this case coincides
	 * with the array index
	 *
	 * @type {Array}
	 */
	var ALPHA_NUM_CHARS = [
	  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
	  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	  ' ', '$', '%', '*', '+', '-', '.', '/', ':'
	];

	function AlphanumericData (data) {
	  this.mode = mode.ALPHANUMERIC;
	  this.data = data;
	}

	AlphanumericData.getBitsLength = function getBitsLength (length) {
	  return 11 * Math.floor(length / 2) + 6 * (length % 2)
	};

	AlphanumericData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	AlphanumericData.prototype.getBitsLength = function getBitsLength () {
	  return AlphanumericData.getBitsLength(this.data.length)
	};

	AlphanumericData.prototype.write = function write (bitBuffer) {
	  var i;

	  // Input data characters are divided into groups of two characters
	  // and encoded as 11-bit binary codes.
	  for (i = 0; i + 2 <= this.data.length; i += 2) {
	    // The character value of the first character is multiplied by 45
	    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

	    // The character value of the second digit is added to the product
	    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

	    // The sum is then stored as 11-bit binary number
	    bitBuffer.put(value, 11);
	  }

	  // If the number of input data characters is not a multiple of two,
	  // the character value of the final character is encoded as a 6-bit binary number.
	  if (this.data.length % 2) {
	    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
	  }
	};

	var alphanumericData = AlphanumericData;

	function ByteData (data) {
	  this.mode = mode.BYTE;
	  this.data = typedarrayBuffer.from(data);
	}

	ByteData.getBitsLength = function getBitsLength (length) {
	  return length * 8
	};

	ByteData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	ByteData.prototype.getBitsLength = function getBitsLength () {
	  return ByteData.getBitsLength(this.data.length)
	};

	ByteData.prototype.write = function (bitBuffer) {
	  for (var i = 0, l = this.data.length; i < l; i++) {
	    bitBuffer.put(this.data[i], 8);
	  }
	};

	var byteData = ByteData;

	function KanjiData (data) {
	  this.mode = mode.KANJI;
	  this.data = data;
	}

	KanjiData.getBitsLength = function getBitsLength (length) {
	  return length * 13
	};

	KanjiData.prototype.getLength = function getLength () {
	  return this.data.length
	};

	KanjiData.prototype.getBitsLength = function getBitsLength () {
	  return KanjiData.getBitsLength(this.data.length)
	};

	KanjiData.prototype.write = function (bitBuffer) {
	  var i;

	  // In the Shift JIS system, Kanji characters are represented by a two byte combination.
	  // These byte values are shifted from the JIS X 0208 values.
	  // JIS X 0208 gives details of the shift coded representation.
	  for (i = 0; i < this.data.length; i++) {
	    var value = utils.toSJIS(this.data[i]);

	    // For characters with Shift JIS values from 0x8140 to 0x9FFC:
	    if (value >= 0x8140 && value <= 0x9FFC) {
	      // Subtract 0x8140 from Shift JIS value
	      value -= 0x8140;

	    // For characters with Shift JIS values from 0xE040 to 0xEBBF
	    } else if (value >= 0xE040 && value <= 0xEBBF) {
	      // Subtract 0xC140 from Shift JIS value
	      value -= 0xC140;
	    } else {
	      throw new Error(
	        'Invalid SJIS character: ' + this.data[i] + '\n' +
	        'Make sure your charset is UTF-8')
	    }

	    // Multiply most significant byte of result by 0xC0
	    // and add least significant byte to product
	    value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff);

	    // Convert result to a 13-bit binary string
	    bitBuffer.put(value, 13);
	  }
	};

	var kanjiData = KanjiData;

	var dijkstra_1 = createCommonjsModule(function (module) {

	/******************************************************************************
	 * Created 2008-08-19.
	 *
	 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
	 *
	 * Copyright (C) 2008
	 *   Wyatt Baldwin <self@wyattbaldwin.com>
	 *   All rights reserved
	 *
	 * Licensed under the MIT license.
	 *
	 *   http://www.opensource.org/licenses/mit-license.php
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *****************************************************************************/
	var dijkstra = {
	  single_source_shortest_paths: function(graph, s, d) {
	    // Predecessor map for each node that has been encountered.
	    // node ID => predecessor node ID
	    var predecessors = {};

	    // Costs of shortest paths from s to all nodes encountered.
	    // node ID => cost
	    var costs = {};
	    costs[s] = 0;

	    // Costs of shortest paths from s to all nodes encountered; differs from
	    // `costs` in that it provides easy access to the node that currently has
	    // the known shortest path from s.
	    // XXX: Do we actually need both `costs` and `open`?
	    var open = dijkstra.PriorityQueue.make();
	    open.push(s, 0);

	    var closest,
	        u, v,
	        cost_of_s_to_u,
	        adjacent_nodes,
	        cost_of_e,
	        cost_of_s_to_u_plus_cost_of_e,
	        cost_of_s_to_v,
	        first_visit;
	    while (!open.empty()) {
	      // In the nodes remaining in graph that have a known cost from s,
	      // find the node, u, that currently has the shortest path from s.
	      closest = open.pop();
	      u = closest.value;
	      cost_of_s_to_u = closest.cost;

	      // Get nodes adjacent to u...
	      adjacent_nodes = graph[u] || {};

	      // ...and explore the edges that connect u to those nodes, updating
	      // the cost of the shortest paths to any or all of those nodes as
	      // necessary. v is the node across the current edge from u.
	      for (v in adjacent_nodes) {
	        if (adjacent_nodes.hasOwnProperty(v)) {
	          // Get the cost of the edge running from u to v.
	          cost_of_e = adjacent_nodes[v];

	          // Cost of s to u plus the cost of u to v across e--this is *a*
	          // cost from s to v that may or may not be less than the current
	          // known cost to v.
	          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

	          // If we haven't visited v yet OR if the current known cost from s to
	          // v is greater than the new cost we just found (cost of s to u plus
	          // cost of u to v across e), update v's cost in the cost list and
	          // update v's predecessor in the predecessor list (it's now u).
	          cost_of_s_to_v = costs[v];
	          first_visit = (typeof costs[v] === 'undefined');
	          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
	            costs[v] = cost_of_s_to_u_plus_cost_of_e;
	            open.push(v, cost_of_s_to_u_plus_cost_of_e);
	            predecessors[v] = u;
	          }
	        }
	      }
	    }

	    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
	      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
	      throw new Error(msg);
	    }

	    return predecessors;
	  },

	  extract_shortest_path_from_predecessor_list: function(predecessors, d) {
	    var nodes = [];
	    var u = d;
	    while (u) {
	      nodes.push(u);
	      predecessors[u];
	      u = predecessors[u];
	    }
	    nodes.reverse();
	    return nodes;
	  },

	  find_path: function(graph, s, d) {
	    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
	    return dijkstra.extract_shortest_path_from_predecessor_list(
	      predecessors, d);
	  },

	  /**
	   * A very naive priority queue implementation.
	   */
	  PriorityQueue: {
	    make: function (opts) {
	      var T = dijkstra.PriorityQueue,
	          t = {},
	          key;
	      opts = opts || {};
	      for (key in T) {
	        if (T.hasOwnProperty(key)) {
	          t[key] = T[key];
	        }
	      }
	      t.queue = [];
	      t.sorter = opts.sorter || T.default_sorter;
	      return t;
	    },

	    default_sorter: function (a, b) {
	      return a.cost - b.cost;
	    },

	    /**
	     * Add a new item to the queue and ensure the highest priority element
	     * is at the front of the queue.
	     */
	    push: function (value, cost) {
	      var item = {value: value, cost: cost};
	      this.queue.push(item);
	      this.queue.sort(this.sorter);
	    },

	    /**
	     * Return the highest priority element in the queue.
	     */
	    pop: function () {
	      return this.queue.shift();
	    },

	    empty: function () {
	      return this.queue.length === 0;
	    }
	  }
	};


	// node.js module exports
	{
	  module.exports = dijkstra;
	}
	});

	var segments = createCommonjsModule(function (module, exports) {
	/**
	 * Returns UTF8 byte length
	 *
	 * @param  {String} str Input string
	 * @return {Number}     Number of byte
	 */
	function getStringByteLength (str) {
	  return unescape(encodeURIComponent(str)).length
	}

	/**
	 * Get a list of segments of the specified mode
	 * from a string
	 *
	 * @param  {Mode}   mode Segment mode
	 * @param  {String} str  String to process
	 * @return {Array}       Array of object with segments data
	 */
	function getSegments (regex, mode, str) {
	  var segments = [];
	  var result;

	  while ((result = regex.exec(str)) !== null) {
	    segments.push({
	      data: result[0],
	      index: result.index,
	      mode: mode,
	      length: result[0].length
	    });
	  }

	  return segments
	}

	/**
	 * Extracts a series of segments with the appropriate
	 * modes from a string
	 *
	 * @param  {String} dataStr Input string
	 * @return {Array}          Array of object with segments data
	 */
	function getSegmentsFromString (dataStr) {
	  var numSegs = getSegments(regex.NUMERIC, mode.NUMERIC, dataStr);
	  var alphaNumSegs = getSegments(regex.ALPHANUMERIC, mode.ALPHANUMERIC, dataStr);
	  var byteSegs;
	  var kanjiSegs;

	  if (utils.isKanjiModeEnabled()) {
	    byteSegs = getSegments(regex.BYTE, mode.BYTE, dataStr);
	    kanjiSegs = getSegments(regex.KANJI, mode.KANJI, dataStr);
	  } else {
	    byteSegs = getSegments(regex.BYTE_KANJI, mode.BYTE, dataStr);
	    kanjiSegs = [];
	  }

	  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

	  return segs
	    .sort(function (s1, s2) {
	      return s1.index - s2.index
	    })
	    .map(function (obj) {
	      return {
	        data: obj.data,
	        mode: obj.mode,
	        length: obj.length
	      }
	    })
	}

	/**
	 * Returns how many bits are needed to encode a string of
	 * specified length with the specified mode
	 *
	 * @param  {Number} length String length
	 * @param  {Mode} mode     Segment mode
	 * @return {Number}        Bit length
	 */
	function getSegmentBitsLength (length, mode$1) {
	  switch (mode$1) {
	    case mode.NUMERIC:
	      return numericData.getBitsLength(length)
	    case mode.ALPHANUMERIC:
	      return alphanumericData.getBitsLength(length)
	    case mode.KANJI:
	      return kanjiData.getBitsLength(length)
	    case mode.BYTE:
	      return byteData.getBitsLength(length)
	  }
	}

	/**
	 * Merges adjacent segments which have the same mode
	 *
	 * @param  {Array} segs Array of object with segments data
	 * @return {Array}      Array of object with segments data
	 */
	function mergeSegments (segs) {
	  return segs.reduce(function (acc, curr) {
	    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
	    if (prevSeg && prevSeg.mode === curr.mode) {
	      acc[acc.length - 1].data += curr.data;
	      return acc
	    }

	    acc.push(curr);
	    return acc
	  }, [])
	}

	/**
	 * Generates a list of all possible nodes combination which
	 * will be used to build a segments graph.
	 *
	 * Nodes are divided by groups. Each group will contain a list of all the modes
	 * in which is possible to encode the given text.
	 *
	 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
	 * The group for '12345' will contain then 3 objects, one for each
	 * possible encoding mode.
	 *
	 * Each node represents a possible segment.
	 *
	 * @param  {Array} segs Array of object with segments data
	 * @return {Array}      Array of object with segments data
	 */
	function buildNodes (segs) {
	  var nodes = [];
	  for (var i = 0; i < segs.length; i++) {
	    var seg = segs[i];

	    switch (seg.mode) {
	      case mode.NUMERIC:
	        nodes.push([seg,
	          { data: seg.data, mode: mode.ALPHANUMERIC, length: seg.length },
	          { data: seg.data, mode: mode.BYTE, length: seg.length }
	        ]);
	        break
	      case mode.ALPHANUMERIC:
	        nodes.push([seg,
	          { data: seg.data, mode: mode.BYTE, length: seg.length }
	        ]);
	        break
	      case mode.KANJI:
	        nodes.push([seg,
	          { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
	        ]);
	        break
	      case mode.BYTE:
	        nodes.push([
	          { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
	        ]);
	    }
	  }

	  return nodes
	}

	/**
	 * Builds a graph from a list of nodes.
	 * All segments in each node group will be connected with all the segments of
	 * the next group and so on.
	 *
	 * At each connection will be assigned a weight depending on the
	 * segment's byte length.
	 *
	 * @param  {Array} nodes    Array of object with segments data
	 * @param  {Number} version QR Code version
	 * @return {Object}         Graph of all possible segments
	 */
	function buildGraph (nodes, version) {
	  var table = {};
	  var graph = {'start': {}};
	  var prevNodeIds = ['start'];

	  for (var i = 0; i < nodes.length; i++) {
	    var nodeGroup = nodes[i];
	    var currentNodeIds = [];

	    for (var j = 0; j < nodeGroup.length; j++) {
	      var node = nodeGroup[j];
	      var key = '' + i + j;

	      currentNodeIds.push(key);
	      table[key] = { node: node, lastCount: 0 };
	      graph[key] = {};

	      for (var n = 0; n < prevNodeIds.length; n++) {
	        var prevNodeId = prevNodeIds[n];

	        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
	          graph[prevNodeId][key] =
	            getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
	            getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

	          table[prevNodeId].lastCount += node.length;
	        } else {
	          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

	          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
	            4 + mode.getCharCountIndicator(node.mode, version); // switch cost
	        }
	      }
	    }

	    prevNodeIds = currentNodeIds;
	  }

	  for (n = 0; n < prevNodeIds.length; n++) {
	    graph[prevNodeIds[n]]['end'] = 0;
	  }

	  return { map: graph, table: table }
	}

	/**
	 * Builds a segment from a specified data and mode.
	 * If a mode is not specified, the more suitable will be used.
	 *
	 * @param  {String} data             Input data
	 * @param  {Mode | String} modesHint Data mode
	 * @return {Segment}                 Segment
	 */
	function buildSingleSegment (data, modesHint) {
	  var mode$1;
	  var bestMode = mode.getBestModeForData(data);

	  mode$1 = mode.from(modesHint, bestMode);

	  // Make sure data can be encoded
	  if (mode$1 !== mode.BYTE && mode$1.bit < bestMode.bit) {
	    throw new Error('"' + data + '"' +
	      ' cannot be encoded with mode ' + mode.toString(mode$1) +
	      '.\n Suggested mode is: ' + mode.toString(bestMode))
	  }

	  // Use Mode.BYTE if Kanji support is disabled
	  if (mode$1 === mode.KANJI && !utils.isKanjiModeEnabled()) {
	    mode$1 = mode.BYTE;
	  }

	  switch (mode$1) {
	    case mode.NUMERIC:
	      return new numericData(data)

	    case mode.ALPHANUMERIC:
	      return new alphanumericData(data)

	    case mode.KANJI:
	      return new kanjiData(data)

	    case mode.BYTE:
	      return new byteData(data)
	  }
	}

	/**
	 * Builds a list of segments from an array.
	 * Array can contain Strings or Objects with segment's info.
	 *
	 * For each item which is a string, will be generated a segment with the given
	 * string and the more appropriate encoding mode.
	 *
	 * For each item which is an object, will be generated a segment with the given
	 * data and mode.
	 * Objects must contain at least the property "data".
	 * If property "mode" is not present, the more suitable mode will be used.
	 *
	 * @param  {Array} array Array of objects with segments data
	 * @return {Array}       Array of Segments
	 */
	exports.fromArray = function fromArray (array) {
	  return array.reduce(function (acc, seg) {
	    if (typeof seg === 'string') {
	      acc.push(buildSingleSegment(seg, null));
	    } else if (seg.data) {
	      acc.push(buildSingleSegment(seg.data, seg.mode));
	    }

	    return acc
	  }, [])
	};

	/**
	 * Builds an optimized sequence of segments from a string,
	 * which will produce the shortest possible bitstream.
	 *
	 * @param  {String} data    Input string
	 * @param  {Number} version QR Code version
	 * @return {Array}          Array of segments
	 */
	exports.fromString = function fromString (data, version) {
	  var segs = getSegmentsFromString(data, utils.isKanjiModeEnabled());

	  var nodes = buildNodes(segs);
	  var graph = buildGraph(nodes, version);
	  var path = dijkstra_1.find_path(graph.map, 'start', 'end');

	  var optimizedSegs = [];
	  for (var i = 1; i < path.length - 1; i++) {
	    optimizedSegs.push(graph.table[path[i]].node);
	  }

	  return exports.fromArray(mergeSegments(optimizedSegs))
	};

	/**
	 * Splits a string in various segments with the modes which
	 * best represent their content.
	 * The produced segments are far from being optimized.
	 * The output of this function is only used to estimate a QR Code version
	 * which may contain the data.
	 *
	 * @param  {string} data Input string
	 * @return {Array}       Array of segments
	 */
	exports.rawSplit = function rawSplit (data) {
	  return exports.fromArray(
	    getSegmentsFromString(data, utils.isKanjiModeEnabled())
	  )
	};
	});

	/**
	 * QRCode for JavaScript
	 *
	 * modified by Ryan Day for nodejs support
	 * Copyright (c) 2011 Ryan Day
	 *
	 * Licensed under the MIT license:
	 *   http://www.opensource.org/licenses/mit-license.php
	 *
	//---------------------------------------------------------------------
	// QRCode for JavaScript
	//
	// Copyright (c) 2009 Kazuhiko Arase
	//
	// URL: http://www.d-project.com/
	//
	// Licensed under the MIT license:
	//   http://www.opensource.org/licenses/mit-license.php
	//
	// The word "QR Code" is registered trademark of
	// DENSO WAVE INCORPORATED
	//   http://www.denso-wave.com/qrcode/faqpatent-e.html
	//
	//---------------------------------------------------------------------
	*/

	/**
	 * Add finder patterns bits to matrix
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupFinderPattern (matrix, version) {
	  var size = matrix.size;
	  var pos = finderPattern.getPositions(version);

	  for (var i = 0; i < pos.length; i++) {
	    var row = pos[i][0];
	    var col = pos[i][1];

	    for (var r = -1; r <= 7; r++) {
	      if (row + r <= -1 || size <= row + r) continue

	      for (var c = -1; c <= 7; c++) {
	        if (col + c <= -1 || size <= col + c) continue

	        if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
	          (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
	          (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
	          matrix.set(row + r, col + c, true, true);
	        } else {
	          matrix.set(row + r, col + c, false, true);
	        }
	      }
	    }
	  }
	}

	/**
	 * Add timing pattern bits to matrix
	 *
	 * Note: this function must be called before {@link setupAlignmentPattern}
	 *
	 * @param  {BitMatrix} matrix Modules matrix
	 */
	function setupTimingPattern (matrix) {
	  var size = matrix.size;

	  for (var r = 8; r < size - 8; r++) {
	    var value = r % 2 === 0;
	    matrix.set(r, 6, value, true);
	    matrix.set(6, r, value, true);
	  }
	}

	/**
	 * Add alignment patterns bits to matrix
	 *
	 * Note: this function must be called after {@link setupTimingPattern}
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupAlignmentPattern (matrix, version) {
	  var pos = alignmentPattern.getPositions(version);

	  for (var i = 0; i < pos.length; i++) {
	    var row = pos[i][0];
	    var col = pos[i][1];

	    for (var r = -2; r <= 2; r++) {
	      for (var c = -2; c <= 2; c++) {
	        if (r === -2 || r === 2 || c === -2 || c === 2 ||
	          (r === 0 && c === 0)) {
	          matrix.set(row + r, col + c, true, true);
	        } else {
	          matrix.set(row + r, col + c, false, true);
	        }
	      }
	    }
	  }
	}

	/**
	 * Add version info bits to matrix
	 *
	 * @param  {BitMatrix} matrix  Modules matrix
	 * @param  {Number}    version QR Code version
	 */
	function setupVersionInfo (matrix, version$1) {
	  var size = matrix.size;
	  var bits = version.getEncodedBits(version$1);
	  var row, col, mod;

	  for (var i = 0; i < 18; i++) {
	    row = Math.floor(i / 3);
	    col = i % 3 + size - 8 - 3;
	    mod = ((bits >> i) & 1) === 1;

	    matrix.set(row, col, mod, true);
	    matrix.set(col, row, mod, true);
	  }
	}

	/**
	 * Add format info bits to matrix
	 *
	 * @param  {BitMatrix} matrix               Modules matrix
	 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
	 * @param  {Number}    maskPattern          Mask pattern reference value
	 */
	function setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {
	  var size = matrix.size;
	  var bits = formatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
	  var i, mod;

	  for (i = 0; i < 15; i++) {
	    mod = ((bits >> i) & 1) === 1;

	    // vertical
	    if (i < 6) {
	      matrix.set(i, 8, mod, true);
	    } else if (i < 8) {
	      matrix.set(i + 1, 8, mod, true);
	    } else {
	      matrix.set(size - 15 + i, 8, mod, true);
	    }

	    // horizontal
	    if (i < 8) {
	      matrix.set(8, size - i - 1, mod, true);
	    } else if (i < 9) {
	      matrix.set(8, 15 - i - 1 + 1, mod, true);
	    } else {
	      matrix.set(8, 15 - i - 1, mod, true);
	    }
	  }

	  // fixed module
	  matrix.set(size - 8, 8, 1, true);
	}

	/**
	 * Add encoded data bits to matrix
	 *
	 * @param  {BitMatrix} matrix Modules matrix
	 * @param  {Buffer}    data   Data codewords
	 */
	function setupData (matrix, data) {
	  var size = matrix.size;
	  var inc = -1;
	  var row = size - 1;
	  var bitIndex = 7;
	  var byteIndex = 0;

	  for (var col = size - 1; col > 0; col -= 2) {
	    if (col === 6) col--;

	    while (true) {
	      for (var c = 0; c < 2; c++) {
	        if (!matrix.isReserved(row, col - c)) {
	          var dark = false;

	          if (byteIndex < data.length) {
	            dark = (((data[byteIndex] >>> bitIndex) & 1) === 1);
	          }

	          matrix.set(row, col - c, dark);
	          bitIndex--;

	          if (bitIndex === -1) {
	            byteIndex++;
	            bitIndex = 7;
	          }
	        }
	      }

	      row += inc;

	      if (row < 0 || size <= row) {
	        row -= inc;
	        inc = -inc;
	        break
	      }
	    }
	  }
	}

	/**
	 * Create encoded codewords from data input
	 *
	 * @param  {Number}   version              QR Code version
	 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
	 * @param  {ByteData} data                 Data input
	 * @return {Buffer}                        Buffer containing encoded codewords
	 */
	function createData (version, errorCorrectionLevel, segments) {
	  // Prepare data buffer
	  var buffer = new bitBuffer();

	  segments.forEach(function (data) {
	    // prefix data with mode indicator (4 bits)
	    buffer.put(data.mode.bit, 4);

	    // Prefix data with character count indicator.
	    // The character count indicator is a string of bits that represents the
	    // number of characters that are being encoded.
	    // The character count indicator must be placed after the mode indicator
	    // and must be a certain number of bits long, depending on the QR version
	    // and data mode
	    // @see {@link Mode.getCharCountIndicator}.
	    buffer.put(data.getLength(), mode.getCharCountIndicator(data.mode, version));

	    // add binary data sequence to buffer
	    data.write(buffer);
	  });

	  // Calculate required number of bits
	  var totalCodewords = utils.getSymbolTotalCodewords(version);
	  var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);
	  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

	  // Add a terminator.
	  // If the bit string is shorter than the total number of required bits,
	  // a terminator of up to four 0s must be added to the right side of the string.
	  // If the bit string is more than four bits shorter than the required number of bits,
	  // add four 0s to the end.
	  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
	    buffer.put(0, 4);
	  }

	  // If the bit string is fewer than four bits shorter, add only the number of 0s that
	  // are needed to reach the required number of bits.

	  // After adding the terminator, if the number of bits in the string is not a multiple of 8,
	  // pad the string on the right with 0s to make the string's length a multiple of 8.
	  while (buffer.getLengthInBits() % 8 !== 0) {
	    buffer.putBit(0);
	  }

	  // Add pad bytes if the string is still shorter than the total number of required bits.
	  // Extend the buffer to fill the data capacity of the symbol corresponding to
	  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
	  // and 00010001 (0x11) alternately.
	  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
	  for (var i = 0; i < remainingByte; i++) {
	    buffer.put(i % 2 ? 0x11 : 0xEC, 8);
	  }

	  return createCodewords(buffer, version, errorCorrectionLevel)
	}

	/**
	 * Encode input data with Reed-Solomon and return codewords with
	 * relative error correction bits
	 *
	 * @param  {BitBuffer} bitBuffer            Data to encode
	 * @param  {Number}    version              QR Code version
	 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
	 * @return {Buffer}                         Buffer containing encoded codewords
	 */
	function createCodewords (bitBuffer, version, errorCorrectionLevel) {
	  // Total codewords for this QR code version (Data + Error correction)
	  var totalCodewords = utils.getSymbolTotalCodewords(version);

	  // Total number of error correction codewords
	  var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

	  // Total number of data codewords
	  var dataTotalCodewords = totalCodewords - ecTotalCodewords;

	  // Total number of blocks
	  var ecTotalBlocks = errorCorrectionCode.getBlocksCount(version, errorCorrectionLevel);

	  // Calculate how many blocks each group should contain
	  var blocksInGroup2 = totalCodewords % ecTotalBlocks;
	  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

	  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

	  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
	  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

	  // Number of EC codewords is the same for both groups
	  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

	  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
	  var rs = new reedSolomonEncoder(ecCount);

	  var offset = 0;
	  var dcData = new Array(ecTotalBlocks);
	  var ecData = new Array(ecTotalBlocks);
	  var maxDataSize = 0;
	  var buffer = typedarrayBuffer.from(bitBuffer.buffer);

	  // Divide the buffer into the required number of blocks
	  for (var b = 0; b < ecTotalBlocks; b++) {
	    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

	    // extract a block of data from buffer
	    dcData[b] = buffer.slice(offset, offset + dataSize);

	    // Calculate EC codewords for this data block
	    ecData[b] = rs.encode(dcData[b]);

	    offset += dataSize;
	    maxDataSize = Math.max(maxDataSize, dataSize);
	  }

	  // Create final data
	  // Interleave the data and error correction codewords from each block
	  var data = typedarrayBuffer.alloc(totalCodewords);
	  var index = 0;
	  var i, r;

	  // Add data codewords
	  for (i = 0; i < maxDataSize; i++) {
	    for (r = 0; r < ecTotalBlocks; r++) {
	      if (i < dcData[r].length) {
	        data[index++] = dcData[r][i];
	      }
	    }
	  }

	  // Apped EC codewords
	  for (i = 0; i < ecCount; i++) {
	    for (r = 0; r < ecTotalBlocks; r++) {
	      data[index++] = ecData[r][i];
	    }
	  }

	  return data
	}

	/**
	 * Build QR Code symbol
	 *
	 * @param  {String} data                 Input string
	 * @param  {Number} version              QR Code version
	 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
	 * @param  {MaskPattern} maskPattern     Mask pattern
	 * @return {Object}                      Object containing symbol data
	 */
	function createSymbol (data, version$1, errorCorrectionLevel, maskPattern$1) {
	  var segments$1;

	  if (isarray(data)) {
	    segments$1 = segments.fromArray(data);
	  } else if (typeof data === 'string') {
	    var estimatedVersion = version$1;

	    if (!estimatedVersion) {
	      var rawSegments = segments.rawSplit(data);

	      // Estimate best version that can contain raw splitted segments
	      estimatedVersion = version.getBestVersionForData(rawSegments,
	        errorCorrectionLevel);
	    }

	    // Build optimized segments
	    // If estimated version is undefined, try with the highest version
	    segments$1 = segments.fromString(data, estimatedVersion || 40);
	  } else {
	    throw new Error('Invalid data')
	  }

	  // Get the min version that can contain data
	  var bestVersion = version.getBestVersionForData(segments$1,
	      errorCorrectionLevel);

	  // If no version is found, data cannot be stored
	  if (!bestVersion) {
	    throw new Error('The amount of data is too big to be stored in a QR Code')
	  }

	  // If not specified, use min version as default
	  if (!version$1) {
	    version$1 = bestVersion;

	  // Check if the specified version can contain the data
	  } else if (version$1 < bestVersion) {
	    throw new Error('\n' +
	      'The chosen QR Code version cannot contain this amount of data.\n' +
	      'Minimum version required to store current data is: ' + bestVersion + '.\n'
	    )
	  }

	  var dataBits = createData(version$1, errorCorrectionLevel, segments$1);

	  // Allocate matrix buffer
	  var moduleCount = utils.getSymbolSize(version$1);
	  var modules = new bitMatrix(moduleCount);

	  // Add function modules
	  setupFinderPattern(modules, version$1);
	  setupTimingPattern(modules);
	  setupAlignmentPattern(modules, version$1);

	  // Add temporary dummy bits for format info just to set them as reserved.
	  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
	  // since the masking operation must be performed only on the encoding region.
	  // These blocks will be replaced with correct values later in code.
	  setupFormatInfo(modules, errorCorrectionLevel, 0);

	  if (version$1 >= 7) {
	    setupVersionInfo(modules, version$1);
	  }

	  // Add data codewords
	  setupData(modules, dataBits);

	  if (isNaN(maskPattern$1)) {
	    // Find best mask pattern
	    maskPattern$1 = maskPattern.getBestMask(modules,
	      setupFormatInfo.bind(null, modules, errorCorrectionLevel));
	  }

	  // Apply mask pattern
	  maskPattern.applyMask(maskPattern$1, modules);

	  // Replace format info bits with correct values
	  setupFormatInfo(modules, errorCorrectionLevel, maskPattern$1);

	  return {
	    modules: modules,
	    version: version$1,
	    errorCorrectionLevel: errorCorrectionLevel,
	    maskPattern: maskPattern$1,
	    segments: segments$1
	  }
	}

	/**
	 * QR Code
	 *
	 * @param {String | Array} data                 Input data
	 * @param {Object} options                      Optional configurations
	 * @param {Number} options.version              QR Code version
	 * @param {String} options.errorCorrectionLevel Error correction level
	 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
	 */
	var create = function create (data, options) {
	  if (typeof data === 'undefined' || data === '') {
	    throw new Error('No input text')
	  }

	  var errorCorrectionLevel$1 = errorCorrectionLevel.M;
	  var version$1;
	  var mask;

	  if (typeof options !== 'undefined') {
	    // Use higher error correction level as default
	    errorCorrectionLevel$1 = errorCorrectionLevel.from(options.errorCorrectionLevel, errorCorrectionLevel.M);
	    version$1 = version.from(options.version);
	    mask = maskPattern.from(options.maskPattern);

	    if (options.toSJISFunc) {
	      utils.setToSJISFunction(options.toSJISFunc);
	    }
	  }

	  return createSymbol(data, version$1, errorCorrectionLevel$1, mask)
	};

	var qrcode = {
		create: create
	};

	var utils$1 = createCommonjsModule(function (module, exports) {
	function hex2rgba (hex) {
	  if (typeof hex === 'number') {
	    hex = hex.toString();
	  }

	  if (typeof hex !== 'string') {
	    throw new Error('Color should be defined as hex string')
	  }

	  var hexCode = hex.slice().replace('#', '').split('');
	  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
	    throw new Error('Invalid hex color: ' + hex)
	  }

	  // Convert from short to long form (fff -> ffffff)
	  if (hexCode.length === 3 || hexCode.length === 4) {
	    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
	      return [c, c]
	    }));
	  }

	  // Add default alpha value
	  if (hexCode.length === 6) hexCode.push('F', 'F');

	  var hexValue = parseInt(hexCode.join(''), 16);

	  return {
	    r: (hexValue >> 24) & 255,
	    g: (hexValue >> 16) & 255,
	    b: (hexValue >> 8) & 255,
	    a: hexValue & 255,
	    hex: '#' + hexCode.slice(0, 6).join('')
	  }
	}

	exports.getOptions = function getOptions (options) {
	  if (!options) options = {};
	  if (!options.color) options.color = {};

	  var margin = typeof options.margin === 'undefined' ||
	    options.margin === null ||
	    options.margin < 0 ? 4 : options.margin;

	  var width = options.width && options.width >= 21 ? options.width : undefined;
	  var scale = options.scale || 4;

	  return {
	    width: width,
	    scale: width ? 4 : scale,
	    margin: margin,
	    color: {
	      dark: hex2rgba(options.color.dark || '#000000ff'),
	      light: hex2rgba(options.color.light || '#ffffffff')
	    },
	    type: options.type,
	    rendererOpts: options.rendererOpts || {}
	  }
	};

	exports.getScale = function getScale (qrSize, opts) {
	  return opts.width && opts.width >= qrSize + opts.margin * 2
	    ? opts.width / (qrSize + opts.margin * 2)
	    : opts.scale
	};

	exports.getImageWidth = function getImageWidth (qrSize, opts) {
	  var scale = exports.getScale(qrSize, opts);
	  return Math.floor((qrSize + opts.margin * 2) * scale)
	};

	exports.qrToImageData = function qrToImageData (imgData, qr, opts) {
	  var size = qr.modules.size;
	  var data = qr.modules.data;
	  var scale = exports.getScale(size, opts);
	  var symbolSize = Math.floor((size + opts.margin * 2) * scale);
	  var scaledMargin = opts.margin * scale;
	  var palette = [opts.color.light, opts.color.dark];

	  for (var i = 0; i < symbolSize; i++) {
	    for (var j = 0; j < symbolSize; j++) {
	      var posDst = (i * symbolSize + j) * 4;
	      var pxColor = opts.color.light;

	      if (i >= scaledMargin && j >= scaledMargin &&
	        i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
	        var iSrc = Math.floor((i - scaledMargin) / scale);
	        var jSrc = Math.floor((j - scaledMargin) / scale);
	        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
	      }

	      imgData[posDst++] = pxColor.r;
	      imgData[posDst++] = pxColor.g;
	      imgData[posDst++] = pxColor.b;
	      imgData[posDst] = pxColor.a;
	    }
	  }
	};
	});

	var canvas = createCommonjsModule(function (module, exports) {
	function clearCanvas (ctx, canvas, size) {
	  ctx.clearRect(0, 0, canvas.width, canvas.height);

	  if (!canvas.style) canvas.style = {};
	  canvas.height = size;
	  canvas.width = size;
	  canvas.style.height = size + 'px';
	  canvas.style.width = size + 'px';
	}

	function getCanvasElement () {
	  try {
	    return document.createElement('canvas')
	  } catch (e) {
	    throw new Error('You need to specify a canvas element')
	  }
	}

	exports.render = function render (qrData, canvas, options) {
	  var opts = options;
	  var canvasEl = canvas;

	  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
	    opts = canvas;
	    canvas = undefined;
	  }

	  if (!canvas) {
	    canvasEl = getCanvasElement();
	  }

	  opts = utils$1.getOptions(opts);
	  var size = utils$1.getImageWidth(qrData.modules.size, opts);

	  var ctx = canvasEl.getContext('2d');
	  var image = ctx.createImageData(size, size);
	  utils$1.qrToImageData(image.data, qrData, opts);

	  clearCanvas(ctx, canvasEl, size);
	  ctx.putImageData(image, 0, 0);

	  return canvasEl
	};

	exports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {
	  var opts = options;

	  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
	    opts = canvas;
	    canvas = undefined;
	  }

	  if (!opts) opts = {};

	  var canvasEl = exports.render(qrData, canvas, opts);

	  var type = opts.type || 'image/png';
	  var rendererOpts = opts.rendererOpts || {};

	  return canvasEl.toDataURL(type, rendererOpts.quality)
	};
	});

	function getColorAttrib (color, attrib) {
	  var alpha = color.a / 255;
	  var str = attrib + '="' + color.hex + '"';

	  return alpha < 1
	    ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
	    : str
	}

	function svgCmd (cmd, x, y) {
	  var str = cmd + x;
	  if (typeof y !== 'undefined') str += ' ' + y;

	  return str
	}

	function qrToPath (data, size, margin) {
	  var path = '';
	  var moveBy = 0;
	  var newRow = false;
	  var lineLength = 0;

	  for (var i = 0; i < data.length; i++) {
	    var col = Math.floor(i % size);
	    var row = Math.floor(i / size);

	    if (!col && !newRow) newRow = true;

	    if (data[i]) {
	      lineLength++;

	      if (!(i > 0 && col > 0 && data[i - 1])) {
	        path += newRow
	          ? svgCmd('M', col + margin, 0.5 + row + margin)
	          : svgCmd('m', moveBy, 0);

	        moveBy = 0;
	        newRow = false;
	      }

	      if (!(col + 1 < size && data[i + 1])) {
	        path += svgCmd('h', lineLength);
	        lineLength = 0;
	      }
	    } else {
	      moveBy++;
	    }
	  }

	  return path
	}

	var render = function render (qrData, options, cb) {
	  var opts = utils$1.getOptions(options);
	  var size = qrData.modules.size;
	  var data = qrData.modules.data;
	  var qrcodesize = size + opts.margin * 2;

	  var bg = !opts.color.light.a
	    ? ''
	    : '<path ' + getColorAttrib(opts.color.light, 'fill') +
	      ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';

	  var path =
	    '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
	    ' d="' + qrToPath(data, size, opts.margin) + '"/>';

	  var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';

	  var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';

	  var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';

	  if (typeof cb === 'function') {
	    cb(null, svgTag);
	  }

	  return svgTag
	};

	var svgTag = {
		render: render
	};

	function renderCanvas (renderFunc, canvas, text, opts, cb) {
	  var args = [].slice.call(arguments, 1);
	  var argsNum = args.length;
	  var isLastArgCb = typeof args[argsNum - 1] === 'function';

	  if (!isLastArgCb && !canPromise()) {
	    throw new Error('Callback required as last argument')
	  }

	  if (isLastArgCb) {
	    if (argsNum < 2) {
	      throw new Error('Too few arguments provided')
	    }

	    if (argsNum === 2) {
	      cb = text;
	      text = canvas;
	      canvas = opts = undefined;
	    } else if (argsNum === 3) {
	      if (canvas.getContext && typeof cb === 'undefined') {
	        cb = opts;
	        opts = undefined;
	      } else {
	        cb = opts;
	        opts = text;
	        text = canvas;
	        canvas = undefined;
	      }
	    }
	  } else {
	    if (argsNum < 1) {
	      throw new Error('Too few arguments provided')
	    }

	    if (argsNum === 1) {
	      text = canvas;
	      canvas = opts = undefined;
	    } else if (argsNum === 2 && !canvas.getContext) {
	      opts = text;
	      text = canvas;
	      canvas = undefined;
	    }

	    return new Promise(function (resolve, reject) {
	      try {
	        var data = qrcode.create(text, opts);
	        resolve(renderFunc(data, canvas, opts));
	      } catch (e) {
	        reject(e);
	      }
	    })
	  }

	  try {
	    var data = qrcode.create(text, opts);
	    cb(null, renderFunc(data, canvas, opts));
	  } catch (e) {
	    cb(e);
	  }
	}

	var create$1 = qrcode.create;
	var toCanvas = renderCanvas.bind(null, canvas.render);
	var toDataURL = renderCanvas.bind(null, canvas.renderToDataURL);

	// only svg for now.
	var toString_1 = renderCanvas.bind(null, function (data, _, opts) {
	  return svgTag.render(data, opts)
	});

	var browser = {
		create: create$1,
		toCanvas: toCanvas,
		toDataURL: toDataURL,
		toString: toString_1
	};

	function generate(_x) {
	  return _generate.apply(this, arguments);
	}

	function _generate() {
	  _generate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(address) {
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return browser.toDataURL(address);

	          case 2:
	            return _context.abrupt("return", _context.sent);

	          case 3:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _generate.apply(this, arguments);
	}

	function wakeLock() {
	  if (typeof navigator.requestWakeLock === 'function') {
	    return navigator.requestWakeLock('screen');
	  } else {
	    return undefined;
	  }
	}

	function _createSuper$B(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$B(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$B() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$i = "src/view/wallet/Receive.svelte"; // (34:0) {#if dataUrl}

	function create_if_block$a(ctx) {
	  var img;
	  var img_src_value;
	  var img_alt_value;
	  var block = {
	    c: function create() {
	      img = element("img");
	      if (img.src !== (img_src_value =
	      /*dataUrl*/
	      ctx[1])) attr_dev(img, "src", img_src_value);
	      attr_dev(img, "alt", img_alt_value =
	      /*account*/
	      ctx[0].address);
	      attr_dev(img, "class", "svelte-wwxt9");
	      add_location(img, file$i, 34, 4, 1351);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, img, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*dataUrl*/
	      2 && img.src !== (img_src_value =
	      /*dataUrl*/
	      ctx[1])) {
	        attr_dev(img, "src", img_src_value);
	      }

	      if (dirty &
	      /*account*/
	      1 && img_alt_value !== (img_alt_value =
	      /*account*/
	      ctx[0].address)) {
	        attr_dev(img, "alt", img_alt_value);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(img);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$a.name,
	    type: "if",
	    source: "(34:0) {#if dataUrl}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$A(ctx) {
	  var if_block_anchor;
	  var if_block =
	  /*dataUrl*/
	  ctx[1] && create_if_block$a(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*dataUrl*/
	      ctx[1]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$a(ctx);
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$A.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$A($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Receive", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var account = $$props.account;
	  var dataUrl = undefined;
	  var lockScreen;
	  onMount(function () {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              lockScreen = wakeLock();
	              _context.t0 = $$invalidate;
	              _context.next = 4;
	              return generate(account.address);

	            case 4:
	              _context.t1 = dataUrl = _context.sent;
	              (0, _context.t0)(1, _context.t1);
	              navigationReload();

	            case 7:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));
	  });
	  onDestroy(function () {
	    lockScreen === null || lockScreen === void 0 ? void 0 : lockScreen.unlock();
	  });
	  var writable_props = ["account"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Receive> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("account" in $$props) $$invalidate(0, account = $$props.account);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      onMount: onMount,
	      onDestroy: onDestroy,
	      generate: generate,
	      navigationReload: navigationReload,
	      wakeLock: wakeLock,
	      account: account,
	      dataUrl: dataUrl,
	      lockScreen: lockScreen
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("account" in $$props) $$invalidate(0, account = $$props.account);
	    if ("dataUrl" in $$props) $$invalidate(1, dataUrl = $$props.dataUrl);
	    if ("lockScreen" in $$props) lockScreen = $$props.lockScreen;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [account, dataUrl];
	}

	var Receive = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Receive, _SvelteComponentDev);

	  var _super = _createSuper$B(Receive);

	  function Receive(options) {
	    var _this;

	    classCallCheck(this, Receive);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$A, create_fragment$A, safe_not_equal, {
	      account: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Receive",
	      options: options,
	      id: create_fragment$A.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*account*/
	    ctx[0] === undefined && !("account" in props)) {
	      console.warn("<Receive> was created without expected prop 'account'");
	    }

	    return _this;
	  }

	  createClass(Receive, [{
	    key: "account",
	    get: function get() {
	      throw new Error("<Receive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Receive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Receive;
	}(SvelteComponentDev);

	function _createSuper$C(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$C(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$C() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_fragment$B(ctx) {
	  var seperator0;
	  var t0;
	  var text0;
	  var t1;
	  var textinput;
	  var t2;
	  var seperator1;
	  var t3;
	  var text1;
	  var t4;
	  var textarea;
	  var updating_value;
	  var current;
	  seperator0 = new Seperator({
	    props: {
	      languageId: "onboard-set-alias"
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      languageId: "onboard-set-alias-text"
	    },
	    $$inline: true
	  });
	  textinput = new TextInput({
	    props: {
	      languageId: "account-alias",
	      value:
	      /*selectedAccount*/
	      ctx[0].alias
	    },
	    $$inline: true
	  });
	  textinput.$on("input",
	  /*setAlias*/
	  ctx[2]);
	  seperator1 = new Seperator({
	    props: {
	      languageId: "representative"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      languageId: "representative-text"
	    },
	    $$inline: true
	  });

	  function textarea_value_binding(value) {
	    /*textarea_value_binding*/
	    ctx[4].call(null, value);
	  }

	  var textarea_props = {
	    languageId: "set-representative"
	  };

	  if (
	  /*representativeValue*/
	  ctx[1] !== void 0) {
	    textarea_props.value =
	    /*representativeValue*/
	    ctx[1];
	  }

	  textarea = new TextArea({
	    props: textarea_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(textarea, "value", textarea_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator0.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(textinput.$$.fragment);
	      t2 = space();
	      create_component(seperator1.$$.fragment);
	      t3 = space();
	      create_component(text1.$$.fragment);
	      t4 = space();
	      create_component(textarea.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(textinput, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(seperator1, target, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(text1, target, anchor);
	      insert_dev(target, t4, anchor);
	      mount_component(textarea, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var textinput_changes = {};
	      if (dirty &
	      /*selectedAccount*/
	      1) textinput_changes.value =
	      /*selectedAccount*/
	      ctx[0].alias;
	      textinput.$set(textinput_changes);
	      var textarea_changes = {};

	      if (!updating_value && dirty &
	      /*representativeValue*/
	      2) {
	        updating_value = true;
	        textarea_changes.value =
	        /*representativeValue*/
	        ctx[1];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      textarea.$set(textarea_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator0.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(textinput.$$.fragment, local);
	      transition_in(seperator1.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      transition_in(textarea.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator0.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(textinput.$$.fragment, local);
	      transition_out(seperator1.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      transition_out(textarea.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(textinput, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(seperator1, detaching);
	      if (detaching) detach_dev(t3);
	      destroy_component(text1, detaching);
	      if (detaching) detach_dev(t4);
	      destroy_component(textarea, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$B.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$B($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Settings", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var wallet = $$props.wallet;
	  var selectedAccount = $$props.selectedAccount;
	  var aliasValue = selectedAccount.alias;
	  var representativeValue = selectedAccount.representative;

	  var setAlias = function setAlias(event) {
	    return aliasValue = event.target.value;
	  };

	  var save = function save() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      var updated;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (!(aliasValue.length < 3)) {
	                _context.next = 3;
	                break;
	              }

	              pushToast({
	                languageId: "onboard-alias-rule"
	              });
	              return _context.abrupt("return");

	            case 3:
	              if (!(representativeValue !== undefined && !dist.tools.validateAddress(representativeValue))) {
	                _context.next = 6;
	                break;
	              }

	              pushToast({
	                languageId: "invalid-address"
	              });
	              return _context.abrupt("return");

	            case 6:
	              $$invalidate(0, selectedAccount.alias = aliasValue, selectedAccount);
	              $$invalidate(0, selectedAccount.representative = representativeValue, selectedAccount);
	              _context.next = 10;
	              return setRepresentative(selectedAccount);

	            case 10:
	              $$invalidate(3, wallet.accounts = wallet.accounts.map(function (a) {
	                if (a.address === selectedAccount.address) {
	                  return selectedAccount;
	                } else return a;
	              }), wallet);
	              _context.next = 13;
	              return setWallet(wallet);

	            case 13:
	              updated = _context.sent;

	              if (updated) {
	                setWalletState({
	                  wallet: updated,
	                  account: selectedAccount
	                });
	                back();
	              } // TODO: Toast


	            case 15:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));
	  };

	  onMount(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "button-save",
	        onClick: save
	      }
	    });
	  });
	  var writable_props = ["wallet", "selectedAccount"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Settings> was created with unknown prop '".concat(key, "'"));
	  });

	  function textarea_value_binding(value) {
	    representativeValue = value;
	    $$invalidate(1, representativeValue);
	  }

	  $$self.$$set = function ($$props) {
	    if ("wallet" in $$props) $$invalidate(3, wallet = $$props.wallet);
	    if ("selectedAccount" in $$props) $$invalidate(0, selectedAccount = $$props.selectedAccount);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      setWallet: setWallet,
	      setWalletState: setWalletState,
	      back: back,
	      navigationReload: navigationReload,
	      pushToast: pushToast,
	      onMount: onMount,
	      TextInput: TextInput,
	      Text: Text,
	      TextArea: TextArea,
	      tools: dist.tools,
	      setRepresentative: setRepresentative,
	      wallet: wallet,
	      selectedAccount: selectedAccount,
	      aliasValue: aliasValue,
	      representativeValue: representativeValue,
	      setAlias: setAlias,
	      save: save
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("wallet" in $$props) $$invalidate(3, wallet = $$props.wallet);
	    if ("selectedAccount" in $$props) $$invalidate(0, selectedAccount = $$props.selectedAccount);
	    if ("aliasValue" in $$props) aliasValue = $$props.aliasValue;
	    if ("representativeValue" in $$props) $$invalidate(1, representativeValue = $$props.representativeValue);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [selectedAccount, representativeValue, setAlias, wallet, textarea_value_binding];
	}

	var Settings = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Settings, _SvelteComponentDev);

	  var _super = _createSuper$C(Settings);

	  function Settings(options) {
	    var _this;

	    classCallCheck(this, Settings);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$B, create_fragment$B, safe_not_equal, {
	      wallet: 3,
	      selectedAccount: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Settings",
	      options: options,
	      id: create_fragment$B.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*wallet*/
	    ctx[3] === undefined && !("wallet" in props)) {
	      console.warn("<Settings> was created without expected prop 'wallet'");
	    }

	    if (
	    /*selectedAccount*/
	    ctx[0] === undefined && !("selectedAccount" in props)) {
	      console.warn("<Settings> was created without expected prop 'selectedAccount'");
	    }

	    return _this;
	  }

	  createClass(Settings, [{
	    key: "wallet",
	    get: function get() {
	      throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "selectedAccount",
	    get: function get() {
	      throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Settings;
	}(SvelteComponentDev);

	function _createSuper$D(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$D(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$D() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_default_slot$g(ctx) {
	  var t;
	  var block = {
	    c: function create() {
	      t = text(
	      /*balanceString*/
	      ctx[2]);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*balanceString*/
	      4) set_data_dev(t,
	      /*balanceString*/
	      ctx[2]);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$g.name,
	    type: "slot",
	    source: "(95:0) <Text>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$C(ctx) {
	  var text_1;
	  var t0;
	  var textarea;
	  var updating_value;
	  var t1;
	  var numberinput;
	  var updating_value_1;
	  var current;
	  text_1 = new Text({
	    props: {
	      $$slots: {
	        "default": [create_default_slot$g]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });

	  function textarea_value_binding(value) {
	    /*textarea_value_binding*/
	    ctx[9].call(null, value);
	  }

	  var textarea_props = {
	    languageId: "send-address"
	  };

	  if (
	  /*toAddress*/
	  ctx[0] !== void 0) {
	    textarea_props.value =
	    /*toAddress*/
	    ctx[0];
	  }

	  textarea = new TextArea({
	    props: textarea_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(textarea, "value", textarea_value_binding);
	  });

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[10].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "send-amount"
	  };

	  if (
	  /*sendValue*/
	  ctx[1] !== void 0) {
	    numberinput_props.value =
	    /*sendValue*/
	    ctx[1];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(text_1.$$.fragment);
	      t0 = space();
	      create_component(textarea.$$.fragment);
	      t1 = space();
	      create_component(numberinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(text_1, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(textarea, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(numberinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var text_1_changes = {};

	      if (dirty &
	      /*$$scope, balanceString*/
	      131076) {
	        text_1_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      text_1.$set(text_1_changes);
	      var textarea_changes = {};

	      if (!updating_value && dirty &
	      /*toAddress*/
	      1) {
	        updating_value = true;
	        textarea_changes.value =
	        /*toAddress*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      textarea.$set(textarea_changes);
	      var numberinput_changes = {};

	      if (!updating_value_1 && dirty &
	      /*sendValue*/
	      2) {
	        updating_value_1 = true;
	        numberinput_changes.value =
	        /*sendValue*/
	        ctx[1];
	        add_flush_callback(function () {
	          return updating_value_1 = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(text_1.$$.fragment, local);
	      transition_in(textarea.$$.fragment, local);
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(text_1.$$.fragment, local);
	      transition_out(textarea.$$.fragment, local);
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(text_1, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(textarea, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(numberinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$C.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$C($$self, $$props, $$invalidate) {
	  var wallet;
	  var account;
	  var balance;
	  var readableBalance;
	  var numberBalance;
	  var disabledMax;
	  var balanceString;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Send", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletState = $$props.walletState;
	  var toAddress = walletState.sendToAddress || "";
	  var sending = false;
	  var sendValue = undefined;

	  var softwareKeys = function softwareKeys(disabledSend, disabledMax) {
	    return {
	      leftKey: {
	        languageId: "update-button",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	            return regenerator.wrap(function _callee2$(_context2) {
	              while (1) {
	                switch (_context2.prev = _context2.next) {
	                  case 0:
	                    _context2.next = 2;
	                    return load({
	                      languageId: "loading-refresh",
	                      load: function load() {
	                        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                          return regenerator.wrap(function _callee$(_context) {
	                            while (1) {
	                              switch (_context.prev = _context.next) {
	                                case 0:
	                                  _context.next = 2;
	                                  return updateWalletState(account, wallet, toAddress);

	                                case 2:
	                                case "end":
	                                  return _context.stop();
	                              }
	                            }
	                          }, _callee);
	                        }));
	                      }
	                    });

	                  case 2:
	                  case "end":
	                    return _context2.stop();
	                }
	              }
	            }, _callee2);
	          }));
	        }
	      },
	      middleKey: {
	        disabled: disabledSend,
	        languageId: "send-button",
	        onClick: send
	      },
	      rightKey: {
	        disabled: disabledMax,
	        languageId: "set-max-button",
	        onClick: setMax
	      }
	    };
	  };

	  var setMax = function setMax() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
	      return regenerator.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              if (balance && balance.raw && numberBalance > 0) {
	                $$invalidate(1, sendValue = rawToNumber(balance));
	              }

	            case 1:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }));
	  };

	  var send = function send() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
	      return regenerator.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.next = 2;
	              return load({
	                languageId: "sending-funds",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
	                    var amount, updatedAccount;
	                    return regenerator.wrap(function _callee4$(_context4) {
	                      while (1) {
	                        switch (_context4.prev = _context4.next) {
	                          case 0:
	                            amount = nanoToRaw({
	                              amount: sendValue
	                            });
	                            _context4.next = 3;
	                            return sendNano(account, toAddress, amount);

	                          case 3:
	                            updatedAccount = _context4.sent;

	                            if (updatedAccount) {
	                              setWalletState({
	                                wallet: updateAccountInWallet(updatedAccount, wallet),
	                                account: updatedAccount,
	                                transactions: walletState.transactions,
	                                transaction: walletState.transaction
	                              });
	                              pushToast({
	                                languageId: "sent-funds-success",
	                                type: "success"
	                              });
	                              pushAccountAction("menu");
	                            } else {
	                              pushToast({
	                                languageId: "unable-to-send",
	                                type: "warn"
	                              });
	                            }

	                          case 5:
	                          case "end":
	                            return _context4.stop();
	                        }
	                      }
	                    }, _callee4);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5);
	    }));
	  };

	  onMount(function () {
	    return navigationReload(softwareKeys(true, disabledMax));
	  });
	  var writable_props = ["walletState"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Send> was created with unknown prop '".concat(key, "'"));
	  });

	  function textarea_value_binding(value) {
	    toAddress = value;
	    $$invalidate(0, toAddress);
	  }

	  function numberinput_value_binding(value) {
	    sendValue = value;
	    $$invalidate(1, sendValue);
	  }

	  $$self.$$set = function ($$props) {
	    if ("walletState" in $$props) $$invalidate(3, walletState = $$props.walletState);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      tools: dist.tools,
	      sendNano: sendNano,
	      updateAccountInWallet: updateAccountInWallet,
	      nanoToRaw: nanoToRaw,
	      rawToNumber: rawToNumber,
	      navigationReload: navigationReload,
	      pushAccountAction: pushAccountAction,
	      pushToast: pushToast,
	      load: load,
	      onMount: onMount,
	      setWalletState: setWalletState,
	      updateWalletState: updateWalletState,
	      NumberInput: NumberInput,
	      TextArea: TextArea,
	      setSoftwareKeys: setSoftwareKeys,
	      getLanguage: getLanguage,
	      Text: Text,
	      rawToReadable: rawToReadable,
	      walletState: walletState,
	      toAddress: toAddress,
	      sending: sending,
	      sendValue: sendValue,
	      softwareKeys: softwareKeys,
	      setMax: setMax,
	      send: send,
	      wallet: wallet,
	      account: account,
	      balance: balance,
	      readableBalance: readableBalance,
	      numberBalance: numberBalance,
	      disabledMax: disabledMax,
	      balanceString: balanceString
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletState" in $$props) $$invalidate(3, walletState = $$props.walletState);
	    if ("toAddress" in $$props) $$invalidate(0, toAddress = $$props.toAddress);
	    if ("sending" in $$props) sending = $$props.sending;
	    if ("sendValue" in $$props) $$invalidate(1, sendValue = $$props.sendValue);
	    if ("wallet" in $$props) wallet = $$props.wallet;
	    if ("account" in $$props) $$invalidate(4, account = $$props.account);
	    if ("balance" in $$props) $$invalidate(5, balance = $$props.balance);
	    if ("readableBalance" in $$props) $$invalidate(6, readableBalance = $$props.readableBalance);
	    if ("numberBalance" in $$props) $$invalidate(7, numberBalance = $$props.numberBalance);
	    if ("disabledMax" in $$props) $$invalidate(8, disabledMax = $$props.disabledMax);
	    if ("balanceString" in $$props) $$invalidate(2, balanceString = $$props.balanceString);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*walletState*/
	    8) {
	       wallet = walletState.wallet;
	    }

	    if ($$self.$$.dirty &
	    /*walletState*/
	    8) {
	       $$invalidate(4, account = walletState.account);
	    }

	    if ($$self.$$.dirty &
	    /*account*/
	    16) {
	       $$invalidate(5, balance = account.balance);
	    }

	    if ($$self.$$.dirty &
	    /*balance*/
	    32) {
	       $$invalidate(6, readableBalance = balance ? rawToReadable(balance) : "");
	    }

	    if ($$self.$$.dirty &
	    /*balance*/
	    32) {
	       $$invalidate(7, numberBalance = balance ? Number.parseFloat(rawToNumber(balance)) : 0);
	    }

	    if ($$self.$$.dirty &
	    /*numberBalance*/
	    128) {
	       $$invalidate(8, disabledMax = numberBalance <= 0);
	    }

	    if ($$self.$$.dirty &
	    /*sendValue, toAddress, numberBalance, disabledMax*/
	    387) {
	       {
	        var sendAsNumber = Number.parseFloat(sendValue);
	        var canSend = (toAddress ? dist.tools.validateAddress(toAddress) : false) && sendAsNumber <= numberBalance && sendAsNumber > 0;
	        setSoftwareKeys(softwareKeys(!canSend, disabledMax));
	      }
	    }

	    if ($$self.$$.dirty &
	    /*readableBalance*/
	    64) {
	       $$invalidate(2, balanceString = "".concat(getLanguage("current-balance"), ": ").concat(readableBalance, " Nano"));
	    }
	  };

	  return [toAddress, sendValue, balanceString, walletState, account, balance, readableBalance, numberBalance, disabledMax, textarea_value_binding, numberinput_value_binding];
	}

	var Send = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Send, _SvelteComponentDev);

	  var _super = _createSuper$D(Send);

	  function Send(options) {
	    var _this;

	    classCallCheck(this, Send);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$C, create_fragment$C, safe_not_equal, {
	      walletState: 3
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Send",
	      options: options,
	      id: create_fragment$C.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletState*/
	    ctx[3] === undefined && !("walletState" in props)) {
	      console.warn("<Send> was created without expected prop 'walletState'");
	    }

	    return _this;
	  }

	  createClass(Send, [{
	    key: "walletState",
	    get: function get() {
	      throw new Error("<Send>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Send>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Send;
	}(SvelteComponentDev);

	var dist$2 = createCommonjsModule(function (module, exports) {
	!function(e,n){module.exports=n();}(commonjsGlobal,(function(){return function(e){function n(_){if(a[_])return a[_].exports;var o=a[_]={i:_,l:!1,exports:{}};return e[_].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var a={};return n.m=e,n.c=a,n.d=function(e,a,_){n.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:_});},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},n.t=function(e,a){if(1&a&&(e=n(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var _=Object.create(null);if(n.r(_),Object.defineProperty(_,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var o in e)n.d(_,o,function(n){return e[n]}.bind(null,o));return _},n.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(a,"a",a),a},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=1)}([function(e){e.exports=[{alpha2:"US",alpha3:"USA",country_code:"1",country_name:"United States",mobile_begin_with:["201","202","203","205","206","207","208","209","210","212","213","214","215","216","217","218","219","220","223","224","225","227","228","229","231","234","239","240","248","251","252","253","254","256","260","262","267","269","270","272","274","276","278","281","283","301","302","303","304","305","307","308","309","310","312","313","314","315","316","317","318","319","320","321","323","325","327","330","331","332","334","336","337","339","341","346","347","351","352","360","361","364","369","380","385","386","401","402","404","405","406","407","408","409","410","412","413","414","415","417","419","423","424","425","430","432","434","435","440","441","442","443","445","447","458","464","469","470","475","478","479","480","484","501","502","503","504","505","507","508","509","510","512","513","515","516","517","518","520","530","531","534","539","540","541","551","557","559","561","562","563","564","567","570","571","573","574","575","580","582","585","586","601","602","603","605","606","607","608","609","610","612","614","615","616","617","618","619","620","623","626","627","628","629","630","631","636","641","646","650","651","657","659","660","661","662","667","669","678","679","681","682","689","701","702","703","704","706","707","708","712","713","714","715","716","717","718","719","720","724","725","727","730","731","732","734","737","740","747","752","754","757","760","762","763","764","765","769","770","772","773","774","775","779","781","785","786","801","802","803","804","805","806","808","810","812","813","814","815","816","817","818","828","830","831","832","835","838","843","845","847","848","850","854","856","857","858","859","860","862","863","864","865","870","872","878","901","903","904","906","907","908","909","910","912","913","914","915","916","917","918","919","920","925","927","928","929","931","934","935","936","937","938","940","941","947","949","951","952","954","956","957","959","970","971","972","973","975","978","979","980","984","985","986","989","888","800","833","844","855","866","877","463","279"],phone_number_lengths:[10]},{alpha2:"AW",alpha3:"ABW",country_code:"297",country_name:"Aruba",mobile_begin_with:["5","6","7","9"],phone_number_lengths:[7]},{alpha2:"AF",alpha3:"AFG",country_code:"93",country_name:"Afghanistan",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"AO",alpha3:"AGO",country_code:"244",country_name:"Angola",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"AI",alpha3:"AIA",country_code:"1",country_name:"Anguilla",mobile_begin_with:["2645","2647"],phone_number_lengths:[10]},{alpha2:"AX",alpha3:"ALA",country_code:"358",country_name:"Åland Islands",mobile_begin_with:["18"],phone_number_lengths:[6,7,8]},{alpha2:"AL",alpha3:"ALB",country_code:"355",country_name:"Albania",mobile_begin_with:["6"],phone_number_lengths:[9]},{alpha2:"AD",alpha3:"AND",country_code:"376",country_name:"Andorra",mobile_begin_with:["3","4","6"],phone_number_lengths:[6]},{alpha2:"AE",alpha3:"ARE",country_code:"971",country_name:"United Arab Emirates",mobile_begin_with:["5"],phone_number_lengths:[9]},{alpha2:"AR",alpha3:"ARG",country_code:"54",country_name:"Argentina",mobile_begin_with:["1","2","3"],phone_number_lengths:[10]},{alpha2:"AM",alpha3:"ARM",country_code:"374",country_name:"Armenia",mobile_begin_with:["3","4","5","7","9"],phone_number_lengths:[8]},{alpha2:"AS",alpha3:"ASM",country_code:"1",country_name:"American Samoa",mobile_begin_with:["684733","684258"],phone_number_lengths:[10]},{alpha2:"AG",alpha3:"ATG",country_code:"1",country_name:"Antigua and Barbuda",mobile_begin_with:["2687"],phone_number_lengths:[10]},{alpha2:"AU",alpha3:"AUS",country_code:"61",country_name:"Australia",mobile_begin_with:["4"],phone_number_lengths:[9]},{alpha2:"AT",alpha3:"AUT",country_code:"43",country_name:"Austria",mobile_begin_with:["6"],phone_number_lengths:[10,11,12,13,14]},{alpha2:"AZ",alpha3:"AZE",country_code:"994",country_name:"Azerbaijan",mobile_begin_with:["4","5","6","7"],phone_number_lengths:[9]},{alpha2:"BI",alpha3:"BDI",country_code:"257",country_name:"Burundi",mobile_begin_with:["7","29"],phone_number_lengths:[8]},{alpha2:"BE",alpha3:"BEL",country_code:"32",country_name:"Belgium",mobile_begin_with:["4","3"],phone_number_lengths:[9,8]},{alpha2:"BJ",alpha3:"BEN",country_code:"229",country_name:"Benin",mobile_begin_with:["4","6","9"],phone_number_lengths:[8]},{alpha2:"BF",alpha3:"BFA",country_code:"226",country_name:"Burkina Faso",mobile_begin_with:["6","7"],phone_number_lengths:[8]},{alpha2:"BD",alpha3:"BGD",country_code:"880",country_name:"Bangladesh",mobile_begin_with:["1"],phone_number_lengths:[8,9,10]},{alpha2:"BG",alpha3:"BGR",country_code:"359",country_name:"Bulgaria",mobile_begin_with:["87","88","89","98","99","43"],phone_number_lengths:[8,9]},{alpha2:"BH",alpha3:"BHR",country_code:"973",country_name:"Bahrain",mobile_begin_with:["3"],phone_number_lengths:[8]},{alpha2:"BS",alpha3:"BHS",country_code:"1",country_name:"Bahamas",mobile_begin_with:["242"],phone_number_lengths:[10]},{alpha2:"BA",alpha3:"BIH",country_code:"387",country_name:"Bosnia and Herzegovina",mobile_begin_with:["6"],phone_number_lengths:[8]},{alpha2:"BY",alpha3:"BLR",country_code:"375",country_name:"Belarus",mobile_begin_with:["25","29","33","44"],phone_number_lengths:[9]},{alpha2:"BZ",alpha3:"BLZ",country_code:"501",country_name:"Belize",mobile_begin_with:["6"],phone_number_lengths:[7]},{alpha2:"BM",alpha3:"BMU",country_code:"1",country_name:"Bermuda",mobile_begin_with:["4413","4415","4417"],phone_number_lengths:[10]},{alpha2:"BO",alpha3:"BOL",country_code:"591",country_name:"Bolivia",mobile_begin_with:["7"],phone_number_lengths:[8]},{alpha2:"BR",alpha3:"BRA",country_code:"55",country_name:"Brazil",mobile_begin_with:["119","129","139","149","159","169","179","189","199","219","229","249","279","289","11","12","13","14","15","16","17","18","19","21","22","24","27","28","31","32","33","34","35","37","38","41","42","43","44","45","46","47","48","49","51","53","54","55","61","62","63","64","65","66","67","68","69","71","73","74","75","77","79","81","82","83","84","85","86","87","88","89","91","92","93","94","95","96","97","98","99"],phone_number_lengths:[10,11]},{alpha2:"BB",alpha3:"BRB",country_code:"1",country_name:"Barbados",mobile_begin_with:[246],phone_number_lengths:[10]},{alpha2:"BN",alpha3:"BRN",country_code:"673",country_name:"Brunei Darussalam",mobile_begin_with:["7","8"],phone_number_lengths:[7]},{alpha2:"BT",alpha3:"BTN",country_code:"975",country_name:"Bhutan",mobile_begin_with:["17"],phone_number_lengths:[8]},{alpha2:"BW",alpha3:"BWA",country_code:"267",country_name:"Botswana",mobile_begin_with:["71","72","73","74","75","76"],phone_number_lengths:[8]},{alpha2:"CF",alpha3:"CAF",country_code:"236",country_name:"Central African Republic",mobile_begin_with:["7"],phone_number_lengths:[8]},{alpha2:"CA",alpha3:"CAN",country_code:"1",country_name:"Canada",mobile_begin_with:["204","226","236","249","250","289","306","343","365","367","403","416","418","431","437","438","450","506","514","519","548","579","581","587","600","604","613","639","647","705","709","778","780","807","819","825","867","873","902","905"],phone_number_lengths:[10]},{alpha2:"CH",alpha3:"CHE",country_code:"41",country_name:"Switzerland",mobile_begin_with:["74","75","76","77","78","79"],phone_number_lengths:[9]},{alpha2:"CL",alpha3:"CHL",country_code:"56",country_name:"Chile",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"CN",alpha3:"CHN",country_code:"86",country_name:"China",mobile_begin_with:["13","14","15","17","18","19","16"],phone_number_lengths:[11]},{alpha2:"CI",alpha3:"CIV",country_code:"225",country_name:"Côte D'Ivoire",mobile_begin_with:["0","4","5","6","7","8"],phone_number_lengths:[8]},{alpha2:"CM",alpha3:"CMR",country_code:"237",country_name:"Cameroon",mobile_begin_with:["6"],phone_number_lengths:[9]},{alpha2:"CD",alpha3:"COD",country_code:"243",country_name:"Congo, The Democratic Republic Of The",mobile_begin_with:["8","9"],phone_number_lengths:[9]},{alpha2:"CG",alpha3:"COG",country_code:"242",country_name:"Congo",mobile_begin_with:["0"],phone_number_lengths:[9]},{alpha2:"CK",alpha3:"COK",country_code:"682",country_name:"Cook Islands",mobile_begin_with:["5","7"],phone_number_lengths:[5]},{alpha2:"CO",alpha3:"COL",country_code:"57",country_name:"Colombia",mobile_begin_with:["3"],phone_number_lengths:[10]},{alpha2:"KM",alpha3:"COM",country_code:"269",country_name:"Comoros",mobile_begin_with:["3","76"],phone_number_lengths:[7]},{alpha2:"CV",alpha3:"CPV",country_code:"238",country_name:"Cape Verde",mobile_begin_with:["5","9"],phone_number_lengths:[7]},{alpha2:"CR",alpha3:"CRI",country_code:"506",country_name:"Costa Rica",mobile_begin_with:["5","6","7","8"],phone_number_lengths:[8]},{alpha2:"CU",alpha3:"CUB",country_code:"53",country_name:"Cuba",mobile_begin_with:["5"],phone_number_lengths:[8]},{alpha2:"KY",alpha3:"CYM",country_code:"1",country_name:"Cayman Islands",mobile_begin_with:["345"],phone_number_lengths:[10]},{alpha2:"CY",alpha3:"CYP",country_code:"357",country_name:"Cyprus",mobile_begin_with:["9"],phone_number_lengths:[8]},{alpha2:"CZ",alpha3:"CZE",country_code:"420",country_name:"Czech Republic",mobile_begin_with:["6","7"],phone_number_lengths:[9]},{alpha2:"DE",alpha3:"DEU",country_code:"49",country_name:"Germany",mobile_begin_with:["15","16","17"],phone_number_lengths:[10,11]},{alpha2:"DJ",alpha3:"DJI",country_code:"253",country_name:"Djibouti",mobile_begin_with:["77"],phone_number_lengths:[8]},{alpha2:"DM",alpha3:"DMA",country_code:"1",country_name:"Dominica",mobile_begin_with:["767"],phone_number_lengths:[10]},{alpha2:"DK",alpha3:"DNK",country_code:"45",country_name:"Denmark",mobile_begin_with:["2","30","31","40","41","42","50","51","52","53","60","61","71","81","91","92","93"],phone_number_lengths:[8]},{alpha2:"DO",alpha3:"DOM",country_code:"1",country_name:"Dominican Republic",mobile_begin_with:["809","829","849"],phone_number_lengths:[10]},{alpha2:"DZ",alpha3:"DZA",country_code:"213",country_name:"Algeria",mobile_begin_with:["5","6","7"],phone_number_lengths:[9]},{alpha2:"EC",alpha3:"ECU",country_code:"593",country_name:"Ecuador",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"EG",alpha3:"EGY",country_code:"20",country_name:"Egypt",mobile_begin_with:["1"],phone_number_lengths:[10,8]},{alpha2:"ER",alpha3:"ERI",country_code:"291",country_name:"Eritrea",mobile_begin_with:["1","7","8"],phone_number_lengths:[7]},{alpha2:"ES",alpha3:"ESP",country_code:"34",country_name:"Spain",mobile_begin_with:["6","7"],phone_number_lengths:[9]},{alpha2:"EE",alpha3:"EST",country_code:"372",country_name:"Estonia",mobile_begin_with:["5","81","82","83"],phone_number_lengths:[7,8]},{alpha2:"ET",alpha3:"ETH",country_code:"251",country_name:"Ethiopia",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"FI",alpha3:"FIN",country_code:"358",country_name:"Finland",mobile_begin_with:["4","5"],phone_number_lengths:[9,10]},{alpha2:"FJ",alpha3:"FJI",country_code:"679",country_name:"Fiji",mobile_begin_with:["7","9"],phone_number_lengths:[7]},{alpha2:"FK",alpha3:"FLK",country_code:"500",country_name:"Falkland Islands (Malvinas)",mobile_begin_with:["5","6"],phone_number_lengths:[5]},{alpha2:"FR",alpha3:"FRA",country_code:"33",country_name:"France",mobile_begin_with:["6","7"],phone_number_lengths:[9]},{alpha2:"FO",alpha3:"FRO",country_code:"298",country_name:"Faroe Islands",mobile_begin_with:[],phone_number_lengths:[6]},{alpha2:"FM",alpha3:"FSM",country_code:"691",country_name:"Micronesia, Federated States Of",mobile_begin_with:[],phone_number_lengths:[7]},{alpha2:"GA",alpha3:"GAB",country_code:"241",country_name:"Gabon",mobile_begin_with:["2","3","4","5","6","7"],phone_number_lengths:[7]},{alpha2:"GB",alpha3:"GBR",country_code:"44",country_name:"United Kingdom",mobile_begin_with:["7"],phone_number_lengths:[10]},{alpha2:"GE",alpha3:"GEO",country_code:"995",country_name:"Georgia",mobile_begin_with:["5","7"],phone_number_lengths:[9]},{alpha2:"GH",alpha3:"GHA",country_code:"233",country_name:"Ghana",mobile_begin_with:["2","5"],phone_number_lengths:[9]},{alpha2:"GI",alpha3:"GIB",country_code:"350",country_name:"Gibraltar",mobile_begin_with:["5"],phone_number_lengths:[8]},{alpha2:"GN",alpha3:"GIN",country_code:"224",country_name:"Guinea",mobile_begin_with:["6"],phone_number_lengths:[9]},{alpha2:"GP",alpha3:"GLP",country_code:"590",country_name:"Guadeloupe",mobile_begin_with:["690"],phone_number_lengths:[9]},{alpha2:"GM",alpha3:"GMB",country_code:"220",country_name:"Gambia",mobile_begin_with:["7","9"],phone_number_lengths:[7]},{alpha2:"GW",alpha3:"GNB",country_code:"245",country_name:"Guinea-Bissau",mobile_begin_with:["5","6","7"],phone_number_lengths:[7]},{alpha2:"GQ",alpha3:"GNQ",country_code:"240",country_name:"Equatorial Guinea",mobile_begin_with:["222","551"],phone_number_lengths:[9]},{alpha2:"GR",alpha3:"GRC",country_code:"30",country_name:"Greece",mobile_begin_with:["6"],phone_number_lengths:[10]},{alpha2:"GD",alpha3:"GRD",country_code:"1",country_name:"Grenada",mobile_begin_with:["473"],phone_number_lengths:[10]},{alpha2:"GL",alpha3:"GRL",country_code:"299",country_name:"Greenland",mobile_begin_with:["2","4","5"],phone_number_lengths:[6]},{alpha2:"GT",alpha3:"GTM",country_code:"502",country_name:"Guatemala",mobile_begin_with:["3","4","5"],phone_number_lengths:[8]},{alpha2:"GF",alpha3:"GUF",country_code:"594",country_name:"French Guiana",mobile_begin_with:["694"],phone_number_lengths:[9]},{alpha2:"GU",alpha3:"GUM",country_code:"1",country_name:"Guam",mobile_begin_with:["671"],phone_number_lengths:[10]},{alpha2:"GY",alpha3:"GUY",country_code:"592",country_name:"Guyana",mobile_begin_with:["6"],phone_number_lengths:[7]},{alpha2:"HK",alpha3:"HKG",country_code:"852",country_name:"Hong Kong",mobile_begin_with:["4","5","6","70","71","72","73","81","82","83","84","85","86","87","88","89","9"],phone_number_lengths:[8]},{alpha2:"HN",alpha3:"HND",country_code:"504",country_name:"Honduras",mobile_begin_with:["3","7","8","9"],phone_number_lengths:[8]},{alpha2:"HR",alpha3:"HRV",country_code:"385",country_name:"Croatia",mobile_begin_with:["9"],phone_number_lengths:[8,9]},{alpha2:"HT",alpha3:"HTI",country_code:"509",country_name:"Haiti",mobile_begin_with:["3","4"],phone_number_lengths:[8]},{alpha2:"HU",alpha3:"HUN",country_code:"36",country_name:"Hungary",mobile_begin_with:["20","30","31","70"],phone_number_lengths:[9]},{alpha2:"ID",alpha3:"IDN",country_code:"62",country_name:"Indonesia",mobile_begin_with:["8"],phone_number_lengths:[9,10,11,12]},{alpha2:"IN",alpha3:"IND",country_code:"91",country_name:"India",mobile_begin_with:["6","7","8","9"],phone_number_lengths:[10]},{alpha2:"IE",alpha3:"IRL",country_code:"353",country_name:"Ireland",mobile_begin_with:["82","83","84","85","86","87","88","89"],phone_number_lengths:[9]},{alpha2:"IR",alpha3:"IRN",country_code:"98",country_name:"Iran, Islamic Republic Of",mobile_begin_with:["9"],phone_number_lengths:[10]},{alpha2:"IQ",alpha3:"IRQ",country_code:"964",country_name:"Iraq",mobile_begin_with:["7"],phone_number_lengths:[10]},{alpha2:"IS",alpha3:"ISL",country_code:"354",country_name:"Iceland",mobile_begin_with:["6","7","8"],phone_number_lengths:[7]},{alpha2:"IL",alpha3:"ISR",country_code:"972",country_name:"Israel",mobile_begin_with:["5"],phone_number_lengths:[9]},{alpha2:"IT",alpha3:"ITA",country_code:"39",country_name:"Italy",mobile_begin_with:["3"],phone_number_lengths:[9,10]},{alpha2:"JM",alpha3:"JAM",country_code:"1",country_name:"Jamaica",mobile_begin_with:["876"],phone_number_lengths:[10]},{alpha2:"JO",alpha3:"JOR",country_code:"962",country_name:"Jordan",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"JP",alpha3:"JPN",country_code:"81",country_name:"Japan",mobile_begin_with:["70","80","90"],phone_number_lengths:[10]},{alpha2:"KZ",alpha3:"KAZ",country_code:"7",country_name:"Kazakhstan",mobile_begin_with:["70","74","77"],phone_number_lengths:[10]},{alpha2:"KE",alpha3:"KEN",country_code:"254",country_name:"Kenya",mobile_begin_with:["7","1"],phone_number_lengths:[9]},{alpha2:"KG",alpha3:"KGZ",country_code:"996",country_name:"Kyrgyzstan",mobile_begin_with:["5","7"],phone_number_lengths:[9]},{alpha2:"KH",alpha3:"KHM",country_code:"855",country_name:"Cambodia",mobile_begin_with:["1","6","7","8","9"],phone_number_lengths:[8,9]},{alpha2:"KI",alpha3:"KIR",country_code:"686",country_name:"Kiribati",mobile_begin_with:["9","30"],phone_number_lengths:[5]},{alpha2:"KN",alpha3:"KNA",country_code:"1",country_name:"Saint Kitts And Nevis",mobile_begin_with:["869"],phone_number_lengths:[10]},{alpha2:"KR",alpha3:"KOR",country_code:"82",country_name:"Korea, Republic of",mobile_begin_with:["1"],phone_number_lengths:[9,10]},{alpha2:"KW",alpha3:"KWT",country_code:"965",country_name:"Kuwait",mobile_begin_with:["5","6","9"],phone_number_lengths:[8]},{alpha2:"LA",alpha3:"LAO",country_code:"856",country_name:"Lao People's Democratic Republic",mobile_begin_with:["20"],phone_number_lengths:[10]},{alpha2:"LB",alpha3:"LBN",country_code:"961",country_name:"Lebanon",mobile_begin_with:["3","7"],phone_number_lengths:[7,8]},{alpha2:"LR",alpha3:"LBR",country_code:"231",country_name:"Liberia",mobile_begin_with:["4","5","6","7"],phone_number_lengths:[7,8]},{alpha2:"LY",alpha3:"LBY",country_code:"218",country_name:"Libyan Arab Jamahiriya",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"LC",alpha3:"LCA",country_code:"1",country_name:"Saint Lucia",mobile_begin_with:["758"],phone_number_lengths:[10]},{alpha2:"LI",alpha3:"LIE",country_code:"423",country_name:"Liechtenstein",mobile_begin_with:["7"],phone_number_lengths:[7]},{alpha2:"LK",alpha3:"LKA",country_code:"94",country_name:"Sri Lanka",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"LS",alpha3:"LSO",country_code:"266",country_name:"Lesotho",mobile_begin_with:["5","6"],phone_number_lengths:[8]},{alpha2:"LT",alpha3:"LTU",country_code:"370",country_name:"Lithuania",mobile_begin_with:["6"],phone_number_lengths:[8]},{alpha2:"LU",alpha3:"LUX",country_code:"352",country_name:"Luxembourg",mobile_begin_with:["6"],phone_number_lengths:[9]},{alpha2:"LV",alpha3:"LVA",country_code:"371",country_name:"Latvia",mobile_begin_with:["2"],phone_number_lengths:[8]},{alpha2:"MO",alpha3:"MAC",country_code:"853",country_name:"Macao",mobile_begin_with:["6"],phone_number_lengths:[8]},{alpha2:"MA",alpha3:"MAR",country_code:"212",country_name:"Morocco",mobile_begin_with:["6","7"],phone_number_lengths:[9]},{alpha2:"MC",alpha3:"MCO",country_code:"377",country_name:"Monaco",mobile_begin_with:["4","6"],phone_number_lengths:[8,9]},{alpha2:"MD",alpha3:"MDA",country_code:"373",country_name:"Moldova, Republic of",mobile_begin_with:["6","7"],phone_number_lengths:[8]},{alpha2:"MG",alpha3:"MDG",country_code:"261",country_name:"Madagascar",mobile_begin_with:["3"],phone_number_lengths:[9]},{alpha2:"MV",alpha3:"MDV",country_code:"960",country_name:"Maldives",mobile_begin_with:["7","9"],phone_number_lengths:[7]},{alpha2:"MX",alpha3:"MEX",country_code:"52",country_name:"Mexico",mobile_begin_with:[""],phone_number_lengths:[10,11]},{alpha2:"MH",alpha3:"MHL",country_code:"692",country_name:"Marshall Islands",mobile_begin_with:[],phone_number_lengths:[7]},{alpha2:"MK",alpha3:"MKD",country_code:"389",country_name:"Macedonia, the Former Yugoslav Republic Of",mobile_begin_with:["7"],phone_number_lengths:[8]},{alpha2:"ML",alpha3:"MLI",country_code:"223",country_name:"Mali",mobile_begin_with:["6","7"],phone_number_lengths:[8]},{alpha2:"MT",alpha3:"MLT",country_code:"356",country_name:"Malta",mobile_begin_with:["7","9"],phone_number_lengths:[8]},{alpha2:"MM",alpha3:"MMR",country_code:"95",country_name:"Myanmar",mobile_begin_with:["9"],phone_number_lengths:[8,9,10]},{alpha2:"ME",alpha3:"MNE",country_code:"382",country_name:"Montenegro",mobile_begin_with:["6"],phone_number_lengths:[8]},{alpha2:"MN",alpha3:"MNG",country_code:"976",country_name:"Mongolia",mobile_begin_with:["5","8","9"],phone_number_lengths:[8]},{alpha2:"MP",alpha3:"MNP",country_code:"1",country_name:"Northern Mariana Islands",mobile_begin_with:["670"],phone_number_lengths:[10]},{alpha2:"MZ",alpha3:"MOZ",country_code:"258",country_name:"Mozambique",mobile_begin_with:["8"],phone_number_lengths:[9]},{alpha2:"MR",alpha3:"MRT",country_code:"222",country_name:"Mauritania",mobile_begin_with:[],phone_number_lengths:[8]},{alpha2:"MS",alpha3:"MSR",country_code:"1",country_name:"Montserrat",mobile_begin_with:["664"],phone_number_lengths:[10]},{alpha2:"MQ",alpha3:"MTQ",country_code:"596",country_name:"Martinique",mobile_begin_with:["696"],phone_number_lengths:[9]},{alpha2:"MU",alpha3:"MUS",country_code:"230",country_name:"Mauritius",mobile_begin_with:["5"],phone_number_lengths:[8]},{alpha2:"MW",alpha3:"MWI",country_code:"265",country_name:"Malawi",mobile_begin_with:["77","88","99"],phone_number_lengths:[9]},{alpha2:"MY",alpha3:"MYS",country_code:"60",country_name:"Malaysia",mobile_begin_with:["1","6"],phone_number_lengths:[9,10,8]},{alpha2:"YT",alpha3:"MYT",country_code:"262",country_name:"Mayotte",mobile_begin_with:["639"],phone_number_lengths:[9]},{alpha2:"NA",alpha3:"NAM",country_code:"264",country_name:"Namibia",mobile_begin_with:["60","81","82","85"],phone_number_lengths:[9]},{alpha2:"NC",alpha3:"NCL",country_code:"687",country_name:"New Caledonia",mobile_begin_with:["7","8","9"],phone_number_lengths:[6]},{alpha2:"NE",alpha3:"NER",country_code:"227",country_name:"Niger",mobile_begin_with:["9"],phone_number_lengths:[8]},{alpha2:"NF",alpha3:"NFK",country_code:"672",country_name:"Norfolk Island",mobile_begin_with:["5","8"],phone_number_lengths:[5]},{alpha2:"NG",alpha3:"NGA",country_code:"234",country_name:"Nigeria",mobile_begin_with:["70","80","81","90"],phone_number_lengths:[10]},{alpha2:"NI",alpha3:"NIC",country_code:"505",country_name:"Nicaragua",mobile_begin_with:["8"],phone_number_lengths:[8]},{alpha2:"NU",alpha3:"NIU",country_code:"683",country_name:"Niue",mobile_begin_with:[],phone_number_lengths:[4]},{alpha2:"NL",alpha3:"NLD",country_code:"31",country_name:"Netherlands",mobile_begin_with:["6"],phone_number_lengths:[9]},{alpha2:"NO",alpha3:"NOR",country_code:"47",country_name:"Norway",mobile_begin_with:["4","9"],phone_number_lengths:[8]},{alpha2:"NP",alpha3:"NPL",country_code:"977",country_name:"Nepal",mobile_begin_with:["97","98"],phone_number_lengths:[10]},{alpha2:"NR",alpha3:"NRU",country_code:"674",country_name:"Nauru",mobile_begin_with:["555"],phone_number_lengths:[7]},{alpha2:"NZ",alpha3:"NZL",country_code:"64",country_name:"New Zealand",mobile_begin_with:["2","3","6","9"],phone_number_lengths:[8,9,10]},{alpha2:"OM",alpha3:"OMN",country_code:"968",country_name:"Oman",mobile_begin_with:["9"],phone_number_lengths:[8]},{alpha2:"PK",alpha3:"PAK",country_code:"92",country_name:"Pakistan",mobile_begin_with:["3"],phone_number_lengths:[10]},{alpha2:"PA",alpha3:"PAN",country_code:"507",country_name:"Panama",mobile_begin_with:["6"],phone_number_lengths:[8]},{alpha2:"PE",alpha3:"PER",country_code:"51",country_name:"Peru",mobile_begin_with:["9","6"],phone_number_lengths:[9,8]},{alpha2:"PH",alpha3:"PHL",country_code:"63",country_name:"Philippines",mobile_begin_with:["9"],phone_number_lengths:[10]},{alpha2:"PW",alpha3:"PLW",country_code:"680",country_name:"Palau",mobile_begin_with:[],phone_number_lengths:[7]},{alpha2:"PG",alpha3:"PNG",country_code:"675",country_name:"Papua New Guinea",mobile_begin_with:["7"],phone_number_lengths:[8]},{alpha2:"PL",alpha3:"POL",country_code:"48",country_name:"Poland",mobile_begin_with:["4","5","6","7","8"],phone_number_lengths:[9]},{alpha2:"PR",alpha3:"PRI",country_code:"1",country_name:"Puerto Rico",mobile_begin_with:["787","939"],phone_number_lengths:[10]},{alpha2:"PT",alpha3:"PRT",country_code:"351",country_name:"Portugal",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"PY",alpha3:"PRY",country_code:"595",country_name:"Paraguay",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"PS",alpha3:"PSE",country_code:"970",country_name:"Palestinian Territory, Occupied",mobile_begin_with:["5"],phone_number_lengths:[9]},{alpha2:"PF",alpha3:"PYF",country_code:"689",country_name:"French Polynesia",mobile_begin_with:["8"],phone_number_lengths:[8]},{alpha2:"QA",alpha3:"QAT",country_code:"974",country_name:"Qatar",mobile_begin_with:["3","5","6","7"],phone_number_lengths:[8]},{alpha2:"RE",alpha3:"REU",country_code:"262",country_name:"Réunion",mobile_begin_with:["692","693"],phone_number_lengths:[9]},{alpha2:"RO",alpha3:"ROU",country_code:"40",country_name:"Romania",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"RU",alpha3:"RUS",country_code:"7",country_name:"Russian Federation",mobile_begin_with:["9","495"],phone_number_lengths:[10]},{alpha2:"RW",alpha3:"RWA",country_code:"250",country_name:"Rwanda",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"SA",alpha3:"SAU",country_code:"966",country_name:"Saudi Arabia",mobile_begin_with:["5"],phone_number_lengths:[9]},{alpha2:"SD",alpha3:"SDN",country_code:"249",country_name:"Sudan",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"SS",alpha3:"SSD",country_code:"211",country_name:"South Sudan",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"SN",alpha3:"SEN",country_code:"221",country_name:"Senegal",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"SG",alpha3:"SGP",country_code:"65",country_name:"Singapore",mobile_begin_with:["8","9"],phone_number_lengths:[8]},{alpha2:"SH",alpha3:"SHN",country_code:"290",country_name:"Saint Helena",mobile_begin_with:[],phone_number_lengths:[4]},{alpha2:"SJ",alpha3:"SJM",country_code:"47",country_name:"Svalbard And Jan Mayen",mobile_begin_with:[],phone_number_lengths:[8]},{alpha2:"SB",alpha3:"SLB",country_code:"677",country_name:"Solomon Islands",mobile_begin_with:["7","8"],phone_number_lengths:[7]},{alpha2:"SL",alpha3:"SLE",country_code:"232",country_name:"Sierra Leone",mobile_begin_with:["21","25","30","33","34","40","44","50","55","76","77","78","79","88"],phone_number_lengths:[8]},{alpha2:"SV",alpha3:"SLV",country_code:"503",country_name:"El Salvador",mobile_begin_with:["7"],phone_number_lengths:[8]},{alpha2:"SM",alpha3:"SMR",country_code:"378",country_name:"San Marino",mobile_begin_with:["3","6"],phone_number_lengths:[10]},{alpha2:"SO",alpha3:"SOM",country_code:"252",country_name:"Somalia",mobile_begin_with:["9"],phone_number_lengths:[8]},{alpha2:"SX",alpha3:"SXM",country_code:"1",country_name:"Sint Maarten",mobile_begin_with:["721"],phone_number_lengths:[10]},{alpha2:"PM",alpha3:"SPM",country_code:"508",country_name:"Saint Pierre And Miquelon",mobile_begin_with:["55"],phone_number_lengths:[6]},{alpha2:"RS",alpha3:"SRB",country_code:"381",country_name:"Serbia",mobile_begin_with:["6"],phone_number_lengths:[8,9]},{alpha2:"ST",alpha3:"STP",country_code:"239",country_name:"Sao Tome and Principe",mobile_begin_with:["98","99"],phone_number_lengths:[7]},{alpha2:"SR",alpha3:"SUR",country_code:"597",country_name:"Suriname",mobile_begin_with:["6","7","8"],phone_number_lengths:[7]},{alpha2:"SK",alpha3:"SVK",country_code:"421",country_name:"Slovakia",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"SI",alpha3:"SVN",country_code:"386",country_name:"Slovenia",mobile_begin_with:["3","4","5","6","7"],phone_number_lengths:[8]},{alpha2:"SE",alpha3:"SWE",country_code:"46",country_name:"Sweden",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"SC",alpha3:"SYC",country_code:"248",country_name:"Seychelles",mobile_begin_with:["2"],phone_number_lengths:[7]},{alpha2:"SY",alpha3:"SYR",country_code:"963",country_name:"Syrian Arab Republic",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"TC",alpha3:"TCA",country_code:"1",country_name:"Turks and Caicos Islands",mobile_begin_with:["6492","6493","6494"],phone_number_lengths:[10]},{alpha2:"TD",alpha3:"TCD",country_code:"235",country_name:"Chad",mobile_begin_with:["6","7","9"],phone_number_lengths:[8]},{alpha2:"TG",alpha3:"TGO",country_code:"228",country_name:"Togo",mobile_begin_with:["9"],phone_number_lengths:[8]},{alpha2:"TH",alpha3:"THA",country_code:"66",country_name:"Thailand",mobile_begin_with:["6","8","9"],phone_number_lengths:[9]},{alpha2:"TJ",alpha3:"TJK",country_code:"992",country_name:"Tajikistan",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"TK",alpha3:"TKL",country_code:"690",country_name:"Tokelau",mobile_begin_with:[],phone_number_lengths:[4]},{alpha2:"TM",alpha3:"TKM",country_code:"993",country_name:"Turkmenistan",mobile_begin_with:["6"],phone_number_lengths:[8]},{alpha2:"TL",alpha3:"TLS",country_code:"670",country_name:"Timor-Leste",mobile_begin_with:["7"],phone_number_lengths:[8]},{alpha2:"TO",alpha3:"TON",country_code:"676",country_name:"Tonga",mobile_begin_with:[],phone_number_lengths:[5]},{alpha2:"TT",alpha3:"TTO",country_code:"1",country_name:"Trinidad and Tobago",mobile_begin_with:["868"],phone_number_lengths:[10]},{alpha2:"TN",alpha3:"TUN",country_code:"216",country_name:"Tunisia",mobile_begin_with:["2","4","5","9"],phone_number_lengths:[8]},{alpha2:"TR",alpha3:"TUR",country_code:"90",country_name:"Turkey",mobile_begin_with:["5"],phone_number_lengths:[10]},{alpha2:"TV",alpha3:"TUV",country_code:"688",country_name:"Tuvalu",mobile_begin_with:[],phone_number_lengths:[5]},{alpha2:"TW",alpha3:"TWN",country_code:"886",country_name:"Taiwan",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"TZ",alpha3:"TZA",country_code:"255",country_name:"Tanzania, United Republic of",mobile_begin_with:["7","6"],phone_number_lengths:[9]},{alpha2:"UG",alpha3:"UGA",country_code:"256",country_name:"Uganda",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"UA",alpha3:"UKR",country_code:"380",country_name:"Ukraine",mobile_begin_with:["39","50","63","66","67","68","73","9"],phone_number_lengths:[9]},{alpha2:"UY",alpha3:"URY",country_code:"598",country_name:"Uruguay",mobile_begin_with:["9"],phone_number_lengths:[8]},{alpha2:"UZ",alpha3:"UZB",country_code:"998",country_name:"Uzbekistan",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"VC",alpha3:"VCT",country_code:"1",country_name:"Saint Vincent And The Grenedines",mobile_begin_with:["784"],phone_number_lengths:[10]},{alpha2:"VE",alpha3:"VEN",country_code:"58",country_name:"Venezuela, Bolivarian Republic of",mobile_begin_with:["4"],phone_number_lengths:[10]},{alpha2:"VG",alpha3:"VGB",country_code:"1",country_name:"Virgin Islands, British",mobile_begin_with:["284"],phone_number_lengths:[10]},{alpha2:"VI",alpha3:"VIR",country_code:"1",country_name:"Virgin Islands, U.S.",mobile_begin_with:["340"],phone_number_lengths:[10]},{alpha2:"VN",alpha3:"VNM",country_code:"84",country_name:"Viet Nam",mobile_begin_with:["8","9","3","7","5"],phone_number_lengths:[9]},{alpha2:"VU",alpha3:"VUT",country_code:"678",country_name:"Vanuatu",mobile_begin_with:["5","7"],phone_number_lengths:[7]},{alpha2:"WF",alpha3:"WLF",country_code:"681",country_name:"Wallis and Futuna",mobile_begin_with:[],phone_number_lengths:[6]},{alpha2:"WS",alpha3:"WSM",country_code:"685",country_name:"Samoa",mobile_begin_with:["7"],phone_number_lengths:[7]},{alpha2:"YE",alpha3:"YEM",country_code:"967",country_name:"Yemen",mobile_begin_with:["7"],phone_number_lengths:[9]},{alpha2:"ZA",alpha3:"ZAF",country_code:"27",country_name:"South Africa",mobile_begin_with:["1","2","3","4","5","6","7","8"],phone_number_lengths:[9]},{alpha2:"ZM",alpha3:"ZMB",country_code:"260",country_name:"Zambia",mobile_begin_with:["9"],phone_number_lengths:[9]},{alpha2:"ZW",alpha3:"ZWE",country_code:"263",country_name:"Zimbabwe",mobile_begin_with:["71","73","77"],phone_number_lengths:[9]}];},function(e,n,a){var _=a(0),o=a(2),h=a(3),t=a(4);e.exports=function(e,n,a){var _=[],l="string"==typeof e?e.trim():"",i="string"==typeof n?n.trim():"",r=!1;l.match(/^\+/)&&(r=!0),l=l.replace(/\D/g,"");var u=o(i);if(0===Object.keys(u).length)return _;var c=!1;if(i)-1===["CIV","COG"].indexOf(u.alpha3)&&(l=l.replace(/^0+/,"")),"RUS"===u.alpha3&&11===l.length&&null!==l.match(/^89/)&&(l=l.replace(/^8+/,"")),r||-1===u.phone_number_lengths.indexOf(l.length)||(l=u.country_code+l);else if(r){var p,m=h(l,a);u=m[0],p=m[1],u||(p?l=(u=p).country_code+l.replace(new RegExp("^"+u.country_code+"\\d"),""):u={});}else -1!==u.phone_number_lengths.indexOf(l.length)&&(l="1"+l,c=!0);var b=t(l,u,a,r);return b?["+"+l,u.alpha3]:c&&(u=o("CAN"),b=t(l,u,a,r))?["+"+l,u.alpha3]:_},e.exports.iso3166_data=_;},function(e,n,a){var _=a(0);e.exports=function(e){return 0===e.length?_[0]:2===e.length?_.find((function(n){return e.toUpperCase()===n.alpha2}))||{}:3===e.length?_.find((function(n){return e.toUpperCase()===n.alpha3}))||{}:_.find((function(n){return e.toUpperCase()===n.country_name.toUpperCase()}))||{}};},function(e,n,a){var _=a(0);e.exports=function(e,n){var a=_.filter((function(n){return e.match(new RegExp("^"+n.country_code))}));return [a.filter((function(n){return n.phone_number_lengths.some((function(a){return e.length===n.country_code.length+a}))})).find((function(a){return !a.mobile_begin_with.length||n||a.mobile_begin_with.some((function(n){return e.match(new RegExp("^"+a.country_code+n))}))})),a.filter((function(n){return n.phone_number_lengths.some((function(a){return e.length===n.country_code.length+a+1}))})).find((function(a){return !a.mobile_begin_with.length||n||a.mobile_begin_with.some((function(n){return e.match(new RegExp("^"+a.country_code+"\\d?"+n))}))}))]};},function(e){e.exports=function(e,n,a,_){if(!n.phone_number_lengths)return !1;var o=e.replace(new RegExp("^"+n.country_code),"");if(_&&n&&o.length===e.length)return !1;var h=n.phone_number_lengths,t=n.mobile_begin_with,l=h.some((function(e){return o.length===e})),i=!t.length||t.some((function(e){return o.match(new RegExp("^"+e))}));return l&&(a||i)};}])}));
	});

	var phone = /*@__PURE__*/getDefaultExportFromCjs(dist$2);

	var BASE_URL = 'https://kaiak-mobile-number-backend.herokuapp.com';
	function verifyMobileNumber(_x) {
	  return _verifyMobileNumber.apply(this, arguments);
	}

	function _verifyMobileNumber() {
	  _verifyMobileNumber = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(mobileNumber) {
	    var verifyResponse;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.prev = 0;
	            _context.next = 3;
	            return fetch(BASE_URL + '/verify', {
	              method: 'POST',
	              body: new URLSearchParams({
	                mobileNumber: mobileNumber
	              })
	            });

	          case 3:
	            verifyResponse = _context.sent;
	            console.log('Verify status', verifyResponse.status);
	            return _context.abrupt("return", verifyResponse.status === 200);

	          case 8:
	            _context.prev = 8;
	            _context.t0 = _context["catch"](0);
	            return _context.abrupt("return", false);

	          case 11:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, null, [[0, 8]]);
	  }));
	  return _verifyMobileNumber.apply(this, arguments);
	}

	function saveNumberAndAddress(_x2, _x3, _x4) {
	  return _saveNumberAndAddress.apply(this, arguments);
	}

	function _saveNumberAndAddress() {
	  _saveNumberAndAddress = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(mobileNumber, otp, nanoAddress) {
	    var saveResponse;
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.prev = 0;
	            _context2.next = 3;
	            return fetch(BASE_URL + '/save', {
	              method: 'POST',
	              body: new URLSearchParams({
	                mobileNumber: mobileNumber,
	                otp: otp,
	                nanoAddress: nanoAddress
	              })
	            });

	          case 3:
	            saveResponse = _context2.sent;
	            console.log('Save status', saveResponse.status);
	            return _context2.abrupt("return", saveResponse.status === 201);

	          case 8:
	            _context2.prev = 8;
	            _context2.t0 = _context2["catch"](0);
	            return _context2.abrupt("return", false);

	          case 11:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2, null, [[0, 8]]);
	  }));
	  return _saveNumberAndAddress.apply(this, arguments);
	}

	function getAddress(_x5) {
	  return _getAddress.apply(this, arguments);
	}

	function _getAddress() {
	  _getAddress = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(mobileNumber) {
	    var resp, body, result;
	    return regenerator.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.next = 2;
	            return fetch('https://rpc.testnet.near.org', {
	              method: 'POST',
	              headers: new Headers({
	                "Content-Type": "application/json"
	              }),
	              body: JSON.stringify({
	                jsonrpc: "2.0",
	                id: "dontcare",
	                method: "query",
	                params: {
	                  request_type: "call_function",
	                  finality: "final",
	                  account_id: "dev-1615619158857-5968612",
	                  method_name: "getNanoAddress",
	                  args_base64: window.btoa(JSON.stringify({
	                    mobileNumber: mobileNumber
	                  }))
	                }
	              })
	            });

	          case 2:
	            resp = _context3.sent;
	            _context3.next = 5;
	            return resp.json();

	          case 5:
	            body = _context3.sent;
	            result = String.fromCharCode.apply(String, toConsumableArray(body.result.result));
	            return _context3.abrupt("return", result.slice(1, -1));

	          case 8:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	  return _getAddress.apply(this, arguments);
	}

	function _createSuper$E(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$E(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$E() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var console_1$1 = globals.console;

	function create_fragment$D(ctx) {
	  var numberinput;
	  var updating_value;
	  var current;

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[2].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "mobile-number-label",
	    placeholderLanguage: "mobile-number-label"
	  };

	  if (
	  /*toMobileNumber*/
	  ctx[0] !== void 0) {
	    numberinput_props.value =
	    /*toMobileNumber*/
	    ctx[0];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(numberinput.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(numberinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var numberinput_changes = {};

	      if (!updating_value && dirty &
	      /*toMobileNumber*/
	      1) {
	        updating_value = true;
	        numberinput_changes.value =
	        /*toMobileNumber*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(numberinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$D.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$D($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SendMobileNumber", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var addressFoundCallback = $$props.addressFoundCallback;
	  var toMobileNumber = "";

	  function getAddressFromNumber() {
	    return __awaiter(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      var address;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.prev = 0;
	              _context.next = 3;
	              return getAddress(toMobileNumber);

	            case 3:
	              address = _context.sent;
	              console.log("Address", address);

	              if (address != null) {
	                addressFoundCallback(address);
	                pushToast({
	                  languageId: "got-address-from-number",
	                  type: "success"
	                });
	              } else {
	                pushToast({
	                  languageId: "get-address-fail"
	                });
	              }

	              _context.next = 11;
	              break;

	            case 8:
	              _context.prev = 8;
	              _context.t0 = _context["catch"](0);
	              pushToast({
	                languageId: "get-address-fail"
	              });

	            case 11:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[0, 8]]);
	    }));
	  }

	  var softwareKeys = function softwareKeys(invalidNumber) {
	    return {
	      middleKey: {
	        languageId: "get-address",
	        onClick: getAddressFromNumber,
	        disabled: invalidNumber
	      }
	    };
	  };

	  onMount(function () {
	    return navigationReload(softwareKeys(true));
	  });
	  var writable_props = ["addressFoundCallback"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn("<SendMobileNumber> was created with unknown prop '".concat(key, "'"));
	  });

	  function numberinput_value_binding(value) {
	    toMobileNumber = value;
	    $$invalidate(0, toMobileNumber);
	  }

	  $$self.$$set = function ($$props) {
	    if ("addressFoundCallback" in $$props) $$invalidate(1, addressFoundCallback = $$props.addressFoundCallback);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      phone: phone,
	      navigationReload: navigationReload,
	      pushToast: pushToast,
	      onMount: onMount,
	      NumberInput: NumberInput,
	      setSoftwareKeys: setSoftwareKeys,
	      getAddress: getAddress,
	      addressFoundCallback: addressFoundCallback,
	      toMobileNumber: toMobileNumber,
	      getAddressFromNumber: getAddressFromNumber,
	      softwareKeys: softwareKeys
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("addressFoundCallback" in $$props) $$invalidate(1, addressFoundCallback = $$props.addressFoundCallback);
	    if ("toMobileNumber" in $$props) $$invalidate(0, toMobileNumber = $$props.toMobileNumber);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*toMobileNumber*/
	    1) {
	       {
	        var valid = phone(toMobileNumber)[0] !== undefined;
	        setSoftwareKeys(softwareKeys(!valid));
	      }
	    }
	  };

	  return [toMobileNumber, addressFoundCallback, numberinput_value_binding];
	}

	var SendMobileNumber = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(SendMobileNumber, _SvelteComponentDev);

	  var _super = _createSuper$E(SendMobileNumber);

	  function SendMobileNumber(options) {
	    var _this;

	    classCallCheck(this, SendMobileNumber);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$D, create_fragment$D, safe_not_equal, {
	      addressFoundCallback: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "SendMobileNumber",
	      options: options,
	      id: create_fragment$D.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*addressFoundCallback*/
	    ctx[1] === undefined && !("addressFoundCallback" in props)) {
	      console_1$1.warn("<SendMobileNumber> was created without expected prop 'addressFoundCallback'");
	    }

	    return _this;
	  }

	  createClass(SendMobileNumber, [{
	    key: "addressFoundCallback",
	    get: function get() {
	      throw new Error("<SendMobileNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SendMobileNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return SendMobileNumber;
	}(SvelteComponentDev);

	function _createSuper$F(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$F(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$F() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_default_slot$h(ctx) {
	  var primary0;
	  var t0;
	  var primary1;
	  var t1;
	  var primary2;
	  var current;
	  primary0 = new Primary({
	    props: {
	      primaryText: "Send by QR code"
	    },
	    $$inline: true
	  });
	  primary0.$on("click",
	  /*click_handler*/
	  ctx[0]);
	  primary1 = new Primary({
	    props: {
	      primaryText: "Send by address"
	    },
	    $$inline: true
	  });
	  primary1.$on("click",
	  /*click_handler_1*/
	  ctx[1]);
	  primary2 = new Primary({
	    props: {
	      primaryText: "Send by mobile number"
	    },
	    $$inline: true
	  });
	  primary2.$on("click",
	  /*click_handler_2*/
	  ctx[2]);
	  var block = {
	    c: function create() {
	      create_component(primary0.$$.fragment);
	      t0 = space();
	      create_component(primary1.$$.fragment);
	      t1 = space();
	      create_component(primary2.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(primary0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(primary1, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(primary2, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(primary0.$$.fragment, local);
	      transition_in(primary1.$$.fragment, local);
	      transition_in(primary2.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(primary0.$$.fragment, local);
	      transition_out(primary1.$$.fragment, local);
	      transition_out(primary2.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(primary0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(primary1, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(primary2, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$h.name,
	    type: "slot",
	    source: "(11:0) <List>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$E(ctx) {
	  var list;
	  var current;
	  list = new List({
	    props: {
	      $$slots: {
	        "default": [create_default_slot$h]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(list.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(list, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var list_changes = {};

	      if (dirty &
	      /*$$scope*/
	      8) {
	        list_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      list.$set(list_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(list.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(list.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(list, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$E.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$E($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SendSelector", slots, []);
	  afterUpdate(function () {
	    return navigationReload({
	      middleKey: SOFT_KEY_SELECT
	    });
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SendSelector> was created with unknown prop '".concat(key, "'"));
	  });

	  var click_handler = function click_handler() {
	    return pushAccountAction("send_qr");
	  };

	  var click_handler_1 = function click_handler_1() {
	    return pushAccountAction("send_address");
	  };

	  var click_handler_2 = function click_handler_2() {
	    return pushAccountAction("send_mobile_number");
	  };

	  $$self.$capture_state = function () {
	    return {
	      Primary: Primary,
	      List: List,
	      navigationReload: navigationReload,
	      pushAccountAction: pushAccountAction,
	      afterUpdate: afterUpdate,
	      SOFT_KEY_SELECT: SOFT_KEY_SELECT
	    };
	  };

	  return [click_handler, click_handler_1, click_handler_2];
	}

	var SendSelector = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(SendSelector, _SvelteComponentDev);

	  var _super = _createSuper$F(SendSelector);

	  function SendSelector(options) {
	    var _this;

	    classCallCheck(this, SendSelector);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$E, create_fragment$E, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "SendSelector",
	      options: options,
	      id: create_fragment$E.name
	    });
	    return _this;
	  }

	  return SendSelector;
	}(SvelteComponentDev);

	function _createSuper$G(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$G(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$G() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function create_default_slot_1$4(ctx) {
	  var t_value = transactionTime(
	  /*transaction*/
	  ctx[0]) + "";
	  var t;
	  var block = {
	    c: function create() {
	      t = text(t_value);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*transaction*/
	      1 && t_value !== (t_value = transactionTime(
	      /*transaction*/
	      ctx[0]) + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_1$4.name,
	    type: "slot",
	    source: "(30:0) <Text>",
	    ctx: ctx
	  });
	  return block;
	} // (32:0) <Text>


	function create_default_slot$i(ctx) {
	  var t_value = transactionText(
	  /*transaction*/
	  ctx[0]) + "";
	  var t;
	  var block = {
	    c: function create() {
	      t = text(t_value);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, t, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*transaction*/
	      1 && t_value !== (t_value = transactionText(
	      /*transaction*/
	      ctx[0]) + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(t);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$i.name,
	    type: "slot",
	    source: "(32:0) <Text>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$F(ctx) {
	  var seperator0;
	  var t0;
	  var text0;
	  var t1;
	  var seperator1;
	  var t2;
	  var text1;
	  var current;
	  seperator0 = new Seperator({
	    props: {
	      languageId: transactionReceived(
	      /*transaction*/
	      ctx[0])
	    },
	    $$inline: true
	  });
	  text0 = new Text({
	    props: {
	      $$slots: {
	        "default": [create_default_slot_1$4]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  seperator1 = new Seperator({
	    props: {
	      languageId: "transaction-details"
	    },
	    $$inline: true
	  });
	  text1 = new Text({
	    props: {
	      $$slots: {
	        "default": [create_default_slot$i]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator0.$$.fragment);
	      t0 = space();
	      create_component(text0.$$.fragment);
	      t1 = space();
	      create_component(seperator1.$$.fragment);
	      t2 = space();
	      create_component(text1.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(text0, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(seperator1, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(text1, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var seperator0_changes = {};
	      if (dirty &
	      /*transaction*/
	      1) seperator0_changes.languageId = transactionReceived(
	      /*transaction*/
	      ctx[0]);
	      seperator0.$set(seperator0_changes);
	      var text0_changes = {};

	      if (dirty &
	      /*$$scope, transaction*/
	      9) {
	        text0_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      text0.$set(text0_changes);
	      var text1_changes = {};

	      if (dirty &
	      /*$$scope, transaction*/
	      9) {
	        text1_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      text1.$set(text1_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator0.$$.fragment, local);
	      transition_in(text0.$$.fragment, local);
	      transition_in(seperator1.$$.fragment, local);
	      transition_in(text1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator0.$$.fragment, local);
	      transition_out(text0.$$.fragment, local);
	      transition_out(seperator1.$$.fragment, local);
	      transition_out(text1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(text0, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(seperator1, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(text1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$F.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$F($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Transaction", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var sendFunction = $$props.sendFunction;
	  var transaction = $$props.transaction;
	  afterUpdate(function () {
	    navigationReload({
	      rightKey: {
	        languageId: "send-button",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    return _context.abrupt("return", sendFunction(transaction.account));

	                  case 1:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = ["sendFunction", "transaction"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Transaction> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("sendFunction" in $$props) $$invalidate(1, sendFunction = $$props.sendFunction);
	    if ("transaction" in $$props) $$invalidate(0, transaction = $$props.transaction);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      Text: Text,
	      transactionText: transactionText,
	      transactionTime: transactionTime,
	      transactionReceived: transactionReceived,
	      afterUpdate: afterUpdate,
	      navigationReload: navigationReload,
	      sendFunction: sendFunction,
	      transaction: transaction
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("sendFunction" in $$props) $$invalidate(1, sendFunction = $$props.sendFunction);
	    if ("transaction" in $$props) $$invalidate(0, transaction = $$props.transaction);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [transaction, sendFunction];
	}

	var Transaction = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Transaction, _SvelteComponentDev);

	  var _super = _createSuper$G(Transaction);

	  function Transaction(options) {
	    var _this;

	    classCallCheck(this, Transaction);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$F, create_fragment$F, safe_not_equal, {
	      sendFunction: 1,
	      transaction: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Transaction",
	      options: options,
	      id: create_fragment$F.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*sendFunction*/
	    ctx[1] === undefined && !("sendFunction" in props)) {
	      console.warn("<Transaction> was created without expected prop 'sendFunction'");
	    }

	    if (
	    /*transaction*/
	    ctx[0] === undefined && !("transaction" in props)) {
	      console.warn("<Transaction> was created without expected prop 'transaction'");
	    }

	    return _this;
	  }

	  createClass(Transaction, [{
	    key: "sendFunction",
	    get: function get() {
	      throw new Error("<Transaction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Transaction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "transaction",
	    get: function get() {
	      throw new Error("<Transaction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Transaction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Transaction;
	}(SvelteComponentDev);

	/**
	 * MediaStream ImageCapture polyfill
	 *
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	let ImageCapture = window.ImageCapture;

	if (typeof ImageCapture === 'undefined') {
	  ImageCapture = class {

	    /**
	     * TODO https://www.w3.org/TR/image-capture/#constructors
	     *
	     * @param {MediaStreamTrack} videoStreamTrack - A MediaStreamTrack of the 'video' kind
	     */
	    constructor(videoStreamTrack) {
	      if (videoStreamTrack.kind !== 'video')
	        throw new DOMException('NotSupportedError');

	      this._videoStreamTrack = videoStreamTrack;
	      if (!('readyState' in this._videoStreamTrack)) {
	        // Polyfill for Firefox
	        this._videoStreamTrack.readyState = 'live';
	      }

	      // MediaStream constructor not available until Chrome 55 - https://www.chromestatus.com/feature/5912172546752512
	      this._previewStream = new MediaStream([videoStreamTrack]);
	      this.videoElement = document.createElement('video');
	      this.videoElementPlaying = new Promise(resolve => {
	        this.videoElement.addEventListener('playing', resolve);
	      });
	      if (HTMLMediaElement) {
	        this.videoElement.srcObject = this._previewStream;  // Safari 11 doesn't allow use of createObjectURL for MediaStream
	      } else {
	        this.videoElement.src = URL.createObjectURL(this._previewStream);
	      }
	      this.videoElement.muted = true;
	      this.videoElement.setAttribute('playsinline', ''); // Required by Safari on iOS 11. See https://webkit.org/blog/6784
	      this.videoElement.play();

	      this.canvasElement = document.createElement('canvas');
	      // TODO Firefox has https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas
	      this.canvas2dContext = this.canvasElement.getContext('2d');
	    }

	    /**
	     * https://w3c.github.io/mediacapture-image/index.html#dom-imagecapture-videostreamtrack
	     * @return {MediaStreamTrack} The MediaStreamTrack passed into the constructor
	     */
	    get videoStreamTrack() {
	      return this._videoStreamTrack;
	    }

	    /**
	     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-getphotocapabilities
	     * @return {Promise<PhotoCapabilities>} Fulfilled promise with
	     * [PhotoCapabilities](https://www.w3.org/TR/image-capture/#idl-def-photocapabilities)
	     * object on success, rejected promise on failure
	     */
	    getPhotoCapabilities() {
	      return new Promise(function executorGPC(resolve, reject) {
	        // TODO see https://github.com/w3c/mediacapture-image/issues/97
	        const MediaSettingsRange = {
	          current: 0, min: 0, max: 0,
	        };
	        resolve({
	          exposureCompensation: MediaSettingsRange,
	          exposureMode: 'none',
	          fillLightMode: 'none',
	          focusMode: 'none',
	          imageHeight: MediaSettingsRange,
	          imageWidth: MediaSettingsRange,
	          iso: MediaSettingsRange,
	          redEyeReduction: false,
	          whiteBalanceMode: 'none',
	          zoom: MediaSettingsRange,
	        });
	        reject(new DOMException('OperationError'));
	      });
	    }

	    /**
	     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-setoptions
	     * @param {Object} photoSettings - Photo settings dictionary, https://www.w3.org/TR/image-capture/#idl-def-photosettings
	     * @return {Promise<void>} Fulfilled promise on success, rejected promise on failure
	     */
	    setOptions(photoSettings = {}) {
	      return new Promise(function executorSO(resolve, reject) {
	        // TODO
	      });
	    }

	    /**
	     * TODO
	     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-takephoto
	     * @return {Promise<Blob>} Fulfilled promise with [Blob](https://www.w3.org/TR/FileAPI/#blob)
	     * argument on success; rejected promise on failure
	     */
	    takePhoto() {
	      const self = this;
	      return new Promise(function executorTP(resolve, reject) {
	        // `If the readyState of the MediaStreamTrack provided in the constructor is not live,
	        // return a promise rejected with a new DOMException whose name is "InvalidStateError".`
	        if (self._videoStreamTrack.readyState !== 'live') {
	          return reject(new DOMException('InvalidStateError'));
	        }
	        self.videoElementPlaying.then(() => {
	          try {
	            self.canvasElement.width = self.videoElement.videoWidth;
	            self.canvasElement.height = self.videoElement.videoHeight;
	            self.canvas2dContext.drawImage(self.videoElement, 0, 0);
	            self.canvasElement.toBlob(resolve);
	          } catch (error) {
	            reject(new DOMException('UnknownError'));
	          }
	        });
	      });
	    }

	    /**
	     * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-grabframe
	     * @return {Promise<ImageBitmap>} Fulfilled promise with
	     * [ImageBitmap](https://www.w3.org/TR/html51/webappapis.html#webappapis-images)
	     * argument on success; rejected promise on failure
	     */
	    grabFrame() {
	      const self = this;
	      return new Promise(function executorGF(resolve, reject) {
	        // `If the readyState of the MediaStreamTrack provided in the constructor is not live,
	        // return a promise rejected with a new DOMException whose name is "InvalidStateError".`
	        if (self._videoStreamTrack.readyState !== 'live') {
	          return reject(new DOMException('InvalidStateError'));
	        }
	        self.videoElementPlaying.then(() => {
	          try {
	            self.canvasElement.width = self.videoElement.videoWidth;
	            self.canvasElement.height = self.videoElement.videoHeight;
	            self.canvas2dContext.drawImage(self.videoElement, 0, 0);
	            // TODO polyfill https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap for IE
	            resolve(window.createImageBitmap(self.canvasElement));
	          } catch (error) {
	            reject(new DOMException('UnknownError'));
	          }
	        });
	      });
	    }
	  };
	}

	window.ImageCapture = ImageCapture;

	var jsQR = createCommonjsModule(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory();
	})(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 3);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var BitMatrix = /** @class */ (function () {
	    function BitMatrix(data, width) {
	        this.width = width;
	        this.height = data.length / width;
	        this.data = data;
	    }
	    BitMatrix.createEmpty = function (width, height) {
	        return new BitMatrix(new Uint8ClampedArray(width * height), width);
	    };
	    BitMatrix.prototype.get = function (x, y) {
	        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
	            return false;
	        }
	        return !!this.data[y * this.width + x];
	    };
	    BitMatrix.prototype.set = function (x, y, v) {
	        this.data[y * this.width + x] = v ? 1 : 0;
	    };
	    BitMatrix.prototype.setRegion = function (left, top, width, height, v) {
	        for (var y = top; y < top + height; y++) {
	            for (var x = left; x < left + width; x++) {
	                this.set(x, y, !!v);
	            }
	        }
	    };
	    return BitMatrix;
	}());
	exports.BitMatrix = BitMatrix;


	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var GenericGFPoly_1 = __webpack_require__(2);
	function addOrSubtractGF(a, b) {
	    return a ^ b; // tslint:disable-line:no-bitwise
	}
	exports.addOrSubtractGF = addOrSubtractGF;
	var GenericGF = /** @class */ (function () {
	    function GenericGF(primitive, size, genBase) {
	        this.primitive = primitive;
	        this.size = size;
	        this.generatorBase = genBase;
	        this.expTable = new Array(this.size);
	        this.logTable = new Array(this.size);
	        var x = 1;
	        for (var i = 0; i < this.size; i++) {
	            this.expTable[i] = x;
	            x = x * 2;
	            if (x >= this.size) {
	                x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise
	            }
	        }
	        for (var i = 0; i < this.size - 1; i++) {
	            this.logTable[this.expTable[i]] = i;
	        }
	        this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([0]));
	        this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([1]));
	    }
	    GenericGF.prototype.multiply = function (a, b) {
	        if (a === 0 || b === 0) {
	            return 0;
	        }
	        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
	    };
	    GenericGF.prototype.inverse = function (a) {
	        if (a === 0) {
	            throw new Error("Can't invert 0");
	        }
	        return this.expTable[this.size - this.logTable[a] - 1];
	    };
	    GenericGF.prototype.buildMonomial = function (degree, coefficient) {
	        if (degree < 0) {
	            throw new Error("Invalid monomial degree less than 0");
	        }
	        if (coefficient === 0) {
	            return this.zero;
	        }
	        var coefficients = new Uint8ClampedArray(degree + 1);
	        coefficients[0] = coefficient;
	        return new GenericGFPoly_1.default(this, coefficients);
	    };
	    GenericGF.prototype.log = function (a) {
	        if (a === 0) {
	            throw new Error("Can't take log(0)");
	        }
	        return this.logTable[a];
	    };
	    GenericGF.prototype.exp = function (a) {
	        return this.expTable[a];
	    };
	    return GenericGF;
	}());
	exports.default = GenericGF;


	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var GenericGF_1 = __webpack_require__(1);
	var GenericGFPoly = /** @class */ (function () {
	    function GenericGFPoly(field, coefficients) {
	        if (coefficients.length === 0) {
	            throw new Error("No coefficients.");
	        }
	        this.field = field;
	        var coefficientsLength = coefficients.length;
	        if (coefficientsLength > 1 && coefficients[0] === 0) {
	            // Leading term must be non-zero for anything except the constant polynomial "0"
	            var firstNonZero = 1;
	            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
	                firstNonZero++;
	            }
	            if (firstNonZero === coefficientsLength) {
	                this.coefficients = field.zero.coefficients;
	            }
	            else {
	                this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);
	                for (var i = 0; i < this.coefficients.length; i++) {
	                    this.coefficients[i] = coefficients[firstNonZero + i];
	                }
	            }
	        }
	        else {
	            this.coefficients = coefficients;
	        }
	    }
	    GenericGFPoly.prototype.degree = function () {
	        return this.coefficients.length - 1;
	    };
	    GenericGFPoly.prototype.isZero = function () {
	        return this.coefficients[0] === 0;
	    };
	    GenericGFPoly.prototype.getCoefficient = function (degree) {
	        return this.coefficients[this.coefficients.length - 1 - degree];
	    };
	    GenericGFPoly.prototype.addOrSubtract = function (other) {
	        var _a;
	        if (this.isZero()) {
	            return other;
	        }
	        if (other.isZero()) {
	            return this;
	        }
	        var smallerCoefficients = this.coefficients;
	        var largerCoefficients = other.coefficients;
	        if (smallerCoefficients.length > largerCoefficients.length) {
	            _a = [largerCoefficients, smallerCoefficients], smallerCoefficients = _a[0], largerCoefficients = _a[1];
	        }
	        var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
	        var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
	        for (var i = 0; i < lengthDiff; i++) {
	            sumDiff[i] = largerCoefficients[i];
	        }
	        for (var i = lengthDiff; i < largerCoefficients.length; i++) {
	            sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
	        }
	        return new GenericGFPoly(this.field, sumDiff);
	    };
	    GenericGFPoly.prototype.multiply = function (scalar) {
	        if (scalar === 0) {
	            return this.field.zero;
	        }
	        if (scalar === 1) {
	            return this;
	        }
	        var size = this.coefficients.length;
	        var product = new Uint8ClampedArray(size);
	        for (var i = 0; i < size; i++) {
	            product[i] = this.field.multiply(this.coefficients[i], scalar);
	        }
	        return new GenericGFPoly(this.field, product);
	    };
	    GenericGFPoly.prototype.multiplyPoly = function (other) {
	        if (this.isZero() || other.isZero()) {
	            return this.field.zero;
	        }
	        var aCoefficients = this.coefficients;
	        var aLength = aCoefficients.length;
	        var bCoefficients = other.coefficients;
	        var bLength = bCoefficients.length;
	        var product = new Uint8ClampedArray(aLength + bLength - 1);
	        for (var i = 0; i < aLength; i++) {
	            var aCoeff = aCoefficients[i];
	            for (var j = 0; j < bLength; j++) {
	                product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
	            }
	        }
	        return new GenericGFPoly(this.field, product);
	    };
	    GenericGFPoly.prototype.multiplyByMonomial = function (degree, coefficient) {
	        if (degree < 0) {
	            throw new Error("Invalid degree less than 0");
	        }
	        if (coefficient === 0) {
	            return this.field.zero;
	        }
	        var size = this.coefficients.length;
	        var product = new Uint8ClampedArray(size + degree);
	        for (var i = 0; i < size; i++) {
	            product[i] = this.field.multiply(this.coefficients[i], coefficient);
	        }
	        return new GenericGFPoly(this.field, product);
	    };
	    GenericGFPoly.prototype.evaluateAt = function (a) {
	        var result = 0;
	        if (a === 0) {
	            // Just return the x^0 coefficient
	            return this.getCoefficient(0);
	        }
	        var size = this.coefficients.length;
	        if (a === 1) {
	            // Just the sum of the coefficients
	            this.coefficients.forEach(function (coefficient) {
	                result = GenericGF_1.addOrSubtractGF(result, coefficient);
	            });
	            return result;
	        }
	        result = this.coefficients[0];
	        for (var i = 1; i < size; i++) {
	            result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
	        }
	        return result;
	    };
	    return GenericGFPoly;
	}());
	exports.default = GenericGFPoly;


	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var binarizer_1 = __webpack_require__(4);
	var decoder_1 = __webpack_require__(5);
	var extractor_1 = __webpack_require__(11);
	var locator_1 = __webpack_require__(12);
	function scan(matrix) {
	    var locations = locator_1.locate(matrix);
	    if (!locations) {
	        return null;
	    }
	    for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
	        var location_1 = locations_1[_i];
	        var extracted = extractor_1.extract(matrix, location_1);
	        var decoded = decoder_1.decode(extracted.matrix);
	        if (decoded) {
	            return {
	                binaryData: decoded.bytes,
	                data: decoded.text,
	                chunks: decoded.chunks,
	                location: {
	                    topRightCorner: extracted.mappingFunction(location_1.dimension, 0),
	                    topLeftCorner: extracted.mappingFunction(0, 0),
	                    bottomRightCorner: extracted.mappingFunction(location_1.dimension, location_1.dimension),
	                    bottomLeftCorner: extracted.mappingFunction(0, location_1.dimension),
	                    topRightFinderPattern: location_1.topRight,
	                    topLeftFinderPattern: location_1.topLeft,
	                    bottomLeftFinderPattern: location_1.bottomLeft,
	                    bottomRightAlignmentPattern: location_1.alignmentPattern,
	                },
	            };
	        }
	    }
	    return null;
	}
	var defaultOptions = {
	    inversionAttempts: "attemptBoth",
	};
	function jsQR(data, width, height, providedOptions) {
	    if (providedOptions === void 0) { providedOptions = {}; }
	    var options = defaultOptions;
	    Object.keys(options || {}).forEach(function (opt) {
	        options[opt] = providedOptions[opt] || options[opt];
	    });
	    var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
	    var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";
	    var _a = binarizer_1.binarize(data, width, height, shouldInvert), binarized = _a.binarized, inverted = _a.inverted;
	    var result = scan(tryInvertedFirst ? inverted : binarized);
	    if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) {
	        result = scan(tryInvertedFirst ? binarized : inverted);
	    }
	    return result;
	}
	jsQR.default = jsQR;
	exports.default = jsQR;


	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var BitMatrix_1 = __webpack_require__(0);
	var REGION_SIZE = 8;
	var MIN_DYNAMIC_RANGE = 24;
	function numBetween(value, min, max) {
	    return value < min ? min : value > max ? max : value;
	}
	// Like BitMatrix but accepts arbitry Uint8 values
	var Matrix = /** @class */ (function () {
	    function Matrix(width, height) {
	        this.width = width;
	        this.data = new Uint8ClampedArray(width * height);
	    }
	    Matrix.prototype.get = function (x, y) {
	        return this.data[y * this.width + x];
	    };
	    Matrix.prototype.set = function (x, y, value) {
	        this.data[y * this.width + x] = value;
	    };
	    return Matrix;
	}());
	function binarize(data, width, height, returnInverted) {
	    if (data.length !== width * height * 4) {
	        throw new Error("Malformed data passed to binarizer.");
	    }
	    // Convert image to greyscale
	    var greyscalePixels = new Matrix(width, height);
	    for (var x = 0; x < width; x++) {
	        for (var y = 0; y < height; y++) {
	            var r = data[((y * width + x) * 4) + 0];
	            var g = data[((y * width + x) * 4) + 1];
	            var b = data[((y * width + x) * 4) + 2];
	            greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
	        }
	    }
	    var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
	    var verticalRegionCount = Math.ceil(height / REGION_SIZE);
	    var blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);
	    for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
	        for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
	            var sum = 0;
	            var min = Infinity;
	            var max = 0;
	            for (var y = 0; y < REGION_SIZE; y++) {
	                for (var x = 0; x < REGION_SIZE; x++) {
	                    var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
	                    sum += pixelLumosity;
	                    min = Math.min(min, pixelLumosity);
	                    max = Math.max(max, pixelLumosity);
	                }
	            }
	            var average = sum / (Math.pow(REGION_SIZE, 2));
	            if (max - min <= MIN_DYNAMIC_RANGE) {
	                // If variation within the block is low, assume this is a block with only light or only
	                // dark pixels. In that case we do not want to use the average, as it would divide this
	                // low contrast area into black and white pixels, essentially creating data out of noise.
	                //
	                // Default the blackpoint for these blocks to be half the min - effectively white them out
	                average = min / 2;
	                if (verticalRegion > 0 && hortizontalRegion > 0) {
	                    // Correct the "white background" assumption for blocks that have neighbors by comparing
	                    // the pixels in this block to the previously calculated black points. This is based on
	                    // the fact that dark barcode symbology is always surrounded by some amount of light
	                    // background for which reasonable black point estimates were made. The bp estimated at
	                    // the boundaries is used for the interior.
	                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.
	                    var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +
	                        (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +
	                        blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;
	                    if (min < averageNeighborBlackPoint) {
	                        average = averageNeighborBlackPoint;
	                    }
	                }
	            }
	            blackPoints.set(hortizontalRegion, verticalRegion, average);
	        }
	    }
	    var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
	    var inverted = null;
	    if (returnInverted) {
	        inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
	    }
	    for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
	        for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
	            var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
	            var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
	            var sum = 0;
	            for (var xRegion = -2; xRegion <= 2; xRegion++) {
	                for (var yRegion = -2; yRegion <= 2; yRegion++) {
	                    sum += blackPoints.get(left + xRegion, top_1 + yRegion);
	                }
	            }
	            var threshold = sum / 25;
	            for (var xRegion = 0; xRegion < REGION_SIZE; xRegion++) {
	                for (var yRegion = 0; yRegion < REGION_SIZE; yRegion++) {
	                    var x = hortizontalRegion * REGION_SIZE + xRegion;
	                    var y = verticalRegion * REGION_SIZE + yRegion;
	                    var lum = greyscalePixels.get(x, y);
	                    binarized.set(x, y, lum <= threshold);
	                    if (returnInverted) {
	                        inverted.set(x, y, !(lum <= threshold));
	                    }
	                }
	            }
	        }
	    }
	    if (returnInverted) {
	        return { binarized: binarized, inverted: inverted };
	    }
	    return { binarized: binarized };
	}
	exports.binarize = binarize;


	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var BitMatrix_1 = __webpack_require__(0);
	var decodeData_1 = __webpack_require__(6);
	var reedsolomon_1 = __webpack_require__(9);
	var version_1 = __webpack_require__(10);
	// tslint:disable:no-bitwise
	function numBitsDiffering(x, y) {
	    var z = x ^ y;
	    var bitCount = 0;
	    while (z) {
	        bitCount++;
	        z &= z - 1;
	    }
	    return bitCount;
	}
	function pushBit(bit, byte) {
	    return (byte << 1) | bit;
	}
	// tslint:enable:no-bitwise
	var FORMAT_INFO_TABLE = [
	    { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },
	    { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },
	    { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },
	    { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },
	    { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },
	    { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },
	    { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },
	    { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },
	    { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },
	    { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },
	    { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },
	    { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },
	    { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },
	    { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },
	    { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },
	    { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },
	    { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },
	    { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },
	    { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },
	    { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },
	    { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },
	    { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },
	    { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },
	    { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },
	    { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },
	    { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },
	    { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },
	    { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },
	    { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },
	    { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },
	    { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },
	    { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },
	];
	var DATA_MASKS = [
	    function (p) { return ((p.y + p.x) % 2) === 0; },
	    function (p) { return (p.y % 2) === 0; },
	    function (p) { return p.x % 3 === 0; },
	    function (p) { return (p.y + p.x) % 3 === 0; },
	    function (p) { return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0; },
	    function (p) { return ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0; },
	    function (p) { return ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0; },
	    function (p) { return ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0; },
	];
	function buildFunctionPatternMask(version) {
	    var dimension = 17 + 4 * version.versionNumber;
	    var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
	    matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
	    matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
	    matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
	    // Alignment patterns
	    for (var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++) {
	        var x = _a[_i];
	        for (var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++) {
	            var y = _c[_b];
	            if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {
	                matrix.setRegion(x - 2, y - 2, 5, 5, true);
	            }
	        }
	    }
	    matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
	    matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
	    if (version.versionNumber > 6) {
	        matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
	        matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
	    }
	    return matrix;
	}
	function readCodewords(matrix, version, formatInfo) {
	    var dataMask = DATA_MASKS[formatInfo.dataMask];
	    var dimension = matrix.height;
	    var functionPatternMask = buildFunctionPatternMask(version);
	    var codewords = [];
	    var currentByte = 0;
	    var bitsRead = 0;
	    // Read columns in pairs, from right to left
	    var readingUp = true;
	    for (var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {
	        if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;
	            columnIndex--;
	        }
	        for (var i = 0; i < dimension; i++) {
	            var y = readingUp ? dimension - 1 - i : i;
	            for (var columnOffset = 0; columnOffset < 2; columnOffset++) {
	                var x = columnIndex - columnOffset;
	                if (!functionPatternMask.get(x, y)) {
	                    bitsRead++;
	                    var bit = matrix.get(x, y);
	                    if (dataMask({ y: y, x: x })) {
	                        bit = !bit;
	                    }
	                    currentByte = pushBit(bit, currentByte);
	                    if (bitsRead === 8) { // Whole bytes
	                        codewords.push(currentByte);
	                        bitsRead = 0;
	                        currentByte = 0;
	                    }
	                }
	            }
	        }
	        readingUp = !readingUp;
	    }
	    return codewords;
	}
	function readVersion(matrix) {
	    var dimension = matrix.height;
	    var provisionalVersion = Math.floor((dimension - 17) / 4);
	    if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code
	        return version_1.VERSIONS[provisionalVersion - 1];
	    }
	    var topRightVersionBits = 0;
	    for (var y = 5; y >= 0; y--) {
	        for (var x = dimension - 9; x >= dimension - 11; x--) {
	            topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
	        }
	    }
	    var bottomLeftVersionBits = 0;
	    for (var x = 5; x >= 0; x--) {
	        for (var y = dimension - 9; y >= dimension - 11; y--) {
	            bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
	        }
	    }
	    var bestDifference = Infinity;
	    var bestVersion;
	    for (var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++) {
	        var version = VERSIONS_1[_i];
	        if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {
	            return version;
	        }
	        var difference = numBitsDiffering(topRightVersionBits, version.infoBits);
	        if (difference < bestDifference) {
	            bestVersion = version;
	            bestDifference = difference;
	        }
	        difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
	        if (difference < bestDifference) {
	            bestVersion = version;
	            bestDifference = difference;
	        }
	    }
	    // We can tolerate up to 3 bits of error since no two version info codewords will
	    // differ in less than 8 bits.
	    if (bestDifference <= 3) {
	        return bestVersion;
	    }
	}
	function readFormatInformation(matrix) {
	    var topLeftFormatInfoBits = 0;
	    for (var x = 0; x <= 8; x++) {
	        if (x !== 6) { // Skip timing pattern bit
	            topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
	        }
	    }
	    for (var y = 7; y >= 0; y--) {
	        if (y !== 6) { // Skip timing pattern bit
	            topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
	        }
	    }
	    var dimension = matrix.height;
	    var topRightBottomRightFormatInfoBits = 0;
	    for (var y = dimension - 1; y >= dimension - 7; y--) { // bottom left
	        topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
	    }
	    for (var x = dimension - 8; x < dimension; x++) { // top right
	        topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
	    }
	    var bestDifference = Infinity;
	    var bestFormatInfo = null;
	    for (var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++) {
	        var _a = FORMAT_INFO_TABLE_1[_i], bits = _a.bits, formatInfo = _a.formatInfo;
	        if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {
	            return formatInfo;
	        }
	        var difference = numBitsDiffering(topLeftFormatInfoBits, bits);
	        if (difference < bestDifference) {
	            bestFormatInfo = formatInfo;
	            bestDifference = difference;
	        }
	        if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option
	            difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
	            if (difference < bestDifference) {
	                bestFormatInfo = formatInfo;
	                bestDifference = difference;
	            }
	        }
	    }
	    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
	    if (bestDifference <= 3) {
	        return bestFormatInfo;
	    }
	    return null;
	}
	function getDataBlocks(codewords, version, ecLevel) {
	    var ecInfo = version.errorCorrectionLevels[ecLevel];
	    var dataBlocks = [];
	    var totalCodewords = 0;
	    ecInfo.ecBlocks.forEach(function (block) {
	        for (var i = 0; i < block.numBlocks; i++) {
	            dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });
	            totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
	        }
	    });
	    // In some cases the QR code will be malformed enough that we pull off more or less than we should.
	    // If we pull off less there's nothing we can do.
	    // If we pull off more we can safely truncate
	    if (codewords.length < totalCodewords) {
	        return null;
	    }
	    codewords = codewords.slice(0, totalCodewords);
	    var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
	    // Pull codewords to fill the blocks up to the minimum size
	    for (var i = 0; i < shortBlockSize; i++) {
	        for (var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++) {
	            var dataBlock = dataBlocks_1[_i];
	            dataBlock.codewords.push(codewords.shift());
	        }
	    }
	    // If there are any large blocks, pull codewords to fill the last element of those
	    if (ecInfo.ecBlocks.length > 1) {
	        var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
	        var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
	        for (var i = 0; i < largeBlockCount; i++) {
	            dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
	        }
	    }
	    // Add the rest of the codewords to the blocks. These are the error correction codewords.
	    while (codewords.length > 0) {
	        for (var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++) {
	            var dataBlock = dataBlocks_2[_a];
	            dataBlock.codewords.push(codewords.shift());
	        }
	    }
	    return dataBlocks;
	}
	function decodeMatrix(matrix) {
	    var version = readVersion(matrix);
	    if (!version) {
	        return null;
	    }
	    var formatInfo = readFormatInformation(matrix);
	    if (!formatInfo) {
	        return null;
	    }
	    var codewords = readCodewords(matrix, version, formatInfo);
	    var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
	    if (!dataBlocks) {
	        return null;
	    }
	    // Count total number of data bytes
	    var totalBytes = dataBlocks.reduce(function (a, b) { return a + b.numDataCodewords; }, 0);
	    var resultBytes = new Uint8ClampedArray(totalBytes);
	    var resultIndex = 0;
	    for (var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++) {
	        var dataBlock = dataBlocks_3[_i];
	        var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
	        if (!correctedBytes) {
	            return null;
	        }
	        for (var i = 0; i < dataBlock.numDataCodewords; i++) {
	            resultBytes[resultIndex++] = correctedBytes[i];
	        }
	    }
	    try {
	        return decodeData_1.decode(resultBytes, version.versionNumber);
	    }
	    catch (_a) {
	        return null;
	    }
	}
	function decode(matrix) {
	    if (matrix == null) {
	        return null;
	    }
	    var result = decodeMatrix(matrix);
	    if (result) {
	        return result;
	    }
	    // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
	    for (var x = 0; x < matrix.width; x++) {
	        for (var y = x + 1; y < matrix.height; y++) {
	            if (matrix.get(x, y) !== matrix.get(y, x)) {
	                matrix.set(x, y, !matrix.get(x, y));
	                matrix.set(y, x, !matrix.get(y, x));
	            }
	        }
	    }
	    return decodeMatrix(matrix);
	}
	exports.decode = decode;


	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	// tslint:disable:no-bitwise
	var BitStream_1 = __webpack_require__(7);
	var shiftJISTable_1 = __webpack_require__(8);
	var Mode;
	(function (Mode) {
	    Mode["Numeric"] = "numeric";
	    Mode["Alphanumeric"] = "alphanumeric";
	    Mode["Byte"] = "byte";
	    Mode["Kanji"] = "kanji";
	    Mode["ECI"] = "eci";
	})(Mode = exports.Mode || (exports.Mode = {}));
	var ModeByte;
	(function (ModeByte) {
	    ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
	    ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
	    ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
	    ModeByte[ModeByte["Byte"] = 4] = "Byte";
	    ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
	    ModeByte[ModeByte["ECI"] = 7] = "ECI";
	    // StructuredAppend = 0x3,
	    // FNC1FirstPosition = 0x5,
	    // FNC1SecondPosition = 0x9,
	})(ModeByte || (ModeByte = {}));
	function decodeNumeric(stream, size) {
	    var bytes = [];
	    var text = "";
	    var characterCountSize = [10, 12, 14][size];
	    var length = stream.readBits(characterCountSize);
	    // Read digits in groups of 3
	    while (length >= 3) {
	        var num = stream.readBits(10);
	        if (num >= 1000) {
	            throw new Error("Invalid numeric value above 999");
	        }
	        var a = Math.floor(num / 100);
	        var b = Math.floor(num / 10) % 10;
	        var c = num % 10;
	        bytes.push(48 + a, 48 + b, 48 + c);
	        text += a.toString() + b.toString() + c.toString();
	        length -= 3;
	    }
	    // If the number of digits aren't a multiple of 3, the remaining digits are special cased.
	    if (length === 2) {
	        var num = stream.readBits(7);
	        if (num >= 100) {
	            throw new Error("Invalid numeric value above 99");
	        }
	        var a = Math.floor(num / 10);
	        var b = num % 10;
	        bytes.push(48 + a, 48 + b);
	        text += a.toString() + b.toString();
	    }
	    else if (length === 1) {
	        var num = stream.readBits(4);
	        if (num >= 10) {
	            throw new Error("Invalid numeric value above 9");
	        }
	        bytes.push(48 + num);
	        text += num.toString();
	    }
	    return { bytes: bytes, text: text };
	}
	var AlphanumericCharacterCodes = [
	    "0", "1", "2", "3", "4", "5", "6", "7", "8",
	    "9", "A", "B", "C", "D", "E", "F", "G", "H",
	    "I", "J", "K", "L", "M", "N", "O", "P", "Q",
	    "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
	    " ", "$", "%", "*", "+", "-", ".", "/", ":",
	];
	function decodeAlphanumeric(stream, size) {
	    var bytes = [];
	    var text = "";
	    var characterCountSize = [9, 11, 13][size];
	    var length = stream.readBits(characterCountSize);
	    while (length >= 2) {
	        var v = stream.readBits(11);
	        var a = Math.floor(v / 45);
	        var b = v % 45;
	        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
	        text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
	        length -= 2;
	    }
	    if (length === 1) {
	        var a = stream.readBits(6);
	        bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
	        text += AlphanumericCharacterCodes[a];
	    }
	    return { bytes: bytes, text: text };
	}
	function decodeByte(stream, size) {
	    var bytes = [];
	    var text = "";
	    var characterCountSize = [8, 16, 16][size];
	    var length = stream.readBits(characterCountSize);
	    for (var i = 0; i < length; i++) {
	        var b = stream.readBits(8);
	        bytes.push(b);
	    }
	    try {
	        text += decodeURIComponent(bytes.map(function (b) { return "%" + ("0" + b.toString(16)).substr(-2); }).join(""));
	    }
	    catch (_a) {
	        // failed to decode
	    }
	    return { bytes: bytes, text: text };
	}
	function decodeKanji(stream, size) {
	    var bytes = [];
	    var text = "";
	    var characterCountSize = [8, 10, 12][size];
	    var length = stream.readBits(characterCountSize);
	    for (var i = 0; i < length; i++) {
	        var k = stream.readBits(13);
	        var c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);
	        if (c < 0x1F00) {
	            c += 0x8140;
	        }
	        else {
	            c += 0xC140;
	        }
	        bytes.push(c >> 8, c & 0xFF);
	        text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
	    }
	    return { bytes: bytes, text: text };
	}
	function decode(data, version) {
	    var _a, _b, _c, _d;
	    var stream = new BitStream_1.BitStream(data);
	    // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).
	    var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
	    var result = {
	        text: "",
	        bytes: [],
	        chunks: [],
	    };
	    while (stream.available() >= 4) {
	        var mode = stream.readBits(4);
	        if (mode === ModeByte.Terminator) {
	            return result;
	        }
	        else if (mode === ModeByte.ECI) {
	            if (stream.readBits(1) === 0) {
	                result.chunks.push({
	                    type: Mode.ECI,
	                    assignmentNumber: stream.readBits(7),
	                });
	            }
	            else if (stream.readBits(1) === 0) {
	                result.chunks.push({
	                    type: Mode.ECI,
	                    assignmentNumber: stream.readBits(14),
	                });
	            }
	            else if (stream.readBits(1) === 0) {
	                result.chunks.push({
	                    type: Mode.ECI,
	                    assignmentNumber: stream.readBits(21),
	                });
	            }
	            else {
	                // ECI data seems corrupted
	                result.chunks.push({
	                    type: Mode.ECI,
	                    assignmentNumber: -1,
	                });
	            }
	        }
	        else if (mode === ModeByte.Numeric) {
	            var numericResult = decodeNumeric(stream, size);
	            result.text += numericResult.text;
	            (_a = result.bytes).push.apply(_a, numericResult.bytes);
	            result.chunks.push({
	                type: Mode.Numeric,
	                text: numericResult.text,
	            });
	        }
	        else if (mode === ModeByte.Alphanumeric) {
	            var alphanumericResult = decodeAlphanumeric(stream, size);
	            result.text += alphanumericResult.text;
	            (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);
	            result.chunks.push({
	                type: Mode.Alphanumeric,
	                text: alphanumericResult.text,
	            });
	        }
	        else if (mode === ModeByte.Byte) {
	            var byteResult = decodeByte(stream, size);
	            result.text += byteResult.text;
	            (_c = result.bytes).push.apply(_c, byteResult.bytes);
	            result.chunks.push({
	                type: Mode.Byte,
	                bytes: byteResult.bytes,
	                text: byteResult.text,
	            });
	        }
	        else if (mode === ModeByte.Kanji) {
	            var kanjiResult = decodeKanji(stream, size);
	            result.text += kanjiResult.text;
	            (_d = result.bytes).push.apply(_d, kanjiResult.bytes);
	            result.chunks.push({
	                type: Mode.Kanji,
	                bytes: kanjiResult.bytes,
	                text: kanjiResult.text,
	            });
	        }
	    }
	    // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker
	    if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {
	        return result;
	    }
	}
	exports.decode = decode;


	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {

	// tslint:disable:no-bitwise
	Object.defineProperty(exports, "__esModule", { value: true });
	var BitStream = /** @class */ (function () {
	    function BitStream(bytes) {
	        this.byteOffset = 0;
	        this.bitOffset = 0;
	        this.bytes = bytes;
	    }
	    BitStream.prototype.readBits = function (numBits) {
	        if (numBits < 1 || numBits > 32 || numBits > this.available()) {
	            throw new Error("Cannot read " + numBits.toString() + " bits");
	        }
	        var result = 0;
	        // First, read remainder from current byte
	        if (this.bitOffset > 0) {
	            var bitsLeft = 8 - this.bitOffset;
	            var toRead = numBits < bitsLeft ? numBits : bitsLeft;
	            var bitsToNotRead = bitsLeft - toRead;
	            var mask = (0xFF >> (8 - toRead)) << bitsToNotRead;
	            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
	            numBits -= toRead;
	            this.bitOffset += toRead;
	            if (this.bitOffset === 8) {
	                this.bitOffset = 0;
	                this.byteOffset++;
	            }
	        }
	        // Next read whole bytes
	        if (numBits > 0) {
	            while (numBits >= 8) {
	                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);
	                this.byteOffset++;
	                numBits -= 8;
	            }
	            // Finally read a partial byte
	            if (numBits > 0) {
	                var bitsToNotRead = 8 - numBits;
	                var mask = (0xFF >> bitsToNotRead) << bitsToNotRead;
	                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);
	                this.bitOffset += numBits;
	            }
	        }
	        return result;
	    };
	    BitStream.prototype.available = function () {
	        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
	    };
	    return BitStream;
	}());
	exports.BitStream = BitStream;


	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	exports.shiftJISTable = {
	    0x20: 0x0020,
	    0x21: 0x0021,
	    0x22: 0x0022,
	    0x23: 0x0023,
	    0x24: 0x0024,
	    0x25: 0x0025,
	    0x26: 0x0026,
	    0x27: 0x0027,
	    0x28: 0x0028,
	    0x29: 0x0029,
	    0x2A: 0x002A,
	    0x2B: 0x002B,
	    0x2C: 0x002C,
	    0x2D: 0x002D,
	    0x2E: 0x002E,
	    0x2F: 0x002F,
	    0x30: 0x0030,
	    0x31: 0x0031,
	    0x32: 0x0032,
	    0x33: 0x0033,
	    0x34: 0x0034,
	    0x35: 0x0035,
	    0x36: 0x0036,
	    0x37: 0x0037,
	    0x38: 0x0038,
	    0x39: 0x0039,
	    0x3A: 0x003A,
	    0x3B: 0x003B,
	    0x3C: 0x003C,
	    0x3D: 0x003D,
	    0x3E: 0x003E,
	    0x3F: 0x003F,
	    0x40: 0x0040,
	    0x41: 0x0041,
	    0x42: 0x0042,
	    0x43: 0x0043,
	    0x44: 0x0044,
	    0x45: 0x0045,
	    0x46: 0x0046,
	    0x47: 0x0047,
	    0x48: 0x0048,
	    0x49: 0x0049,
	    0x4A: 0x004A,
	    0x4B: 0x004B,
	    0x4C: 0x004C,
	    0x4D: 0x004D,
	    0x4E: 0x004E,
	    0x4F: 0x004F,
	    0x50: 0x0050,
	    0x51: 0x0051,
	    0x52: 0x0052,
	    0x53: 0x0053,
	    0x54: 0x0054,
	    0x55: 0x0055,
	    0x56: 0x0056,
	    0x57: 0x0057,
	    0x58: 0x0058,
	    0x59: 0x0059,
	    0x5A: 0x005A,
	    0x5B: 0x005B,
	    0x5C: 0x00A5,
	    0x5D: 0x005D,
	    0x5E: 0x005E,
	    0x5F: 0x005F,
	    0x60: 0x0060,
	    0x61: 0x0061,
	    0x62: 0x0062,
	    0x63: 0x0063,
	    0x64: 0x0064,
	    0x65: 0x0065,
	    0x66: 0x0066,
	    0x67: 0x0067,
	    0x68: 0x0068,
	    0x69: 0x0069,
	    0x6A: 0x006A,
	    0x6B: 0x006B,
	    0x6C: 0x006C,
	    0x6D: 0x006D,
	    0x6E: 0x006E,
	    0x6F: 0x006F,
	    0x70: 0x0070,
	    0x71: 0x0071,
	    0x72: 0x0072,
	    0x73: 0x0073,
	    0x74: 0x0074,
	    0x75: 0x0075,
	    0x76: 0x0076,
	    0x77: 0x0077,
	    0x78: 0x0078,
	    0x79: 0x0079,
	    0x7A: 0x007A,
	    0x7B: 0x007B,
	    0x7C: 0x007C,
	    0x7D: 0x007D,
	    0x7E: 0x203E,
	    0x8140: 0x3000,
	    0x8141: 0x3001,
	    0x8142: 0x3002,
	    0x8143: 0xFF0C,
	    0x8144: 0xFF0E,
	    0x8145: 0x30FB,
	    0x8146: 0xFF1A,
	    0x8147: 0xFF1B,
	    0x8148: 0xFF1F,
	    0x8149: 0xFF01,
	    0x814A: 0x309B,
	    0x814B: 0x309C,
	    0x814C: 0x00B4,
	    0x814D: 0xFF40,
	    0x814E: 0x00A8,
	    0x814F: 0xFF3E,
	    0x8150: 0xFFE3,
	    0x8151: 0xFF3F,
	    0x8152: 0x30FD,
	    0x8153: 0x30FE,
	    0x8154: 0x309D,
	    0x8155: 0x309E,
	    0x8156: 0x3003,
	    0x8157: 0x4EDD,
	    0x8158: 0x3005,
	    0x8159: 0x3006,
	    0x815A: 0x3007,
	    0x815B: 0x30FC,
	    0x815C: 0x2015,
	    0x815D: 0x2010,
	    0x815E: 0xFF0F,
	    0x815F: 0x005C,
	    0x8160: 0x301C,
	    0x8161: 0x2016,
	    0x8162: 0xFF5C,
	    0x8163: 0x2026,
	    0x8164: 0x2025,
	    0x8165: 0x2018,
	    0x8166: 0x2019,
	    0x8167: 0x201C,
	    0x8168: 0x201D,
	    0x8169: 0xFF08,
	    0x816A: 0xFF09,
	    0x816B: 0x3014,
	    0x816C: 0x3015,
	    0x816D: 0xFF3B,
	    0x816E: 0xFF3D,
	    0x816F: 0xFF5B,
	    0x8170: 0xFF5D,
	    0x8171: 0x3008,
	    0x8172: 0x3009,
	    0x8173: 0x300A,
	    0x8174: 0x300B,
	    0x8175: 0x300C,
	    0x8176: 0x300D,
	    0x8177: 0x300E,
	    0x8178: 0x300F,
	    0x8179: 0x3010,
	    0x817A: 0x3011,
	    0x817B: 0xFF0B,
	    0x817C: 0x2212,
	    0x817D: 0x00B1,
	    0x817E: 0x00D7,
	    0x8180: 0x00F7,
	    0x8181: 0xFF1D,
	    0x8182: 0x2260,
	    0x8183: 0xFF1C,
	    0x8184: 0xFF1E,
	    0x8185: 0x2266,
	    0x8186: 0x2267,
	    0x8187: 0x221E,
	    0x8188: 0x2234,
	    0x8189: 0x2642,
	    0x818A: 0x2640,
	    0x818B: 0x00B0,
	    0x818C: 0x2032,
	    0x818D: 0x2033,
	    0x818E: 0x2103,
	    0x818F: 0xFFE5,
	    0x8190: 0xFF04,
	    0x8191: 0x00A2,
	    0x8192: 0x00A3,
	    0x8193: 0xFF05,
	    0x8194: 0xFF03,
	    0x8195: 0xFF06,
	    0x8196: 0xFF0A,
	    0x8197: 0xFF20,
	    0x8198: 0x00A7,
	    0x8199: 0x2606,
	    0x819A: 0x2605,
	    0x819B: 0x25CB,
	    0x819C: 0x25CF,
	    0x819D: 0x25CE,
	    0x819E: 0x25C7,
	    0x819F: 0x25C6,
	    0x81A0: 0x25A1,
	    0x81A1: 0x25A0,
	    0x81A2: 0x25B3,
	    0x81A3: 0x25B2,
	    0x81A4: 0x25BD,
	    0x81A5: 0x25BC,
	    0x81A6: 0x203B,
	    0x81A7: 0x3012,
	    0x81A8: 0x2192,
	    0x81A9: 0x2190,
	    0x81AA: 0x2191,
	    0x81AB: 0x2193,
	    0x81AC: 0x3013,
	    0x81B8: 0x2208,
	    0x81B9: 0x220B,
	    0x81BA: 0x2286,
	    0x81BB: 0x2287,
	    0x81BC: 0x2282,
	    0x81BD: 0x2283,
	    0x81BE: 0x222A,
	    0x81BF: 0x2229,
	    0x81C8: 0x2227,
	    0x81C9: 0x2228,
	    0x81CA: 0x00AC,
	    0x81CB: 0x21D2,
	    0x81CC: 0x21D4,
	    0x81CD: 0x2200,
	    0x81CE: 0x2203,
	    0x81DA: 0x2220,
	    0x81DB: 0x22A5,
	    0x81DC: 0x2312,
	    0x81DD: 0x2202,
	    0x81DE: 0x2207,
	    0x81DF: 0x2261,
	    0x81E0: 0x2252,
	    0x81E1: 0x226A,
	    0x81E2: 0x226B,
	    0x81E3: 0x221A,
	    0x81E4: 0x223D,
	    0x81E5: 0x221D,
	    0x81E6: 0x2235,
	    0x81E7: 0x222B,
	    0x81E8: 0x222C,
	    0x81F0: 0x212B,
	    0x81F1: 0x2030,
	    0x81F2: 0x266F,
	    0x81F3: 0x266D,
	    0x81F4: 0x266A,
	    0x81F5: 0x2020,
	    0x81F6: 0x2021,
	    0x81F7: 0x00B6,
	    0x81FC: 0x25EF,
	    0x824F: 0xFF10,
	    0x8250: 0xFF11,
	    0x8251: 0xFF12,
	    0x8252: 0xFF13,
	    0x8253: 0xFF14,
	    0x8254: 0xFF15,
	    0x8255: 0xFF16,
	    0x8256: 0xFF17,
	    0x8257: 0xFF18,
	    0x8258: 0xFF19,
	    0x8260: 0xFF21,
	    0x8261: 0xFF22,
	    0x8262: 0xFF23,
	    0x8263: 0xFF24,
	    0x8264: 0xFF25,
	    0x8265: 0xFF26,
	    0x8266: 0xFF27,
	    0x8267: 0xFF28,
	    0x8268: 0xFF29,
	    0x8269: 0xFF2A,
	    0x826A: 0xFF2B,
	    0x826B: 0xFF2C,
	    0x826C: 0xFF2D,
	    0x826D: 0xFF2E,
	    0x826E: 0xFF2F,
	    0x826F: 0xFF30,
	    0x8270: 0xFF31,
	    0x8271: 0xFF32,
	    0x8272: 0xFF33,
	    0x8273: 0xFF34,
	    0x8274: 0xFF35,
	    0x8275: 0xFF36,
	    0x8276: 0xFF37,
	    0x8277: 0xFF38,
	    0x8278: 0xFF39,
	    0x8279: 0xFF3A,
	    0x8281: 0xFF41,
	    0x8282: 0xFF42,
	    0x8283: 0xFF43,
	    0x8284: 0xFF44,
	    0x8285: 0xFF45,
	    0x8286: 0xFF46,
	    0x8287: 0xFF47,
	    0x8288: 0xFF48,
	    0x8289: 0xFF49,
	    0x828A: 0xFF4A,
	    0x828B: 0xFF4B,
	    0x828C: 0xFF4C,
	    0x828D: 0xFF4D,
	    0x828E: 0xFF4E,
	    0x828F: 0xFF4F,
	    0x8290: 0xFF50,
	    0x8291: 0xFF51,
	    0x8292: 0xFF52,
	    0x8293: 0xFF53,
	    0x8294: 0xFF54,
	    0x8295: 0xFF55,
	    0x8296: 0xFF56,
	    0x8297: 0xFF57,
	    0x8298: 0xFF58,
	    0x8299: 0xFF59,
	    0x829A: 0xFF5A,
	    0x829F: 0x3041,
	    0x82A0: 0x3042,
	    0x82A1: 0x3043,
	    0x82A2: 0x3044,
	    0x82A3: 0x3045,
	    0x82A4: 0x3046,
	    0x82A5: 0x3047,
	    0x82A6: 0x3048,
	    0x82A7: 0x3049,
	    0x82A8: 0x304A,
	    0x82A9: 0x304B,
	    0x82AA: 0x304C,
	    0x82AB: 0x304D,
	    0x82AC: 0x304E,
	    0x82AD: 0x304F,
	    0x82AE: 0x3050,
	    0x82AF: 0x3051,
	    0x82B0: 0x3052,
	    0x82B1: 0x3053,
	    0x82B2: 0x3054,
	    0x82B3: 0x3055,
	    0x82B4: 0x3056,
	    0x82B5: 0x3057,
	    0x82B6: 0x3058,
	    0x82B7: 0x3059,
	    0x82B8: 0x305A,
	    0x82B9: 0x305B,
	    0x82BA: 0x305C,
	    0x82BB: 0x305D,
	    0x82BC: 0x305E,
	    0x82BD: 0x305F,
	    0x82BE: 0x3060,
	    0x82BF: 0x3061,
	    0x82C0: 0x3062,
	    0x82C1: 0x3063,
	    0x82C2: 0x3064,
	    0x82C3: 0x3065,
	    0x82C4: 0x3066,
	    0x82C5: 0x3067,
	    0x82C6: 0x3068,
	    0x82C7: 0x3069,
	    0x82C8: 0x306A,
	    0x82C9: 0x306B,
	    0x82CA: 0x306C,
	    0x82CB: 0x306D,
	    0x82CC: 0x306E,
	    0x82CD: 0x306F,
	    0x82CE: 0x3070,
	    0x82CF: 0x3071,
	    0x82D0: 0x3072,
	    0x82D1: 0x3073,
	    0x82D2: 0x3074,
	    0x82D3: 0x3075,
	    0x82D4: 0x3076,
	    0x82D5: 0x3077,
	    0x82D6: 0x3078,
	    0x82D7: 0x3079,
	    0x82D8: 0x307A,
	    0x82D9: 0x307B,
	    0x82DA: 0x307C,
	    0x82DB: 0x307D,
	    0x82DC: 0x307E,
	    0x82DD: 0x307F,
	    0x82DE: 0x3080,
	    0x82DF: 0x3081,
	    0x82E0: 0x3082,
	    0x82E1: 0x3083,
	    0x82E2: 0x3084,
	    0x82E3: 0x3085,
	    0x82E4: 0x3086,
	    0x82E5: 0x3087,
	    0x82E6: 0x3088,
	    0x82E7: 0x3089,
	    0x82E8: 0x308A,
	    0x82E9: 0x308B,
	    0x82EA: 0x308C,
	    0x82EB: 0x308D,
	    0x82EC: 0x308E,
	    0x82ED: 0x308F,
	    0x82EE: 0x3090,
	    0x82EF: 0x3091,
	    0x82F0: 0x3092,
	    0x82F1: 0x3093,
	    0x8340: 0x30A1,
	    0x8341: 0x30A2,
	    0x8342: 0x30A3,
	    0x8343: 0x30A4,
	    0x8344: 0x30A5,
	    0x8345: 0x30A6,
	    0x8346: 0x30A7,
	    0x8347: 0x30A8,
	    0x8348: 0x30A9,
	    0x8349: 0x30AA,
	    0x834A: 0x30AB,
	    0x834B: 0x30AC,
	    0x834C: 0x30AD,
	    0x834D: 0x30AE,
	    0x834E: 0x30AF,
	    0x834F: 0x30B0,
	    0x8350: 0x30B1,
	    0x8351: 0x30B2,
	    0x8352: 0x30B3,
	    0x8353: 0x30B4,
	    0x8354: 0x30B5,
	    0x8355: 0x30B6,
	    0x8356: 0x30B7,
	    0x8357: 0x30B8,
	    0x8358: 0x30B9,
	    0x8359: 0x30BA,
	    0x835A: 0x30BB,
	    0x835B: 0x30BC,
	    0x835C: 0x30BD,
	    0x835D: 0x30BE,
	    0x835E: 0x30BF,
	    0x835F: 0x30C0,
	    0x8360: 0x30C1,
	    0x8361: 0x30C2,
	    0x8362: 0x30C3,
	    0x8363: 0x30C4,
	    0x8364: 0x30C5,
	    0x8365: 0x30C6,
	    0x8366: 0x30C7,
	    0x8367: 0x30C8,
	    0x8368: 0x30C9,
	    0x8369: 0x30CA,
	    0x836A: 0x30CB,
	    0x836B: 0x30CC,
	    0x836C: 0x30CD,
	    0x836D: 0x30CE,
	    0x836E: 0x30CF,
	    0x836F: 0x30D0,
	    0x8370: 0x30D1,
	    0x8371: 0x30D2,
	    0x8372: 0x30D3,
	    0x8373: 0x30D4,
	    0x8374: 0x30D5,
	    0x8375: 0x30D6,
	    0x8376: 0x30D7,
	    0x8377: 0x30D8,
	    0x8378: 0x30D9,
	    0x8379: 0x30DA,
	    0x837A: 0x30DB,
	    0x837B: 0x30DC,
	    0x837C: 0x30DD,
	    0x837D: 0x30DE,
	    0x837E: 0x30DF,
	    0x8380: 0x30E0,
	    0x8381: 0x30E1,
	    0x8382: 0x30E2,
	    0x8383: 0x30E3,
	    0x8384: 0x30E4,
	    0x8385: 0x30E5,
	    0x8386: 0x30E6,
	    0x8387: 0x30E7,
	    0x8388: 0x30E8,
	    0x8389: 0x30E9,
	    0x838A: 0x30EA,
	    0x838B: 0x30EB,
	    0x838C: 0x30EC,
	    0x838D: 0x30ED,
	    0x838E: 0x30EE,
	    0x838F: 0x30EF,
	    0x8390: 0x30F0,
	    0x8391: 0x30F1,
	    0x8392: 0x30F2,
	    0x8393: 0x30F3,
	    0x8394: 0x30F4,
	    0x8395: 0x30F5,
	    0x8396: 0x30F6,
	    0x839F: 0x0391,
	    0x83A0: 0x0392,
	    0x83A1: 0x0393,
	    0x83A2: 0x0394,
	    0x83A3: 0x0395,
	    0x83A4: 0x0396,
	    0x83A5: 0x0397,
	    0x83A6: 0x0398,
	    0x83A7: 0x0399,
	    0x83A8: 0x039A,
	    0x83A9: 0x039B,
	    0x83AA: 0x039C,
	    0x83AB: 0x039D,
	    0x83AC: 0x039E,
	    0x83AD: 0x039F,
	    0x83AE: 0x03A0,
	    0x83AF: 0x03A1,
	    0x83B0: 0x03A3,
	    0x83B1: 0x03A4,
	    0x83B2: 0x03A5,
	    0x83B3: 0x03A6,
	    0x83B4: 0x03A7,
	    0x83B5: 0x03A8,
	    0x83B6: 0x03A9,
	    0x83BF: 0x03B1,
	    0x83C0: 0x03B2,
	    0x83C1: 0x03B3,
	    0x83C2: 0x03B4,
	    0x83C3: 0x03B5,
	    0x83C4: 0x03B6,
	    0x83C5: 0x03B7,
	    0x83C6: 0x03B8,
	    0x83C7: 0x03B9,
	    0x83C8: 0x03BA,
	    0x83C9: 0x03BB,
	    0x83CA: 0x03BC,
	    0x83CB: 0x03BD,
	    0x83CC: 0x03BE,
	    0x83CD: 0x03BF,
	    0x83CE: 0x03C0,
	    0x83CF: 0x03C1,
	    0x83D0: 0x03C3,
	    0x83D1: 0x03C4,
	    0x83D2: 0x03C5,
	    0x83D3: 0x03C6,
	    0x83D4: 0x03C7,
	    0x83D5: 0x03C8,
	    0x83D6: 0x03C9,
	    0x8440: 0x0410,
	    0x8441: 0x0411,
	    0x8442: 0x0412,
	    0x8443: 0x0413,
	    0x8444: 0x0414,
	    0x8445: 0x0415,
	    0x8446: 0x0401,
	    0x8447: 0x0416,
	    0x8448: 0x0417,
	    0x8449: 0x0418,
	    0x844A: 0x0419,
	    0x844B: 0x041A,
	    0x844C: 0x041B,
	    0x844D: 0x041C,
	    0x844E: 0x041D,
	    0x844F: 0x041E,
	    0x8450: 0x041F,
	    0x8451: 0x0420,
	    0x8452: 0x0421,
	    0x8453: 0x0422,
	    0x8454: 0x0423,
	    0x8455: 0x0424,
	    0x8456: 0x0425,
	    0x8457: 0x0426,
	    0x8458: 0x0427,
	    0x8459: 0x0428,
	    0x845A: 0x0429,
	    0x845B: 0x042A,
	    0x845C: 0x042B,
	    0x845D: 0x042C,
	    0x845E: 0x042D,
	    0x845F: 0x042E,
	    0x8460: 0x042F,
	    0x8470: 0x0430,
	    0x8471: 0x0431,
	    0x8472: 0x0432,
	    0x8473: 0x0433,
	    0x8474: 0x0434,
	    0x8475: 0x0435,
	    0x8476: 0x0451,
	    0x8477: 0x0436,
	    0x8478: 0x0437,
	    0x8479: 0x0438,
	    0x847A: 0x0439,
	    0x847B: 0x043A,
	    0x847C: 0x043B,
	    0x847D: 0x043C,
	    0x847E: 0x043D,
	    0x8480: 0x043E,
	    0x8481: 0x043F,
	    0x8482: 0x0440,
	    0x8483: 0x0441,
	    0x8484: 0x0442,
	    0x8485: 0x0443,
	    0x8486: 0x0444,
	    0x8487: 0x0445,
	    0x8488: 0x0446,
	    0x8489: 0x0447,
	    0x848A: 0x0448,
	    0x848B: 0x0449,
	    0x848C: 0x044A,
	    0x848D: 0x044B,
	    0x848E: 0x044C,
	    0x848F: 0x044D,
	    0x8490: 0x044E,
	    0x8491: 0x044F,
	    0x849F: 0x2500,
	    0x84A0: 0x2502,
	    0x84A1: 0x250C,
	    0x84A2: 0x2510,
	    0x84A3: 0x2518,
	    0x84A4: 0x2514,
	    0x84A5: 0x251C,
	    0x84A6: 0x252C,
	    0x84A7: 0x2524,
	    0x84A8: 0x2534,
	    0x84A9: 0x253C,
	    0x84AA: 0x2501,
	    0x84AB: 0x2503,
	    0x84AC: 0x250F,
	    0x84AD: 0x2513,
	    0x84AE: 0x251B,
	    0x84AF: 0x2517,
	    0x84B0: 0x2523,
	    0x84B1: 0x2533,
	    0x84B2: 0x252B,
	    0x84B3: 0x253B,
	    0x84B4: 0x254B,
	    0x84B5: 0x2520,
	    0x84B6: 0x252F,
	    0x84B7: 0x2528,
	    0x84B8: 0x2537,
	    0x84B9: 0x253F,
	    0x84BA: 0x251D,
	    0x84BB: 0x2530,
	    0x84BC: 0x2525,
	    0x84BD: 0x2538,
	    0x84BE: 0x2542,
	    0x889F: 0x4E9C,
	    0x88A0: 0x5516,
	    0x88A1: 0x5A03,
	    0x88A2: 0x963F,
	    0x88A3: 0x54C0,
	    0x88A4: 0x611B,
	    0x88A5: 0x6328,
	    0x88A6: 0x59F6,
	    0x88A7: 0x9022,
	    0x88A8: 0x8475,
	    0x88A9: 0x831C,
	    0x88AA: 0x7A50,
	    0x88AB: 0x60AA,
	    0x88AC: 0x63E1,
	    0x88AD: 0x6E25,
	    0x88AE: 0x65ED,
	    0x88AF: 0x8466,
	    0x88B0: 0x82A6,
	    0x88B1: 0x9BF5,
	    0x88B2: 0x6893,
	    0x88B3: 0x5727,
	    0x88B4: 0x65A1,
	    0x88B5: 0x6271,
	    0x88B6: 0x5B9B,
	    0x88B7: 0x59D0,
	    0x88B8: 0x867B,
	    0x88B9: 0x98F4,
	    0x88BA: 0x7D62,
	    0x88BB: 0x7DBE,
	    0x88BC: 0x9B8E,
	    0x88BD: 0x6216,
	    0x88BE: 0x7C9F,
	    0x88BF: 0x88B7,
	    0x88C0: 0x5B89,
	    0x88C1: 0x5EB5,
	    0x88C2: 0x6309,
	    0x88C3: 0x6697,
	    0x88C4: 0x6848,
	    0x88C5: 0x95C7,
	    0x88C6: 0x978D,
	    0x88C7: 0x674F,
	    0x88C8: 0x4EE5,
	    0x88C9: 0x4F0A,
	    0x88CA: 0x4F4D,
	    0x88CB: 0x4F9D,
	    0x88CC: 0x5049,
	    0x88CD: 0x56F2,
	    0x88CE: 0x5937,
	    0x88CF: 0x59D4,
	    0x88D0: 0x5A01,
	    0x88D1: 0x5C09,
	    0x88D2: 0x60DF,
	    0x88D3: 0x610F,
	    0x88D4: 0x6170,
	    0x88D5: 0x6613,
	    0x88D6: 0x6905,
	    0x88D7: 0x70BA,
	    0x88D8: 0x754F,
	    0x88D9: 0x7570,
	    0x88DA: 0x79FB,
	    0x88DB: 0x7DAD,
	    0x88DC: 0x7DEF,
	    0x88DD: 0x80C3,
	    0x88DE: 0x840E,
	    0x88DF: 0x8863,
	    0x88E0: 0x8B02,
	    0x88E1: 0x9055,
	    0x88E2: 0x907A,
	    0x88E3: 0x533B,
	    0x88E4: 0x4E95,
	    0x88E5: 0x4EA5,
	    0x88E6: 0x57DF,
	    0x88E7: 0x80B2,
	    0x88E8: 0x90C1,
	    0x88E9: 0x78EF,
	    0x88EA: 0x4E00,
	    0x88EB: 0x58F1,
	    0x88EC: 0x6EA2,
	    0x88ED: 0x9038,
	    0x88EE: 0x7A32,
	    0x88EF: 0x8328,
	    0x88F0: 0x828B,
	    0x88F1: 0x9C2F,
	    0x88F2: 0x5141,
	    0x88F3: 0x5370,
	    0x88F4: 0x54BD,
	    0x88F5: 0x54E1,
	    0x88F6: 0x56E0,
	    0x88F7: 0x59FB,
	    0x88F8: 0x5F15,
	    0x88F9: 0x98F2,
	    0x88FA: 0x6DEB,
	    0x88FB: 0x80E4,
	    0x88FC: 0x852D,
	    0x8940: 0x9662,
	    0x8941: 0x9670,
	    0x8942: 0x96A0,
	    0x8943: 0x97FB,
	    0x8944: 0x540B,
	    0x8945: 0x53F3,
	    0x8946: 0x5B87,
	    0x8947: 0x70CF,
	    0x8948: 0x7FBD,
	    0x8949: 0x8FC2,
	    0x894A: 0x96E8,
	    0x894B: 0x536F,
	    0x894C: 0x9D5C,
	    0x894D: 0x7ABA,
	    0x894E: 0x4E11,
	    0x894F: 0x7893,
	    0x8950: 0x81FC,
	    0x8951: 0x6E26,
	    0x8952: 0x5618,
	    0x8953: 0x5504,
	    0x8954: 0x6B1D,
	    0x8955: 0x851A,
	    0x8956: 0x9C3B,
	    0x8957: 0x59E5,
	    0x8958: 0x53A9,
	    0x8959: 0x6D66,
	    0x895A: 0x74DC,
	    0x895B: 0x958F,
	    0x895C: 0x5642,
	    0x895D: 0x4E91,
	    0x895E: 0x904B,
	    0x895F: 0x96F2,
	    0x8960: 0x834F,
	    0x8961: 0x990C,
	    0x8962: 0x53E1,
	    0x8963: 0x55B6,
	    0x8964: 0x5B30,
	    0x8965: 0x5F71,
	    0x8966: 0x6620,
	    0x8967: 0x66F3,
	    0x8968: 0x6804,
	    0x8969: 0x6C38,
	    0x896A: 0x6CF3,
	    0x896B: 0x6D29,
	    0x896C: 0x745B,
	    0x896D: 0x76C8,
	    0x896E: 0x7A4E,
	    0x896F: 0x9834,
	    0x8970: 0x82F1,
	    0x8971: 0x885B,
	    0x8972: 0x8A60,
	    0x8973: 0x92ED,
	    0x8974: 0x6DB2,
	    0x8975: 0x75AB,
	    0x8976: 0x76CA,
	    0x8977: 0x99C5,
	    0x8978: 0x60A6,
	    0x8979: 0x8B01,
	    0x897A: 0x8D8A,
	    0x897B: 0x95B2,
	    0x897C: 0x698E,
	    0x897D: 0x53AD,
	    0x897E: 0x5186,
	    0x8980: 0x5712,
	    0x8981: 0x5830,
	    0x8982: 0x5944,
	    0x8983: 0x5BB4,
	    0x8984: 0x5EF6,
	    0x8985: 0x6028,
	    0x8986: 0x63A9,
	    0x8987: 0x63F4,
	    0x8988: 0x6CBF,
	    0x8989: 0x6F14,
	    0x898A: 0x708E,
	    0x898B: 0x7114,
	    0x898C: 0x7159,
	    0x898D: 0x71D5,
	    0x898E: 0x733F,
	    0x898F: 0x7E01,
	    0x8990: 0x8276,
	    0x8991: 0x82D1,
	    0x8992: 0x8597,
	    0x8993: 0x9060,
	    0x8994: 0x925B,
	    0x8995: 0x9D1B,
	    0x8996: 0x5869,
	    0x8997: 0x65BC,
	    0x8998: 0x6C5A,
	    0x8999: 0x7525,
	    0x899A: 0x51F9,
	    0x899B: 0x592E,
	    0x899C: 0x5965,
	    0x899D: 0x5F80,
	    0x899E: 0x5FDC,
	    0x899F: 0x62BC,
	    0x89A0: 0x65FA,
	    0x89A1: 0x6A2A,
	    0x89A2: 0x6B27,
	    0x89A3: 0x6BB4,
	    0x89A4: 0x738B,
	    0x89A5: 0x7FC1,
	    0x89A6: 0x8956,
	    0x89A7: 0x9D2C,
	    0x89A8: 0x9D0E,
	    0x89A9: 0x9EC4,
	    0x89AA: 0x5CA1,
	    0x89AB: 0x6C96,
	    0x89AC: 0x837B,
	    0x89AD: 0x5104,
	    0x89AE: 0x5C4B,
	    0x89AF: 0x61B6,
	    0x89B0: 0x81C6,
	    0x89B1: 0x6876,
	    0x89B2: 0x7261,
	    0x89B3: 0x4E59,
	    0x89B4: 0x4FFA,
	    0x89B5: 0x5378,
	    0x89B6: 0x6069,
	    0x89B7: 0x6E29,
	    0x89B8: 0x7A4F,
	    0x89B9: 0x97F3,
	    0x89BA: 0x4E0B,
	    0x89BB: 0x5316,
	    0x89BC: 0x4EEE,
	    0x89BD: 0x4F55,
	    0x89BE: 0x4F3D,
	    0x89BF: 0x4FA1,
	    0x89C0: 0x4F73,
	    0x89C1: 0x52A0,
	    0x89C2: 0x53EF,
	    0x89C3: 0x5609,
	    0x89C4: 0x590F,
	    0x89C5: 0x5AC1,
	    0x89C6: 0x5BB6,
	    0x89C7: 0x5BE1,
	    0x89C8: 0x79D1,
	    0x89C9: 0x6687,
	    0x89CA: 0x679C,
	    0x89CB: 0x67B6,
	    0x89CC: 0x6B4C,
	    0x89CD: 0x6CB3,
	    0x89CE: 0x706B,
	    0x89CF: 0x73C2,
	    0x89D0: 0x798D,
	    0x89D1: 0x79BE,
	    0x89D2: 0x7A3C,
	    0x89D3: 0x7B87,
	    0x89D4: 0x82B1,
	    0x89D5: 0x82DB,
	    0x89D6: 0x8304,
	    0x89D7: 0x8377,
	    0x89D8: 0x83EF,
	    0x89D9: 0x83D3,
	    0x89DA: 0x8766,
	    0x89DB: 0x8AB2,
	    0x89DC: 0x5629,
	    0x89DD: 0x8CA8,
	    0x89DE: 0x8FE6,
	    0x89DF: 0x904E,
	    0x89E0: 0x971E,
	    0x89E1: 0x868A,
	    0x89E2: 0x4FC4,
	    0x89E3: 0x5CE8,
	    0x89E4: 0x6211,
	    0x89E5: 0x7259,
	    0x89E6: 0x753B,
	    0x89E7: 0x81E5,
	    0x89E8: 0x82BD,
	    0x89E9: 0x86FE,
	    0x89EA: 0x8CC0,
	    0x89EB: 0x96C5,
	    0x89EC: 0x9913,
	    0x89ED: 0x99D5,
	    0x89EE: 0x4ECB,
	    0x89EF: 0x4F1A,
	    0x89F0: 0x89E3,
	    0x89F1: 0x56DE,
	    0x89F2: 0x584A,
	    0x89F3: 0x58CA,
	    0x89F4: 0x5EFB,
	    0x89F5: 0x5FEB,
	    0x89F6: 0x602A,
	    0x89F7: 0x6094,
	    0x89F8: 0x6062,
	    0x89F9: 0x61D0,
	    0x89FA: 0x6212,
	    0x89FB: 0x62D0,
	    0x89FC: 0x6539,
	    0x8A40: 0x9B41,
	    0x8A41: 0x6666,
	    0x8A42: 0x68B0,
	    0x8A43: 0x6D77,
	    0x8A44: 0x7070,
	    0x8A45: 0x754C,
	    0x8A46: 0x7686,
	    0x8A47: 0x7D75,
	    0x8A48: 0x82A5,
	    0x8A49: 0x87F9,
	    0x8A4A: 0x958B,
	    0x8A4B: 0x968E,
	    0x8A4C: 0x8C9D,
	    0x8A4D: 0x51F1,
	    0x8A4E: 0x52BE,
	    0x8A4F: 0x5916,
	    0x8A50: 0x54B3,
	    0x8A51: 0x5BB3,
	    0x8A52: 0x5D16,
	    0x8A53: 0x6168,
	    0x8A54: 0x6982,
	    0x8A55: 0x6DAF,
	    0x8A56: 0x788D,
	    0x8A57: 0x84CB,
	    0x8A58: 0x8857,
	    0x8A59: 0x8A72,
	    0x8A5A: 0x93A7,
	    0x8A5B: 0x9AB8,
	    0x8A5C: 0x6D6C,
	    0x8A5D: 0x99A8,
	    0x8A5E: 0x86D9,
	    0x8A5F: 0x57A3,
	    0x8A60: 0x67FF,
	    0x8A61: 0x86CE,
	    0x8A62: 0x920E,
	    0x8A63: 0x5283,
	    0x8A64: 0x5687,
	    0x8A65: 0x5404,
	    0x8A66: 0x5ED3,
	    0x8A67: 0x62E1,
	    0x8A68: 0x64B9,
	    0x8A69: 0x683C,
	    0x8A6A: 0x6838,
	    0x8A6B: 0x6BBB,
	    0x8A6C: 0x7372,
	    0x8A6D: 0x78BA,
	    0x8A6E: 0x7A6B,
	    0x8A6F: 0x899A,
	    0x8A70: 0x89D2,
	    0x8A71: 0x8D6B,
	    0x8A72: 0x8F03,
	    0x8A73: 0x90ED,
	    0x8A74: 0x95A3,
	    0x8A75: 0x9694,
	    0x8A76: 0x9769,
	    0x8A77: 0x5B66,
	    0x8A78: 0x5CB3,
	    0x8A79: 0x697D,
	    0x8A7A: 0x984D,
	    0x8A7B: 0x984E,
	    0x8A7C: 0x639B,
	    0x8A7D: 0x7B20,
	    0x8A7E: 0x6A2B,
	    0x8A80: 0x6A7F,
	    0x8A81: 0x68B6,
	    0x8A82: 0x9C0D,
	    0x8A83: 0x6F5F,
	    0x8A84: 0x5272,
	    0x8A85: 0x559D,
	    0x8A86: 0x6070,
	    0x8A87: 0x62EC,
	    0x8A88: 0x6D3B,
	    0x8A89: 0x6E07,
	    0x8A8A: 0x6ED1,
	    0x8A8B: 0x845B,
	    0x8A8C: 0x8910,
	    0x8A8D: 0x8F44,
	    0x8A8E: 0x4E14,
	    0x8A8F: 0x9C39,
	    0x8A90: 0x53F6,
	    0x8A91: 0x691B,
	    0x8A92: 0x6A3A,
	    0x8A93: 0x9784,
	    0x8A94: 0x682A,
	    0x8A95: 0x515C,
	    0x8A96: 0x7AC3,
	    0x8A97: 0x84B2,
	    0x8A98: 0x91DC,
	    0x8A99: 0x938C,
	    0x8A9A: 0x565B,
	    0x8A9B: 0x9D28,
	    0x8A9C: 0x6822,
	    0x8A9D: 0x8305,
	    0x8A9E: 0x8431,
	    0x8A9F: 0x7CA5,
	    0x8AA0: 0x5208,
	    0x8AA1: 0x82C5,
	    0x8AA2: 0x74E6,
	    0x8AA3: 0x4E7E,
	    0x8AA4: 0x4F83,
	    0x8AA5: 0x51A0,
	    0x8AA6: 0x5BD2,
	    0x8AA7: 0x520A,
	    0x8AA8: 0x52D8,
	    0x8AA9: 0x52E7,
	    0x8AAA: 0x5DFB,
	    0x8AAB: 0x559A,
	    0x8AAC: 0x582A,
	    0x8AAD: 0x59E6,
	    0x8AAE: 0x5B8C,
	    0x8AAF: 0x5B98,
	    0x8AB0: 0x5BDB,
	    0x8AB1: 0x5E72,
	    0x8AB2: 0x5E79,
	    0x8AB3: 0x60A3,
	    0x8AB4: 0x611F,
	    0x8AB5: 0x6163,
	    0x8AB6: 0x61BE,
	    0x8AB7: 0x63DB,
	    0x8AB8: 0x6562,
	    0x8AB9: 0x67D1,
	    0x8ABA: 0x6853,
	    0x8ABB: 0x68FA,
	    0x8ABC: 0x6B3E,
	    0x8ABD: 0x6B53,
	    0x8ABE: 0x6C57,
	    0x8ABF: 0x6F22,
	    0x8AC0: 0x6F97,
	    0x8AC1: 0x6F45,
	    0x8AC2: 0x74B0,
	    0x8AC3: 0x7518,
	    0x8AC4: 0x76E3,
	    0x8AC5: 0x770B,
	    0x8AC6: 0x7AFF,
	    0x8AC7: 0x7BA1,
	    0x8AC8: 0x7C21,
	    0x8AC9: 0x7DE9,
	    0x8ACA: 0x7F36,
	    0x8ACB: 0x7FF0,
	    0x8ACC: 0x809D,
	    0x8ACD: 0x8266,
	    0x8ACE: 0x839E,
	    0x8ACF: 0x89B3,
	    0x8AD0: 0x8ACC,
	    0x8AD1: 0x8CAB,
	    0x8AD2: 0x9084,
	    0x8AD3: 0x9451,
	    0x8AD4: 0x9593,
	    0x8AD5: 0x9591,
	    0x8AD6: 0x95A2,
	    0x8AD7: 0x9665,
	    0x8AD8: 0x97D3,
	    0x8AD9: 0x9928,
	    0x8ADA: 0x8218,
	    0x8ADB: 0x4E38,
	    0x8ADC: 0x542B,
	    0x8ADD: 0x5CB8,
	    0x8ADE: 0x5DCC,
	    0x8ADF: 0x73A9,
	    0x8AE0: 0x764C,
	    0x8AE1: 0x773C,
	    0x8AE2: 0x5CA9,
	    0x8AE3: 0x7FEB,
	    0x8AE4: 0x8D0B,
	    0x8AE5: 0x96C1,
	    0x8AE6: 0x9811,
	    0x8AE7: 0x9854,
	    0x8AE8: 0x9858,
	    0x8AE9: 0x4F01,
	    0x8AEA: 0x4F0E,
	    0x8AEB: 0x5371,
	    0x8AEC: 0x559C,
	    0x8AED: 0x5668,
	    0x8AEE: 0x57FA,
	    0x8AEF: 0x5947,
	    0x8AF0: 0x5B09,
	    0x8AF1: 0x5BC4,
	    0x8AF2: 0x5C90,
	    0x8AF3: 0x5E0C,
	    0x8AF4: 0x5E7E,
	    0x8AF5: 0x5FCC,
	    0x8AF6: 0x63EE,
	    0x8AF7: 0x673A,
	    0x8AF8: 0x65D7,
	    0x8AF9: 0x65E2,
	    0x8AFA: 0x671F,
	    0x8AFB: 0x68CB,
	    0x8AFC: 0x68C4,
	    0x8B40: 0x6A5F,
	    0x8B41: 0x5E30,
	    0x8B42: 0x6BC5,
	    0x8B43: 0x6C17,
	    0x8B44: 0x6C7D,
	    0x8B45: 0x757F,
	    0x8B46: 0x7948,
	    0x8B47: 0x5B63,
	    0x8B48: 0x7A00,
	    0x8B49: 0x7D00,
	    0x8B4A: 0x5FBD,
	    0x8B4B: 0x898F,
	    0x8B4C: 0x8A18,
	    0x8B4D: 0x8CB4,
	    0x8B4E: 0x8D77,
	    0x8B4F: 0x8ECC,
	    0x8B50: 0x8F1D,
	    0x8B51: 0x98E2,
	    0x8B52: 0x9A0E,
	    0x8B53: 0x9B3C,
	    0x8B54: 0x4E80,
	    0x8B55: 0x507D,
	    0x8B56: 0x5100,
	    0x8B57: 0x5993,
	    0x8B58: 0x5B9C,
	    0x8B59: 0x622F,
	    0x8B5A: 0x6280,
	    0x8B5B: 0x64EC,
	    0x8B5C: 0x6B3A,
	    0x8B5D: 0x72A0,
	    0x8B5E: 0x7591,
	    0x8B5F: 0x7947,
	    0x8B60: 0x7FA9,
	    0x8B61: 0x87FB,
	    0x8B62: 0x8ABC,
	    0x8B63: 0x8B70,
	    0x8B64: 0x63AC,
	    0x8B65: 0x83CA,
	    0x8B66: 0x97A0,
	    0x8B67: 0x5409,
	    0x8B68: 0x5403,
	    0x8B69: 0x55AB,
	    0x8B6A: 0x6854,
	    0x8B6B: 0x6A58,
	    0x8B6C: 0x8A70,
	    0x8B6D: 0x7827,
	    0x8B6E: 0x6775,
	    0x8B6F: 0x9ECD,
	    0x8B70: 0x5374,
	    0x8B71: 0x5BA2,
	    0x8B72: 0x811A,
	    0x8B73: 0x8650,
	    0x8B74: 0x9006,
	    0x8B75: 0x4E18,
	    0x8B76: 0x4E45,
	    0x8B77: 0x4EC7,
	    0x8B78: 0x4F11,
	    0x8B79: 0x53CA,
	    0x8B7A: 0x5438,
	    0x8B7B: 0x5BAE,
	    0x8B7C: 0x5F13,
	    0x8B7D: 0x6025,
	    0x8B7E: 0x6551,
	    0x8B80: 0x673D,
	    0x8B81: 0x6C42,
	    0x8B82: 0x6C72,
	    0x8B83: 0x6CE3,
	    0x8B84: 0x7078,
	    0x8B85: 0x7403,
	    0x8B86: 0x7A76,
	    0x8B87: 0x7AAE,
	    0x8B88: 0x7B08,
	    0x8B89: 0x7D1A,
	    0x8B8A: 0x7CFE,
	    0x8B8B: 0x7D66,
	    0x8B8C: 0x65E7,
	    0x8B8D: 0x725B,
	    0x8B8E: 0x53BB,
	    0x8B8F: 0x5C45,
	    0x8B90: 0x5DE8,
	    0x8B91: 0x62D2,
	    0x8B92: 0x62E0,
	    0x8B93: 0x6319,
	    0x8B94: 0x6E20,
	    0x8B95: 0x865A,
	    0x8B96: 0x8A31,
	    0x8B97: 0x8DDD,
	    0x8B98: 0x92F8,
	    0x8B99: 0x6F01,
	    0x8B9A: 0x79A6,
	    0x8B9B: 0x9B5A,
	    0x8B9C: 0x4EA8,
	    0x8B9D: 0x4EAB,
	    0x8B9E: 0x4EAC,
	    0x8B9F: 0x4F9B,
	    0x8BA0: 0x4FA0,
	    0x8BA1: 0x50D1,
	    0x8BA2: 0x5147,
	    0x8BA3: 0x7AF6,
	    0x8BA4: 0x5171,
	    0x8BA5: 0x51F6,
	    0x8BA6: 0x5354,
	    0x8BA7: 0x5321,
	    0x8BA8: 0x537F,
	    0x8BA9: 0x53EB,
	    0x8BAA: 0x55AC,
	    0x8BAB: 0x5883,
	    0x8BAC: 0x5CE1,
	    0x8BAD: 0x5F37,
	    0x8BAE: 0x5F4A,
	    0x8BAF: 0x602F,
	    0x8BB0: 0x6050,
	    0x8BB1: 0x606D,
	    0x8BB2: 0x631F,
	    0x8BB3: 0x6559,
	    0x8BB4: 0x6A4B,
	    0x8BB5: 0x6CC1,
	    0x8BB6: 0x72C2,
	    0x8BB7: 0x72ED,
	    0x8BB8: 0x77EF,
	    0x8BB9: 0x80F8,
	    0x8BBA: 0x8105,
	    0x8BBB: 0x8208,
	    0x8BBC: 0x854E,
	    0x8BBD: 0x90F7,
	    0x8BBE: 0x93E1,
	    0x8BBF: 0x97FF,
	    0x8BC0: 0x9957,
	    0x8BC1: 0x9A5A,
	    0x8BC2: 0x4EF0,
	    0x8BC3: 0x51DD,
	    0x8BC4: 0x5C2D,
	    0x8BC5: 0x6681,
	    0x8BC6: 0x696D,
	    0x8BC7: 0x5C40,
	    0x8BC8: 0x66F2,
	    0x8BC9: 0x6975,
	    0x8BCA: 0x7389,
	    0x8BCB: 0x6850,
	    0x8BCC: 0x7C81,
	    0x8BCD: 0x50C5,
	    0x8BCE: 0x52E4,
	    0x8BCF: 0x5747,
	    0x8BD0: 0x5DFE,
	    0x8BD1: 0x9326,
	    0x8BD2: 0x65A4,
	    0x8BD3: 0x6B23,
	    0x8BD4: 0x6B3D,
	    0x8BD5: 0x7434,
	    0x8BD6: 0x7981,
	    0x8BD7: 0x79BD,
	    0x8BD8: 0x7B4B,
	    0x8BD9: 0x7DCA,
	    0x8BDA: 0x82B9,
	    0x8BDB: 0x83CC,
	    0x8BDC: 0x887F,
	    0x8BDD: 0x895F,
	    0x8BDE: 0x8B39,
	    0x8BDF: 0x8FD1,
	    0x8BE0: 0x91D1,
	    0x8BE1: 0x541F,
	    0x8BE2: 0x9280,
	    0x8BE3: 0x4E5D,
	    0x8BE4: 0x5036,
	    0x8BE5: 0x53E5,
	    0x8BE6: 0x533A,
	    0x8BE7: 0x72D7,
	    0x8BE8: 0x7396,
	    0x8BE9: 0x77E9,
	    0x8BEA: 0x82E6,
	    0x8BEB: 0x8EAF,
	    0x8BEC: 0x99C6,
	    0x8BED: 0x99C8,
	    0x8BEE: 0x99D2,
	    0x8BEF: 0x5177,
	    0x8BF0: 0x611A,
	    0x8BF1: 0x865E,
	    0x8BF2: 0x55B0,
	    0x8BF3: 0x7A7A,
	    0x8BF4: 0x5076,
	    0x8BF5: 0x5BD3,
	    0x8BF6: 0x9047,
	    0x8BF7: 0x9685,
	    0x8BF8: 0x4E32,
	    0x8BF9: 0x6ADB,
	    0x8BFA: 0x91E7,
	    0x8BFB: 0x5C51,
	    0x8BFC: 0x5C48,
	    0x8C40: 0x6398,
	    0x8C41: 0x7A9F,
	    0x8C42: 0x6C93,
	    0x8C43: 0x9774,
	    0x8C44: 0x8F61,
	    0x8C45: 0x7AAA,
	    0x8C46: 0x718A,
	    0x8C47: 0x9688,
	    0x8C48: 0x7C82,
	    0x8C49: 0x6817,
	    0x8C4A: 0x7E70,
	    0x8C4B: 0x6851,
	    0x8C4C: 0x936C,
	    0x8C4D: 0x52F2,
	    0x8C4E: 0x541B,
	    0x8C4F: 0x85AB,
	    0x8C50: 0x8A13,
	    0x8C51: 0x7FA4,
	    0x8C52: 0x8ECD,
	    0x8C53: 0x90E1,
	    0x8C54: 0x5366,
	    0x8C55: 0x8888,
	    0x8C56: 0x7941,
	    0x8C57: 0x4FC2,
	    0x8C58: 0x50BE,
	    0x8C59: 0x5211,
	    0x8C5A: 0x5144,
	    0x8C5B: 0x5553,
	    0x8C5C: 0x572D,
	    0x8C5D: 0x73EA,
	    0x8C5E: 0x578B,
	    0x8C5F: 0x5951,
	    0x8C60: 0x5F62,
	    0x8C61: 0x5F84,
	    0x8C62: 0x6075,
	    0x8C63: 0x6176,
	    0x8C64: 0x6167,
	    0x8C65: 0x61A9,
	    0x8C66: 0x63B2,
	    0x8C67: 0x643A,
	    0x8C68: 0x656C,
	    0x8C69: 0x666F,
	    0x8C6A: 0x6842,
	    0x8C6B: 0x6E13,
	    0x8C6C: 0x7566,
	    0x8C6D: 0x7A3D,
	    0x8C6E: 0x7CFB,
	    0x8C6F: 0x7D4C,
	    0x8C70: 0x7D99,
	    0x8C71: 0x7E4B,
	    0x8C72: 0x7F6B,
	    0x8C73: 0x830E,
	    0x8C74: 0x834A,
	    0x8C75: 0x86CD,
	    0x8C76: 0x8A08,
	    0x8C77: 0x8A63,
	    0x8C78: 0x8B66,
	    0x8C79: 0x8EFD,
	    0x8C7A: 0x981A,
	    0x8C7B: 0x9D8F,
	    0x8C7C: 0x82B8,
	    0x8C7D: 0x8FCE,
	    0x8C7E: 0x9BE8,
	    0x8C80: 0x5287,
	    0x8C81: 0x621F,
	    0x8C82: 0x6483,
	    0x8C83: 0x6FC0,
	    0x8C84: 0x9699,
	    0x8C85: 0x6841,
	    0x8C86: 0x5091,
	    0x8C87: 0x6B20,
	    0x8C88: 0x6C7A,
	    0x8C89: 0x6F54,
	    0x8C8A: 0x7A74,
	    0x8C8B: 0x7D50,
	    0x8C8C: 0x8840,
	    0x8C8D: 0x8A23,
	    0x8C8E: 0x6708,
	    0x8C8F: 0x4EF6,
	    0x8C90: 0x5039,
	    0x8C91: 0x5026,
	    0x8C92: 0x5065,
	    0x8C93: 0x517C,
	    0x8C94: 0x5238,
	    0x8C95: 0x5263,
	    0x8C96: 0x55A7,
	    0x8C97: 0x570F,
	    0x8C98: 0x5805,
	    0x8C99: 0x5ACC,
	    0x8C9A: 0x5EFA,
	    0x8C9B: 0x61B2,
	    0x8C9C: 0x61F8,
	    0x8C9D: 0x62F3,
	    0x8C9E: 0x6372,
	    0x8C9F: 0x691C,
	    0x8CA0: 0x6A29,
	    0x8CA1: 0x727D,
	    0x8CA2: 0x72AC,
	    0x8CA3: 0x732E,
	    0x8CA4: 0x7814,
	    0x8CA5: 0x786F,
	    0x8CA6: 0x7D79,
	    0x8CA7: 0x770C,
	    0x8CA8: 0x80A9,
	    0x8CA9: 0x898B,
	    0x8CAA: 0x8B19,
	    0x8CAB: 0x8CE2,
	    0x8CAC: 0x8ED2,
	    0x8CAD: 0x9063,
	    0x8CAE: 0x9375,
	    0x8CAF: 0x967A,
	    0x8CB0: 0x9855,
	    0x8CB1: 0x9A13,
	    0x8CB2: 0x9E78,
	    0x8CB3: 0x5143,
	    0x8CB4: 0x539F,
	    0x8CB5: 0x53B3,
	    0x8CB6: 0x5E7B,
	    0x8CB7: 0x5F26,
	    0x8CB8: 0x6E1B,
	    0x8CB9: 0x6E90,
	    0x8CBA: 0x7384,
	    0x8CBB: 0x73FE,
	    0x8CBC: 0x7D43,
	    0x8CBD: 0x8237,
	    0x8CBE: 0x8A00,
	    0x8CBF: 0x8AFA,
	    0x8CC0: 0x9650,
	    0x8CC1: 0x4E4E,
	    0x8CC2: 0x500B,
	    0x8CC3: 0x53E4,
	    0x8CC4: 0x547C,
	    0x8CC5: 0x56FA,
	    0x8CC6: 0x59D1,
	    0x8CC7: 0x5B64,
	    0x8CC8: 0x5DF1,
	    0x8CC9: 0x5EAB,
	    0x8CCA: 0x5F27,
	    0x8CCB: 0x6238,
	    0x8CCC: 0x6545,
	    0x8CCD: 0x67AF,
	    0x8CCE: 0x6E56,
	    0x8CCF: 0x72D0,
	    0x8CD0: 0x7CCA,
	    0x8CD1: 0x88B4,
	    0x8CD2: 0x80A1,
	    0x8CD3: 0x80E1,
	    0x8CD4: 0x83F0,
	    0x8CD5: 0x864E,
	    0x8CD6: 0x8A87,
	    0x8CD7: 0x8DE8,
	    0x8CD8: 0x9237,
	    0x8CD9: 0x96C7,
	    0x8CDA: 0x9867,
	    0x8CDB: 0x9F13,
	    0x8CDC: 0x4E94,
	    0x8CDD: 0x4E92,
	    0x8CDE: 0x4F0D,
	    0x8CDF: 0x5348,
	    0x8CE0: 0x5449,
	    0x8CE1: 0x543E,
	    0x8CE2: 0x5A2F,
	    0x8CE3: 0x5F8C,
	    0x8CE4: 0x5FA1,
	    0x8CE5: 0x609F,
	    0x8CE6: 0x68A7,
	    0x8CE7: 0x6A8E,
	    0x8CE8: 0x745A,
	    0x8CE9: 0x7881,
	    0x8CEA: 0x8A9E,
	    0x8CEB: 0x8AA4,
	    0x8CEC: 0x8B77,
	    0x8CED: 0x9190,
	    0x8CEE: 0x4E5E,
	    0x8CEF: 0x9BC9,
	    0x8CF0: 0x4EA4,
	    0x8CF1: 0x4F7C,
	    0x8CF2: 0x4FAF,
	    0x8CF3: 0x5019,
	    0x8CF4: 0x5016,
	    0x8CF5: 0x5149,
	    0x8CF6: 0x516C,
	    0x8CF7: 0x529F,
	    0x8CF8: 0x52B9,
	    0x8CF9: 0x52FE,
	    0x8CFA: 0x539A,
	    0x8CFB: 0x53E3,
	    0x8CFC: 0x5411,
	    0x8D40: 0x540E,
	    0x8D41: 0x5589,
	    0x8D42: 0x5751,
	    0x8D43: 0x57A2,
	    0x8D44: 0x597D,
	    0x8D45: 0x5B54,
	    0x8D46: 0x5B5D,
	    0x8D47: 0x5B8F,
	    0x8D48: 0x5DE5,
	    0x8D49: 0x5DE7,
	    0x8D4A: 0x5DF7,
	    0x8D4B: 0x5E78,
	    0x8D4C: 0x5E83,
	    0x8D4D: 0x5E9A,
	    0x8D4E: 0x5EB7,
	    0x8D4F: 0x5F18,
	    0x8D50: 0x6052,
	    0x8D51: 0x614C,
	    0x8D52: 0x6297,
	    0x8D53: 0x62D8,
	    0x8D54: 0x63A7,
	    0x8D55: 0x653B,
	    0x8D56: 0x6602,
	    0x8D57: 0x6643,
	    0x8D58: 0x66F4,
	    0x8D59: 0x676D,
	    0x8D5A: 0x6821,
	    0x8D5B: 0x6897,
	    0x8D5C: 0x69CB,
	    0x8D5D: 0x6C5F,
	    0x8D5E: 0x6D2A,
	    0x8D5F: 0x6D69,
	    0x8D60: 0x6E2F,
	    0x8D61: 0x6E9D,
	    0x8D62: 0x7532,
	    0x8D63: 0x7687,
	    0x8D64: 0x786C,
	    0x8D65: 0x7A3F,
	    0x8D66: 0x7CE0,
	    0x8D67: 0x7D05,
	    0x8D68: 0x7D18,
	    0x8D69: 0x7D5E,
	    0x8D6A: 0x7DB1,
	    0x8D6B: 0x8015,
	    0x8D6C: 0x8003,
	    0x8D6D: 0x80AF,
	    0x8D6E: 0x80B1,
	    0x8D6F: 0x8154,
	    0x8D70: 0x818F,
	    0x8D71: 0x822A,
	    0x8D72: 0x8352,
	    0x8D73: 0x884C,
	    0x8D74: 0x8861,
	    0x8D75: 0x8B1B,
	    0x8D76: 0x8CA2,
	    0x8D77: 0x8CFC,
	    0x8D78: 0x90CA,
	    0x8D79: 0x9175,
	    0x8D7A: 0x9271,
	    0x8D7B: 0x783F,
	    0x8D7C: 0x92FC,
	    0x8D7D: 0x95A4,
	    0x8D7E: 0x964D,
	    0x8D80: 0x9805,
	    0x8D81: 0x9999,
	    0x8D82: 0x9AD8,
	    0x8D83: 0x9D3B,
	    0x8D84: 0x525B,
	    0x8D85: 0x52AB,
	    0x8D86: 0x53F7,
	    0x8D87: 0x5408,
	    0x8D88: 0x58D5,
	    0x8D89: 0x62F7,
	    0x8D8A: 0x6FE0,
	    0x8D8B: 0x8C6A,
	    0x8D8C: 0x8F5F,
	    0x8D8D: 0x9EB9,
	    0x8D8E: 0x514B,
	    0x8D8F: 0x523B,
	    0x8D90: 0x544A,
	    0x8D91: 0x56FD,
	    0x8D92: 0x7A40,
	    0x8D93: 0x9177,
	    0x8D94: 0x9D60,
	    0x8D95: 0x9ED2,
	    0x8D96: 0x7344,
	    0x8D97: 0x6F09,
	    0x8D98: 0x8170,
	    0x8D99: 0x7511,
	    0x8D9A: 0x5FFD,
	    0x8D9B: 0x60DA,
	    0x8D9C: 0x9AA8,
	    0x8D9D: 0x72DB,
	    0x8D9E: 0x8FBC,
	    0x8D9F: 0x6B64,
	    0x8DA0: 0x9803,
	    0x8DA1: 0x4ECA,
	    0x8DA2: 0x56F0,
	    0x8DA3: 0x5764,
	    0x8DA4: 0x58BE,
	    0x8DA5: 0x5A5A,
	    0x8DA6: 0x6068,
	    0x8DA7: 0x61C7,
	    0x8DA8: 0x660F,
	    0x8DA9: 0x6606,
	    0x8DAA: 0x6839,
	    0x8DAB: 0x68B1,
	    0x8DAC: 0x6DF7,
	    0x8DAD: 0x75D5,
	    0x8DAE: 0x7D3A,
	    0x8DAF: 0x826E,
	    0x8DB0: 0x9B42,
	    0x8DB1: 0x4E9B,
	    0x8DB2: 0x4F50,
	    0x8DB3: 0x53C9,
	    0x8DB4: 0x5506,
	    0x8DB5: 0x5D6F,
	    0x8DB6: 0x5DE6,
	    0x8DB7: 0x5DEE,
	    0x8DB8: 0x67FB,
	    0x8DB9: 0x6C99,
	    0x8DBA: 0x7473,
	    0x8DBB: 0x7802,
	    0x8DBC: 0x8A50,
	    0x8DBD: 0x9396,
	    0x8DBE: 0x88DF,
	    0x8DBF: 0x5750,
	    0x8DC0: 0x5EA7,
	    0x8DC1: 0x632B,
	    0x8DC2: 0x50B5,
	    0x8DC3: 0x50AC,
	    0x8DC4: 0x518D,
	    0x8DC5: 0x6700,
	    0x8DC6: 0x54C9,
	    0x8DC7: 0x585E,
	    0x8DC8: 0x59BB,
	    0x8DC9: 0x5BB0,
	    0x8DCA: 0x5F69,
	    0x8DCB: 0x624D,
	    0x8DCC: 0x63A1,
	    0x8DCD: 0x683D,
	    0x8DCE: 0x6B73,
	    0x8DCF: 0x6E08,
	    0x8DD0: 0x707D,
	    0x8DD1: 0x91C7,
	    0x8DD2: 0x7280,
	    0x8DD3: 0x7815,
	    0x8DD4: 0x7826,
	    0x8DD5: 0x796D,
	    0x8DD6: 0x658E,
	    0x8DD7: 0x7D30,
	    0x8DD8: 0x83DC,
	    0x8DD9: 0x88C1,
	    0x8DDA: 0x8F09,
	    0x8DDB: 0x969B,
	    0x8DDC: 0x5264,
	    0x8DDD: 0x5728,
	    0x8DDE: 0x6750,
	    0x8DDF: 0x7F6A,
	    0x8DE0: 0x8CA1,
	    0x8DE1: 0x51B4,
	    0x8DE2: 0x5742,
	    0x8DE3: 0x962A,
	    0x8DE4: 0x583A,
	    0x8DE5: 0x698A,
	    0x8DE6: 0x80B4,
	    0x8DE7: 0x54B2,
	    0x8DE8: 0x5D0E,
	    0x8DE9: 0x57FC,
	    0x8DEA: 0x7895,
	    0x8DEB: 0x9DFA,
	    0x8DEC: 0x4F5C,
	    0x8DED: 0x524A,
	    0x8DEE: 0x548B,
	    0x8DEF: 0x643E,
	    0x8DF0: 0x6628,
	    0x8DF1: 0x6714,
	    0x8DF2: 0x67F5,
	    0x8DF3: 0x7A84,
	    0x8DF4: 0x7B56,
	    0x8DF5: 0x7D22,
	    0x8DF6: 0x932F,
	    0x8DF7: 0x685C,
	    0x8DF8: 0x9BAD,
	    0x8DF9: 0x7B39,
	    0x8DFA: 0x5319,
	    0x8DFB: 0x518A,
	    0x8DFC: 0x5237,
	    0x8E40: 0x5BDF,
	    0x8E41: 0x62F6,
	    0x8E42: 0x64AE,
	    0x8E43: 0x64E6,
	    0x8E44: 0x672D,
	    0x8E45: 0x6BBA,
	    0x8E46: 0x85A9,
	    0x8E47: 0x96D1,
	    0x8E48: 0x7690,
	    0x8E49: 0x9BD6,
	    0x8E4A: 0x634C,
	    0x8E4B: 0x9306,
	    0x8E4C: 0x9BAB,
	    0x8E4D: 0x76BF,
	    0x8E4E: 0x6652,
	    0x8E4F: 0x4E09,
	    0x8E50: 0x5098,
	    0x8E51: 0x53C2,
	    0x8E52: 0x5C71,
	    0x8E53: 0x60E8,
	    0x8E54: 0x6492,
	    0x8E55: 0x6563,
	    0x8E56: 0x685F,
	    0x8E57: 0x71E6,
	    0x8E58: 0x73CA,
	    0x8E59: 0x7523,
	    0x8E5A: 0x7B97,
	    0x8E5B: 0x7E82,
	    0x8E5C: 0x8695,
	    0x8E5D: 0x8B83,
	    0x8E5E: 0x8CDB,
	    0x8E5F: 0x9178,
	    0x8E60: 0x9910,
	    0x8E61: 0x65AC,
	    0x8E62: 0x66AB,
	    0x8E63: 0x6B8B,
	    0x8E64: 0x4ED5,
	    0x8E65: 0x4ED4,
	    0x8E66: 0x4F3A,
	    0x8E67: 0x4F7F,
	    0x8E68: 0x523A,
	    0x8E69: 0x53F8,
	    0x8E6A: 0x53F2,
	    0x8E6B: 0x55E3,
	    0x8E6C: 0x56DB,
	    0x8E6D: 0x58EB,
	    0x8E6E: 0x59CB,
	    0x8E6F: 0x59C9,
	    0x8E70: 0x59FF,
	    0x8E71: 0x5B50,
	    0x8E72: 0x5C4D,
	    0x8E73: 0x5E02,
	    0x8E74: 0x5E2B,
	    0x8E75: 0x5FD7,
	    0x8E76: 0x601D,
	    0x8E77: 0x6307,
	    0x8E78: 0x652F,
	    0x8E79: 0x5B5C,
	    0x8E7A: 0x65AF,
	    0x8E7B: 0x65BD,
	    0x8E7C: 0x65E8,
	    0x8E7D: 0x679D,
	    0x8E7E: 0x6B62,
	    0x8E80: 0x6B7B,
	    0x8E81: 0x6C0F,
	    0x8E82: 0x7345,
	    0x8E83: 0x7949,
	    0x8E84: 0x79C1,
	    0x8E85: 0x7CF8,
	    0x8E86: 0x7D19,
	    0x8E87: 0x7D2B,
	    0x8E88: 0x80A2,
	    0x8E89: 0x8102,
	    0x8E8A: 0x81F3,
	    0x8E8B: 0x8996,
	    0x8E8C: 0x8A5E,
	    0x8E8D: 0x8A69,
	    0x8E8E: 0x8A66,
	    0x8E8F: 0x8A8C,
	    0x8E90: 0x8AEE,
	    0x8E91: 0x8CC7,
	    0x8E92: 0x8CDC,
	    0x8E93: 0x96CC,
	    0x8E94: 0x98FC,
	    0x8E95: 0x6B6F,
	    0x8E96: 0x4E8B,
	    0x8E97: 0x4F3C,
	    0x8E98: 0x4F8D,
	    0x8E99: 0x5150,
	    0x8E9A: 0x5B57,
	    0x8E9B: 0x5BFA,
	    0x8E9C: 0x6148,
	    0x8E9D: 0x6301,
	    0x8E9E: 0x6642,
	    0x8E9F: 0x6B21,
	    0x8EA0: 0x6ECB,
	    0x8EA1: 0x6CBB,
	    0x8EA2: 0x723E,
	    0x8EA3: 0x74BD,
	    0x8EA4: 0x75D4,
	    0x8EA5: 0x78C1,
	    0x8EA6: 0x793A,
	    0x8EA7: 0x800C,
	    0x8EA8: 0x8033,
	    0x8EA9: 0x81EA,
	    0x8EAA: 0x8494,
	    0x8EAB: 0x8F9E,
	    0x8EAC: 0x6C50,
	    0x8EAD: 0x9E7F,
	    0x8EAE: 0x5F0F,
	    0x8EAF: 0x8B58,
	    0x8EB0: 0x9D2B,
	    0x8EB1: 0x7AFA,
	    0x8EB2: 0x8EF8,
	    0x8EB3: 0x5B8D,
	    0x8EB4: 0x96EB,
	    0x8EB5: 0x4E03,
	    0x8EB6: 0x53F1,
	    0x8EB7: 0x57F7,
	    0x8EB8: 0x5931,
	    0x8EB9: 0x5AC9,
	    0x8EBA: 0x5BA4,
	    0x8EBB: 0x6089,
	    0x8EBC: 0x6E7F,
	    0x8EBD: 0x6F06,
	    0x8EBE: 0x75BE,
	    0x8EBF: 0x8CEA,
	    0x8EC0: 0x5B9F,
	    0x8EC1: 0x8500,
	    0x8EC2: 0x7BE0,
	    0x8EC3: 0x5072,
	    0x8EC4: 0x67F4,
	    0x8EC5: 0x829D,
	    0x8EC6: 0x5C61,
	    0x8EC7: 0x854A,
	    0x8EC8: 0x7E1E,
	    0x8EC9: 0x820E,
	    0x8ECA: 0x5199,
	    0x8ECB: 0x5C04,
	    0x8ECC: 0x6368,
	    0x8ECD: 0x8D66,
	    0x8ECE: 0x659C,
	    0x8ECF: 0x716E,
	    0x8ED0: 0x793E,
	    0x8ED1: 0x7D17,
	    0x8ED2: 0x8005,
	    0x8ED3: 0x8B1D,
	    0x8ED4: 0x8ECA,
	    0x8ED5: 0x906E,
	    0x8ED6: 0x86C7,
	    0x8ED7: 0x90AA,
	    0x8ED8: 0x501F,
	    0x8ED9: 0x52FA,
	    0x8EDA: 0x5C3A,
	    0x8EDB: 0x6753,
	    0x8EDC: 0x707C,
	    0x8EDD: 0x7235,
	    0x8EDE: 0x914C,
	    0x8EDF: 0x91C8,
	    0x8EE0: 0x932B,
	    0x8EE1: 0x82E5,
	    0x8EE2: 0x5BC2,
	    0x8EE3: 0x5F31,
	    0x8EE4: 0x60F9,
	    0x8EE5: 0x4E3B,
	    0x8EE6: 0x53D6,
	    0x8EE7: 0x5B88,
	    0x8EE8: 0x624B,
	    0x8EE9: 0x6731,
	    0x8EEA: 0x6B8A,
	    0x8EEB: 0x72E9,
	    0x8EEC: 0x73E0,
	    0x8EED: 0x7A2E,
	    0x8EEE: 0x816B,
	    0x8EEF: 0x8DA3,
	    0x8EF0: 0x9152,
	    0x8EF1: 0x9996,
	    0x8EF2: 0x5112,
	    0x8EF3: 0x53D7,
	    0x8EF4: 0x546A,
	    0x8EF5: 0x5BFF,
	    0x8EF6: 0x6388,
	    0x8EF7: 0x6A39,
	    0x8EF8: 0x7DAC,
	    0x8EF9: 0x9700,
	    0x8EFA: 0x56DA,
	    0x8EFB: 0x53CE,
	    0x8EFC: 0x5468,
	    0x8F40: 0x5B97,
	    0x8F41: 0x5C31,
	    0x8F42: 0x5DDE,
	    0x8F43: 0x4FEE,
	    0x8F44: 0x6101,
	    0x8F45: 0x62FE,
	    0x8F46: 0x6D32,
	    0x8F47: 0x79C0,
	    0x8F48: 0x79CB,
	    0x8F49: 0x7D42,
	    0x8F4A: 0x7E4D,
	    0x8F4B: 0x7FD2,
	    0x8F4C: 0x81ED,
	    0x8F4D: 0x821F,
	    0x8F4E: 0x8490,
	    0x8F4F: 0x8846,
	    0x8F50: 0x8972,
	    0x8F51: 0x8B90,
	    0x8F52: 0x8E74,
	    0x8F53: 0x8F2F,
	    0x8F54: 0x9031,
	    0x8F55: 0x914B,
	    0x8F56: 0x916C,
	    0x8F57: 0x96C6,
	    0x8F58: 0x919C,
	    0x8F59: 0x4EC0,
	    0x8F5A: 0x4F4F,
	    0x8F5B: 0x5145,
	    0x8F5C: 0x5341,
	    0x8F5D: 0x5F93,
	    0x8F5E: 0x620E,
	    0x8F5F: 0x67D4,
	    0x8F60: 0x6C41,
	    0x8F61: 0x6E0B,
	    0x8F62: 0x7363,
	    0x8F63: 0x7E26,
	    0x8F64: 0x91CD,
	    0x8F65: 0x9283,
	    0x8F66: 0x53D4,
	    0x8F67: 0x5919,
	    0x8F68: 0x5BBF,
	    0x8F69: 0x6DD1,
	    0x8F6A: 0x795D,
	    0x8F6B: 0x7E2E,
	    0x8F6C: 0x7C9B,
	    0x8F6D: 0x587E,
	    0x8F6E: 0x719F,
	    0x8F6F: 0x51FA,
	    0x8F70: 0x8853,
	    0x8F71: 0x8FF0,
	    0x8F72: 0x4FCA,
	    0x8F73: 0x5CFB,
	    0x8F74: 0x6625,
	    0x8F75: 0x77AC,
	    0x8F76: 0x7AE3,
	    0x8F77: 0x821C,
	    0x8F78: 0x99FF,
	    0x8F79: 0x51C6,
	    0x8F7A: 0x5FAA,
	    0x8F7B: 0x65EC,
	    0x8F7C: 0x696F,
	    0x8F7D: 0x6B89,
	    0x8F7E: 0x6DF3,
	    0x8F80: 0x6E96,
	    0x8F81: 0x6F64,
	    0x8F82: 0x76FE,
	    0x8F83: 0x7D14,
	    0x8F84: 0x5DE1,
	    0x8F85: 0x9075,
	    0x8F86: 0x9187,
	    0x8F87: 0x9806,
	    0x8F88: 0x51E6,
	    0x8F89: 0x521D,
	    0x8F8A: 0x6240,
	    0x8F8B: 0x6691,
	    0x8F8C: 0x66D9,
	    0x8F8D: 0x6E1A,
	    0x8F8E: 0x5EB6,
	    0x8F8F: 0x7DD2,
	    0x8F90: 0x7F72,
	    0x8F91: 0x66F8,
	    0x8F92: 0x85AF,
	    0x8F93: 0x85F7,
	    0x8F94: 0x8AF8,
	    0x8F95: 0x52A9,
	    0x8F96: 0x53D9,
	    0x8F97: 0x5973,
	    0x8F98: 0x5E8F,
	    0x8F99: 0x5F90,
	    0x8F9A: 0x6055,
	    0x8F9B: 0x92E4,
	    0x8F9C: 0x9664,
	    0x8F9D: 0x50B7,
	    0x8F9E: 0x511F,
	    0x8F9F: 0x52DD,
	    0x8FA0: 0x5320,
	    0x8FA1: 0x5347,
	    0x8FA2: 0x53EC,
	    0x8FA3: 0x54E8,
	    0x8FA4: 0x5546,
	    0x8FA5: 0x5531,
	    0x8FA6: 0x5617,
	    0x8FA7: 0x5968,
	    0x8FA8: 0x59BE,
	    0x8FA9: 0x5A3C,
	    0x8FAA: 0x5BB5,
	    0x8FAB: 0x5C06,
	    0x8FAC: 0x5C0F,
	    0x8FAD: 0x5C11,
	    0x8FAE: 0x5C1A,
	    0x8FAF: 0x5E84,
	    0x8FB0: 0x5E8A,
	    0x8FB1: 0x5EE0,
	    0x8FB2: 0x5F70,
	    0x8FB3: 0x627F,
	    0x8FB4: 0x6284,
	    0x8FB5: 0x62DB,
	    0x8FB6: 0x638C,
	    0x8FB7: 0x6377,
	    0x8FB8: 0x6607,
	    0x8FB9: 0x660C,
	    0x8FBA: 0x662D,
	    0x8FBB: 0x6676,
	    0x8FBC: 0x677E,
	    0x8FBD: 0x68A2,
	    0x8FBE: 0x6A1F,
	    0x8FBF: 0x6A35,
	    0x8FC0: 0x6CBC,
	    0x8FC1: 0x6D88,
	    0x8FC2: 0x6E09,
	    0x8FC3: 0x6E58,
	    0x8FC4: 0x713C,
	    0x8FC5: 0x7126,
	    0x8FC6: 0x7167,
	    0x8FC7: 0x75C7,
	    0x8FC8: 0x7701,
	    0x8FC9: 0x785D,
	    0x8FCA: 0x7901,
	    0x8FCB: 0x7965,
	    0x8FCC: 0x79F0,
	    0x8FCD: 0x7AE0,
	    0x8FCE: 0x7B11,
	    0x8FCF: 0x7CA7,
	    0x8FD0: 0x7D39,
	    0x8FD1: 0x8096,
	    0x8FD2: 0x83D6,
	    0x8FD3: 0x848B,
	    0x8FD4: 0x8549,
	    0x8FD5: 0x885D,
	    0x8FD6: 0x88F3,
	    0x8FD7: 0x8A1F,
	    0x8FD8: 0x8A3C,
	    0x8FD9: 0x8A54,
	    0x8FDA: 0x8A73,
	    0x8FDB: 0x8C61,
	    0x8FDC: 0x8CDE,
	    0x8FDD: 0x91A4,
	    0x8FDE: 0x9266,
	    0x8FDF: 0x937E,
	    0x8FE0: 0x9418,
	    0x8FE1: 0x969C,
	    0x8FE2: 0x9798,
	    0x8FE3: 0x4E0A,
	    0x8FE4: 0x4E08,
	    0x8FE5: 0x4E1E,
	    0x8FE6: 0x4E57,
	    0x8FE7: 0x5197,
	    0x8FE8: 0x5270,
	    0x8FE9: 0x57CE,
	    0x8FEA: 0x5834,
	    0x8FEB: 0x58CC,
	    0x8FEC: 0x5B22,
	    0x8FED: 0x5E38,
	    0x8FEE: 0x60C5,
	    0x8FEF: 0x64FE,
	    0x8FF0: 0x6761,
	    0x8FF1: 0x6756,
	    0x8FF2: 0x6D44,
	    0x8FF3: 0x72B6,
	    0x8FF4: 0x7573,
	    0x8FF5: 0x7A63,
	    0x8FF6: 0x84B8,
	    0x8FF7: 0x8B72,
	    0x8FF8: 0x91B8,
	    0x8FF9: 0x9320,
	    0x8FFA: 0x5631,
	    0x8FFB: 0x57F4,
	    0x8FFC: 0x98FE,
	    0x9040: 0x62ED,
	    0x9041: 0x690D,
	    0x9042: 0x6B96,
	    0x9043: 0x71ED,
	    0x9044: 0x7E54,
	    0x9045: 0x8077,
	    0x9046: 0x8272,
	    0x9047: 0x89E6,
	    0x9048: 0x98DF,
	    0x9049: 0x8755,
	    0x904A: 0x8FB1,
	    0x904B: 0x5C3B,
	    0x904C: 0x4F38,
	    0x904D: 0x4FE1,
	    0x904E: 0x4FB5,
	    0x904F: 0x5507,
	    0x9050: 0x5A20,
	    0x9051: 0x5BDD,
	    0x9052: 0x5BE9,
	    0x9053: 0x5FC3,
	    0x9054: 0x614E,
	    0x9055: 0x632F,
	    0x9056: 0x65B0,
	    0x9057: 0x664B,
	    0x9058: 0x68EE,
	    0x9059: 0x699B,
	    0x905A: 0x6D78,
	    0x905B: 0x6DF1,
	    0x905C: 0x7533,
	    0x905D: 0x75B9,
	    0x905E: 0x771F,
	    0x905F: 0x795E,
	    0x9060: 0x79E6,
	    0x9061: 0x7D33,
	    0x9062: 0x81E3,
	    0x9063: 0x82AF,
	    0x9064: 0x85AA,
	    0x9065: 0x89AA,
	    0x9066: 0x8A3A,
	    0x9067: 0x8EAB,
	    0x9068: 0x8F9B,
	    0x9069: 0x9032,
	    0x906A: 0x91DD,
	    0x906B: 0x9707,
	    0x906C: 0x4EBA,
	    0x906D: 0x4EC1,
	    0x906E: 0x5203,
	    0x906F: 0x5875,
	    0x9070: 0x58EC,
	    0x9071: 0x5C0B,
	    0x9072: 0x751A,
	    0x9073: 0x5C3D,
	    0x9074: 0x814E,
	    0x9075: 0x8A0A,
	    0x9076: 0x8FC5,
	    0x9077: 0x9663,
	    0x9078: 0x976D,
	    0x9079: 0x7B25,
	    0x907A: 0x8ACF,
	    0x907B: 0x9808,
	    0x907C: 0x9162,
	    0x907D: 0x56F3,
	    0x907E: 0x53A8,
	    0x9080: 0x9017,
	    0x9081: 0x5439,
	    0x9082: 0x5782,
	    0x9083: 0x5E25,
	    0x9084: 0x63A8,
	    0x9085: 0x6C34,
	    0x9086: 0x708A,
	    0x9087: 0x7761,
	    0x9088: 0x7C8B,
	    0x9089: 0x7FE0,
	    0x908A: 0x8870,
	    0x908B: 0x9042,
	    0x908C: 0x9154,
	    0x908D: 0x9310,
	    0x908E: 0x9318,
	    0x908F: 0x968F,
	    0x9090: 0x745E,
	    0x9091: 0x9AC4,
	    0x9092: 0x5D07,
	    0x9093: 0x5D69,
	    0x9094: 0x6570,
	    0x9095: 0x67A2,
	    0x9096: 0x8DA8,
	    0x9097: 0x96DB,
	    0x9098: 0x636E,
	    0x9099: 0x6749,
	    0x909A: 0x6919,
	    0x909B: 0x83C5,
	    0x909C: 0x9817,
	    0x909D: 0x96C0,
	    0x909E: 0x88FE,
	    0x909F: 0x6F84,
	    0x90A0: 0x647A,
	    0x90A1: 0x5BF8,
	    0x90A2: 0x4E16,
	    0x90A3: 0x702C,
	    0x90A4: 0x755D,
	    0x90A5: 0x662F,
	    0x90A6: 0x51C4,
	    0x90A7: 0x5236,
	    0x90A8: 0x52E2,
	    0x90A9: 0x59D3,
	    0x90AA: 0x5F81,
	    0x90AB: 0x6027,
	    0x90AC: 0x6210,
	    0x90AD: 0x653F,
	    0x90AE: 0x6574,
	    0x90AF: 0x661F,
	    0x90B0: 0x6674,
	    0x90B1: 0x68F2,
	    0x90B2: 0x6816,
	    0x90B3: 0x6B63,
	    0x90B4: 0x6E05,
	    0x90B5: 0x7272,
	    0x90B6: 0x751F,
	    0x90B7: 0x76DB,
	    0x90B8: 0x7CBE,
	    0x90B9: 0x8056,
	    0x90BA: 0x58F0,
	    0x90BB: 0x88FD,
	    0x90BC: 0x897F,
	    0x90BD: 0x8AA0,
	    0x90BE: 0x8A93,
	    0x90BF: 0x8ACB,
	    0x90C0: 0x901D,
	    0x90C1: 0x9192,
	    0x90C2: 0x9752,
	    0x90C3: 0x9759,
	    0x90C4: 0x6589,
	    0x90C5: 0x7A0E,
	    0x90C6: 0x8106,
	    0x90C7: 0x96BB,
	    0x90C8: 0x5E2D,
	    0x90C9: 0x60DC,
	    0x90CA: 0x621A,
	    0x90CB: 0x65A5,
	    0x90CC: 0x6614,
	    0x90CD: 0x6790,
	    0x90CE: 0x77F3,
	    0x90CF: 0x7A4D,
	    0x90D0: 0x7C4D,
	    0x90D1: 0x7E3E,
	    0x90D2: 0x810A,
	    0x90D3: 0x8CAC,
	    0x90D4: 0x8D64,
	    0x90D5: 0x8DE1,
	    0x90D6: 0x8E5F,
	    0x90D7: 0x78A9,
	    0x90D8: 0x5207,
	    0x90D9: 0x62D9,
	    0x90DA: 0x63A5,
	    0x90DB: 0x6442,
	    0x90DC: 0x6298,
	    0x90DD: 0x8A2D,
	    0x90DE: 0x7A83,
	    0x90DF: 0x7BC0,
	    0x90E0: 0x8AAC,
	    0x90E1: 0x96EA,
	    0x90E2: 0x7D76,
	    0x90E3: 0x820C,
	    0x90E4: 0x8749,
	    0x90E5: 0x4ED9,
	    0x90E6: 0x5148,
	    0x90E7: 0x5343,
	    0x90E8: 0x5360,
	    0x90E9: 0x5BA3,
	    0x90EA: 0x5C02,
	    0x90EB: 0x5C16,
	    0x90EC: 0x5DDD,
	    0x90ED: 0x6226,
	    0x90EE: 0x6247,
	    0x90EF: 0x64B0,
	    0x90F0: 0x6813,
	    0x90F1: 0x6834,
	    0x90F2: 0x6CC9,
	    0x90F3: 0x6D45,
	    0x90F4: 0x6D17,
	    0x90F5: 0x67D3,
	    0x90F6: 0x6F5C,
	    0x90F7: 0x714E,
	    0x90F8: 0x717D,
	    0x90F9: 0x65CB,
	    0x90FA: 0x7A7F,
	    0x90FB: 0x7BAD,
	    0x90FC: 0x7DDA,
	    0x9140: 0x7E4A,
	    0x9141: 0x7FA8,
	    0x9142: 0x817A,
	    0x9143: 0x821B,
	    0x9144: 0x8239,
	    0x9145: 0x85A6,
	    0x9146: 0x8A6E,
	    0x9147: 0x8CCE,
	    0x9148: 0x8DF5,
	    0x9149: 0x9078,
	    0x914A: 0x9077,
	    0x914B: 0x92AD,
	    0x914C: 0x9291,
	    0x914D: 0x9583,
	    0x914E: 0x9BAE,
	    0x914F: 0x524D,
	    0x9150: 0x5584,
	    0x9151: 0x6F38,
	    0x9152: 0x7136,
	    0x9153: 0x5168,
	    0x9154: 0x7985,
	    0x9155: 0x7E55,
	    0x9156: 0x81B3,
	    0x9157: 0x7CCE,
	    0x9158: 0x564C,
	    0x9159: 0x5851,
	    0x915A: 0x5CA8,
	    0x915B: 0x63AA,
	    0x915C: 0x66FE,
	    0x915D: 0x66FD,
	    0x915E: 0x695A,
	    0x915F: 0x72D9,
	    0x9160: 0x758F,
	    0x9161: 0x758E,
	    0x9162: 0x790E,
	    0x9163: 0x7956,
	    0x9164: 0x79DF,
	    0x9165: 0x7C97,
	    0x9166: 0x7D20,
	    0x9167: 0x7D44,
	    0x9168: 0x8607,
	    0x9169: 0x8A34,
	    0x916A: 0x963B,
	    0x916B: 0x9061,
	    0x916C: 0x9F20,
	    0x916D: 0x50E7,
	    0x916E: 0x5275,
	    0x916F: 0x53CC,
	    0x9170: 0x53E2,
	    0x9171: 0x5009,
	    0x9172: 0x55AA,
	    0x9173: 0x58EE,
	    0x9174: 0x594F,
	    0x9175: 0x723D,
	    0x9176: 0x5B8B,
	    0x9177: 0x5C64,
	    0x9178: 0x531D,
	    0x9179: 0x60E3,
	    0x917A: 0x60F3,
	    0x917B: 0x635C,
	    0x917C: 0x6383,
	    0x917D: 0x633F,
	    0x917E: 0x63BB,
	    0x9180: 0x64CD,
	    0x9181: 0x65E9,
	    0x9182: 0x66F9,
	    0x9183: 0x5DE3,
	    0x9184: 0x69CD,
	    0x9185: 0x69FD,
	    0x9186: 0x6F15,
	    0x9187: 0x71E5,
	    0x9188: 0x4E89,
	    0x9189: 0x75E9,
	    0x918A: 0x76F8,
	    0x918B: 0x7A93,
	    0x918C: 0x7CDF,
	    0x918D: 0x7DCF,
	    0x918E: 0x7D9C,
	    0x918F: 0x8061,
	    0x9190: 0x8349,
	    0x9191: 0x8358,
	    0x9192: 0x846C,
	    0x9193: 0x84BC,
	    0x9194: 0x85FB,
	    0x9195: 0x88C5,
	    0x9196: 0x8D70,
	    0x9197: 0x9001,
	    0x9198: 0x906D,
	    0x9199: 0x9397,
	    0x919A: 0x971C,
	    0x919B: 0x9A12,
	    0x919C: 0x50CF,
	    0x919D: 0x5897,
	    0x919E: 0x618E,
	    0x919F: 0x81D3,
	    0x91A0: 0x8535,
	    0x91A1: 0x8D08,
	    0x91A2: 0x9020,
	    0x91A3: 0x4FC3,
	    0x91A4: 0x5074,
	    0x91A5: 0x5247,
	    0x91A6: 0x5373,
	    0x91A7: 0x606F,
	    0x91A8: 0x6349,
	    0x91A9: 0x675F,
	    0x91AA: 0x6E2C,
	    0x91AB: 0x8DB3,
	    0x91AC: 0x901F,
	    0x91AD: 0x4FD7,
	    0x91AE: 0x5C5E,
	    0x91AF: 0x8CCA,
	    0x91B0: 0x65CF,
	    0x91B1: 0x7D9A,
	    0x91B2: 0x5352,
	    0x91B3: 0x8896,
	    0x91B4: 0x5176,
	    0x91B5: 0x63C3,
	    0x91B6: 0x5B58,
	    0x91B7: 0x5B6B,
	    0x91B8: 0x5C0A,
	    0x91B9: 0x640D,
	    0x91BA: 0x6751,
	    0x91BB: 0x905C,
	    0x91BC: 0x4ED6,
	    0x91BD: 0x591A,
	    0x91BE: 0x592A,
	    0x91BF: 0x6C70,
	    0x91C0: 0x8A51,
	    0x91C1: 0x553E,
	    0x91C2: 0x5815,
	    0x91C3: 0x59A5,
	    0x91C4: 0x60F0,
	    0x91C5: 0x6253,
	    0x91C6: 0x67C1,
	    0x91C7: 0x8235,
	    0x91C8: 0x6955,
	    0x91C9: 0x9640,
	    0x91CA: 0x99C4,
	    0x91CB: 0x9A28,
	    0x91CC: 0x4F53,
	    0x91CD: 0x5806,
	    0x91CE: 0x5BFE,
	    0x91CF: 0x8010,
	    0x91D0: 0x5CB1,
	    0x91D1: 0x5E2F,
	    0x91D2: 0x5F85,
	    0x91D3: 0x6020,
	    0x91D4: 0x614B,
	    0x91D5: 0x6234,
	    0x91D6: 0x66FF,
	    0x91D7: 0x6CF0,
	    0x91D8: 0x6EDE,
	    0x91D9: 0x80CE,
	    0x91DA: 0x817F,
	    0x91DB: 0x82D4,
	    0x91DC: 0x888B,
	    0x91DD: 0x8CB8,
	    0x91DE: 0x9000,
	    0x91DF: 0x902E,
	    0x91E0: 0x968A,
	    0x91E1: 0x9EDB,
	    0x91E2: 0x9BDB,
	    0x91E3: 0x4EE3,
	    0x91E4: 0x53F0,
	    0x91E5: 0x5927,
	    0x91E6: 0x7B2C,
	    0x91E7: 0x918D,
	    0x91E8: 0x984C,
	    0x91E9: 0x9DF9,
	    0x91EA: 0x6EDD,
	    0x91EB: 0x7027,
	    0x91EC: 0x5353,
	    0x91ED: 0x5544,
	    0x91EE: 0x5B85,
	    0x91EF: 0x6258,
	    0x91F0: 0x629E,
	    0x91F1: 0x62D3,
	    0x91F2: 0x6CA2,
	    0x91F3: 0x6FEF,
	    0x91F4: 0x7422,
	    0x91F5: 0x8A17,
	    0x91F6: 0x9438,
	    0x91F7: 0x6FC1,
	    0x91F8: 0x8AFE,
	    0x91F9: 0x8338,
	    0x91FA: 0x51E7,
	    0x91FB: 0x86F8,
	    0x91FC: 0x53EA,
	    0x9240: 0x53E9,
	    0x9241: 0x4F46,
	    0x9242: 0x9054,
	    0x9243: 0x8FB0,
	    0x9244: 0x596A,
	    0x9245: 0x8131,
	    0x9246: 0x5DFD,
	    0x9247: 0x7AEA,
	    0x9248: 0x8FBF,
	    0x9249: 0x68DA,
	    0x924A: 0x8C37,
	    0x924B: 0x72F8,
	    0x924C: 0x9C48,
	    0x924D: 0x6A3D,
	    0x924E: 0x8AB0,
	    0x924F: 0x4E39,
	    0x9250: 0x5358,
	    0x9251: 0x5606,
	    0x9252: 0x5766,
	    0x9253: 0x62C5,
	    0x9254: 0x63A2,
	    0x9255: 0x65E6,
	    0x9256: 0x6B4E,
	    0x9257: 0x6DE1,
	    0x9258: 0x6E5B,
	    0x9259: 0x70AD,
	    0x925A: 0x77ED,
	    0x925B: 0x7AEF,
	    0x925C: 0x7BAA,
	    0x925D: 0x7DBB,
	    0x925E: 0x803D,
	    0x925F: 0x80C6,
	    0x9260: 0x86CB,
	    0x9261: 0x8A95,
	    0x9262: 0x935B,
	    0x9263: 0x56E3,
	    0x9264: 0x58C7,
	    0x9265: 0x5F3E,
	    0x9266: 0x65AD,
	    0x9267: 0x6696,
	    0x9268: 0x6A80,
	    0x9269: 0x6BB5,
	    0x926A: 0x7537,
	    0x926B: 0x8AC7,
	    0x926C: 0x5024,
	    0x926D: 0x77E5,
	    0x926E: 0x5730,
	    0x926F: 0x5F1B,
	    0x9270: 0x6065,
	    0x9271: 0x667A,
	    0x9272: 0x6C60,
	    0x9273: 0x75F4,
	    0x9274: 0x7A1A,
	    0x9275: 0x7F6E,
	    0x9276: 0x81F4,
	    0x9277: 0x8718,
	    0x9278: 0x9045,
	    0x9279: 0x99B3,
	    0x927A: 0x7BC9,
	    0x927B: 0x755C,
	    0x927C: 0x7AF9,
	    0x927D: 0x7B51,
	    0x927E: 0x84C4,
	    0x9280: 0x9010,
	    0x9281: 0x79E9,
	    0x9282: 0x7A92,
	    0x9283: 0x8336,
	    0x9284: 0x5AE1,
	    0x9285: 0x7740,
	    0x9286: 0x4E2D,
	    0x9287: 0x4EF2,
	    0x9288: 0x5B99,
	    0x9289: 0x5FE0,
	    0x928A: 0x62BD,
	    0x928B: 0x663C,
	    0x928C: 0x67F1,
	    0x928D: 0x6CE8,
	    0x928E: 0x866B,
	    0x928F: 0x8877,
	    0x9290: 0x8A3B,
	    0x9291: 0x914E,
	    0x9292: 0x92F3,
	    0x9293: 0x99D0,
	    0x9294: 0x6A17,
	    0x9295: 0x7026,
	    0x9296: 0x732A,
	    0x9297: 0x82E7,
	    0x9298: 0x8457,
	    0x9299: 0x8CAF,
	    0x929A: 0x4E01,
	    0x929B: 0x5146,
	    0x929C: 0x51CB,
	    0x929D: 0x558B,
	    0x929E: 0x5BF5,
	    0x929F: 0x5E16,
	    0x92A0: 0x5E33,
	    0x92A1: 0x5E81,
	    0x92A2: 0x5F14,
	    0x92A3: 0x5F35,
	    0x92A4: 0x5F6B,
	    0x92A5: 0x5FB4,
	    0x92A6: 0x61F2,
	    0x92A7: 0x6311,
	    0x92A8: 0x66A2,
	    0x92A9: 0x671D,
	    0x92AA: 0x6F6E,
	    0x92AB: 0x7252,
	    0x92AC: 0x753A,
	    0x92AD: 0x773A,
	    0x92AE: 0x8074,
	    0x92AF: 0x8139,
	    0x92B0: 0x8178,
	    0x92B1: 0x8776,
	    0x92B2: 0x8ABF,
	    0x92B3: 0x8ADC,
	    0x92B4: 0x8D85,
	    0x92B5: 0x8DF3,
	    0x92B6: 0x929A,
	    0x92B7: 0x9577,
	    0x92B8: 0x9802,
	    0x92B9: 0x9CE5,
	    0x92BA: 0x52C5,
	    0x92BB: 0x6357,
	    0x92BC: 0x76F4,
	    0x92BD: 0x6715,
	    0x92BE: 0x6C88,
	    0x92BF: 0x73CD,
	    0x92C0: 0x8CC3,
	    0x92C1: 0x93AE,
	    0x92C2: 0x9673,
	    0x92C3: 0x6D25,
	    0x92C4: 0x589C,
	    0x92C5: 0x690E,
	    0x92C6: 0x69CC,
	    0x92C7: 0x8FFD,
	    0x92C8: 0x939A,
	    0x92C9: 0x75DB,
	    0x92CA: 0x901A,
	    0x92CB: 0x585A,
	    0x92CC: 0x6802,
	    0x92CD: 0x63B4,
	    0x92CE: 0x69FB,
	    0x92CF: 0x4F43,
	    0x92D0: 0x6F2C,
	    0x92D1: 0x67D8,
	    0x92D2: 0x8FBB,
	    0x92D3: 0x8526,
	    0x92D4: 0x7DB4,
	    0x92D5: 0x9354,
	    0x92D6: 0x693F,
	    0x92D7: 0x6F70,
	    0x92D8: 0x576A,
	    0x92D9: 0x58F7,
	    0x92DA: 0x5B2C,
	    0x92DB: 0x7D2C,
	    0x92DC: 0x722A,
	    0x92DD: 0x540A,
	    0x92DE: 0x91E3,
	    0x92DF: 0x9DB4,
	    0x92E0: 0x4EAD,
	    0x92E1: 0x4F4E,
	    0x92E2: 0x505C,
	    0x92E3: 0x5075,
	    0x92E4: 0x5243,
	    0x92E5: 0x8C9E,
	    0x92E6: 0x5448,
	    0x92E7: 0x5824,
	    0x92E8: 0x5B9A,
	    0x92E9: 0x5E1D,
	    0x92EA: 0x5E95,
	    0x92EB: 0x5EAD,
	    0x92EC: 0x5EF7,
	    0x92ED: 0x5F1F,
	    0x92EE: 0x608C,
	    0x92EF: 0x62B5,
	    0x92F0: 0x633A,
	    0x92F1: 0x63D0,
	    0x92F2: 0x68AF,
	    0x92F3: 0x6C40,
	    0x92F4: 0x7887,
	    0x92F5: 0x798E,
	    0x92F6: 0x7A0B,
	    0x92F7: 0x7DE0,
	    0x92F8: 0x8247,
	    0x92F9: 0x8A02,
	    0x92FA: 0x8AE6,
	    0x92FB: 0x8E44,
	    0x92FC: 0x9013,
	    0x9340: 0x90B8,
	    0x9341: 0x912D,
	    0x9342: 0x91D8,
	    0x9343: 0x9F0E,
	    0x9344: 0x6CE5,
	    0x9345: 0x6458,
	    0x9346: 0x64E2,
	    0x9347: 0x6575,
	    0x9348: 0x6EF4,
	    0x9349: 0x7684,
	    0x934A: 0x7B1B,
	    0x934B: 0x9069,
	    0x934C: 0x93D1,
	    0x934D: 0x6EBA,
	    0x934E: 0x54F2,
	    0x934F: 0x5FB9,
	    0x9350: 0x64A4,
	    0x9351: 0x8F4D,
	    0x9352: 0x8FED,
	    0x9353: 0x9244,
	    0x9354: 0x5178,
	    0x9355: 0x586B,
	    0x9356: 0x5929,
	    0x9357: 0x5C55,
	    0x9358: 0x5E97,
	    0x9359: 0x6DFB,
	    0x935A: 0x7E8F,
	    0x935B: 0x751C,
	    0x935C: 0x8CBC,
	    0x935D: 0x8EE2,
	    0x935E: 0x985B,
	    0x935F: 0x70B9,
	    0x9360: 0x4F1D,
	    0x9361: 0x6BBF,
	    0x9362: 0x6FB1,
	    0x9363: 0x7530,
	    0x9364: 0x96FB,
	    0x9365: 0x514E,
	    0x9366: 0x5410,
	    0x9367: 0x5835,
	    0x9368: 0x5857,
	    0x9369: 0x59AC,
	    0x936A: 0x5C60,
	    0x936B: 0x5F92,
	    0x936C: 0x6597,
	    0x936D: 0x675C,
	    0x936E: 0x6E21,
	    0x936F: 0x767B,
	    0x9370: 0x83DF,
	    0x9371: 0x8CED,
	    0x9372: 0x9014,
	    0x9373: 0x90FD,
	    0x9374: 0x934D,
	    0x9375: 0x7825,
	    0x9376: 0x783A,
	    0x9377: 0x52AA,
	    0x9378: 0x5EA6,
	    0x9379: 0x571F,
	    0x937A: 0x5974,
	    0x937B: 0x6012,
	    0x937C: 0x5012,
	    0x937D: 0x515A,
	    0x937E: 0x51AC,
	    0x9380: 0x51CD,
	    0x9381: 0x5200,
	    0x9382: 0x5510,
	    0x9383: 0x5854,
	    0x9384: 0x5858,
	    0x9385: 0x5957,
	    0x9386: 0x5B95,
	    0x9387: 0x5CF6,
	    0x9388: 0x5D8B,
	    0x9389: 0x60BC,
	    0x938A: 0x6295,
	    0x938B: 0x642D,
	    0x938C: 0x6771,
	    0x938D: 0x6843,
	    0x938E: 0x68BC,
	    0x938F: 0x68DF,
	    0x9390: 0x76D7,
	    0x9391: 0x6DD8,
	    0x9392: 0x6E6F,
	    0x9393: 0x6D9B,
	    0x9394: 0x706F,
	    0x9395: 0x71C8,
	    0x9396: 0x5F53,
	    0x9397: 0x75D8,
	    0x9398: 0x7977,
	    0x9399: 0x7B49,
	    0x939A: 0x7B54,
	    0x939B: 0x7B52,
	    0x939C: 0x7CD6,
	    0x939D: 0x7D71,
	    0x939E: 0x5230,
	    0x939F: 0x8463,
	    0x93A0: 0x8569,
	    0x93A1: 0x85E4,
	    0x93A2: 0x8A0E,
	    0x93A3: 0x8B04,
	    0x93A4: 0x8C46,
	    0x93A5: 0x8E0F,
	    0x93A6: 0x9003,
	    0x93A7: 0x900F,
	    0x93A8: 0x9419,
	    0x93A9: 0x9676,
	    0x93AA: 0x982D,
	    0x93AB: 0x9A30,
	    0x93AC: 0x95D8,
	    0x93AD: 0x50CD,
	    0x93AE: 0x52D5,
	    0x93AF: 0x540C,
	    0x93B0: 0x5802,
	    0x93B1: 0x5C0E,
	    0x93B2: 0x61A7,
	    0x93B3: 0x649E,
	    0x93B4: 0x6D1E,
	    0x93B5: 0x77B3,
	    0x93B6: 0x7AE5,
	    0x93B7: 0x80F4,
	    0x93B8: 0x8404,
	    0x93B9: 0x9053,
	    0x93BA: 0x9285,
	    0x93BB: 0x5CE0,
	    0x93BC: 0x9D07,
	    0x93BD: 0x533F,
	    0x93BE: 0x5F97,
	    0x93BF: 0x5FB3,
	    0x93C0: 0x6D9C,
	    0x93C1: 0x7279,
	    0x93C2: 0x7763,
	    0x93C3: 0x79BF,
	    0x93C4: 0x7BE4,
	    0x93C5: 0x6BD2,
	    0x93C6: 0x72EC,
	    0x93C7: 0x8AAD,
	    0x93C8: 0x6803,
	    0x93C9: 0x6A61,
	    0x93CA: 0x51F8,
	    0x93CB: 0x7A81,
	    0x93CC: 0x6934,
	    0x93CD: 0x5C4A,
	    0x93CE: 0x9CF6,
	    0x93CF: 0x82EB,
	    0x93D0: 0x5BC5,
	    0x93D1: 0x9149,
	    0x93D2: 0x701E,
	    0x93D3: 0x5678,
	    0x93D4: 0x5C6F,
	    0x93D5: 0x60C7,
	    0x93D6: 0x6566,
	    0x93D7: 0x6C8C,
	    0x93D8: 0x8C5A,
	    0x93D9: 0x9041,
	    0x93DA: 0x9813,
	    0x93DB: 0x5451,
	    0x93DC: 0x66C7,
	    0x93DD: 0x920D,
	    0x93DE: 0x5948,
	    0x93DF: 0x90A3,
	    0x93E0: 0x5185,
	    0x93E1: 0x4E4D,
	    0x93E2: 0x51EA,
	    0x93E3: 0x8599,
	    0x93E4: 0x8B0E,
	    0x93E5: 0x7058,
	    0x93E6: 0x637A,
	    0x93E7: 0x934B,
	    0x93E8: 0x6962,
	    0x93E9: 0x99B4,
	    0x93EA: 0x7E04,
	    0x93EB: 0x7577,
	    0x93EC: 0x5357,
	    0x93ED: 0x6960,
	    0x93EE: 0x8EDF,
	    0x93EF: 0x96E3,
	    0x93F0: 0x6C5D,
	    0x93F1: 0x4E8C,
	    0x93F2: 0x5C3C,
	    0x93F3: 0x5F10,
	    0x93F4: 0x8FE9,
	    0x93F5: 0x5302,
	    0x93F6: 0x8CD1,
	    0x93F7: 0x8089,
	    0x93F8: 0x8679,
	    0x93F9: 0x5EFF,
	    0x93FA: 0x65E5,
	    0x93FB: 0x4E73,
	    0x93FC: 0x5165,
	    0x9440: 0x5982,
	    0x9441: 0x5C3F,
	    0x9442: 0x97EE,
	    0x9443: 0x4EFB,
	    0x9444: 0x598A,
	    0x9445: 0x5FCD,
	    0x9446: 0x8A8D,
	    0x9447: 0x6FE1,
	    0x9448: 0x79B0,
	    0x9449: 0x7962,
	    0x944A: 0x5BE7,
	    0x944B: 0x8471,
	    0x944C: 0x732B,
	    0x944D: 0x71B1,
	    0x944E: 0x5E74,
	    0x944F: 0x5FF5,
	    0x9450: 0x637B,
	    0x9451: 0x649A,
	    0x9452: 0x71C3,
	    0x9453: 0x7C98,
	    0x9454: 0x4E43,
	    0x9455: 0x5EFC,
	    0x9456: 0x4E4B,
	    0x9457: 0x57DC,
	    0x9458: 0x56A2,
	    0x9459: 0x60A9,
	    0x945A: 0x6FC3,
	    0x945B: 0x7D0D,
	    0x945C: 0x80FD,
	    0x945D: 0x8133,
	    0x945E: 0x81BF,
	    0x945F: 0x8FB2,
	    0x9460: 0x8997,
	    0x9461: 0x86A4,
	    0x9462: 0x5DF4,
	    0x9463: 0x628A,
	    0x9464: 0x64AD,
	    0x9465: 0x8987,
	    0x9466: 0x6777,
	    0x9467: 0x6CE2,
	    0x9468: 0x6D3E,
	    0x9469: 0x7436,
	    0x946A: 0x7834,
	    0x946B: 0x5A46,
	    0x946C: 0x7F75,
	    0x946D: 0x82AD,
	    0x946E: 0x99AC,
	    0x946F: 0x4FF3,
	    0x9470: 0x5EC3,
	    0x9471: 0x62DD,
	    0x9472: 0x6392,
	    0x9473: 0x6557,
	    0x9474: 0x676F,
	    0x9475: 0x76C3,
	    0x9476: 0x724C,
	    0x9477: 0x80CC,
	    0x9478: 0x80BA,
	    0x9479: 0x8F29,
	    0x947A: 0x914D,
	    0x947B: 0x500D,
	    0x947C: 0x57F9,
	    0x947D: 0x5A92,
	    0x947E: 0x6885,
	    0x9480: 0x6973,
	    0x9481: 0x7164,
	    0x9482: 0x72FD,
	    0x9483: 0x8CB7,
	    0x9484: 0x58F2,
	    0x9485: 0x8CE0,
	    0x9486: 0x966A,
	    0x9487: 0x9019,
	    0x9488: 0x877F,
	    0x9489: 0x79E4,
	    0x948A: 0x77E7,
	    0x948B: 0x8429,
	    0x948C: 0x4F2F,
	    0x948D: 0x5265,
	    0x948E: 0x535A,
	    0x948F: 0x62CD,
	    0x9490: 0x67CF,
	    0x9491: 0x6CCA,
	    0x9492: 0x767D,
	    0x9493: 0x7B94,
	    0x9494: 0x7C95,
	    0x9495: 0x8236,
	    0x9496: 0x8584,
	    0x9497: 0x8FEB,
	    0x9498: 0x66DD,
	    0x9499: 0x6F20,
	    0x949A: 0x7206,
	    0x949B: 0x7E1B,
	    0x949C: 0x83AB,
	    0x949D: 0x99C1,
	    0x949E: 0x9EA6,
	    0x949F: 0x51FD,
	    0x94A0: 0x7BB1,
	    0x94A1: 0x7872,
	    0x94A2: 0x7BB8,
	    0x94A3: 0x8087,
	    0x94A4: 0x7B48,
	    0x94A5: 0x6AE8,
	    0x94A6: 0x5E61,
	    0x94A7: 0x808C,
	    0x94A8: 0x7551,
	    0x94A9: 0x7560,
	    0x94AA: 0x516B,
	    0x94AB: 0x9262,
	    0x94AC: 0x6E8C,
	    0x94AD: 0x767A,
	    0x94AE: 0x9197,
	    0x94AF: 0x9AEA,
	    0x94B0: 0x4F10,
	    0x94B1: 0x7F70,
	    0x94B2: 0x629C,
	    0x94B3: 0x7B4F,
	    0x94B4: 0x95A5,
	    0x94B5: 0x9CE9,
	    0x94B6: 0x567A,
	    0x94B7: 0x5859,
	    0x94B8: 0x86E4,
	    0x94B9: 0x96BC,
	    0x94BA: 0x4F34,
	    0x94BB: 0x5224,
	    0x94BC: 0x534A,
	    0x94BD: 0x53CD,
	    0x94BE: 0x53DB,
	    0x94BF: 0x5E06,
	    0x94C0: 0x642C,
	    0x94C1: 0x6591,
	    0x94C2: 0x677F,
	    0x94C3: 0x6C3E,
	    0x94C4: 0x6C4E,
	    0x94C5: 0x7248,
	    0x94C6: 0x72AF,
	    0x94C7: 0x73ED,
	    0x94C8: 0x7554,
	    0x94C9: 0x7E41,
	    0x94CA: 0x822C,
	    0x94CB: 0x85E9,
	    0x94CC: 0x8CA9,
	    0x94CD: 0x7BC4,
	    0x94CE: 0x91C6,
	    0x94CF: 0x7169,
	    0x94D0: 0x9812,
	    0x94D1: 0x98EF,
	    0x94D2: 0x633D,
	    0x94D3: 0x6669,
	    0x94D4: 0x756A,
	    0x94D5: 0x76E4,
	    0x94D6: 0x78D0,
	    0x94D7: 0x8543,
	    0x94D8: 0x86EE,
	    0x94D9: 0x532A,
	    0x94DA: 0x5351,
	    0x94DB: 0x5426,
	    0x94DC: 0x5983,
	    0x94DD: 0x5E87,
	    0x94DE: 0x5F7C,
	    0x94DF: 0x60B2,
	    0x94E0: 0x6249,
	    0x94E1: 0x6279,
	    0x94E2: 0x62AB,
	    0x94E3: 0x6590,
	    0x94E4: 0x6BD4,
	    0x94E5: 0x6CCC,
	    0x94E6: 0x75B2,
	    0x94E7: 0x76AE,
	    0x94E8: 0x7891,
	    0x94E9: 0x79D8,
	    0x94EA: 0x7DCB,
	    0x94EB: 0x7F77,
	    0x94EC: 0x80A5,
	    0x94ED: 0x88AB,
	    0x94EE: 0x8AB9,
	    0x94EF: 0x8CBB,
	    0x94F0: 0x907F,
	    0x94F1: 0x975E,
	    0x94F2: 0x98DB,
	    0x94F3: 0x6A0B,
	    0x94F4: 0x7C38,
	    0x94F5: 0x5099,
	    0x94F6: 0x5C3E,
	    0x94F7: 0x5FAE,
	    0x94F8: 0x6787,
	    0x94F9: 0x6BD8,
	    0x94FA: 0x7435,
	    0x94FB: 0x7709,
	    0x94FC: 0x7F8E,
	    0x9540: 0x9F3B,
	    0x9541: 0x67CA,
	    0x9542: 0x7A17,
	    0x9543: 0x5339,
	    0x9544: 0x758B,
	    0x9545: 0x9AED,
	    0x9546: 0x5F66,
	    0x9547: 0x819D,
	    0x9548: 0x83F1,
	    0x9549: 0x8098,
	    0x954A: 0x5F3C,
	    0x954B: 0x5FC5,
	    0x954C: 0x7562,
	    0x954D: 0x7B46,
	    0x954E: 0x903C,
	    0x954F: 0x6867,
	    0x9550: 0x59EB,
	    0x9551: 0x5A9B,
	    0x9552: 0x7D10,
	    0x9553: 0x767E,
	    0x9554: 0x8B2C,
	    0x9555: 0x4FF5,
	    0x9556: 0x5F6A,
	    0x9557: 0x6A19,
	    0x9558: 0x6C37,
	    0x9559: 0x6F02,
	    0x955A: 0x74E2,
	    0x955B: 0x7968,
	    0x955C: 0x8868,
	    0x955D: 0x8A55,
	    0x955E: 0x8C79,
	    0x955F: 0x5EDF,
	    0x9560: 0x63CF,
	    0x9561: 0x75C5,
	    0x9562: 0x79D2,
	    0x9563: 0x82D7,
	    0x9564: 0x9328,
	    0x9565: 0x92F2,
	    0x9566: 0x849C,
	    0x9567: 0x86ED,
	    0x9568: 0x9C2D,
	    0x9569: 0x54C1,
	    0x956A: 0x5F6C,
	    0x956B: 0x658C,
	    0x956C: 0x6D5C,
	    0x956D: 0x7015,
	    0x956E: 0x8CA7,
	    0x956F: 0x8CD3,
	    0x9570: 0x983B,
	    0x9571: 0x654F,
	    0x9572: 0x74F6,
	    0x9573: 0x4E0D,
	    0x9574: 0x4ED8,
	    0x9575: 0x57E0,
	    0x9576: 0x592B,
	    0x9577: 0x5A66,
	    0x9578: 0x5BCC,
	    0x9579: 0x51A8,
	    0x957A: 0x5E03,
	    0x957B: 0x5E9C,
	    0x957C: 0x6016,
	    0x957D: 0x6276,
	    0x957E: 0x6577,
	    0x9580: 0x65A7,
	    0x9581: 0x666E,
	    0x9582: 0x6D6E,
	    0x9583: 0x7236,
	    0x9584: 0x7B26,
	    0x9585: 0x8150,
	    0x9586: 0x819A,
	    0x9587: 0x8299,
	    0x9588: 0x8B5C,
	    0x9589: 0x8CA0,
	    0x958A: 0x8CE6,
	    0x958B: 0x8D74,
	    0x958C: 0x961C,
	    0x958D: 0x9644,
	    0x958E: 0x4FAE,
	    0x958F: 0x64AB,
	    0x9590: 0x6B66,
	    0x9591: 0x821E,
	    0x9592: 0x8461,
	    0x9593: 0x856A,
	    0x9594: 0x90E8,
	    0x9595: 0x5C01,
	    0x9596: 0x6953,
	    0x9597: 0x98A8,
	    0x9598: 0x847A,
	    0x9599: 0x8557,
	    0x959A: 0x4F0F,
	    0x959B: 0x526F,
	    0x959C: 0x5FA9,
	    0x959D: 0x5E45,
	    0x959E: 0x670D,
	    0x959F: 0x798F,
	    0x95A0: 0x8179,
	    0x95A1: 0x8907,
	    0x95A2: 0x8986,
	    0x95A3: 0x6DF5,
	    0x95A4: 0x5F17,
	    0x95A5: 0x6255,
	    0x95A6: 0x6CB8,
	    0x95A7: 0x4ECF,
	    0x95A8: 0x7269,
	    0x95A9: 0x9B92,
	    0x95AA: 0x5206,
	    0x95AB: 0x543B,
	    0x95AC: 0x5674,
	    0x95AD: 0x58B3,
	    0x95AE: 0x61A4,
	    0x95AF: 0x626E,
	    0x95B0: 0x711A,
	    0x95B1: 0x596E,
	    0x95B2: 0x7C89,
	    0x95B3: 0x7CDE,
	    0x95B4: 0x7D1B,
	    0x95B5: 0x96F0,
	    0x95B6: 0x6587,
	    0x95B7: 0x805E,
	    0x95B8: 0x4E19,
	    0x95B9: 0x4F75,
	    0x95BA: 0x5175,
	    0x95BB: 0x5840,
	    0x95BC: 0x5E63,
	    0x95BD: 0x5E73,
	    0x95BE: 0x5F0A,
	    0x95BF: 0x67C4,
	    0x95C0: 0x4E26,
	    0x95C1: 0x853D,
	    0x95C2: 0x9589,
	    0x95C3: 0x965B,
	    0x95C4: 0x7C73,
	    0x95C5: 0x9801,
	    0x95C6: 0x50FB,
	    0x95C7: 0x58C1,
	    0x95C8: 0x7656,
	    0x95C9: 0x78A7,
	    0x95CA: 0x5225,
	    0x95CB: 0x77A5,
	    0x95CC: 0x8511,
	    0x95CD: 0x7B86,
	    0x95CE: 0x504F,
	    0x95CF: 0x5909,
	    0x95D0: 0x7247,
	    0x95D1: 0x7BC7,
	    0x95D2: 0x7DE8,
	    0x95D3: 0x8FBA,
	    0x95D4: 0x8FD4,
	    0x95D5: 0x904D,
	    0x95D6: 0x4FBF,
	    0x95D7: 0x52C9,
	    0x95D8: 0x5A29,
	    0x95D9: 0x5F01,
	    0x95DA: 0x97AD,
	    0x95DB: 0x4FDD,
	    0x95DC: 0x8217,
	    0x95DD: 0x92EA,
	    0x95DE: 0x5703,
	    0x95DF: 0x6355,
	    0x95E0: 0x6B69,
	    0x95E1: 0x752B,
	    0x95E2: 0x88DC,
	    0x95E3: 0x8F14,
	    0x95E4: 0x7A42,
	    0x95E5: 0x52DF,
	    0x95E6: 0x5893,
	    0x95E7: 0x6155,
	    0x95E8: 0x620A,
	    0x95E9: 0x66AE,
	    0x95EA: 0x6BCD,
	    0x95EB: 0x7C3F,
	    0x95EC: 0x83E9,
	    0x95ED: 0x5023,
	    0x95EE: 0x4FF8,
	    0x95EF: 0x5305,
	    0x95F0: 0x5446,
	    0x95F1: 0x5831,
	    0x95F2: 0x5949,
	    0x95F3: 0x5B9D,
	    0x95F4: 0x5CF0,
	    0x95F5: 0x5CEF,
	    0x95F6: 0x5D29,
	    0x95F7: 0x5E96,
	    0x95F8: 0x62B1,
	    0x95F9: 0x6367,
	    0x95FA: 0x653E,
	    0x95FB: 0x65B9,
	    0x95FC: 0x670B,
	    0x9640: 0x6CD5,
	    0x9641: 0x6CE1,
	    0x9642: 0x70F9,
	    0x9643: 0x7832,
	    0x9644: 0x7E2B,
	    0x9645: 0x80DE,
	    0x9646: 0x82B3,
	    0x9647: 0x840C,
	    0x9648: 0x84EC,
	    0x9649: 0x8702,
	    0x964A: 0x8912,
	    0x964B: 0x8A2A,
	    0x964C: 0x8C4A,
	    0x964D: 0x90A6,
	    0x964E: 0x92D2,
	    0x964F: 0x98FD,
	    0x9650: 0x9CF3,
	    0x9651: 0x9D6C,
	    0x9652: 0x4E4F,
	    0x9653: 0x4EA1,
	    0x9654: 0x508D,
	    0x9655: 0x5256,
	    0x9656: 0x574A,
	    0x9657: 0x59A8,
	    0x9658: 0x5E3D,
	    0x9659: 0x5FD8,
	    0x965A: 0x5FD9,
	    0x965B: 0x623F,
	    0x965C: 0x66B4,
	    0x965D: 0x671B,
	    0x965E: 0x67D0,
	    0x965F: 0x68D2,
	    0x9660: 0x5192,
	    0x9661: 0x7D21,
	    0x9662: 0x80AA,
	    0x9663: 0x81A8,
	    0x9664: 0x8B00,
	    0x9665: 0x8C8C,
	    0x9666: 0x8CBF,
	    0x9667: 0x927E,
	    0x9668: 0x9632,
	    0x9669: 0x5420,
	    0x966A: 0x982C,
	    0x966B: 0x5317,
	    0x966C: 0x50D5,
	    0x966D: 0x535C,
	    0x966E: 0x58A8,
	    0x966F: 0x64B2,
	    0x9670: 0x6734,
	    0x9671: 0x7267,
	    0x9672: 0x7766,
	    0x9673: 0x7A46,
	    0x9674: 0x91E6,
	    0x9675: 0x52C3,
	    0x9676: 0x6CA1,
	    0x9677: 0x6B86,
	    0x9678: 0x5800,
	    0x9679: 0x5E4C,
	    0x967A: 0x5954,
	    0x967B: 0x672C,
	    0x967C: 0x7FFB,
	    0x967D: 0x51E1,
	    0x967E: 0x76C6,
	    0x9680: 0x6469,
	    0x9681: 0x78E8,
	    0x9682: 0x9B54,
	    0x9683: 0x9EBB,
	    0x9684: 0x57CB,
	    0x9685: 0x59B9,
	    0x9686: 0x6627,
	    0x9687: 0x679A,
	    0x9688: 0x6BCE,
	    0x9689: 0x54E9,
	    0x968A: 0x69D9,
	    0x968B: 0x5E55,
	    0x968C: 0x819C,
	    0x968D: 0x6795,
	    0x968E: 0x9BAA,
	    0x968F: 0x67FE,
	    0x9690: 0x9C52,
	    0x9691: 0x685D,
	    0x9692: 0x4EA6,
	    0x9693: 0x4FE3,
	    0x9694: 0x53C8,
	    0x9695: 0x62B9,
	    0x9696: 0x672B,
	    0x9697: 0x6CAB,
	    0x9698: 0x8FC4,
	    0x9699: 0x4FAD,
	    0x969A: 0x7E6D,
	    0x969B: 0x9EBF,
	    0x969C: 0x4E07,
	    0x969D: 0x6162,
	    0x969E: 0x6E80,
	    0x969F: 0x6F2B,
	    0x96A0: 0x8513,
	    0x96A1: 0x5473,
	    0x96A2: 0x672A,
	    0x96A3: 0x9B45,
	    0x96A4: 0x5DF3,
	    0x96A5: 0x7B95,
	    0x96A6: 0x5CAC,
	    0x96A7: 0x5BC6,
	    0x96A8: 0x871C,
	    0x96A9: 0x6E4A,
	    0x96AA: 0x84D1,
	    0x96AB: 0x7A14,
	    0x96AC: 0x8108,
	    0x96AD: 0x5999,
	    0x96AE: 0x7C8D,
	    0x96AF: 0x6C11,
	    0x96B0: 0x7720,
	    0x96B1: 0x52D9,
	    0x96B2: 0x5922,
	    0x96B3: 0x7121,
	    0x96B4: 0x725F,
	    0x96B5: 0x77DB,
	    0x96B6: 0x9727,
	    0x96B7: 0x9D61,
	    0x96B8: 0x690B,
	    0x96B9: 0x5A7F,
	    0x96BA: 0x5A18,
	    0x96BB: 0x51A5,
	    0x96BC: 0x540D,
	    0x96BD: 0x547D,
	    0x96BE: 0x660E,
	    0x96BF: 0x76DF,
	    0x96C0: 0x8FF7,
	    0x96C1: 0x9298,
	    0x96C2: 0x9CF4,
	    0x96C3: 0x59EA,
	    0x96C4: 0x725D,
	    0x96C5: 0x6EC5,
	    0x96C6: 0x514D,
	    0x96C7: 0x68C9,
	    0x96C8: 0x7DBF,
	    0x96C9: 0x7DEC,
	    0x96CA: 0x9762,
	    0x96CB: 0x9EBA,
	    0x96CC: 0x6478,
	    0x96CD: 0x6A21,
	    0x96CE: 0x8302,
	    0x96CF: 0x5984,
	    0x96D0: 0x5B5F,
	    0x96D1: 0x6BDB,
	    0x96D2: 0x731B,
	    0x96D3: 0x76F2,
	    0x96D4: 0x7DB2,
	    0x96D5: 0x8017,
	    0x96D6: 0x8499,
	    0x96D7: 0x5132,
	    0x96D8: 0x6728,
	    0x96D9: 0x9ED9,
	    0x96DA: 0x76EE,
	    0x96DB: 0x6762,
	    0x96DC: 0x52FF,
	    0x96DD: 0x9905,
	    0x96DE: 0x5C24,
	    0x96DF: 0x623B,
	    0x96E0: 0x7C7E,
	    0x96E1: 0x8CB0,
	    0x96E2: 0x554F,
	    0x96E3: 0x60B6,
	    0x96E4: 0x7D0B,
	    0x96E5: 0x9580,
	    0x96E6: 0x5301,
	    0x96E7: 0x4E5F,
	    0x96E8: 0x51B6,
	    0x96E9: 0x591C,
	    0x96EA: 0x723A,
	    0x96EB: 0x8036,
	    0x96EC: 0x91CE,
	    0x96ED: 0x5F25,
	    0x96EE: 0x77E2,
	    0x96EF: 0x5384,
	    0x96F0: 0x5F79,
	    0x96F1: 0x7D04,
	    0x96F2: 0x85AC,
	    0x96F3: 0x8A33,
	    0x96F4: 0x8E8D,
	    0x96F5: 0x9756,
	    0x96F6: 0x67F3,
	    0x96F7: 0x85AE,
	    0x96F8: 0x9453,
	    0x96F9: 0x6109,
	    0x96FA: 0x6108,
	    0x96FB: 0x6CB9,
	    0x96FC: 0x7652,
	    0x9740: 0x8AED,
	    0x9741: 0x8F38,
	    0x9742: 0x552F,
	    0x9743: 0x4F51,
	    0x9744: 0x512A,
	    0x9745: 0x52C7,
	    0x9746: 0x53CB,
	    0x9747: 0x5BA5,
	    0x9748: 0x5E7D,
	    0x9749: 0x60A0,
	    0x974A: 0x6182,
	    0x974B: 0x63D6,
	    0x974C: 0x6709,
	    0x974D: 0x67DA,
	    0x974E: 0x6E67,
	    0x974F: 0x6D8C,
	    0x9750: 0x7336,
	    0x9751: 0x7337,
	    0x9752: 0x7531,
	    0x9753: 0x7950,
	    0x9754: 0x88D5,
	    0x9755: 0x8A98,
	    0x9756: 0x904A,
	    0x9757: 0x9091,
	    0x9758: 0x90F5,
	    0x9759: 0x96C4,
	    0x975A: 0x878D,
	    0x975B: 0x5915,
	    0x975C: 0x4E88,
	    0x975D: 0x4F59,
	    0x975E: 0x4E0E,
	    0x975F: 0x8A89,
	    0x9760: 0x8F3F,
	    0x9761: 0x9810,
	    0x9762: 0x50AD,
	    0x9763: 0x5E7C,
	    0x9764: 0x5996,
	    0x9765: 0x5BB9,
	    0x9766: 0x5EB8,
	    0x9767: 0x63DA,
	    0x9768: 0x63FA,
	    0x9769: 0x64C1,
	    0x976A: 0x66DC,
	    0x976B: 0x694A,
	    0x976C: 0x69D8,
	    0x976D: 0x6D0B,
	    0x976E: 0x6EB6,
	    0x976F: 0x7194,
	    0x9770: 0x7528,
	    0x9771: 0x7AAF,
	    0x9772: 0x7F8A,
	    0x9773: 0x8000,
	    0x9774: 0x8449,
	    0x9775: 0x84C9,
	    0x9776: 0x8981,
	    0x9777: 0x8B21,
	    0x9778: 0x8E0A,
	    0x9779: 0x9065,
	    0x977A: 0x967D,
	    0x977B: 0x990A,
	    0x977C: 0x617E,
	    0x977D: 0x6291,
	    0x977E: 0x6B32,
	    0x9780: 0x6C83,
	    0x9781: 0x6D74,
	    0x9782: 0x7FCC,
	    0x9783: 0x7FFC,
	    0x9784: 0x6DC0,
	    0x9785: 0x7F85,
	    0x9786: 0x87BA,
	    0x9787: 0x88F8,
	    0x9788: 0x6765,
	    0x9789: 0x83B1,
	    0x978A: 0x983C,
	    0x978B: 0x96F7,
	    0x978C: 0x6D1B,
	    0x978D: 0x7D61,
	    0x978E: 0x843D,
	    0x978F: 0x916A,
	    0x9790: 0x4E71,
	    0x9791: 0x5375,
	    0x9792: 0x5D50,
	    0x9793: 0x6B04,
	    0x9794: 0x6FEB,
	    0x9795: 0x85CD,
	    0x9796: 0x862D,
	    0x9797: 0x89A7,
	    0x9798: 0x5229,
	    0x9799: 0x540F,
	    0x979A: 0x5C65,
	    0x979B: 0x674E,
	    0x979C: 0x68A8,
	    0x979D: 0x7406,
	    0x979E: 0x7483,
	    0x979F: 0x75E2,
	    0x97A0: 0x88CF,
	    0x97A1: 0x88E1,
	    0x97A2: 0x91CC,
	    0x97A3: 0x96E2,
	    0x97A4: 0x9678,
	    0x97A5: 0x5F8B,
	    0x97A6: 0x7387,
	    0x97A7: 0x7ACB,
	    0x97A8: 0x844E,
	    0x97A9: 0x63A0,
	    0x97AA: 0x7565,
	    0x97AB: 0x5289,
	    0x97AC: 0x6D41,
	    0x97AD: 0x6E9C,
	    0x97AE: 0x7409,
	    0x97AF: 0x7559,
	    0x97B0: 0x786B,
	    0x97B1: 0x7C92,
	    0x97B2: 0x9686,
	    0x97B3: 0x7ADC,
	    0x97B4: 0x9F8D,
	    0x97B5: 0x4FB6,
	    0x97B6: 0x616E,
	    0x97B7: 0x65C5,
	    0x97B8: 0x865C,
	    0x97B9: 0x4E86,
	    0x97BA: 0x4EAE,
	    0x97BB: 0x50DA,
	    0x97BC: 0x4E21,
	    0x97BD: 0x51CC,
	    0x97BE: 0x5BEE,
	    0x97BF: 0x6599,
	    0x97C0: 0x6881,
	    0x97C1: 0x6DBC,
	    0x97C2: 0x731F,
	    0x97C3: 0x7642,
	    0x97C4: 0x77AD,
	    0x97C5: 0x7A1C,
	    0x97C6: 0x7CE7,
	    0x97C7: 0x826F,
	    0x97C8: 0x8AD2,
	    0x97C9: 0x907C,
	    0x97CA: 0x91CF,
	    0x97CB: 0x9675,
	    0x97CC: 0x9818,
	    0x97CD: 0x529B,
	    0x97CE: 0x7DD1,
	    0x97CF: 0x502B,
	    0x97D0: 0x5398,
	    0x97D1: 0x6797,
	    0x97D2: 0x6DCB,
	    0x97D3: 0x71D0,
	    0x97D4: 0x7433,
	    0x97D5: 0x81E8,
	    0x97D6: 0x8F2A,
	    0x97D7: 0x96A3,
	    0x97D8: 0x9C57,
	    0x97D9: 0x9E9F,
	    0x97DA: 0x7460,
	    0x97DB: 0x5841,
	    0x97DC: 0x6D99,
	    0x97DD: 0x7D2F,
	    0x97DE: 0x985E,
	    0x97DF: 0x4EE4,
	    0x97E0: 0x4F36,
	    0x97E1: 0x4F8B,
	    0x97E2: 0x51B7,
	    0x97E3: 0x52B1,
	    0x97E4: 0x5DBA,
	    0x97E5: 0x601C,
	    0x97E6: 0x73B2,
	    0x97E7: 0x793C,
	    0x97E8: 0x82D3,
	    0x97E9: 0x9234,
	    0x97EA: 0x96B7,
	    0x97EB: 0x96F6,
	    0x97EC: 0x970A,
	    0x97ED: 0x9E97,
	    0x97EE: 0x9F62,
	    0x97EF: 0x66A6,
	    0x97F0: 0x6B74,
	    0x97F1: 0x5217,
	    0x97F2: 0x52A3,
	    0x97F3: 0x70C8,
	    0x97F4: 0x88C2,
	    0x97F5: 0x5EC9,
	    0x97F6: 0x604B,
	    0x97F7: 0x6190,
	    0x97F8: 0x6F23,
	    0x97F9: 0x7149,
	    0x97FA: 0x7C3E,
	    0x97FB: 0x7DF4,
	    0x97FC: 0x806F,
	    0x9840: 0x84EE,
	    0x9841: 0x9023,
	    0x9842: 0x932C,
	    0x9843: 0x5442,
	    0x9844: 0x9B6F,
	    0x9845: 0x6AD3,
	    0x9846: 0x7089,
	    0x9847: 0x8CC2,
	    0x9848: 0x8DEF,
	    0x9849: 0x9732,
	    0x984A: 0x52B4,
	    0x984B: 0x5A41,
	    0x984C: 0x5ECA,
	    0x984D: 0x5F04,
	    0x984E: 0x6717,
	    0x984F: 0x697C,
	    0x9850: 0x6994,
	    0x9851: 0x6D6A,
	    0x9852: 0x6F0F,
	    0x9853: 0x7262,
	    0x9854: 0x72FC,
	    0x9855: 0x7BED,
	    0x9856: 0x8001,
	    0x9857: 0x807E,
	    0x9858: 0x874B,
	    0x9859: 0x90CE,
	    0x985A: 0x516D,
	    0x985B: 0x9E93,
	    0x985C: 0x7984,
	    0x985D: 0x808B,
	    0x985E: 0x9332,
	    0x985F: 0x8AD6,
	    0x9860: 0x502D,
	    0x9861: 0x548C,
	    0x9862: 0x8A71,
	    0x9863: 0x6B6A,
	    0x9864: 0x8CC4,
	    0x9865: 0x8107,
	    0x9866: 0x60D1,
	    0x9867: 0x67A0,
	    0x9868: 0x9DF2,
	    0x9869: 0x4E99,
	    0x986A: 0x4E98,
	    0x986B: 0x9C10,
	    0x986C: 0x8A6B,
	    0x986D: 0x85C1,
	    0x986E: 0x8568,
	    0x986F: 0x6900,
	    0x9870: 0x6E7E,
	    0x9871: 0x7897,
	    0x9872: 0x8155,
	    0x989F: 0x5F0C,
	    0x98A0: 0x4E10,
	    0x98A1: 0x4E15,
	    0x98A2: 0x4E2A,
	    0x98A3: 0x4E31,
	    0x98A4: 0x4E36,
	    0x98A5: 0x4E3C,
	    0x98A6: 0x4E3F,
	    0x98A7: 0x4E42,
	    0x98A8: 0x4E56,
	    0x98A9: 0x4E58,
	    0x98AA: 0x4E82,
	    0x98AB: 0x4E85,
	    0x98AC: 0x8C6B,
	    0x98AD: 0x4E8A,
	    0x98AE: 0x8212,
	    0x98AF: 0x5F0D,
	    0x98B0: 0x4E8E,
	    0x98B1: 0x4E9E,
	    0x98B2: 0x4E9F,
	    0x98B3: 0x4EA0,
	    0x98B4: 0x4EA2,
	    0x98B5: 0x4EB0,
	    0x98B6: 0x4EB3,
	    0x98B7: 0x4EB6,
	    0x98B8: 0x4ECE,
	    0x98B9: 0x4ECD,
	    0x98BA: 0x4EC4,
	    0x98BB: 0x4EC6,
	    0x98BC: 0x4EC2,
	    0x98BD: 0x4ED7,
	    0x98BE: 0x4EDE,
	    0x98BF: 0x4EED,
	    0x98C0: 0x4EDF,
	    0x98C1: 0x4EF7,
	    0x98C2: 0x4F09,
	    0x98C3: 0x4F5A,
	    0x98C4: 0x4F30,
	    0x98C5: 0x4F5B,
	    0x98C6: 0x4F5D,
	    0x98C7: 0x4F57,
	    0x98C8: 0x4F47,
	    0x98C9: 0x4F76,
	    0x98CA: 0x4F88,
	    0x98CB: 0x4F8F,
	    0x98CC: 0x4F98,
	    0x98CD: 0x4F7B,
	    0x98CE: 0x4F69,
	    0x98CF: 0x4F70,
	    0x98D0: 0x4F91,
	    0x98D1: 0x4F6F,
	    0x98D2: 0x4F86,
	    0x98D3: 0x4F96,
	    0x98D4: 0x5118,
	    0x98D5: 0x4FD4,
	    0x98D6: 0x4FDF,
	    0x98D7: 0x4FCE,
	    0x98D8: 0x4FD8,
	    0x98D9: 0x4FDB,
	    0x98DA: 0x4FD1,
	    0x98DB: 0x4FDA,
	    0x98DC: 0x4FD0,
	    0x98DD: 0x4FE4,
	    0x98DE: 0x4FE5,
	    0x98DF: 0x501A,
	    0x98E0: 0x5028,
	    0x98E1: 0x5014,
	    0x98E2: 0x502A,
	    0x98E3: 0x5025,
	    0x98E4: 0x5005,
	    0x98E5: 0x4F1C,
	    0x98E6: 0x4FF6,
	    0x98E7: 0x5021,
	    0x98E8: 0x5029,
	    0x98E9: 0x502C,
	    0x98EA: 0x4FFE,
	    0x98EB: 0x4FEF,
	    0x98EC: 0x5011,
	    0x98ED: 0x5006,
	    0x98EE: 0x5043,
	    0x98EF: 0x5047,
	    0x98F0: 0x6703,
	    0x98F1: 0x5055,
	    0x98F2: 0x5050,
	    0x98F3: 0x5048,
	    0x98F4: 0x505A,
	    0x98F5: 0x5056,
	    0x98F6: 0x506C,
	    0x98F7: 0x5078,
	    0x98F8: 0x5080,
	    0x98F9: 0x509A,
	    0x98FA: 0x5085,
	    0x98FB: 0x50B4,
	    0x98FC: 0x50B2,
	    0x9940: 0x50C9,
	    0x9941: 0x50CA,
	    0x9942: 0x50B3,
	    0x9943: 0x50C2,
	    0x9944: 0x50D6,
	    0x9945: 0x50DE,
	    0x9946: 0x50E5,
	    0x9947: 0x50ED,
	    0x9948: 0x50E3,
	    0x9949: 0x50EE,
	    0x994A: 0x50F9,
	    0x994B: 0x50F5,
	    0x994C: 0x5109,
	    0x994D: 0x5101,
	    0x994E: 0x5102,
	    0x994F: 0x5116,
	    0x9950: 0x5115,
	    0x9951: 0x5114,
	    0x9952: 0x511A,
	    0x9953: 0x5121,
	    0x9954: 0x513A,
	    0x9955: 0x5137,
	    0x9956: 0x513C,
	    0x9957: 0x513B,
	    0x9958: 0x513F,
	    0x9959: 0x5140,
	    0x995A: 0x5152,
	    0x995B: 0x514C,
	    0x995C: 0x5154,
	    0x995D: 0x5162,
	    0x995E: 0x7AF8,
	    0x995F: 0x5169,
	    0x9960: 0x516A,
	    0x9961: 0x516E,
	    0x9962: 0x5180,
	    0x9963: 0x5182,
	    0x9964: 0x56D8,
	    0x9965: 0x518C,
	    0x9966: 0x5189,
	    0x9967: 0x518F,
	    0x9968: 0x5191,
	    0x9969: 0x5193,
	    0x996A: 0x5195,
	    0x996B: 0x5196,
	    0x996C: 0x51A4,
	    0x996D: 0x51A6,
	    0x996E: 0x51A2,
	    0x996F: 0x51A9,
	    0x9970: 0x51AA,
	    0x9971: 0x51AB,
	    0x9972: 0x51B3,
	    0x9973: 0x51B1,
	    0x9974: 0x51B2,
	    0x9975: 0x51B0,
	    0x9976: 0x51B5,
	    0x9977: 0x51BD,
	    0x9978: 0x51C5,
	    0x9979: 0x51C9,
	    0x997A: 0x51DB,
	    0x997B: 0x51E0,
	    0x997C: 0x8655,
	    0x997D: 0x51E9,
	    0x997E: 0x51ED,
	    0x9980: 0x51F0,
	    0x9981: 0x51F5,
	    0x9982: 0x51FE,
	    0x9983: 0x5204,
	    0x9984: 0x520B,
	    0x9985: 0x5214,
	    0x9986: 0x520E,
	    0x9987: 0x5227,
	    0x9988: 0x522A,
	    0x9989: 0x522E,
	    0x998A: 0x5233,
	    0x998B: 0x5239,
	    0x998C: 0x524F,
	    0x998D: 0x5244,
	    0x998E: 0x524B,
	    0x998F: 0x524C,
	    0x9990: 0x525E,
	    0x9991: 0x5254,
	    0x9992: 0x526A,
	    0x9993: 0x5274,
	    0x9994: 0x5269,
	    0x9995: 0x5273,
	    0x9996: 0x527F,
	    0x9997: 0x527D,
	    0x9998: 0x528D,
	    0x9999: 0x5294,
	    0x999A: 0x5292,
	    0x999B: 0x5271,
	    0x999C: 0x5288,
	    0x999D: 0x5291,
	    0x999E: 0x8FA8,
	    0x999F: 0x8FA7,
	    0x99A0: 0x52AC,
	    0x99A1: 0x52AD,
	    0x99A2: 0x52BC,
	    0x99A3: 0x52B5,
	    0x99A4: 0x52C1,
	    0x99A5: 0x52CD,
	    0x99A6: 0x52D7,
	    0x99A7: 0x52DE,
	    0x99A8: 0x52E3,
	    0x99A9: 0x52E6,
	    0x99AA: 0x98ED,
	    0x99AB: 0x52E0,
	    0x99AC: 0x52F3,
	    0x99AD: 0x52F5,
	    0x99AE: 0x52F8,
	    0x99AF: 0x52F9,
	    0x99B0: 0x5306,
	    0x99B1: 0x5308,
	    0x99B2: 0x7538,
	    0x99B3: 0x530D,
	    0x99B4: 0x5310,
	    0x99B5: 0x530F,
	    0x99B6: 0x5315,
	    0x99B7: 0x531A,
	    0x99B8: 0x5323,
	    0x99B9: 0x532F,
	    0x99BA: 0x5331,
	    0x99BB: 0x5333,
	    0x99BC: 0x5338,
	    0x99BD: 0x5340,
	    0x99BE: 0x5346,
	    0x99BF: 0x5345,
	    0x99C0: 0x4E17,
	    0x99C1: 0x5349,
	    0x99C2: 0x534D,
	    0x99C3: 0x51D6,
	    0x99C4: 0x535E,
	    0x99C5: 0x5369,
	    0x99C6: 0x536E,
	    0x99C7: 0x5918,
	    0x99C8: 0x537B,
	    0x99C9: 0x5377,
	    0x99CA: 0x5382,
	    0x99CB: 0x5396,
	    0x99CC: 0x53A0,
	    0x99CD: 0x53A6,
	    0x99CE: 0x53A5,
	    0x99CF: 0x53AE,
	    0x99D0: 0x53B0,
	    0x99D1: 0x53B6,
	    0x99D2: 0x53C3,
	    0x99D3: 0x7C12,
	    0x99D4: 0x96D9,
	    0x99D5: 0x53DF,
	    0x99D6: 0x66FC,
	    0x99D7: 0x71EE,
	    0x99D8: 0x53EE,
	    0x99D9: 0x53E8,
	    0x99DA: 0x53ED,
	    0x99DB: 0x53FA,
	    0x99DC: 0x5401,
	    0x99DD: 0x543D,
	    0x99DE: 0x5440,
	    0x99DF: 0x542C,
	    0x99E0: 0x542D,
	    0x99E1: 0x543C,
	    0x99E2: 0x542E,
	    0x99E3: 0x5436,
	    0x99E4: 0x5429,
	    0x99E5: 0x541D,
	    0x99E6: 0x544E,
	    0x99E7: 0x548F,
	    0x99E8: 0x5475,
	    0x99E9: 0x548E,
	    0x99EA: 0x545F,
	    0x99EB: 0x5471,
	    0x99EC: 0x5477,
	    0x99ED: 0x5470,
	    0x99EE: 0x5492,
	    0x99EF: 0x547B,
	    0x99F0: 0x5480,
	    0x99F1: 0x5476,
	    0x99F2: 0x5484,
	    0x99F3: 0x5490,
	    0x99F4: 0x5486,
	    0x99F5: 0x54C7,
	    0x99F6: 0x54A2,
	    0x99F7: 0x54B8,
	    0x99F8: 0x54A5,
	    0x99F9: 0x54AC,
	    0x99FA: 0x54C4,
	    0x99FB: 0x54C8,
	    0x99FC: 0x54A8,
	    0x9A40: 0x54AB,
	    0x9A41: 0x54C2,
	    0x9A42: 0x54A4,
	    0x9A43: 0x54BE,
	    0x9A44: 0x54BC,
	    0x9A45: 0x54D8,
	    0x9A46: 0x54E5,
	    0x9A47: 0x54E6,
	    0x9A48: 0x550F,
	    0x9A49: 0x5514,
	    0x9A4A: 0x54FD,
	    0x9A4B: 0x54EE,
	    0x9A4C: 0x54ED,
	    0x9A4D: 0x54FA,
	    0x9A4E: 0x54E2,
	    0x9A4F: 0x5539,
	    0x9A50: 0x5540,
	    0x9A51: 0x5563,
	    0x9A52: 0x554C,
	    0x9A53: 0x552E,
	    0x9A54: 0x555C,
	    0x9A55: 0x5545,
	    0x9A56: 0x5556,
	    0x9A57: 0x5557,
	    0x9A58: 0x5538,
	    0x9A59: 0x5533,
	    0x9A5A: 0x555D,
	    0x9A5B: 0x5599,
	    0x9A5C: 0x5580,
	    0x9A5D: 0x54AF,
	    0x9A5E: 0x558A,
	    0x9A5F: 0x559F,
	    0x9A60: 0x557B,
	    0x9A61: 0x557E,
	    0x9A62: 0x5598,
	    0x9A63: 0x559E,
	    0x9A64: 0x55AE,
	    0x9A65: 0x557C,
	    0x9A66: 0x5583,
	    0x9A67: 0x55A9,
	    0x9A68: 0x5587,
	    0x9A69: 0x55A8,
	    0x9A6A: 0x55DA,
	    0x9A6B: 0x55C5,
	    0x9A6C: 0x55DF,
	    0x9A6D: 0x55C4,
	    0x9A6E: 0x55DC,
	    0x9A6F: 0x55E4,
	    0x9A70: 0x55D4,
	    0x9A71: 0x5614,
	    0x9A72: 0x55F7,
	    0x9A73: 0x5616,
	    0x9A74: 0x55FE,
	    0x9A75: 0x55FD,
	    0x9A76: 0x561B,
	    0x9A77: 0x55F9,
	    0x9A78: 0x564E,
	    0x9A79: 0x5650,
	    0x9A7A: 0x71DF,
	    0x9A7B: 0x5634,
	    0x9A7C: 0x5636,
	    0x9A7D: 0x5632,
	    0x9A7E: 0x5638,
	    0x9A80: 0x566B,
	    0x9A81: 0x5664,
	    0x9A82: 0x562F,
	    0x9A83: 0x566C,
	    0x9A84: 0x566A,
	    0x9A85: 0x5686,
	    0x9A86: 0x5680,
	    0x9A87: 0x568A,
	    0x9A88: 0x56A0,
	    0x9A89: 0x5694,
	    0x9A8A: 0x568F,
	    0x9A8B: 0x56A5,
	    0x9A8C: 0x56AE,
	    0x9A8D: 0x56B6,
	    0x9A8E: 0x56B4,
	    0x9A8F: 0x56C2,
	    0x9A90: 0x56BC,
	    0x9A91: 0x56C1,
	    0x9A92: 0x56C3,
	    0x9A93: 0x56C0,
	    0x9A94: 0x56C8,
	    0x9A95: 0x56CE,
	    0x9A96: 0x56D1,
	    0x9A97: 0x56D3,
	    0x9A98: 0x56D7,
	    0x9A99: 0x56EE,
	    0x9A9A: 0x56F9,
	    0x9A9B: 0x5700,
	    0x9A9C: 0x56FF,
	    0x9A9D: 0x5704,
	    0x9A9E: 0x5709,
	    0x9A9F: 0x5708,
	    0x9AA0: 0x570B,
	    0x9AA1: 0x570D,
	    0x9AA2: 0x5713,
	    0x9AA3: 0x5718,
	    0x9AA4: 0x5716,
	    0x9AA5: 0x55C7,
	    0x9AA6: 0x571C,
	    0x9AA7: 0x5726,
	    0x9AA8: 0x5737,
	    0x9AA9: 0x5738,
	    0x9AAA: 0x574E,
	    0x9AAB: 0x573B,
	    0x9AAC: 0x5740,
	    0x9AAD: 0x574F,
	    0x9AAE: 0x5769,
	    0x9AAF: 0x57C0,
	    0x9AB0: 0x5788,
	    0x9AB1: 0x5761,
	    0x9AB2: 0x577F,
	    0x9AB3: 0x5789,
	    0x9AB4: 0x5793,
	    0x9AB5: 0x57A0,
	    0x9AB6: 0x57B3,
	    0x9AB7: 0x57A4,
	    0x9AB8: 0x57AA,
	    0x9AB9: 0x57B0,
	    0x9ABA: 0x57C3,
	    0x9ABB: 0x57C6,
	    0x9ABC: 0x57D4,
	    0x9ABD: 0x57D2,
	    0x9ABE: 0x57D3,
	    0x9ABF: 0x580A,
	    0x9AC0: 0x57D6,
	    0x9AC1: 0x57E3,
	    0x9AC2: 0x580B,
	    0x9AC3: 0x5819,
	    0x9AC4: 0x581D,
	    0x9AC5: 0x5872,
	    0x9AC6: 0x5821,
	    0x9AC7: 0x5862,
	    0x9AC8: 0x584B,
	    0x9AC9: 0x5870,
	    0x9ACA: 0x6BC0,
	    0x9ACB: 0x5852,
	    0x9ACC: 0x583D,
	    0x9ACD: 0x5879,
	    0x9ACE: 0x5885,
	    0x9ACF: 0x58B9,
	    0x9AD0: 0x589F,
	    0x9AD1: 0x58AB,
	    0x9AD2: 0x58BA,
	    0x9AD3: 0x58DE,
	    0x9AD4: 0x58BB,
	    0x9AD5: 0x58B8,
	    0x9AD6: 0x58AE,
	    0x9AD7: 0x58C5,
	    0x9AD8: 0x58D3,
	    0x9AD9: 0x58D1,
	    0x9ADA: 0x58D7,
	    0x9ADB: 0x58D9,
	    0x9ADC: 0x58D8,
	    0x9ADD: 0x58E5,
	    0x9ADE: 0x58DC,
	    0x9ADF: 0x58E4,
	    0x9AE0: 0x58DF,
	    0x9AE1: 0x58EF,
	    0x9AE2: 0x58FA,
	    0x9AE3: 0x58F9,
	    0x9AE4: 0x58FB,
	    0x9AE5: 0x58FC,
	    0x9AE6: 0x58FD,
	    0x9AE7: 0x5902,
	    0x9AE8: 0x590A,
	    0x9AE9: 0x5910,
	    0x9AEA: 0x591B,
	    0x9AEB: 0x68A6,
	    0x9AEC: 0x5925,
	    0x9AED: 0x592C,
	    0x9AEE: 0x592D,
	    0x9AEF: 0x5932,
	    0x9AF0: 0x5938,
	    0x9AF1: 0x593E,
	    0x9AF2: 0x7AD2,
	    0x9AF3: 0x5955,
	    0x9AF4: 0x5950,
	    0x9AF5: 0x594E,
	    0x9AF6: 0x595A,
	    0x9AF7: 0x5958,
	    0x9AF8: 0x5962,
	    0x9AF9: 0x5960,
	    0x9AFA: 0x5967,
	    0x9AFB: 0x596C,
	    0x9AFC: 0x5969,
	    0x9B40: 0x5978,
	    0x9B41: 0x5981,
	    0x9B42: 0x599D,
	    0x9B43: 0x4F5E,
	    0x9B44: 0x4FAB,
	    0x9B45: 0x59A3,
	    0x9B46: 0x59B2,
	    0x9B47: 0x59C6,
	    0x9B48: 0x59E8,
	    0x9B49: 0x59DC,
	    0x9B4A: 0x598D,
	    0x9B4B: 0x59D9,
	    0x9B4C: 0x59DA,
	    0x9B4D: 0x5A25,
	    0x9B4E: 0x5A1F,
	    0x9B4F: 0x5A11,
	    0x9B50: 0x5A1C,
	    0x9B51: 0x5A09,
	    0x9B52: 0x5A1A,
	    0x9B53: 0x5A40,
	    0x9B54: 0x5A6C,
	    0x9B55: 0x5A49,
	    0x9B56: 0x5A35,
	    0x9B57: 0x5A36,
	    0x9B58: 0x5A62,
	    0x9B59: 0x5A6A,
	    0x9B5A: 0x5A9A,
	    0x9B5B: 0x5ABC,
	    0x9B5C: 0x5ABE,
	    0x9B5D: 0x5ACB,
	    0x9B5E: 0x5AC2,
	    0x9B5F: 0x5ABD,
	    0x9B60: 0x5AE3,
	    0x9B61: 0x5AD7,
	    0x9B62: 0x5AE6,
	    0x9B63: 0x5AE9,
	    0x9B64: 0x5AD6,
	    0x9B65: 0x5AFA,
	    0x9B66: 0x5AFB,
	    0x9B67: 0x5B0C,
	    0x9B68: 0x5B0B,
	    0x9B69: 0x5B16,
	    0x9B6A: 0x5B32,
	    0x9B6B: 0x5AD0,
	    0x9B6C: 0x5B2A,
	    0x9B6D: 0x5B36,
	    0x9B6E: 0x5B3E,
	    0x9B6F: 0x5B43,
	    0x9B70: 0x5B45,
	    0x9B71: 0x5B40,
	    0x9B72: 0x5B51,
	    0x9B73: 0x5B55,
	    0x9B74: 0x5B5A,
	    0x9B75: 0x5B5B,
	    0x9B76: 0x5B65,
	    0x9B77: 0x5B69,
	    0x9B78: 0x5B70,
	    0x9B79: 0x5B73,
	    0x9B7A: 0x5B75,
	    0x9B7B: 0x5B78,
	    0x9B7C: 0x6588,
	    0x9B7D: 0x5B7A,
	    0x9B7E: 0x5B80,
	    0x9B80: 0x5B83,
	    0x9B81: 0x5BA6,
	    0x9B82: 0x5BB8,
	    0x9B83: 0x5BC3,
	    0x9B84: 0x5BC7,
	    0x9B85: 0x5BC9,
	    0x9B86: 0x5BD4,
	    0x9B87: 0x5BD0,
	    0x9B88: 0x5BE4,
	    0x9B89: 0x5BE6,
	    0x9B8A: 0x5BE2,
	    0x9B8B: 0x5BDE,
	    0x9B8C: 0x5BE5,
	    0x9B8D: 0x5BEB,
	    0x9B8E: 0x5BF0,
	    0x9B8F: 0x5BF6,
	    0x9B90: 0x5BF3,
	    0x9B91: 0x5C05,
	    0x9B92: 0x5C07,
	    0x9B93: 0x5C08,
	    0x9B94: 0x5C0D,
	    0x9B95: 0x5C13,
	    0x9B96: 0x5C20,
	    0x9B97: 0x5C22,
	    0x9B98: 0x5C28,
	    0x9B99: 0x5C38,
	    0x9B9A: 0x5C39,
	    0x9B9B: 0x5C41,
	    0x9B9C: 0x5C46,
	    0x9B9D: 0x5C4E,
	    0x9B9E: 0x5C53,
	    0x9B9F: 0x5C50,
	    0x9BA0: 0x5C4F,
	    0x9BA1: 0x5B71,
	    0x9BA2: 0x5C6C,
	    0x9BA3: 0x5C6E,
	    0x9BA4: 0x4E62,
	    0x9BA5: 0x5C76,
	    0x9BA6: 0x5C79,
	    0x9BA7: 0x5C8C,
	    0x9BA8: 0x5C91,
	    0x9BA9: 0x5C94,
	    0x9BAA: 0x599B,
	    0x9BAB: 0x5CAB,
	    0x9BAC: 0x5CBB,
	    0x9BAD: 0x5CB6,
	    0x9BAE: 0x5CBC,
	    0x9BAF: 0x5CB7,
	    0x9BB0: 0x5CC5,
	    0x9BB1: 0x5CBE,
	    0x9BB2: 0x5CC7,
	    0x9BB3: 0x5CD9,
	    0x9BB4: 0x5CE9,
	    0x9BB5: 0x5CFD,
	    0x9BB6: 0x5CFA,
	    0x9BB7: 0x5CED,
	    0x9BB8: 0x5D8C,
	    0x9BB9: 0x5CEA,
	    0x9BBA: 0x5D0B,
	    0x9BBB: 0x5D15,
	    0x9BBC: 0x5D17,
	    0x9BBD: 0x5D5C,
	    0x9BBE: 0x5D1F,
	    0x9BBF: 0x5D1B,
	    0x9BC0: 0x5D11,
	    0x9BC1: 0x5D14,
	    0x9BC2: 0x5D22,
	    0x9BC3: 0x5D1A,
	    0x9BC4: 0x5D19,
	    0x9BC5: 0x5D18,
	    0x9BC6: 0x5D4C,
	    0x9BC7: 0x5D52,
	    0x9BC8: 0x5D4E,
	    0x9BC9: 0x5D4B,
	    0x9BCA: 0x5D6C,
	    0x9BCB: 0x5D73,
	    0x9BCC: 0x5D76,
	    0x9BCD: 0x5D87,
	    0x9BCE: 0x5D84,
	    0x9BCF: 0x5D82,
	    0x9BD0: 0x5DA2,
	    0x9BD1: 0x5D9D,
	    0x9BD2: 0x5DAC,
	    0x9BD3: 0x5DAE,
	    0x9BD4: 0x5DBD,
	    0x9BD5: 0x5D90,
	    0x9BD6: 0x5DB7,
	    0x9BD7: 0x5DBC,
	    0x9BD8: 0x5DC9,
	    0x9BD9: 0x5DCD,
	    0x9BDA: 0x5DD3,
	    0x9BDB: 0x5DD2,
	    0x9BDC: 0x5DD6,
	    0x9BDD: 0x5DDB,
	    0x9BDE: 0x5DEB,
	    0x9BDF: 0x5DF2,
	    0x9BE0: 0x5DF5,
	    0x9BE1: 0x5E0B,
	    0x9BE2: 0x5E1A,
	    0x9BE3: 0x5E19,
	    0x9BE4: 0x5E11,
	    0x9BE5: 0x5E1B,
	    0x9BE6: 0x5E36,
	    0x9BE7: 0x5E37,
	    0x9BE8: 0x5E44,
	    0x9BE9: 0x5E43,
	    0x9BEA: 0x5E40,
	    0x9BEB: 0x5E4E,
	    0x9BEC: 0x5E57,
	    0x9BED: 0x5E54,
	    0x9BEE: 0x5E5F,
	    0x9BEF: 0x5E62,
	    0x9BF0: 0x5E64,
	    0x9BF1: 0x5E47,
	    0x9BF2: 0x5E75,
	    0x9BF3: 0x5E76,
	    0x9BF4: 0x5E7A,
	    0x9BF5: 0x9EBC,
	    0x9BF6: 0x5E7F,
	    0x9BF7: 0x5EA0,
	    0x9BF8: 0x5EC1,
	    0x9BF9: 0x5EC2,
	    0x9BFA: 0x5EC8,
	    0x9BFB: 0x5ED0,
	    0x9BFC: 0x5ECF,
	    0x9C40: 0x5ED6,
	    0x9C41: 0x5EE3,
	    0x9C42: 0x5EDD,
	    0x9C43: 0x5EDA,
	    0x9C44: 0x5EDB,
	    0x9C45: 0x5EE2,
	    0x9C46: 0x5EE1,
	    0x9C47: 0x5EE8,
	    0x9C48: 0x5EE9,
	    0x9C49: 0x5EEC,
	    0x9C4A: 0x5EF1,
	    0x9C4B: 0x5EF3,
	    0x9C4C: 0x5EF0,
	    0x9C4D: 0x5EF4,
	    0x9C4E: 0x5EF8,
	    0x9C4F: 0x5EFE,
	    0x9C50: 0x5F03,
	    0x9C51: 0x5F09,
	    0x9C52: 0x5F5D,
	    0x9C53: 0x5F5C,
	    0x9C54: 0x5F0B,
	    0x9C55: 0x5F11,
	    0x9C56: 0x5F16,
	    0x9C57: 0x5F29,
	    0x9C58: 0x5F2D,
	    0x9C59: 0x5F38,
	    0x9C5A: 0x5F41,
	    0x9C5B: 0x5F48,
	    0x9C5C: 0x5F4C,
	    0x9C5D: 0x5F4E,
	    0x9C5E: 0x5F2F,
	    0x9C5F: 0x5F51,
	    0x9C60: 0x5F56,
	    0x9C61: 0x5F57,
	    0x9C62: 0x5F59,
	    0x9C63: 0x5F61,
	    0x9C64: 0x5F6D,
	    0x9C65: 0x5F73,
	    0x9C66: 0x5F77,
	    0x9C67: 0x5F83,
	    0x9C68: 0x5F82,
	    0x9C69: 0x5F7F,
	    0x9C6A: 0x5F8A,
	    0x9C6B: 0x5F88,
	    0x9C6C: 0x5F91,
	    0x9C6D: 0x5F87,
	    0x9C6E: 0x5F9E,
	    0x9C6F: 0x5F99,
	    0x9C70: 0x5F98,
	    0x9C71: 0x5FA0,
	    0x9C72: 0x5FA8,
	    0x9C73: 0x5FAD,
	    0x9C74: 0x5FBC,
	    0x9C75: 0x5FD6,
	    0x9C76: 0x5FFB,
	    0x9C77: 0x5FE4,
	    0x9C78: 0x5FF8,
	    0x9C79: 0x5FF1,
	    0x9C7A: 0x5FDD,
	    0x9C7B: 0x60B3,
	    0x9C7C: 0x5FFF,
	    0x9C7D: 0x6021,
	    0x9C7E: 0x6060,
	    0x9C80: 0x6019,
	    0x9C81: 0x6010,
	    0x9C82: 0x6029,
	    0x9C83: 0x600E,
	    0x9C84: 0x6031,
	    0x9C85: 0x601B,
	    0x9C86: 0x6015,
	    0x9C87: 0x602B,
	    0x9C88: 0x6026,
	    0x9C89: 0x600F,
	    0x9C8A: 0x603A,
	    0x9C8B: 0x605A,
	    0x9C8C: 0x6041,
	    0x9C8D: 0x606A,
	    0x9C8E: 0x6077,
	    0x9C8F: 0x605F,
	    0x9C90: 0x604A,
	    0x9C91: 0x6046,
	    0x9C92: 0x604D,
	    0x9C93: 0x6063,
	    0x9C94: 0x6043,
	    0x9C95: 0x6064,
	    0x9C96: 0x6042,
	    0x9C97: 0x606C,
	    0x9C98: 0x606B,
	    0x9C99: 0x6059,
	    0x9C9A: 0x6081,
	    0x9C9B: 0x608D,
	    0x9C9C: 0x60E7,
	    0x9C9D: 0x6083,
	    0x9C9E: 0x609A,
	    0x9C9F: 0x6084,
	    0x9CA0: 0x609B,
	    0x9CA1: 0x6096,
	    0x9CA2: 0x6097,
	    0x9CA3: 0x6092,
	    0x9CA4: 0x60A7,
	    0x9CA5: 0x608B,
	    0x9CA6: 0x60E1,
	    0x9CA7: 0x60B8,
	    0x9CA8: 0x60E0,
	    0x9CA9: 0x60D3,
	    0x9CAA: 0x60B4,
	    0x9CAB: 0x5FF0,
	    0x9CAC: 0x60BD,
	    0x9CAD: 0x60C6,
	    0x9CAE: 0x60B5,
	    0x9CAF: 0x60D8,
	    0x9CB0: 0x614D,
	    0x9CB1: 0x6115,
	    0x9CB2: 0x6106,
	    0x9CB3: 0x60F6,
	    0x9CB4: 0x60F7,
	    0x9CB5: 0x6100,
	    0x9CB6: 0x60F4,
	    0x9CB7: 0x60FA,
	    0x9CB8: 0x6103,
	    0x9CB9: 0x6121,
	    0x9CBA: 0x60FB,
	    0x9CBB: 0x60F1,
	    0x9CBC: 0x610D,
	    0x9CBD: 0x610E,
	    0x9CBE: 0x6147,
	    0x9CBF: 0x613E,
	    0x9CC0: 0x6128,
	    0x9CC1: 0x6127,
	    0x9CC2: 0x614A,
	    0x9CC3: 0x613F,
	    0x9CC4: 0x613C,
	    0x9CC5: 0x612C,
	    0x9CC6: 0x6134,
	    0x9CC7: 0x613D,
	    0x9CC8: 0x6142,
	    0x9CC9: 0x6144,
	    0x9CCA: 0x6173,
	    0x9CCB: 0x6177,
	    0x9CCC: 0x6158,
	    0x9CCD: 0x6159,
	    0x9CCE: 0x615A,
	    0x9CCF: 0x616B,
	    0x9CD0: 0x6174,
	    0x9CD1: 0x616F,
	    0x9CD2: 0x6165,
	    0x9CD3: 0x6171,
	    0x9CD4: 0x615F,
	    0x9CD5: 0x615D,
	    0x9CD6: 0x6153,
	    0x9CD7: 0x6175,
	    0x9CD8: 0x6199,
	    0x9CD9: 0x6196,
	    0x9CDA: 0x6187,
	    0x9CDB: 0x61AC,
	    0x9CDC: 0x6194,
	    0x9CDD: 0x619A,
	    0x9CDE: 0x618A,
	    0x9CDF: 0x6191,
	    0x9CE0: 0x61AB,
	    0x9CE1: 0x61AE,
	    0x9CE2: 0x61CC,
	    0x9CE3: 0x61CA,
	    0x9CE4: 0x61C9,
	    0x9CE5: 0x61F7,
	    0x9CE6: 0x61C8,
	    0x9CE7: 0x61C3,
	    0x9CE8: 0x61C6,
	    0x9CE9: 0x61BA,
	    0x9CEA: 0x61CB,
	    0x9CEB: 0x7F79,
	    0x9CEC: 0x61CD,
	    0x9CED: 0x61E6,
	    0x9CEE: 0x61E3,
	    0x9CEF: 0x61F6,
	    0x9CF0: 0x61FA,
	    0x9CF1: 0x61F4,
	    0x9CF2: 0x61FF,
	    0x9CF3: 0x61FD,
	    0x9CF4: 0x61FC,
	    0x9CF5: 0x61FE,
	    0x9CF6: 0x6200,
	    0x9CF7: 0x6208,
	    0x9CF8: 0x6209,
	    0x9CF9: 0x620D,
	    0x9CFA: 0x620C,
	    0x9CFB: 0x6214,
	    0x9CFC: 0x621B,
	    0x9D40: 0x621E,
	    0x9D41: 0x6221,
	    0x9D42: 0x622A,
	    0x9D43: 0x622E,
	    0x9D44: 0x6230,
	    0x9D45: 0x6232,
	    0x9D46: 0x6233,
	    0x9D47: 0x6241,
	    0x9D48: 0x624E,
	    0x9D49: 0x625E,
	    0x9D4A: 0x6263,
	    0x9D4B: 0x625B,
	    0x9D4C: 0x6260,
	    0x9D4D: 0x6268,
	    0x9D4E: 0x627C,
	    0x9D4F: 0x6282,
	    0x9D50: 0x6289,
	    0x9D51: 0x627E,
	    0x9D52: 0x6292,
	    0x9D53: 0x6293,
	    0x9D54: 0x6296,
	    0x9D55: 0x62D4,
	    0x9D56: 0x6283,
	    0x9D57: 0x6294,
	    0x9D58: 0x62D7,
	    0x9D59: 0x62D1,
	    0x9D5A: 0x62BB,
	    0x9D5B: 0x62CF,
	    0x9D5C: 0x62FF,
	    0x9D5D: 0x62C6,
	    0x9D5E: 0x64D4,
	    0x9D5F: 0x62C8,
	    0x9D60: 0x62DC,
	    0x9D61: 0x62CC,
	    0x9D62: 0x62CA,
	    0x9D63: 0x62C2,
	    0x9D64: 0x62C7,
	    0x9D65: 0x629B,
	    0x9D66: 0x62C9,
	    0x9D67: 0x630C,
	    0x9D68: 0x62EE,
	    0x9D69: 0x62F1,
	    0x9D6A: 0x6327,
	    0x9D6B: 0x6302,
	    0x9D6C: 0x6308,
	    0x9D6D: 0x62EF,
	    0x9D6E: 0x62F5,
	    0x9D6F: 0x6350,
	    0x9D70: 0x633E,
	    0x9D71: 0x634D,
	    0x9D72: 0x641C,
	    0x9D73: 0x634F,
	    0x9D74: 0x6396,
	    0x9D75: 0x638E,
	    0x9D76: 0x6380,
	    0x9D77: 0x63AB,
	    0x9D78: 0x6376,
	    0x9D79: 0x63A3,
	    0x9D7A: 0x638F,
	    0x9D7B: 0x6389,
	    0x9D7C: 0x639F,
	    0x9D7D: 0x63B5,
	    0x9D7E: 0x636B,
	    0x9D80: 0x6369,
	    0x9D81: 0x63BE,
	    0x9D82: 0x63E9,
	    0x9D83: 0x63C0,
	    0x9D84: 0x63C6,
	    0x9D85: 0x63E3,
	    0x9D86: 0x63C9,
	    0x9D87: 0x63D2,
	    0x9D88: 0x63F6,
	    0x9D89: 0x63C4,
	    0x9D8A: 0x6416,
	    0x9D8B: 0x6434,
	    0x9D8C: 0x6406,
	    0x9D8D: 0x6413,
	    0x9D8E: 0x6426,
	    0x9D8F: 0x6436,
	    0x9D90: 0x651D,
	    0x9D91: 0x6417,
	    0x9D92: 0x6428,
	    0x9D93: 0x640F,
	    0x9D94: 0x6467,
	    0x9D95: 0x646F,
	    0x9D96: 0x6476,
	    0x9D97: 0x644E,
	    0x9D98: 0x652A,
	    0x9D99: 0x6495,
	    0x9D9A: 0x6493,
	    0x9D9B: 0x64A5,
	    0x9D9C: 0x64A9,
	    0x9D9D: 0x6488,
	    0x9D9E: 0x64BC,
	    0x9D9F: 0x64DA,
	    0x9DA0: 0x64D2,
	    0x9DA1: 0x64C5,
	    0x9DA2: 0x64C7,
	    0x9DA3: 0x64BB,
	    0x9DA4: 0x64D8,
	    0x9DA5: 0x64C2,
	    0x9DA6: 0x64F1,
	    0x9DA7: 0x64E7,
	    0x9DA8: 0x8209,
	    0x9DA9: 0x64E0,
	    0x9DAA: 0x64E1,
	    0x9DAB: 0x62AC,
	    0x9DAC: 0x64E3,
	    0x9DAD: 0x64EF,
	    0x9DAE: 0x652C,
	    0x9DAF: 0x64F6,
	    0x9DB0: 0x64F4,
	    0x9DB1: 0x64F2,
	    0x9DB2: 0x64FA,
	    0x9DB3: 0x6500,
	    0x9DB4: 0x64FD,
	    0x9DB5: 0x6518,
	    0x9DB6: 0x651C,
	    0x9DB7: 0x6505,
	    0x9DB8: 0x6524,
	    0x9DB9: 0x6523,
	    0x9DBA: 0x652B,
	    0x9DBB: 0x6534,
	    0x9DBC: 0x6535,
	    0x9DBD: 0x6537,
	    0x9DBE: 0x6536,
	    0x9DBF: 0x6538,
	    0x9DC0: 0x754B,
	    0x9DC1: 0x6548,
	    0x9DC2: 0x6556,
	    0x9DC3: 0x6555,
	    0x9DC4: 0x654D,
	    0x9DC5: 0x6558,
	    0x9DC6: 0x655E,
	    0x9DC7: 0x655D,
	    0x9DC8: 0x6572,
	    0x9DC9: 0x6578,
	    0x9DCA: 0x6582,
	    0x9DCB: 0x6583,
	    0x9DCC: 0x8B8A,
	    0x9DCD: 0x659B,
	    0x9DCE: 0x659F,
	    0x9DCF: 0x65AB,
	    0x9DD0: 0x65B7,
	    0x9DD1: 0x65C3,
	    0x9DD2: 0x65C6,
	    0x9DD3: 0x65C1,
	    0x9DD4: 0x65C4,
	    0x9DD5: 0x65CC,
	    0x9DD6: 0x65D2,
	    0x9DD7: 0x65DB,
	    0x9DD8: 0x65D9,
	    0x9DD9: 0x65E0,
	    0x9DDA: 0x65E1,
	    0x9DDB: 0x65F1,
	    0x9DDC: 0x6772,
	    0x9DDD: 0x660A,
	    0x9DDE: 0x6603,
	    0x9DDF: 0x65FB,
	    0x9DE0: 0x6773,
	    0x9DE1: 0x6635,
	    0x9DE2: 0x6636,
	    0x9DE3: 0x6634,
	    0x9DE4: 0x661C,
	    0x9DE5: 0x664F,
	    0x9DE6: 0x6644,
	    0x9DE7: 0x6649,
	    0x9DE8: 0x6641,
	    0x9DE9: 0x665E,
	    0x9DEA: 0x665D,
	    0x9DEB: 0x6664,
	    0x9DEC: 0x6667,
	    0x9DED: 0x6668,
	    0x9DEE: 0x665F,
	    0x9DEF: 0x6662,
	    0x9DF0: 0x6670,
	    0x9DF1: 0x6683,
	    0x9DF2: 0x6688,
	    0x9DF3: 0x668E,
	    0x9DF4: 0x6689,
	    0x9DF5: 0x6684,
	    0x9DF6: 0x6698,
	    0x9DF7: 0x669D,
	    0x9DF8: 0x66C1,
	    0x9DF9: 0x66B9,
	    0x9DFA: 0x66C9,
	    0x9DFB: 0x66BE,
	    0x9DFC: 0x66BC,
	    0x9E40: 0x66C4,
	    0x9E41: 0x66B8,
	    0x9E42: 0x66D6,
	    0x9E43: 0x66DA,
	    0x9E44: 0x66E0,
	    0x9E45: 0x663F,
	    0x9E46: 0x66E6,
	    0x9E47: 0x66E9,
	    0x9E48: 0x66F0,
	    0x9E49: 0x66F5,
	    0x9E4A: 0x66F7,
	    0x9E4B: 0x670F,
	    0x9E4C: 0x6716,
	    0x9E4D: 0x671E,
	    0x9E4E: 0x6726,
	    0x9E4F: 0x6727,
	    0x9E50: 0x9738,
	    0x9E51: 0x672E,
	    0x9E52: 0x673F,
	    0x9E53: 0x6736,
	    0x9E54: 0x6741,
	    0x9E55: 0x6738,
	    0x9E56: 0x6737,
	    0x9E57: 0x6746,
	    0x9E58: 0x675E,
	    0x9E59: 0x6760,
	    0x9E5A: 0x6759,
	    0x9E5B: 0x6763,
	    0x9E5C: 0x6764,
	    0x9E5D: 0x6789,
	    0x9E5E: 0x6770,
	    0x9E5F: 0x67A9,
	    0x9E60: 0x677C,
	    0x9E61: 0x676A,
	    0x9E62: 0x678C,
	    0x9E63: 0x678B,
	    0x9E64: 0x67A6,
	    0x9E65: 0x67A1,
	    0x9E66: 0x6785,
	    0x9E67: 0x67B7,
	    0x9E68: 0x67EF,
	    0x9E69: 0x67B4,
	    0x9E6A: 0x67EC,
	    0x9E6B: 0x67B3,
	    0x9E6C: 0x67E9,
	    0x9E6D: 0x67B8,
	    0x9E6E: 0x67E4,
	    0x9E6F: 0x67DE,
	    0x9E70: 0x67DD,
	    0x9E71: 0x67E2,
	    0x9E72: 0x67EE,
	    0x9E73: 0x67B9,
	    0x9E74: 0x67CE,
	    0x9E75: 0x67C6,
	    0x9E76: 0x67E7,
	    0x9E77: 0x6A9C,
	    0x9E78: 0x681E,
	    0x9E79: 0x6846,
	    0x9E7A: 0x6829,
	    0x9E7B: 0x6840,
	    0x9E7C: 0x684D,
	    0x9E7D: 0x6832,
	    0x9E7E: 0x684E,
	    0x9E80: 0x68B3,
	    0x9E81: 0x682B,
	    0x9E82: 0x6859,
	    0x9E83: 0x6863,
	    0x9E84: 0x6877,
	    0x9E85: 0x687F,
	    0x9E86: 0x689F,
	    0x9E87: 0x688F,
	    0x9E88: 0x68AD,
	    0x9E89: 0x6894,
	    0x9E8A: 0x689D,
	    0x9E8B: 0x689B,
	    0x9E8C: 0x6883,
	    0x9E8D: 0x6AAE,
	    0x9E8E: 0x68B9,
	    0x9E8F: 0x6874,
	    0x9E90: 0x68B5,
	    0x9E91: 0x68A0,
	    0x9E92: 0x68BA,
	    0x9E93: 0x690F,
	    0x9E94: 0x688D,
	    0x9E95: 0x687E,
	    0x9E96: 0x6901,
	    0x9E97: 0x68CA,
	    0x9E98: 0x6908,
	    0x9E99: 0x68D8,
	    0x9E9A: 0x6922,
	    0x9E9B: 0x6926,
	    0x9E9C: 0x68E1,
	    0x9E9D: 0x690C,
	    0x9E9E: 0x68CD,
	    0x9E9F: 0x68D4,
	    0x9EA0: 0x68E7,
	    0x9EA1: 0x68D5,
	    0x9EA2: 0x6936,
	    0x9EA3: 0x6912,
	    0x9EA4: 0x6904,
	    0x9EA5: 0x68D7,
	    0x9EA6: 0x68E3,
	    0x9EA7: 0x6925,
	    0x9EA8: 0x68F9,
	    0x9EA9: 0x68E0,
	    0x9EAA: 0x68EF,
	    0x9EAB: 0x6928,
	    0x9EAC: 0x692A,
	    0x9EAD: 0x691A,
	    0x9EAE: 0x6923,
	    0x9EAF: 0x6921,
	    0x9EB0: 0x68C6,
	    0x9EB1: 0x6979,
	    0x9EB2: 0x6977,
	    0x9EB3: 0x695C,
	    0x9EB4: 0x6978,
	    0x9EB5: 0x696B,
	    0x9EB6: 0x6954,
	    0x9EB7: 0x697E,
	    0x9EB8: 0x696E,
	    0x9EB9: 0x6939,
	    0x9EBA: 0x6974,
	    0x9EBB: 0x693D,
	    0x9EBC: 0x6959,
	    0x9EBD: 0x6930,
	    0x9EBE: 0x6961,
	    0x9EBF: 0x695E,
	    0x9EC0: 0x695D,
	    0x9EC1: 0x6981,
	    0x9EC2: 0x696A,
	    0x9EC3: 0x69B2,
	    0x9EC4: 0x69AE,
	    0x9EC5: 0x69D0,
	    0x9EC6: 0x69BF,
	    0x9EC7: 0x69C1,
	    0x9EC8: 0x69D3,
	    0x9EC9: 0x69BE,
	    0x9ECA: 0x69CE,
	    0x9ECB: 0x5BE8,
	    0x9ECC: 0x69CA,
	    0x9ECD: 0x69DD,
	    0x9ECE: 0x69BB,
	    0x9ECF: 0x69C3,
	    0x9ED0: 0x69A7,
	    0x9ED1: 0x6A2E,
	    0x9ED2: 0x6991,
	    0x9ED3: 0x69A0,
	    0x9ED4: 0x699C,
	    0x9ED5: 0x6995,
	    0x9ED6: 0x69B4,
	    0x9ED7: 0x69DE,
	    0x9ED8: 0x69E8,
	    0x9ED9: 0x6A02,
	    0x9EDA: 0x6A1B,
	    0x9EDB: 0x69FF,
	    0x9EDC: 0x6B0A,
	    0x9EDD: 0x69F9,
	    0x9EDE: 0x69F2,
	    0x9EDF: 0x69E7,
	    0x9EE0: 0x6A05,
	    0x9EE1: 0x69B1,
	    0x9EE2: 0x6A1E,
	    0x9EE3: 0x69ED,
	    0x9EE4: 0x6A14,
	    0x9EE5: 0x69EB,
	    0x9EE6: 0x6A0A,
	    0x9EE7: 0x6A12,
	    0x9EE8: 0x6AC1,
	    0x9EE9: 0x6A23,
	    0x9EEA: 0x6A13,
	    0x9EEB: 0x6A44,
	    0x9EEC: 0x6A0C,
	    0x9EED: 0x6A72,
	    0x9EEE: 0x6A36,
	    0x9EEF: 0x6A78,
	    0x9EF0: 0x6A47,
	    0x9EF1: 0x6A62,
	    0x9EF2: 0x6A59,
	    0x9EF3: 0x6A66,
	    0x9EF4: 0x6A48,
	    0x9EF5: 0x6A38,
	    0x9EF6: 0x6A22,
	    0x9EF7: 0x6A90,
	    0x9EF8: 0x6A8D,
	    0x9EF9: 0x6AA0,
	    0x9EFA: 0x6A84,
	    0x9EFB: 0x6AA2,
	    0x9EFC: 0x6AA3,
	    0x9F40: 0x6A97,
	    0x9F41: 0x8617,
	    0x9F42: 0x6ABB,
	    0x9F43: 0x6AC3,
	    0x9F44: 0x6AC2,
	    0x9F45: 0x6AB8,
	    0x9F46: 0x6AB3,
	    0x9F47: 0x6AAC,
	    0x9F48: 0x6ADE,
	    0x9F49: 0x6AD1,
	    0x9F4A: 0x6ADF,
	    0x9F4B: 0x6AAA,
	    0x9F4C: 0x6ADA,
	    0x9F4D: 0x6AEA,
	    0x9F4E: 0x6AFB,
	    0x9F4F: 0x6B05,
	    0x9F50: 0x8616,
	    0x9F51: 0x6AFA,
	    0x9F52: 0x6B12,
	    0x9F53: 0x6B16,
	    0x9F54: 0x9B31,
	    0x9F55: 0x6B1F,
	    0x9F56: 0x6B38,
	    0x9F57: 0x6B37,
	    0x9F58: 0x76DC,
	    0x9F59: 0x6B39,
	    0x9F5A: 0x98EE,
	    0x9F5B: 0x6B47,
	    0x9F5C: 0x6B43,
	    0x9F5D: 0x6B49,
	    0x9F5E: 0x6B50,
	    0x9F5F: 0x6B59,
	    0x9F60: 0x6B54,
	    0x9F61: 0x6B5B,
	    0x9F62: 0x6B5F,
	    0x9F63: 0x6B61,
	    0x9F64: 0x6B78,
	    0x9F65: 0x6B79,
	    0x9F66: 0x6B7F,
	    0x9F67: 0x6B80,
	    0x9F68: 0x6B84,
	    0x9F69: 0x6B83,
	    0x9F6A: 0x6B8D,
	    0x9F6B: 0x6B98,
	    0x9F6C: 0x6B95,
	    0x9F6D: 0x6B9E,
	    0x9F6E: 0x6BA4,
	    0x9F6F: 0x6BAA,
	    0x9F70: 0x6BAB,
	    0x9F71: 0x6BAF,
	    0x9F72: 0x6BB2,
	    0x9F73: 0x6BB1,
	    0x9F74: 0x6BB3,
	    0x9F75: 0x6BB7,
	    0x9F76: 0x6BBC,
	    0x9F77: 0x6BC6,
	    0x9F78: 0x6BCB,
	    0x9F79: 0x6BD3,
	    0x9F7A: 0x6BDF,
	    0x9F7B: 0x6BEC,
	    0x9F7C: 0x6BEB,
	    0x9F7D: 0x6BF3,
	    0x9F7E: 0x6BEF,
	    0x9F80: 0x9EBE,
	    0x9F81: 0x6C08,
	    0x9F82: 0x6C13,
	    0x9F83: 0x6C14,
	    0x9F84: 0x6C1B,
	    0x9F85: 0x6C24,
	    0x9F86: 0x6C23,
	    0x9F87: 0x6C5E,
	    0x9F88: 0x6C55,
	    0x9F89: 0x6C62,
	    0x9F8A: 0x6C6A,
	    0x9F8B: 0x6C82,
	    0x9F8C: 0x6C8D,
	    0x9F8D: 0x6C9A,
	    0x9F8E: 0x6C81,
	    0x9F8F: 0x6C9B,
	    0x9F90: 0x6C7E,
	    0x9F91: 0x6C68,
	    0x9F92: 0x6C73,
	    0x9F93: 0x6C92,
	    0x9F94: 0x6C90,
	    0x9F95: 0x6CC4,
	    0x9F96: 0x6CF1,
	    0x9F97: 0x6CD3,
	    0x9F98: 0x6CBD,
	    0x9F99: 0x6CD7,
	    0x9F9A: 0x6CC5,
	    0x9F9B: 0x6CDD,
	    0x9F9C: 0x6CAE,
	    0x9F9D: 0x6CB1,
	    0x9F9E: 0x6CBE,
	    0x9F9F: 0x6CBA,
	    0x9FA0: 0x6CDB,
	    0x9FA1: 0x6CEF,
	    0x9FA2: 0x6CD9,
	    0x9FA3: 0x6CEA,
	    0x9FA4: 0x6D1F,
	    0x9FA5: 0x884D,
	    0x9FA6: 0x6D36,
	    0x9FA7: 0x6D2B,
	    0x9FA8: 0x6D3D,
	    0x9FA9: 0x6D38,
	    0x9FAA: 0x6D19,
	    0x9FAB: 0x6D35,
	    0x9FAC: 0x6D33,
	    0x9FAD: 0x6D12,
	    0x9FAE: 0x6D0C,
	    0x9FAF: 0x6D63,
	    0x9FB0: 0x6D93,
	    0x9FB1: 0x6D64,
	    0x9FB2: 0x6D5A,
	    0x9FB3: 0x6D79,
	    0x9FB4: 0x6D59,
	    0x9FB5: 0x6D8E,
	    0x9FB6: 0x6D95,
	    0x9FB7: 0x6FE4,
	    0x9FB8: 0x6D85,
	    0x9FB9: 0x6DF9,
	    0x9FBA: 0x6E15,
	    0x9FBB: 0x6E0A,
	    0x9FBC: 0x6DB5,
	    0x9FBD: 0x6DC7,
	    0x9FBE: 0x6DE6,
	    0x9FBF: 0x6DB8,
	    0x9FC0: 0x6DC6,
	    0x9FC1: 0x6DEC,
	    0x9FC2: 0x6DDE,
	    0x9FC3: 0x6DCC,
	    0x9FC4: 0x6DE8,
	    0x9FC5: 0x6DD2,
	    0x9FC6: 0x6DC5,
	    0x9FC7: 0x6DFA,
	    0x9FC8: 0x6DD9,
	    0x9FC9: 0x6DE4,
	    0x9FCA: 0x6DD5,
	    0x9FCB: 0x6DEA,
	    0x9FCC: 0x6DEE,
	    0x9FCD: 0x6E2D,
	    0x9FCE: 0x6E6E,
	    0x9FCF: 0x6E2E,
	    0x9FD0: 0x6E19,
	    0x9FD1: 0x6E72,
	    0x9FD2: 0x6E5F,
	    0x9FD3: 0x6E3E,
	    0x9FD4: 0x6E23,
	    0x9FD5: 0x6E6B,
	    0x9FD6: 0x6E2B,
	    0x9FD7: 0x6E76,
	    0x9FD8: 0x6E4D,
	    0x9FD9: 0x6E1F,
	    0x9FDA: 0x6E43,
	    0x9FDB: 0x6E3A,
	    0x9FDC: 0x6E4E,
	    0x9FDD: 0x6E24,
	    0x9FDE: 0x6EFF,
	    0x9FDF: 0x6E1D,
	    0x9FE0: 0x6E38,
	    0x9FE1: 0x6E82,
	    0x9FE2: 0x6EAA,
	    0x9FE3: 0x6E98,
	    0x9FE4: 0x6EC9,
	    0x9FE5: 0x6EB7,
	    0x9FE6: 0x6ED3,
	    0x9FE7: 0x6EBD,
	    0x9FE8: 0x6EAF,
	    0x9FE9: 0x6EC4,
	    0x9FEA: 0x6EB2,
	    0x9FEB: 0x6ED4,
	    0x9FEC: 0x6ED5,
	    0x9FED: 0x6E8F,
	    0x9FEE: 0x6EA5,
	    0x9FEF: 0x6EC2,
	    0x9FF0: 0x6E9F,
	    0x9FF1: 0x6F41,
	    0x9FF2: 0x6F11,
	    0x9FF3: 0x704C,
	    0x9FF4: 0x6EEC,
	    0x9FF5: 0x6EF8,
	    0x9FF6: 0x6EFE,
	    0x9FF7: 0x6F3F,
	    0x9FF8: 0x6EF2,
	    0x9FF9: 0x6F31,
	    0x9FFA: 0x6EEF,
	    0x9FFB: 0x6F32,
	    0x9FFC: 0x6ECC,
	    0xA1: 0xFF61,
	    0xA2: 0xFF62,
	    0xA3: 0xFF63,
	    0xA4: 0xFF64,
	    0xA5: 0xFF65,
	    0xA6: 0xFF66,
	    0xA7: 0xFF67,
	    0xA8: 0xFF68,
	    0xA9: 0xFF69,
	    0xAA: 0xFF6A,
	    0xAB: 0xFF6B,
	    0xAC: 0xFF6C,
	    0xAD: 0xFF6D,
	    0xAE: 0xFF6E,
	    0xAF: 0xFF6F,
	    0xB0: 0xFF70,
	    0xB1: 0xFF71,
	    0xB2: 0xFF72,
	    0xB3: 0xFF73,
	    0xB4: 0xFF74,
	    0xB5: 0xFF75,
	    0xB6: 0xFF76,
	    0xB7: 0xFF77,
	    0xB8: 0xFF78,
	    0xB9: 0xFF79,
	    0xBA: 0xFF7A,
	    0xBB: 0xFF7B,
	    0xBC: 0xFF7C,
	    0xBD: 0xFF7D,
	    0xBE: 0xFF7E,
	    0xBF: 0xFF7F,
	    0xC0: 0xFF80,
	    0xC1: 0xFF81,
	    0xC2: 0xFF82,
	    0xC3: 0xFF83,
	    0xC4: 0xFF84,
	    0xC5: 0xFF85,
	    0xC6: 0xFF86,
	    0xC7: 0xFF87,
	    0xC8: 0xFF88,
	    0xC9: 0xFF89,
	    0xCA: 0xFF8A,
	    0xCB: 0xFF8B,
	    0xCC: 0xFF8C,
	    0xCD: 0xFF8D,
	    0xCE: 0xFF8E,
	    0xCF: 0xFF8F,
	    0xD0: 0xFF90,
	    0xD1: 0xFF91,
	    0xD2: 0xFF92,
	    0xD3: 0xFF93,
	    0xD4: 0xFF94,
	    0xD5: 0xFF95,
	    0xD6: 0xFF96,
	    0xD7: 0xFF97,
	    0xD8: 0xFF98,
	    0xD9: 0xFF99,
	    0xDA: 0xFF9A,
	    0xDB: 0xFF9B,
	    0xDC: 0xFF9C,
	    0xDD: 0xFF9D,
	    0xDE: 0xFF9E,
	    0xDF: 0xFF9F,
	    0xE040: 0x6F3E,
	    0xE041: 0x6F13,
	    0xE042: 0x6EF7,
	    0xE043: 0x6F86,
	    0xE044: 0x6F7A,
	    0xE045: 0x6F78,
	    0xE046: 0x6F81,
	    0xE047: 0x6F80,
	    0xE048: 0x6F6F,
	    0xE049: 0x6F5B,
	    0xE04A: 0x6FF3,
	    0xE04B: 0x6F6D,
	    0xE04C: 0x6F82,
	    0xE04D: 0x6F7C,
	    0xE04E: 0x6F58,
	    0xE04F: 0x6F8E,
	    0xE050: 0x6F91,
	    0xE051: 0x6FC2,
	    0xE052: 0x6F66,
	    0xE053: 0x6FB3,
	    0xE054: 0x6FA3,
	    0xE055: 0x6FA1,
	    0xE056: 0x6FA4,
	    0xE057: 0x6FB9,
	    0xE058: 0x6FC6,
	    0xE059: 0x6FAA,
	    0xE05A: 0x6FDF,
	    0xE05B: 0x6FD5,
	    0xE05C: 0x6FEC,
	    0xE05D: 0x6FD4,
	    0xE05E: 0x6FD8,
	    0xE05F: 0x6FF1,
	    0xE060: 0x6FEE,
	    0xE061: 0x6FDB,
	    0xE062: 0x7009,
	    0xE063: 0x700B,
	    0xE064: 0x6FFA,
	    0xE065: 0x7011,
	    0xE066: 0x7001,
	    0xE067: 0x700F,
	    0xE068: 0x6FFE,
	    0xE069: 0x701B,
	    0xE06A: 0x701A,
	    0xE06B: 0x6F74,
	    0xE06C: 0x701D,
	    0xE06D: 0x7018,
	    0xE06E: 0x701F,
	    0xE06F: 0x7030,
	    0xE070: 0x703E,
	    0xE071: 0x7032,
	    0xE072: 0x7051,
	    0xE073: 0x7063,
	    0xE074: 0x7099,
	    0xE075: 0x7092,
	    0xE076: 0x70AF,
	    0xE077: 0x70F1,
	    0xE078: 0x70AC,
	    0xE079: 0x70B8,
	    0xE07A: 0x70B3,
	    0xE07B: 0x70AE,
	    0xE07C: 0x70DF,
	    0xE07D: 0x70CB,
	    0xE07E: 0x70DD,
	    0xE080: 0x70D9,
	    0xE081: 0x7109,
	    0xE082: 0x70FD,
	    0xE083: 0x711C,
	    0xE084: 0x7119,
	    0xE085: 0x7165,
	    0xE086: 0x7155,
	    0xE087: 0x7188,
	    0xE088: 0x7166,
	    0xE089: 0x7162,
	    0xE08A: 0x714C,
	    0xE08B: 0x7156,
	    0xE08C: 0x716C,
	    0xE08D: 0x718F,
	    0xE08E: 0x71FB,
	    0xE08F: 0x7184,
	    0xE090: 0x7195,
	    0xE091: 0x71A8,
	    0xE092: 0x71AC,
	    0xE093: 0x71D7,
	    0xE094: 0x71B9,
	    0xE095: 0x71BE,
	    0xE096: 0x71D2,
	    0xE097: 0x71C9,
	    0xE098: 0x71D4,
	    0xE099: 0x71CE,
	    0xE09A: 0x71E0,
	    0xE09B: 0x71EC,
	    0xE09C: 0x71E7,
	    0xE09D: 0x71F5,
	    0xE09E: 0x71FC,
	    0xE09F: 0x71F9,
	    0xE0A0: 0x71FF,
	    0xE0A1: 0x720D,
	    0xE0A2: 0x7210,
	    0xE0A3: 0x721B,
	    0xE0A4: 0x7228,
	    0xE0A5: 0x722D,
	    0xE0A6: 0x722C,
	    0xE0A7: 0x7230,
	    0xE0A8: 0x7232,
	    0xE0A9: 0x723B,
	    0xE0AA: 0x723C,
	    0xE0AB: 0x723F,
	    0xE0AC: 0x7240,
	    0xE0AD: 0x7246,
	    0xE0AE: 0x724B,
	    0xE0AF: 0x7258,
	    0xE0B0: 0x7274,
	    0xE0B1: 0x727E,
	    0xE0B2: 0x7282,
	    0xE0B3: 0x7281,
	    0xE0B4: 0x7287,
	    0xE0B5: 0x7292,
	    0xE0B6: 0x7296,
	    0xE0B7: 0x72A2,
	    0xE0B8: 0x72A7,
	    0xE0B9: 0x72B9,
	    0xE0BA: 0x72B2,
	    0xE0BB: 0x72C3,
	    0xE0BC: 0x72C6,
	    0xE0BD: 0x72C4,
	    0xE0BE: 0x72CE,
	    0xE0BF: 0x72D2,
	    0xE0C0: 0x72E2,
	    0xE0C1: 0x72E0,
	    0xE0C2: 0x72E1,
	    0xE0C3: 0x72F9,
	    0xE0C4: 0x72F7,
	    0xE0C5: 0x500F,
	    0xE0C6: 0x7317,
	    0xE0C7: 0x730A,
	    0xE0C8: 0x731C,
	    0xE0C9: 0x7316,
	    0xE0CA: 0x731D,
	    0xE0CB: 0x7334,
	    0xE0CC: 0x732F,
	    0xE0CD: 0x7329,
	    0xE0CE: 0x7325,
	    0xE0CF: 0x733E,
	    0xE0D0: 0x734E,
	    0xE0D1: 0x734F,
	    0xE0D2: 0x9ED8,
	    0xE0D3: 0x7357,
	    0xE0D4: 0x736A,
	    0xE0D5: 0x7368,
	    0xE0D6: 0x7370,
	    0xE0D7: 0x7378,
	    0xE0D8: 0x7375,
	    0xE0D9: 0x737B,
	    0xE0DA: 0x737A,
	    0xE0DB: 0x73C8,
	    0xE0DC: 0x73B3,
	    0xE0DD: 0x73CE,
	    0xE0DE: 0x73BB,
	    0xE0DF: 0x73C0,
	    0xE0E0: 0x73E5,
	    0xE0E1: 0x73EE,
	    0xE0E2: 0x73DE,
	    0xE0E3: 0x74A2,
	    0xE0E4: 0x7405,
	    0xE0E5: 0x746F,
	    0xE0E6: 0x7425,
	    0xE0E7: 0x73F8,
	    0xE0E8: 0x7432,
	    0xE0E9: 0x743A,
	    0xE0EA: 0x7455,
	    0xE0EB: 0x743F,
	    0xE0EC: 0x745F,
	    0xE0ED: 0x7459,
	    0xE0EE: 0x7441,
	    0xE0EF: 0x745C,
	    0xE0F0: 0x7469,
	    0xE0F1: 0x7470,
	    0xE0F2: 0x7463,
	    0xE0F3: 0x746A,
	    0xE0F4: 0x7476,
	    0xE0F5: 0x747E,
	    0xE0F6: 0x748B,
	    0xE0F7: 0x749E,
	    0xE0F8: 0x74A7,
	    0xE0F9: 0x74CA,
	    0xE0FA: 0x74CF,
	    0xE0FB: 0x74D4,
	    0xE0FC: 0x73F1,
	    0xE140: 0x74E0,
	    0xE141: 0x74E3,
	    0xE142: 0x74E7,
	    0xE143: 0x74E9,
	    0xE144: 0x74EE,
	    0xE145: 0x74F2,
	    0xE146: 0x74F0,
	    0xE147: 0x74F1,
	    0xE148: 0x74F8,
	    0xE149: 0x74F7,
	    0xE14A: 0x7504,
	    0xE14B: 0x7503,
	    0xE14C: 0x7505,
	    0xE14D: 0x750C,
	    0xE14E: 0x750E,
	    0xE14F: 0x750D,
	    0xE150: 0x7515,
	    0xE151: 0x7513,
	    0xE152: 0x751E,
	    0xE153: 0x7526,
	    0xE154: 0x752C,
	    0xE155: 0x753C,
	    0xE156: 0x7544,
	    0xE157: 0x754D,
	    0xE158: 0x754A,
	    0xE159: 0x7549,
	    0xE15A: 0x755B,
	    0xE15B: 0x7546,
	    0xE15C: 0x755A,
	    0xE15D: 0x7569,
	    0xE15E: 0x7564,
	    0xE15F: 0x7567,
	    0xE160: 0x756B,
	    0xE161: 0x756D,
	    0xE162: 0x7578,
	    0xE163: 0x7576,
	    0xE164: 0x7586,
	    0xE165: 0x7587,
	    0xE166: 0x7574,
	    0xE167: 0x758A,
	    0xE168: 0x7589,
	    0xE169: 0x7582,
	    0xE16A: 0x7594,
	    0xE16B: 0x759A,
	    0xE16C: 0x759D,
	    0xE16D: 0x75A5,
	    0xE16E: 0x75A3,
	    0xE16F: 0x75C2,
	    0xE170: 0x75B3,
	    0xE171: 0x75C3,
	    0xE172: 0x75B5,
	    0xE173: 0x75BD,
	    0xE174: 0x75B8,
	    0xE175: 0x75BC,
	    0xE176: 0x75B1,
	    0xE177: 0x75CD,
	    0xE178: 0x75CA,
	    0xE179: 0x75D2,
	    0xE17A: 0x75D9,
	    0xE17B: 0x75E3,
	    0xE17C: 0x75DE,
	    0xE17D: 0x75FE,
	    0xE17E: 0x75FF,
	    0xE180: 0x75FC,
	    0xE181: 0x7601,
	    0xE182: 0x75F0,
	    0xE183: 0x75FA,
	    0xE184: 0x75F2,
	    0xE185: 0x75F3,
	    0xE186: 0x760B,
	    0xE187: 0x760D,
	    0xE188: 0x7609,
	    0xE189: 0x761F,
	    0xE18A: 0x7627,
	    0xE18B: 0x7620,
	    0xE18C: 0x7621,
	    0xE18D: 0x7622,
	    0xE18E: 0x7624,
	    0xE18F: 0x7634,
	    0xE190: 0x7630,
	    0xE191: 0x763B,
	    0xE192: 0x7647,
	    0xE193: 0x7648,
	    0xE194: 0x7646,
	    0xE195: 0x765C,
	    0xE196: 0x7658,
	    0xE197: 0x7661,
	    0xE198: 0x7662,
	    0xE199: 0x7668,
	    0xE19A: 0x7669,
	    0xE19B: 0x766A,
	    0xE19C: 0x7667,
	    0xE19D: 0x766C,
	    0xE19E: 0x7670,
	    0xE19F: 0x7672,
	    0xE1A0: 0x7676,
	    0xE1A1: 0x7678,
	    0xE1A2: 0x767C,
	    0xE1A3: 0x7680,
	    0xE1A4: 0x7683,
	    0xE1A5: 0x7688,
	    0xE1A6: 0x768B,
	    0xE1A7: 0x768E,
	    0xE1A8: 0x7696,
	    0xE1A9: 0x7693,
	    0xE1AA: 0x7699,
	    0xE1AB: 0x769A,
	    0xE1AC: 0x76B0,
	    0xE1AD: 0x76B4,
	    0xE1AE: 0x76B8,
	    0xE1AF: 0x76B9,
	    0xE1B0: 0x76BA,
	    0xE1B1: 0x76C2,
	    0xE1B2: 0x76CD,
	    0xE1B3: 0x76D6,
	    0xE1B4: 0x76D2,
	    0xE1B5: 0x76DE,
	    0xE1B6: 0x76E1,
	    0xE1B7: 0x76E5,
	    0xE1B8: 0x76E7,
	    0xE1B9: 0x76EA,
	    0xE1BA: 0x862F,
	    0xE1BB: 0x76FB,
	    0xE1BC: 0x7708,
	    0xE1BD: 0x7707,
	    0xE1BE: 0x7704,
	    0xE1BF: 0x7729,
	    0xE1C0: 0x7724,
	    0xE1C1: 0x771E,
	    0xE1C2: 0x7725,
	    0xE1C3: 0x7726,
	    0xE1C4: 0x771B,
	    0xE1C5: 0x7737,
	    0xE1C6: 0x7738,
	    0xE1C7: 0x7747,
	    0xE1C8: 0x775A,
	    0xE1C9: 0x7768,
	    0xE1CA: 0x776B,
	    0xE1CB: 0x775B,
	    0xE1CC: 0x7765,
	    0xE1CD: 0x777F,
	    0xE1CE: 0x777E,
	    0xE1CF: 0x7779,
	    0xE1D0: 0x778E,
	    0xE1D1: 0x778B,
	    0xE1D2: 0x7791,
	    0xE1D3: 0x77A0,
	    0xE1D4: 0x779E,
	    0xE1D5: 0x77B0,
	    0xE1D6: 0x77B6,
	    0xE1D7: 0x77B9,
	    0xE1D8: 0x77BF,
	    0xE1D9: 0x77BC,
	    0xE1DA: 0x77BD,
	    0xE1DB: 0x77BB,
	    0xE1DC: 0x77C7,
	    0xE1DD: 0x77CD,
	    0xE1DE: 0x77D7,
	    0xE1DF: 0x77DA,
	    0xE1E0: 0x77DC,
	    0xE1E1: 0x77E3,
	    0xE1E2: 0x77EE,
	    0xE1E3: 0x77FC,
	    0xE1E4: 0x780C,
	    0xE1E5: 0x7812,
	    0xE1E6: 0x7926,
	    0xE1E7: 0x7820,
	    0xE1E8: 0x792A,
	    0xE1E9: 0x7845,
	    0xE1EA: 0x788E,
	    0xE1EB: 0x7874,
	    0xE1EC: 0x7886,
	    0xE1ED: 0x787C,
	    0xE1EE: 0x789A,
	    0xE1EF: 0x788C,
	    0xE1F0: 0x78A3,
	    0xE1F1: 0x78B5,
	    0xE1F2: 0x78AA,
	    0xE1F3: 0x78AF,
	    0xE1F4: 0x78D1,
	    0xE1F5: 0x78C6,
	    0xE1F6: 0x78CB,
	    0xE1F7: 0x78D4,
	    0xE1F8: 0x78BE,
	    0xE1F9: 0x78BC,
	    0xE1FA: 0x78C5,
	    0xE1FB: 0x78CA,
	    0xE1FC: 0x78EC,
	    0xE240: 0x78E7,
	    0xE241: 0x78DA,
	    0xE242: 0x78FD,
	    0xE243: 0x78F4,
	    0xE244: 0x7907,
	    0xE245: 0x7912,
	    0xE246: 0x7911,
	    0xE247: 0x7919,
	    0xE248: 0x792C,
	    0xE249: 0x792B,
	    0xE24A: 0x7940,
	    0xE24B: 0x7960,
	    0xE24C: 0x7957,
	    0xE24D: 0x795F,
	    0xE24E: 0x795A,
	    0xE24F: 0x7955,
	    0xE250: 0x7953,
	    0xE251: 0x797A,
	    0xE252: 0x797F,
	    0xE253: 0x798A,
	    0xE254: 0x799D,
	    0xE255: 0x79A7,
	    0xE256: 0x9F4B,
	    0xE257: 0x79AA,
	    0xE258: 0x79AE,
	    0xE259: 0x79B3,
	    0xE25A: 0x79B9,
	    0xE25B: 0x79BA,
	    0xE25C: 0x79C9,
	    0xE25D: 0x79D5,
	    0xE25E: 0x79E7,
	    0xE25F: 0x79EC,
	    0xE260: 0x79E1,
	    0xE261: 0x79E3,
	    0xE262: 0x7A08,
	    0xE263: 0x7A0D,
	    0xE264: 0x7A18,
	    0xE265: 0x7A19,
	    0xE266: 0x7A20,
	    0xE267: 0x7A1F,
	    0xE268: 0x7980,
	    0xE269: 0x7A31,
	    0xE26A: 0x7A3B,
	    0xE26B: 0x7A3E,
	    0xE26C: 0x7A37,
	    0xE26D: 0x7A43,
	    0xE26E: 0x7A57,
	    0xE26F: 0x7A49,
	    0xE270: 0x7A61,
	    0xE271: 0x7A62,
	    0xE272: 0x7A69,
	    0xE273: 0x9F9D,
	    0xE274: 0x7A70,
	    0xE275: 0x7A79,
	    0xE276: 0x7A7D,
	    0xE277: 0x7A88,
	    0xE278: 0x7A97,
	    0xE279: 0x7A95,
	    0xE27A: 0x7A98,
	    0xE27B: 0x7A96,
	    0xE27C: 0x7AA9,
	    0xE27D: 0x7AC8,
	    0xE27E: 0x7AB0,
	    0xE280: 0x7AB6,
	    0xE281: 0x7AC5,
	    0xE282: 0x7AC4,
	    0xE283: 0x7ABF,
	    0xE284: 0x9083,
	    0xE285: 0x7AC7,
	    0xE286: 0x7ACA,
	    0xE287: 0x7ACD,
	    0xE288: 0x7ACF,
	    0xE289: 0x7AD5,
	    0xE28A: 0x7AD3,
	    0xE28B: 0x7AD9,
	    0xE28C: 0x7ADA,
	    0xE28D: 0x7ADD,
	    0xE28E: 0x7AE1,
	    0xE28F: 0x7AE2,
	    0xE290: 0x7AE6,
	    0xE291: 0x7AED,
	    0xE292: 0x7AF0,
	    0xE293: 0x7B02,
	    0xE294: 0x7B0F,
	    0xE295: 0x7B0A,
	    0xE296: 0x7B06,
	    0xE297: 0x7B33,
	    0xE298: 0x7B18,
	    0xE299: 0x7B19,
	    0xE29A: 0x7B1E,
	    0xE29B: 0x7B35,
	    0xE29C: 0x7B28,
	    0xE29D: 0x7B36,
	    0xE29E: 0x7B50,
	    0xE29F: 0x7B7A,
	    0xE2A0: 0x7B04,
	    0xE2A1: 0x7B4D,
	    0xE2A2: 0x7B0B,
	    0xE2A3: 0x7B4C,
	    0xE2A4: 0x7B45,
	    0xE2A5: 0x7B75,
	    0xE2A6: 0x7B65,
	    0xE2A7: 0x7B74,
	    0xE2A8: 0x7B67,
	    0xE2A9: 0x7B70,
	    0xE2AA: 0x7B71,
	    0xE2AB: 0x7B6C,
	    0xE2AC: 0x7B6E,
	    0xE2AD: 0x7B9D,
	    0xE2AE: 0x7B98,
	    0xE2AF: 0x7B9F,
	    0xE2B0: 0x7B8D,
	    0xE2B1: 0x7B9C,
	    0xE2B2: 0x7B9A,
	    0xE2B3: 0x7B8B,
	    0xE2B4: 0x7B92,
	    0xE2B5: 0x7B8F,
	    0xE2B6: 0x7B5D,
	    0xE2B7: 0x7B99,
	    0xE2B8: 0x7BCB,
	    0xE2B9: 0x7BC1,
	    0xE2BA: 0x7BCC,
	    0xE2BB: 0x7BCF,
	    0xE2BC: 0x7BB4,
	    0xE2BD: 0x7BC6,
	    0xE2BE: 0x7BDD,
	    0xE2BF: 0x7BE9,
	    0xE2C0: 0x7C11,
	    0xE2C1: 0x7C14,
	    0xE2C2: 0x7BE6,
	    0xE2C3: 0x7BE5,
	    0xE2C4: 0x7C60,
	    0xE2C5: 0x7C00,
	    0xE2C6: 0x7C07,
	    0xE2C7: 0x7C13,
	    0xE2C8: 0x7BF3,
	    0xE2C9: 0x7BF7,
	    0xE2CA: 0x7C17,
	    0xE2CB: 0x7C0D,
	    0xE2CC: 0x7BF6,
	    0xE2CD: 0x7C23,
	    0xE2CE: 0x7C27,
	    0xE2CF: 0x7C2A,
	    0xE2D0: 0x7C1F,
	    0xE2D1: 0x7C37,
	    0xE2D2: 0x7C2B,
	    0xE2D3: 0x7C3D,
	    0xE2D4: 0x7C4C,
	    0xE2D5: 0x7C43,
	    0xE2D6: 0x7C54,
	    0xE2D7: 0x7C4F,
	    0xE2D8: 0x7C40,
	    0xE2D9: 0x7C50,
	    0xE2DA: 0x7C58,
	    0xE2DB: 0x7C5F,
	    0xE2DC: 0x7C64,
	    0xE2DD: 0x7C56,
	    0xE2DE: 0x7C65,
	    0xE2DF: 0x7C6C,
	    0xE2E0: 0x7C75,
	    0xE2E1: 0x7C83,
	    0xE2E2: 0x7C90,
	    0xE2E3: 0x7CA4,
	    0xE2E4: 0x7CAD,
	    0xE2E5: 0x7CA2,
	    0xE2E6: 0x7CAB,
	    0xE2E7: 0x7CA1,
	    0xE2E8: 0x7CA8,
	    0xE2E9: 0x7CB3,
	    0xE2EA: 0x7CB2,
	    0xE2EB: 0x7CB1,
	    0xE2EC: 0x7CAE,
	    0xE2ED: 0x7CB9,
	    0xE2EE: 0x7CBD,
	    0xE2EF: 0x7CC0,
	    0xE2F0: 0x7CC5,
	    0xE2F1: 0x7CC2,
	    0xE2F2: 0x7CD8,
	    0xE2F3: 0x7CD2,
	    0xE2F4: 0x7CDC,
	    0xE2F5: 0x7CE2,
	    0xE2F6: 0x9B3B,
	    0xE2F7: 0x7CEF,
	    0xE2F8: 0x7CF2,
	    0xE2F9: 0x7CF4,
	    0xE2FA: 0x7CF6,
	    0xE2FB: 0x7CFA,
	    0xE2FC: 0x7D06,
	    0xE340: 0x7D02,
	    0xE341: 0x7D1C,
	    0xE342: 0x7D15,
	    0xE343: 0x7D0A,
	    0xE344: 0x7D45,
	    0xE345: 0x7D4B,
	    0xE346: 0x7D2E,
	    0xE347: 0x7D32,
	    0xE348: 0x7D3F,
	    0xE349: 0x7D35,
	    0xE34A: 0x7D46,
	    0xE34B: 0x7D73,
	    0xE34C: 0x7D56,
	    0xE34D: 0x7D4E,
	    0xE34E: 0x7D72,
	    0xE34F: 0x7D68,
	    0xE350: 0x7D6E,
	    0xE351: 0x7D4F,
	    0xE352: 0x7D63,
	    0xE353: 0x7D93,
	    0xE354: 0x7D89,
	    0xE355: 0x7D5B,
	    0xE356: 0x7D8F,
	    0xE357: 0x7D7D,
	    0xE358: 0x7D9B,
	    0xE359: 0x7DBA,
	    0xE35A: 0x7DAE,
	    0xE35B: 0x7DA3,
	    0xE35C: 0x7DB5,
	    0xE35D: 0x7DC7,
	    0xE35E: 0x7DBD,
	    0xE35F: 0x7DAB,
	    0xE360: 0x7E3D,
	    0xE361: 0x7DA2,
	    0xE362: 0x7DAF,
	    0xE363: 0x7DDC,
	    0xE364: 0x7DB8,
	    0xE365: 0x7D9F,
	    0xE366: 0x7DB0,
	    0xE367: 0x7DD8,
	    0xE368: 0x7DDD,
	    0xE369: 0x7DE4,
	    0xE36A: 0x7DDE,
	    0xE36B: 0x7DFB,
	    0xE36C: 0x7DF2,
	    0xE36D: 0x7DE1,
	    0xE36E: 0x7E05,
	    0xE36F: 0x7E0A,
	    0xE370: 0x7E23,
	    0xE371: 0x7E21,
	    0xE372: 0x7E12,
	    0xE373: 0x7E31,
	    0xE374: 0x7E1F,
	    0xE375: 0x7E09,
	    0xE376: 0x7E0B,
	    0xE377: 0x7E22,
	    0xE378: 0x7E46,
	    0xE379: 0x7E66,
	    0xE37A: 0x7E3B,
	    0xE37B: 0x7E35,
	    0xE37C: 0x7E39,
	    0xE37D: 0x7E43,
	    0xE37E: 0x7E37,
	    0xE380: 0x7E32,
	    0xE381: 0x7E3A,
	    0xE382: 0x7E67,
	    0xE383: 0x7E5D,
	    0xE384: 0x7E56,
	    0xE385: 0x7E5E,
	    0xE386: 0x7E59,
	    0xE387: 0x7E5A,
	    0xE388: 0x7E79,
	    0xE389: 0x7E6A,
	    0xE38A: 0x7E69,
	    0xE38B: 0x7E7C,
	    0xE38C: 0x7E7B,
	    0xE38D: 0x7E83,
	    0xE38E: 0x7DD5,
	    0xE38F: 0x7E7D,
	    0xE390: 0x8FAE,
	    0xE391: 0x7E7F,
	    0xE392: 0x7E88,
	    0xE393: 0x7E89,
	    0xE394: 0x7E8C,
	    0xE395: 0x7E92,
	    0xE396: 0x7E90,
	    0xE397: 0x7E93,
	    0xE398: 0x7E94,
	    0xE399: 0x7E96,
	    0xE39A: 0x7E8E,
	    0xE39B: 0x7E9B,
	    0xE39C: 0x7E9C,
	    0xE39D: 0x7F38,
	    0xE39E: 0x7F3A,
	    0xE39F: 0x7F45,
	    0xE3A0: 0x7F4C,
	    0xE3A1: 0x7F4D,
	    0xE3A2: 0x7F4E,
	    0xE3A3: 0x7F50,
	    0xE3A4: 0x7F51,
	    0xE3A5: 0x7F55,
	    0xE3A6: 0x7F54,
	    0xE3A7: 0x7F58,
	    0xE3A8: 0x7F5F,
	    0xE3A9: 0x7F60,
	    0xE3AA: 0x7F68,
	    0xE3AB: 0x7F69,
	    0xE3AC: 0x7F67,
	    0xE3AD: 0x7F78,
	    0xE3AE: 0x7F82,
	    0xE3AF: 0x7F86,
	    0xE3B0: 0x7F83,
	    0xE3B1: 0x7F88,
	    0xE3B2: 0x7F87,
	    0xE3B3: 0x7F8C,
	    0xE3B4: 0x7F94,
	    0xE3B5: 0x7F9E,
	    0xE3B6: 0x7F9D,
	    0xE3B7: 0x7F9A,
	    0xE3B8: 0x7FA3,
	    0xE3B9: 0x7FAF,
	    0xE3BA: 0x7FB2,
	    0xE3BB: 0x7FB9,
	    0xE3BC: 0x7FAE,
	    0xE3BD: 0x7FB6,
	    0xE3BE: 0x7FB8,
	    0xE3BF: 0x8B71,
	    0xE3C0: 0x7FC5,
	    0xE3C1: 0x7FC6,
	    0xE3C2: 0x7FCA,
	    0xE3C3: 0x7FD5,
	    0xE3C4: 0x7FD4,
	    0xE3C5: 0x7FE1,
	    0xE3C6: 0x7FE6,
	    0xE3C7: 0x7FE9,
	    0xE3C8: 0x7FF3,
	    0xE3C9: 0x7FF9,
	    0xE3CA: 0x98DC,
	    0xE3CB: 0x8006,
	    0xE3CC: 0x8004,
	    0xE3CD: 0x800B,
	    0xE3CE: 0x8012,
	    0xE3CF: 0x8018,
	    0xE3D0: 0x8019,
	    0xE3D1: 0x801C,
	    0xE3D2: 0x8021,
	    0xE3D3: 0x8028,
	    0xE3D4: 0x803F,
	    0xE3D5: 0x803B,
	    0xE3D6: 0x804A,
	    0xE3D7: 0x8046,
	    0xE3D8: 0x8052,
	    0xE3D9: 0x8058,
	    0xE3DA: 0x805A,
	    0xE3DB: 0x805F,
	    0xE3DC: 0x8062,
	    0xE3DD: 0x8068,
	    0xE3DE: 0x8073,
	    0xE3DF: 0x8072,
	    0xE3E0: 0x8070,
	    0xE3E1: 0x8076,
	    0xE3E2: 0x8079,
	    0xE3E3: 0x807D,
	    0xE3E4: 0x807F,
	    0xE3E5: 0x8084,
	    0xE3E6: 0x8086,
	    0xE3E7: 0x8085,
	    0xE3E8: 0x809B,
	    0xE3E9: 0x8093,
	    0xE3EA: 0x809A,
	    0xE3EB: 0x80AD,
	    0xE3EC: 0x5190,
	    0xE3ED: 0x80AC,
	    0xE3EE: 0x80DB,
	    0xE3EF: 0x80E5,
	    0xE3F0: 0x80D9,
	    0xE3F1: 0x80DD,
	    0xE3F2: 0x80C4,
	    0xE3F3: 0x80DA,
	    0xE3F4: 0x80D6,
	    0xE3F5: 0x8109,
	    0xE3F6: 0x80EF,
	    0xE3F7: 0x80F1,
	    0xE3F8: 0x811B,
	    0xE3F9: 0x8129,
	    0xE3FA: 0x8123,
	    0xE3FB: 0x812F,
	    0xE3FC: 0x814B,
	    0xE440: 0x968B,
	    0xE441: 0x8146,
	    0xE442: 0x813E,
	    0xE443: 0x8153,
	    0xE444: 0x8151,
	    0xE445: 0x80FC,
	    0xE446: 0x8171,
	    0xE447: 0x816E,
	    0xE448: 0x8165,
	    0xE449: 0x8166,
	    0xE44A: 0x8174,
	    0xE44B: 0x8183,
	    0xE44C: 0x8188,
	    0xE44D: 0x818A,
	    0xE44E: 0x8180,
	    0xE44F: 0x8182,
	    0xE450: 0x81A0,
	    0xE451: 0x8195,
	    0xE452: 0x81A4,
	    0xE453: 0x81A3,
	    0xE454: 0x815F,
	    0xE455: 0x8193,
	    0xE456: 0x81A9,
	    0xE457: 0x81B0,
	    0xE458: 0x81B5,
	    0xE459: 0x81BE,
	    0xE45A: 0x81B8,
	    0xE45B: 0x81BD,
	    0xE45C: 0x81C0,
	    0xE45D: 0x81C2,
	    0xE45E: 0x81BA,
	    0xE45F: 0x81C9,
	    0xE460: 0x81CD,
	    0xE461: 0x81D1,
	    0xE462: 0x81D9,
	    0xE463: 0x81D8,
	    0xE464: 0x81C8,
	    0xE465: 0x81DA,
	    0xE466: 0x81DF,
	    0xE467: 0x81E0,
	    0xE468: 0x81E7,
	    0xE469: 0x81FA,
	    0xE46A: 0x81FB,
	    0xE46B: 0x81FE,
	    0xE46C: 0x8201,
	    0xE46D: 0x8202,
	    0xE46E: 0x8205,
	    0xE46F: 0x8207,
	    0xE470: 0x820A,
	    0xE471: 0x820D,
	    0xE472: 0x8210,
	    0xE473: 0x8216,
	    0xE474: 0x8229,
	    0xE475: 0x822B,
	    0xE476: 0x8238,
	    0xE477: 0x8233,
	    0xE478: 0x8240,
	    0xE479: 0x8259,
	    0xE47A: 0x8258,
	    0xE47B: 0x825D,
	    0xE47C: 0x825A,
	    0xE47D: 0x825F,
	    0xE47E: 0x8264,
	    0xE480: 0x8262,
	    0xE481: 0x8268,
	    0xE482: 0x826A,
	    0xE483: 0x826B,
	    0xE484: 0x822E,
	    0xE485: 0x8271,
	    0xE486: 0x8277,
	    0xE487: 0x8278,
	    0xE488: 0x827E,
	    0xE489: 0x828D,
	    0xE48A: 0x8292,
	    0xE48B: 0x82AB,
	    0xE48C: 0x829F,
	    0xE48D: 0x82BB,
	    0xE48E: 0x82AC,
	    0xE48F: 0x82E1,
	    0xE490: 0x82E3,
	    0xE491: 0x82DF,
	    0xE492: 0x82D2,
	    0xE493: 0x82F4,
	    0xE494: 0x82F3,
	    0xE495: 0x82FA,
	    0xE496: 0x8393,
	    0xE497: 0x8303,
	    0xE498: 0x82FB,
	    0xE499: 0x82F9,
	    0xE49A: 0x82DE,
	    0xE49B: 0x8306,
	    0xE49C: 0x82DC,
	    0xE49D: 0x8309,
	    0xE49E: 0x82D9,
	    0xE49F: 0x8335,
	    0xE4A0: 0x8334,
	    0xE4A1: 0x8316,
	    0xE4A2: 0x8332,
	    0xE4A3: 0x8331,
	    0xE4A4: 0x8340,
	    0xE4A5: 0x8339,
	    0xE4A6: 0x8350,
	    0xE4A7: 0x8345,
	    0xE4A8: 0x832F,
	    0xE4A9: 0x832B,
	    0xE4AA: 0x8317,
	    0xE4AB: 0x8318,
	    0xE4AC: 0x8385,
	    0xE4AD: 0x839A,
	    0xE4AE: 0x83AA,
	    0xE4AF: 0x839F,
	    0xE4B0: 0x83A2,
	    0xE4B1: 0x8396,
	    0xE4B2: 0x8323,
	    0xE4B3: 0x838E,
	    0xE4B4: 0x8387,
	    0xE4B5: 0x838A,
	    0xE4B6: 0x837C,
	    0xE4B7: 0x83B5,
	    0xE4B8: 0x8373,
	    0xE4B9: 0x8375,
	    0xE4BA: 0x83A0,
	    0xE4BB: 0x8389,
	    0xE4BC: 0x83A8,
	    0xE4BD: 0x83F4,
	    0xE4BE: 0x8413,
	    0xE4BF: 0x83EB,
	    0xE4C0: 0x83CE,
	    0xE4C1: 0x83FD,
	    0xE4C2: 0x8403,
	    0xE4C3: 0x83D8,
	    0xE4C4: 0x840B,
	    0xE4C5: 0x83C1,
	    0xE4C6: 0x83F7,
	    0xE4C7: 0x8407,
	    0xE4C8: 0x83E0,
	    0xE4C9: 0x83F2,
	    0xE4CA: 0x840D,
	    0xE4CB: 0x8422,
	    0xE4CC: 0x8420,
	    0xE4CD: 0x83BD,
	    0xE4CE: 0x8438,
	    0xE4CF: 0x8506,
	    0xE4D0: 0x83FB,
	    0xE4D1: 0x846D,
	    0xE4D2: 0x842A,
	    0xE4D3: 0x843C,
	    0xE4D4: 0x855A,
	    0xE4D5: 0x8484,
	    0xE4D6: 0x8477,
	    0xE4D7: 0x846B,
	    0xE4D8: 0x84AD,
	    0xE4D9: 0x846E,
	    0xE4DA: 0x8482,
	    0xE4DB: 0x8469,
	    0xE4DC: 0x8446,
	    0xE4DD: 0x842C,
	    0xE4DE: 0x846F,
	    0xE4DF: 0x8479,
	    0xE4E0: 0x8435,
	    0xE4E1: 0x84CA,
	    0xE4E2: 0x8462,
	    0xE4E3: 0x84B9,
	    0xE4E4: 0x84BF,
	    0xE4E5: 0x849F,
	    0xE4E6: 0x84D9,
	    0xE4E7: 0x84CD,
	    0xE4E8: 0x84BB,
	    0xE4E9: 0x84DA,
	    0xE4EA: 0x84D0,
	    0xE4EB: 0x84C1,
	    0xE4EC: 0x84C6,
	    0xE4ED: 0x84D6,
	    0xE4EE: 0x84A1,
	    0xE4EF: 0x8521,
	    0xE4F0: 0x84FF,
	    0xE4F1: 0x84F4,
	    0xE4F2: 0x8517,
	    0xE4F3: 0x8518,
	    0xE4F4: 0x852C,
	    0xE4F5: 0x851F,
	    0xE4F6: 0x8515,
	    0xE4F7: 0x8514,
	    0xE4F8: 0x84FC,
	    0xE4F9: 0x8540,
	    0xE4FA: 0x8563,
	    0xE4FB: 0x8558,
	    0xE4FC: 0x8548,
	    0xE540: 0x8541,
	    0xE541: 0x8602,
	    0xE542: 0x854B,
	    0xE543: 0x8555,
	    0xE544: 0x8580,
	    0xE545: 0x85A4,
	    0xE546: 0x8588,
	    0xE547: 0x8591,
	    0xE548: 0x858A,
	    0xE549: 0x85A8,
	    0xE54A: 0x856D,
	    0xE54B: 0x8594,
	    0xE54C: 0x859B,
	    0xE54D: 0x85EA,
	    0xE54E: 0x8587,
	    0xE54F: 0x859C,
	    0xE550: 0x8577,
	    0xE551: 0x857E,
	    0xE552: 0x8590,
	    0xE553: 0x85C9,
	    0xE554: 0x85BA,
	    0xE555: 0x85CF,
	    0xE556: 0x85B9,
	    0xE557: 0x85D0,
	    0xE558: 0x85D5,
	    0xE559: 0x85DD,
	    0xE55A: 0x85E5,
	    0xE55B: 0x85DC,
	    0xE55C: 0x85F9,
	    0xE55D: 0x860A,
	    0xE55E: 0x8613,
	    0xE55F: 0x860B,
	    0xE560: 0x85FE,
	    0xE561: 0x85FA,
	    0xE562: 0x8606,
	    0xE563: 0x8622,
	    0xE564: 0x861A,
	    0xE565: 0x8630,
	    0xE566: 0x863F,
	    0xE567: 0x864D,
	    0xE568: 0x4E55,
	    0xE569: 0x8654,
	    0xE56A: 0x865F,
	    0xE56B: 0x8667,
	    0xE56C: 0x8671,
	    0xE56D: 0x8693,
	    0xE56E: 0x86A3,
	    0xE56F: 0x86A9,
	    0xE570: 0x86AA,
	    0xE571: 0x868B,
	    0xE572: 0x868C,
	    0xE573: 0x86B6,
	    0xE574: 0x86AF,
	    0xE575: 0x86C4,
	    0xE576: 0x86C6,
	    0xE577: 0x86B0,
	    0xE578: 0x86C9,
	    0xE579: 0x8823,
	    0xE57A: 0x86AB,
	    0xE57B: 0x86D4,
	    0xE57C: 0x86DE,
	    0xE57D: 0x86E9,
	    0xE57E: 0x86EC,
	    0xE580: 0x86DF,
	    0xE581: 0x86DB,
	    0xE582: 0x86EF,
	    0xE583: 0x8712,
	    0xE584: 0x8706,
	    0xE585: 0x8708,
	    0xE586: 0x8700,
	    0xE587: 0x8703,
	    0xE588: 0x86FB,
	    0xE589: 0x8711,
	    0xE58A: 0x8709,
	    0xE58B: 0x870D,
	    0xE58C: 0x86F9,
	    0xE58D: 0x870A,
	    0xE58E: 0x8734,
	    0xE58F: 0x873F,
	    0xE590: 0x8737,
	    0xE591: 0x873B,
	    0xE592: 0x8725,
	    0xE593: 0x8729,
	    0xE594: 0x871A,
	    0xE595: 0x8760,
	    0xE596: 0x875F,
	    0xE597: 0x8778,
	    0xE598: 0x874C,
	    0xE599: 0x874E,
	    0xE59A: 0x8774,
	    0xE59B: 0x8757,
	    0xE59C: 0x8768,
	    0xE59D: 0x876E,
	    0xE59E: 0x8759,
	    0xE59F: 0x8753,
	    0xE5A0: 0x8763,
	    0xE5A1: 0x876A,
	    0xE5A2: 0x8805,
	    0xE5A3: 0x87A2,
	    0xE5A4: 0x879F,
	    0xE5A5: 0x8782,
	    0xE5A6: 0x87AF,
	    0xE5A7: 0x87CB,
	    0xE5A8: 0x87BD,
	    0xE5A9: 0x87C0,
	    0xE5AA: 0x87D0,
	    0xE5AB: 0x96D6,
	    0xE5AC: 0x87AB,
	    0xE5AD: 0x87C4,
	    0xE5AE: 0x87B3,
	    0xE5AF: 0x87C7,
	    0xE5B0: 0x87C6,
	    0xE5B1: 0x87BB,
	    0xE5B2: 0x87EF,
	    0xE5B3: 0x87F2,
	    0xE5B4: 0x87E0,
	    0xE5B5: 0x880F,
	    0xE5B6: 0x880D,
	    0xE5B7: 0x87FE,
	    0xE5B8: 0x87F6,
	    0xE5B9: 0x87F7,
	    0xE5BA: 0x880E,
	    0xE5BB: 0x87D2,
	    0xE5BC: 0x8811,
	    0xE5BD: 0x8816,
	    0xE5BE: 0x8815,
	    0xE5BF: 0x8822,
	    0xE5C0: 0x8821,
	    0xE5C1: 0x8831,
	    0xE5C2: 0x8836,
	    0xE5C3: 0x8839,
	    0xE5C4: 0x8827,
	    0xE5C5: 0x883B,
	    0xE5C6: 0x8844,
	    0xE5C7: 0x8842,
	    0xE5C8: 0x8852,
	    0xE5C9: 0x8859,
	    0xE5CA: 0x885E,
	    0xE5CB: 0x8862,
	    0xE5CC: 0x886B,
	    0xE5CD: 0x8881,
	    0xE5CE: 0x887E,
	    0xE5CF: 0x889E,
	    0xE5D0: 0x8875,
	    0xE5D1: 0x887D,
	    0xE5D2: 0x88B5,
	    0xE5D3: 0x8872,
	    0xE5D4: 0x8882,
	    0xE5D5: 0x8897,
	    0xE5D6: 0x8892,
	    0xE5D7: 0x88AE,
	    0xE5D8: 0x8899,
	    0xE5D9: 0x88A2,
	    0xE5DA: 0x888D,
	    0xE5DB: 0x88A4,
	    0xE5DC: 0x88B0,
	    0xE5DD: 0x88BF,
	    0xE5DE: 0x88B1,
	    0xE5DF: 0x88C3,
	    0xE5E0: 0x88C4,
	    0xE5E1: 0x88D4,
	    0xE5E2: 0x88D8,
	    0xE5E3: 0x88D9,
	    0xE5E4: 0x88DD,
	    0xE5E5: 0x88F9,
	    0xE5E6: 0x8902,
	    0xE5E7: 0x88FC,
	    0xE5E8: 0x88F4,
	    0xE5E9: 0x88E8,
	    0xE5EA: 0x88F2,
	    0xE5EB: 0x8904,
	    0xE5EC: 0x890C,
	    0xE5ED: 0x890A,
	    0xE5EE: 0x8913,
	    0xE5EF: 0x8943,
	    0xE5F0: 0x891E,
	    0xE5F1: 0x8925,
	    0xE5F2: 0x892A,
	    0xE5F3: 0x892B,
	    0xE5F4: 0x8941,
	    0xE5F5: 0x8944,
	    0xE5F6: 0x893B,
	    0xE5F7: 0x8936,
	    0xE5F8: 0x8938,
	    0xE5F9: 0x894C,
	    0xE5FA: 0x891D,
	    0xE5FB: 0x8960,
	    0xE5FC: 0x895E,
	    0xE640: 0x8966,
	    0xE641: 0x8964,
	    0xE642: 0x896D,
	    0xE643: 0x896A,
	    0xE644: 0x896F,
	    0xE645: 0x8974,
	    0xE646: 0x8977,
	    0xE647: 0x897E,
	    0xE648: 0x8983,
	    0xE649: 0x8988,
	    0xE64A: 0x898A,
	    0xE64B: 0x8993,
	    0xE64C: 0x8998,
	    0xE64D: 0x89A1,
	    0xE64E: 0x89A9,
	    0xE64F: 0x89A6,
	    0xE650: 0x89AC,
	    0xE651: 0x89AF,
	    0xE652: 0x89B2,
	    0xE653: 0x89BA,
	    0xE654: 0x89BD,
	    0xE655: 0x89BF,
	    0xE656: 0x89C0,
	    0xE657: 0x89DA,
	    0xE658: 0x89DC,
	    0xE659: 0x89DD,
	    0xE65A: 0x89E7,
	    0xE65B: 0x89F4,
	    0xE65C: 0x89F8,
	    0xE65D: 0x8A03,
	    0xE65E: 0x8A16,
	    0xE65F: 0x8A10,
	    0xE660: 0x8A0C,
	    0xE661: 0x8A1B,
	    0xE662: 0x8A1D,
	    0xE663: 0x8A25,
	    0xE664: 0x8A36,
	    0xE665: 0x8A41,
	    0xE666: 0x8A5B,
	    0xE667: 0x8A52,
	    0xE668: 0x8A46,
	    0xE669: 0x8A48,
	    0xE66A: 0x8A7C,
	    0xE66B: 0x8A6D,
	    0xE66C: 0x8A6C,
	    0xE66D: 0x8A62,
	    0xE66E: 0x8A85,
	    0xE66F: 0x8A82,
	    0xE670: 0x8A84,
	    0xE671: 0x8AA8,
	    0xE672: 0x8AA1,
	    0xE673: 0x8A91,
	    0xE674: 0x8AA5,
	    0xE675: 0x8AA6,
	    0xE676: 0x8A9A,
	    0xE677: 0x8AA3,
	    0xE678: 0x8AC4,
	    0xE679: 0x8ACD,
	    0xE67A: 0x8AC2,
	    0xE67B: 0x8ADA,
	    0xE67C: 0x8AEB,
	    0xE67D: 0x8AF3,
	    0xE67E: 0x8AE7,
	    0xE680: 0x8AE4,
	    0xE681: 0x8AF1,
	    0xE682: 0x8B14,
	    0xE683: 0x8AE0,
	    0xE684: 0x8AE2,
	    0xE685: 0x8AF7,
	    0xE686: 0x8ADE,
	    0xE687: 0x8ADB,
	    0xE688: 0x8B0C,
	    0xE689: 0x8B07,
	    0xE68A: 0x8B1A,
	    0xE68B: 0x8AE1,
	    0xE68C: 0x8B16,
	    0xE68D: 0x8B10,
	    0xE68E: 0x8B17,
	    0xE68F: 0x8B20,
	    0xE690: 0x8B33,
	    0xE691: 0x97AB,
	    0xE692: 0x8B26,
	    0xE693: 0x8B2B,
	    0xE694: 0x8B3E,
	    0xE695: 0x8B28,
	    0xE696: 0x8B41,
	    0xE697: 0x8B4C,
	    0xE698: 0x8B4F,
	    0xE699: 0x8B4E,
	    0xE69A: 0x8B49,
	    0xE69B: 0x8B56,
	    0xE69C: 0x8B5B,
	    0xE69D: 0x8B5A,
	    0xE69E: 0x8B6B,
	    0xE69F: 0x8B5F,
	    0xE6A0: 0x8B6C,
	    0xE6A1: 0x8B6F,
	    0xE6A2: 0x8B74,
	    0xE6A3: 0x8B7D,
	    0xE6A4: 0x8B80,
	    0xE6A5: 0x8B8C,
	    0xE6A6: 0x8B8E,
	    0xE6A7: 0x8B92,
	    0xE6A8: 0x8B93,
	    0xE6A9: 0x8B96,
	    0xE6AA: 0x8B99,
	    0xE6AB: 0x8B9A,
	    0xE6AC: 0x8C3A,
	    0xE6AD: 0x8C41,
	    0xE6AE: 0x8C3F,
	    0xE6AF: 0x8C48,
	    0xE6B0: 0x8C4C,
	    0xE6B1: 0x8C4E,
	    0xE6B2: 0x8C50,
	    0xE6B3: 0x8C55,
	    0xE6B4: 0x8C62,
	    0xE6B5: 0x8C6C,
	    0xE6B6: 0x8C78,
	    0xE6B7: 0x8C7A,
	    0xE6B8: 0x8C82,
	    0xE6B9: 0x8C89,
	    0xE6BA: 0x8C85,
	    0xE6BB: 0x8C8A,
	    0xE6BC: 0x8C8D,
	    0xE6BD: 0x8C8E,
	    0xE6BE: 0x8C94,
	    0xE6BF: 0x8C7C,
	    0xE6C0: 0x8C98,
	    0xE6C1: 0x621D,
	    0xE6C2: 0x8CAD,
	    0xE6C3: 0x8CAA,
	    0xE6C4: 0x8CBD,
	    0xE6C5: 0x8CB2,
	    0xE6C6: 0x8CB3,
	    0xE6C7: 0x8CAE,
	    0xE6C8: 0x8CB6,
	    0xE6C9: 0x8CC8,
	    0xE6CA: 0x8CC1,
	    0xE6CB: 0x8CE4,
	    0xE6CC: 0x8CE3,
	    0xE6CD: 0x8CDA,
	    0xE6CE: 0x8CFD,
	    0xE6CF: 0x8CFA,
	    0xE6D0: 0x8CFB,
	    0xE6D1: 0x8D04,
	    0xE6D2: 0x8D05,
	    0xE6D3: 0x8D0A,
	    0xE6D4: 0x8D07,
	    0xE6D5: 0x8D0F,
	    0xE6D6: 0x8D0D,
	    0xE6D7: 0x8D10,
	    0xE6D8: 0x9F4E,
	    0xE6D9: 0x8D13,
	    0xE6DA: 0x8CCD,
	    0xE6DB: 0x8D14,
	    0xE6DC: 0x8D16,
	    0xE6DD: 0x8D67,
	    0xE6DE: 0x8D6D,
	    0xE6DF: 0x8D71,
	    0xE6E0: 0x8D73,
	    0xE6E1: 0x8D81,
	    0xE6E2: 0x8D99,
	    0xE6E3: 0x8DC2,
	    0xE6E4: 0x8DBE,
	    0xE6E5: 0x8DBA,
	    0xE6E6: 0x8DCF,
	    0xE6E7: 0x8DDA,
	    0xE6E8: 0x8DD6,
	    0xE6E9: 0x8DCC,
	    0xE6EA: 0x8DDB,
	    0xE6EB: 0x8DCB,
	    0xE6EC: 0x8DEA,
	    0xE6ED: 0x8DEB,
	    0xE6EE: 0x8DDF,
	    0xE6EF: 0x8DE3,
	    0xE6F0: 0x8DFC,
	    0xE6F1: 0x8E08,
	    0xE6F2: 0x8E09,
	    0xE6F3: 0x8DFF,
	    0xE6F4: 0x8E1D,
	    0xE6F5: 0x8E1E,
	    0xE6F6: 0x8E10,
	    0xE6F7: 0x8E1F,
	    0xE6F8: 0x8E42,
	    0xE6F9: 0x8E35,
	    0xE6FA: 0x8E30,
	    0xE6FB: 0x8E34,
	    0xE6FC: 0x8E4A,
	    0xE740: 0x8E47,
	    0xE741: 0x8E49,
	    0xE742: 0x8E4C,
	    0xE743: 0x8E50,
	    0xE744: 0x8E48,
	    0xE745: 0x8E59,
	    0xE746: 0x8E64,
	    0xE747: 0x8E60,
	    0xE748: 0x8E2A,
	    0xE749: 0x8E63,
	    0xE74A: 0x8E55,
	    0xE74B: 0x8E76,
	    0xE74C: 0x8E72,
	    0xE74D: 0x8E7C,
	    0xE74E: 0x8E81,
	    0xE74F: 0x8E87,
	    0xE750: 0x8E85,
	    0xE751: 0x8E84,
	    0xE752: 0x8E8B,
	    0xE753: 0x8E8A,
	    0xE754: 0x8E93,
	    0xE755: 0x8E91,
	    0xE756: 0x8E94,
	    0xE757: 0x8E99,
	    0xE758: 0x8EAA,
	    0xE759: 0x8EA1,
	    0xE75A: 0x8EAC,
	    0xE75B: 0x8EB0,
	    0xE75C: 0x8EC6,
	    0xE75D: 0x8EB1,
	    0xE75E: 0x8EBE,
	    0xE75F: 0x8EC5,
	    0xE760: 0x8EC8,
	    0xE761: 0x8ECB,
	    0xE762: 0x8EDB,
	    0xE763: 0x8EE3,
	    0xE764: 0x8EFC,
	    0xE765: 0x8EFB,
	    0xE766: 0x8EEB,
	    0xE767: 0x8EFE,
	    0xE768: 0x8F0A,
	    0xE769: 0x8F05,
	    0xE76A: 0x8F15,
	    0xE76B: 0x8F12,
	    0xE76C: 0x8F19,
	    0xE76D: 0x8F13,
	    0xE76E: 0x8F1C,
	    0xE76F: 0x8F1F,
	    0xE770: 0x8F1B,
	    0xE771: 0x8F0C,
	    0xE772: 0x8F26,
	    0xE773: 0x8F33,
	    0xE774: 0x8F3B,
	    0xE775: 0x8F39,
	    0xE776: 0x8F45,
	    0xE777: 0x8F42,
	    0xE778: 0x8F3E,
	    0xE779: 0x8F4C,
	    0xE77A: 0x8F49,
	    0xE77B: 0x8F46,
	    0xE77C: 0x8F4E,
	    0xE77D: 0x8F57,
	    0xE77E: 0x8F5C,
	    0xE780: 0x8F62,
	    0xE781: 0x8F63,
	    0xE782: 0x8F64,
	    0xE783: 0x8F9C,
	    0xE784: 0x8F9F,
	    0xE785: 0x8FA3,
	    0xE786: 0x8FAD,
	    0xE787: 0x8FAF,
	    0xE788: 0x8FB7,
	    0xE789: 0x8FDA,
	    0xE78A: 0x8FE5,
	    0xE78B: 0x8FE2,
	    0xE78C: 0x8FEA,
	    0xE78D: 0x8FEF,
	    0xE78E: 0x9087,
	    0xE78F: 0x8FF4,
	    0xE790: 0x9005,
	    0xE791: 0x8FF9,
	    0xE792: 0x8FFA,
	    0xE793: 0x9011,
	    0xE794: 0x9015,
	    0xE795: 0x9021,
	    0xE796: 0x900D,
	    0xE797: 0x901E,
	    0xE798: 0x9016,
	    0xE799: 0x900B,
	    0xE79A: 0x9027,
	    0xE79B: 0x9036,
	    0xE79C: 0x9035,
	    0xE79D: 0x9039,
	    0xE79E: 0x8FF8,
	    0xE79F: 0x904F,
	    0xE7A0: 0x9050,
	    0xE7A1: 0x9051,
	    0xE7A2: 0x9052,
	    0xE7A3: 0x900E,
	    0xE7A4: 0x9049,
	    0xE7A5: 0x903E,
	    0xE7A6: 0x9056,
	    0xE7A7: 0x9058,
	    0xE7A8: 0x905E,
	    0xE7A9: 0x9068,
	    0xE7AA: 0x906F,
	    0xE7AB: 0x9076,
	    0xE7AC: 0x96A8,
	    0xE7AD: 0x9072,
	    0xE7AE: 0x9082,
	    0xE7AF: 0x907D,
	    0xE7B0: 0x9081,
	    0xE7B1: 0x9080,
	    0xE7B2: 0x908A,
	    0xE7B3: 0x9089,
	    0xE7B4: 0x908F,
	    0xE7B5: 0x90A8,
	    0xE7B6: 0x90AF,
	    0xE7B7: 0x90B1,
	    0xE7B8: 0x90B5,
	    0xE7B9: 0x90E2,
	    0xE7BA: 0x90E4,
	    0xE7BB: 0x6248,
	    0xE7BC: 0x90DB,
	    0xE7BD: 0x9102,
	    0xE7BE: 0x9112,
	    0xE7BF: 0x9119,
	    0xE7C0: 0x9132,
	    0xE7C1: 0x9130,
	    0xE7C2: 0x914A,
	    0xE7C3: 0x9156,
	    0xE7C4: 0x9158,
	    0xE7C5: 0x9163,
	    0xE7C6: 0x9165,
	    0xE7C7: 0x9169,
	    0xE7C8: 0x9173,
	    0xE7C9: 0x9172,
	    0xE7CA: 0x918B,
	    0xE7CB: 0x9189,
	    0xE7CC: 0x9182,
	    0xE7CD: 0x91A2,
	    0xE7CE: 0x91AB,
	    0xE7CF: 0x91AF,
	    0xE7D0: 0x91AA,
	    0xE7D1: 0x91B5,
	    0xE7D2: 0x91B4,
	    0xE7D3: 0x91BA,
	    0xE7D4: 0x91C0,
	    0xE7D5: 0x91C1,
	    0xE7D6: 0x91C9,
	    0xE7D7: 0x91CB,
	    0xE7D8: 0x91D0,
	    0xE7D9: 0x91D6,
	    0xE7DA: 0x91DF,
	    0xE7DB: 0x91E1,
	    0xE7DC: 0x91DB,
	    0xE7DD: 0x91FC,
	    0xE7DE: 0x91F5,
	    0xE7DF: 0x91F6,
	    0xE7E0: 0x921E,
	    0xE7E1: 0x91FF,
	    0xE7E2: 0x9214,
	    0xE7E3: 0x922C,
	    0xE7E4: 0x9215,
	    0xE7E5: 0x9211,
	    0xE7E6: 0x925E,
	    0xE7E7: 0x9257,
	    0xE7E8: 0x9245,
	    0xE7E9: 0x9249,
	    0xE7EA: 0x9264,
	    0xE7EB: 0x9248,
	    0xE7EC: 0x9295,
	    0xE7ED: 0x923F,
	    0xE7EE: 0x924B,
	    0xE7EF: 0x9250,
	    0xE7F0: 0x929C,
	    0xE7F1: 0x9296,
	    0xE7F2: 0x9293,
	    0xE7F3: 0x929B,
	    0xE7F4: 0x925A,
	    0xE7F5: 0x92CF,
	    0xE7F6: 0x92B9,
	    0xE7F7: 0x92B7,
	    0xE7F8: 0x92E9,
	    0xE7F9: 0x930F,
	    0xE7FA: 0x92FA,
	    0xE7FB: 0x9344,
	    0xE7FC: 0x932E,
	    0xE840: 0x9319,
	    0xE841: 0x9322,
	    0xE842: 0x931A,
	    0xE843: 0x9323,
	    0xE844: 0x933A,
	    0xE845: 0x9335,
	    0xE846: 0x933B,
	    0xE847: 0x935C,
	    0xE848: 0x9360,
	    0xE849: 0x937C,
	    0xE84A: 0x936E,
	    0xE84B: 0x9356,
	    0xE84C: 0x93B0,
	    0xE84D: 0x93AC,
	    0xE84E: 0x93AD,
	    0xE84F: 0x9394,
	    0xE850: 0x93B9,
	    0xE851: 0x93D6,
	    0xE852: 0x93D7,
	    0xE853: 0x93E8,
	    0xE854: 0x93E5,
	    0xE855: 0x93D8,
	    0xE856: 0x93C3,
	    0xE857: 0x93DD,
	    0xE858: 0x93D0,
	    0xE859: 0x93C8,
	    0xE85A: 0x93E4,
	    0xE85B: 0x941A,
	    0xE85C: 0x9414,
	    0xE85D: 0x9413,
	    0xE85E: 0x9403,
	    0xE85F: 0x9407,
	    0xE860: 0x9410,
	    0xE861: 0x9436,
	    0xE862: 0x942B,
	    0xE863: 0x9435,
	    0xE864: 0x9421,
	    0xE865: 0x943A,
	    0xE866: 0x9441,
	    0xE867: 0x9452,
	    0xE868: 0x9444,
	    0xE869: 0x945B,
	    0xE86A: 0x9460,
	    0xE86B: 0x9462,
	    0xE86C: 0x945E,
	    0xE86D: 0x946A,
	    0xE86E: 0x9229,
	    0xE86F: 0x9470,
	    0xE870: 0x9475,
	    0xE871: 0x9477,
	    0xE872: 0x947D,
	    0xE873: 0x945A,
	    0xE874: 0x947C,
	    0xE875: 0x947E,
	    0xE876: 0x9481,
	    0xE877: 0x947F,
	    0xE878: 0x9582,
	    0xE879: 0x9587,
	    0xE87A: 0x958A,
	    0xE87B: 0x9594,
	    0xE87C: 0x9596,
	    0xE87D: 0x9598,
	    0xE87E: 0x9599,
	    0xE880: 0x95A0,
	    0xE881: 0x95A8,
	    0xE882: 0x95A7,
	    0xE883: 0x95AD,
	    0xE884: 0x95BC,
	    0xE885: 0x95BB,
	    0xE886: 0x95B9,
	    0xE887: 0x95BE,
	    0xE888: 0x95CA,
	    0xE889: 0x6FF6,
	    0xE88A: 0x95C3,
	    0xE88B: 0x95CD,
	    0xE88C: 0x95CC,
	    0xE88D: 0x95D5,
	    0xE88E: 0x95D4,
	    0xE88F: 0x95D6,
	    0xE890: 0x95DC,
	    0xE891: 0x95E1,
	    0xE892: 0x95E5,
	    0xE893: 0x95E2,
	    0xE894: 0x9621,
	    0xE895: 0x9628,
	    0xE896: 0x962E,
	    0xE897: 0x962F,
	    0xE898: 0x9642,
	    0xE899: 0x964C,
	    0xE89A: 0x964F,
	    0xE89B: 0x964B,
	    0xE89C: 0x9677,
	    0xE89D: 0x965C,
	    0xE89E: 0x965E,
	    0xE89F: 0x965D,
	    0xE8A0: 0x965F,
	    0xE8A1: 0x9666,
	    0xE8A2: 0x9672,
	    0xE8A3: 0x966C,
	    0xE8A4: 0x968D,
	    0xE8A5: 0x9698,
	    0xE8A6: 0x9695,
	    0xE8A7: 0x9697,
	    0xE8A8: 0x96AA,
	    0xE8A9: 0x96A7,
	    0xE8AA: 0x96B1,
	    0xE8AB: 0x96B2,
	    0xE8AC: 0x96B0,
	    0xE8AD: 0x96B4,
	    0xE8AE: 0x96B6,
	    0xE8AF: 0x96B8,
	    0xE8B0: 0x96B9,
	    0xE8B1: 0x96CE,
	    0xE8B2: 0x96CB,
	    0xE8B3: 0x96C9,
	    0xE8B4: 0x96CD,
	    0xE8B5: 0x894D,
	    0xE8B6: 0x96DC,
	    0xE8B7: 0x970D,
	    0xE8B8: 0x96D5,
	    0xE8B9: 0x96F9,
	    0xE8BA: 0x9704,
	    0xE8BB: 0x9706,
	    0xE8BC: 0x9708,
	    0xE8BD: 0x9713,
	    0xE8BE: 0x970E,
	    0xE8BF: 0x9711,
	    0xE8C0: 0x970F,
	    0xE8C1: 0x9716,
	    0xE8C2: 0x9719,
	    0xE8C3: 0x9724,
	    0xE8C4: 0x972A,
	    0xE8C5: 0x9730,
	    0xE8C6: 0x9739,
	    0xE8C7: 0x973D,
	    0xE8C8: 0x973E,
	    0xE8C9: 0x9744,
	    0xE8CA: 0x9746,
	    0xE8CB: 0x9748,
	    0xE8CC: 0x9742,
	    0xE8CD: 0x9749,
	    0xE8CE: 0x975C,
	    0xE8CF: 0x9760,
	    0xE8D0: 0x9764,
	    0xE8D1: 0x9766,
	    0xE8D2: 0x9768,
	    0xE8D3: 0x52D2,
	    0xE8D4: 0x976B,
	    0xE8D5: 0x9771,
	    0xE8D6: 0x9779,
	    0xE8D7: 0x9785,
	    0xE8D8: 0x977C,
	    0xE8D9: 0x9781,
	    0xE8DA: 0x977A,
	    0xE8DB: 0x9786,
	    0xE8DC: 0x978B,
	    0xE8DD: 0x978F,
	    0xE8DE: 0x9790,
	    0xE8DF: 0x979C,
	    0xE8E0: 0x97A8,
	    0xE8E1: 0x97A6,
	    0xE8E2: 0x97A3,
	    0xE8E3: 0x97B3,
	    0xE8E4: 0x97B4,
	    0xE8E5: 0x97C3,
	    0xE8E6: 0x97C6,
	    0xE8E7: 0x97C8,
	    0xE8E8: 0x97CB,
	    0xE8E9: 0x97DC,
	    0xE8EA: 0x97ED,
	    0xE8EB: 0x9F4F,
	    0xE8EC: 0x97F2,
	    0xE8ED: 0x7ADF,
	    0xE8EE: 0x97F6,
	    0xE8EF: 0x97F5,
	    0xE8F0: 0x980F,
	    0xE8F1: 0x980C,
	    0xE8F2: 0x9838,
	    0xE8F3: 0x9824,
	    0xE8F4: 0x9821,
	    0xE8F5: 0x9837,
	    0xE8F6: 0x983D,
	    0xE8F7: 0x9846,
	    0xE8F8: 0x984F,
	    0xE8F9: 0x984B,
	    0xE8FA: 0x986B,
	    0xE8FB: 0x986F,
	    0xE8FC: 0x9870,
	    0xE940: 0x9871,
	    0xE941: 0x9874,
	    0xE942: 0x9873,
	    0xE943: 0x98AA,
	    0xE944: 0x98AF,
	    0xE945: 0x98B1,
	    0xE946: 0x98B6,
	    0xE947: 0x98C4,
	    0xE948: 0x98C3,
	    0xE949: 0x98C6,
	    0xE94A: 0x98E9,
	    0xE94B: 0x98EB,
	    0xE94C: 0x9903,
	    0xE94D: 0x9909,
	    0xE94E: 0x9912,
	    0xE94F: 0x9914,
	    0xE950: 0x9918,
	    0xE951: 0x9921,
	    0xE952: 0x991D,
	    0xE953: 0x991E,
	    0xE954: 0x9924,
	    0xE955: 0x9920,
	    0xE956: 0x992C,
	    0xE957: 0x992E,
	    0xE958: 0x993D,
	    0xE959: 0x993E,
	    0xE95A: 0x9942,
	    0xE95B: 0x9949,
	    0xE95C: 0x9945,
	    0xE95D: 0x9950,
	    0xE95E: 0x994B,
	    0xE95F: 0x9951,
	    0xE960: 0x9952,
	    0xE961: 0x994C,
	    0xE962: 0x9955,
	    0xE963: 0x9997,
	    0xE964: 0x9998,
	    0xE965: 0x99A5,
	    0xE966: 0x99AD,
	    0xE967: 0x99AE,
	    0xE968: 0x99BC,
	    0xE969: 0x99DF,
	    0xE96A: 0x99DB,
	    0xE96B: 0x99DD,
	    0xE96C: 0x99D8,
	    0xE96D: 0x99D1,
	    0xE96E: 0x99ED,
	    0xE96F: 0x99EE,
	    0xE970: 0x99F1,
	    0xE971: 0x99F2,
	    0xE972: 0x99FB,
	    0xE973: 0x99F8,
	    0xE974: 0x9A01,
	    0xE975: 0x9A0F,
	    0xE976: 0x9A05,
	    0xE977: 0x99E2,
	    0xE978: 0x9A19,
	    0xE979: 0x9A2B,
	    0xE97A: 0x9A37,
	    0xE97B: 0x9A45,
	    0xE97C: 0x9A42,
	    0xE97D: 0x9A40,
	    0xE97E: 0x9A43,
	    0xE980: 0x9A3E,
	    0xE981: 0x9A55,
	    0xE982: 0x9A4D,
	    0xE983: 0x9A5B,
	    0xE984: 0x9A57,
	    0xE985: 0x9A5F,
	    0xE986: 0x9A62,
	    0xE987: 0x9A65,
	    0xE988: 0x9A64,
	    0xE989: 0x9A69,
	    0xE98A: 0x9A6B,
	    0xE98B: 0x9A6A,
	    0xE98C: 0x9AAD,
	    0xE98D: 0x9AB0,
	    0xE98E: 0x9ABC,
	    0xE98F: 0x9AC0,
	    0xE990: 0x9ACF,
	    0xE991: 0x9AD1,
	    0xE992: 0x9AD3,
	    0xE993: 0x9AD4,
	    0xE994: 0x9ADE,
	    0xE995: 0x9ADF,
	    0xE996: 0x9AE2,
	    0xE997: 0x9AE3,
	    0xE998: 0x9AE6,
	    0xE999: 0x9AEF,
	    0xE99A: 0x9AEB,
	    0xE99B: 0x9AEE,
	    0xE99C: 0x9AF4,
	    0xE99D: 0x9AF1,
	    0xE99E: 0x9AF7,
	    0xE99F: 0x9AFB,
	    0xE9A0: 0x9B06,
	    0xE9A1: 0x9B18,
	    0xE9A2: 0x9B1A,
	    0xE9A3: 0x9B1F,
	    0xE9A4: 0x9B22,
	    0xE9A5: 0x9B23,
	    0xE9A6: 0x9B25,
	    0xE9A7: 0x9B27,
	    0xE9A8: 0x9B28,
	    0xE9A9: 0x9B29,
	    0xE9AA: 0x9B2A,
	    0xE9AB: 0x9B2E,
	    0xE9AC: 0x9B2F,
	    0xE9AD: 0x9B32,
	    0xE9AE: 0x9B44,
	    0xE9AF: 0x9B43,
	    0xE9B0: 0x9B4F,
	    0xE9B1: 0x9B4D,
	    0xE9B2: 0x9B4E,
	    0xE9B3: 0x9B51,
	    0xE9B4: 0x9B58,
	    0xE9B5: 0x9B74,
	    0xE9B6: 0x9B93,
	    0xE9B7: 0x9B83,
	    0xE9B8: 0x9B91,
	    0xE9B9: 0x9B96,
	    0xE9BA: 0x9B97,
	    0xE9BB: 0x9B9F,
	    0xE9BC: 0x9BA0,
	    0xE9BD: 0x9BA8,
	    0xE9BE: 0x9BB4,
	    0xE9BF: 0x9BC0,
	    0xE9C0: 0x9BCA,
	    0xE9C1: 0x9BB9,
	    0xE9C2: 0x9BC6,
	    0xE9C3: 0x9BCF,
	    0xE9C4: 0x9BD1,
	    0xE9C5: 0x9BD2,
	    0xE9C6: 0x9BE3,
	    0xE9C7: 0x9BE2,
	    0xE9C8: 0x9BE4,
	    0xE9C9: 0x9BD4,
	    0xE9CA: 0x9BE1,
	    0xE9CB: 0x9C3A,
	    0xE9CC: 0x9BF2,
	    0xE9CD: 0x9BF1,
	    0xE9CE: 0x9BF0,
	    0xE9CF: 0x9C15,
	    0xE9D0: 0x9C14,
	    0xE9D1: 0x9C09,
	    0xE9D2: 0x9C13,
	    0xE9D3: 0x9C0C,
	    0xE9D4: 0x9C06,
	    0xE9D5: 0x9C08,
	    0xE9D6: 0x9C12,
	    0xE9D7: 0x9C0A,
	    0xE9D8: 0x9C04,
	    0xE9D9: 0x9C2E,
	    0xE9DA: 0x9C1B,
	    0xE9DB: 0x9C25,
	    0xE9DC: 0x9C24,
	    0xE9DD: 0x9C21,
	    0xE9DE: 0x9C30,
	    0xE9DF: 0x9C47,
	    0xE9E0: 0x9C32,
	    0xE9E1: 0x9C46,
	    0xE9E2: 0x9C3E,
	    0xE9E3: 0x9C5A,
	    0xE9E4: 0x9C60,
	    0xE9E5: 0x9C67,
	    0xE9E6: 0x9C76,
	    0xE9E7: 0x9C78,
	    0xE9E8: 0x9CE7,
	    0xE9E9: 0x9CEC,
	    0xE9EA: 0x9CF0,
	    0xE9EB: 0x9D09,
	    0xE9EC: 0x9D08,
	    0xE9ED: 0x9CEB,
	    0xE9EE: 0x9D03,
	    0xE9EF: 0x9D06,
	    0xE9F0: 0x9D2A,
	    0xE9F1: 0x9D26,
	    0xE9F2: 0x9DAF,
	    0xE9F3: 0x9D23,
	    0xE9F4: 0x9D1F,
	    0xE9F5: 0x9D44,
	    0xE9F6: 0x9D15,
	    0xE9F7: 0x9D12,
	    0xE9F8: 0x9D41,
	    0xE9F9: 0x9D3F,
	    0xE9FA: 0x9D3E,
	    0xE9FB: 0x9D46,
	    0xE9FC: 0x9D48,
	    0xEA40: 0x9D5D,
	    0xEA41: 0x9D5E,
	    0xEA42: 0x9D64,
	    0xEA43: 0x9D51,
	    0xEA44: 0x9D50,
	    0xEA45: 0x9D59,
	    0xEA46: 0x9D72,
	    0xEA47: 0x9D89,
	    0xEA48: 0x9D87,
	    0xEA49: 0x9DAB,
	    0xEA4A: 0x9D6F,
	    0xEA4B: 0x9D7A,
	    0xEA4C: 0x9D9A,
	    0xEA4D: 0x9DA4,
	    0xEA4E: 0x9DA9,
	    0xEA4F: 0x9DB2,
	    0xEA50: 0x9DC4,
	    0xEA51: 0x9DC1,
	    0xEA52: 0x9DBB,
	    0xEA53: 0x9DB8,
	    0xEA54: 0x9DBA,
	    0xEA55: 0x9DC6,
	    0xEA56: 0x9DCF,
	    0xEA57: 0x9DC2,
	    0xEA58: 0x9DD9,
	    0xEA59: 0x9DD3,
	    0xEA5A: 0x9DF8,
	    0xEA5B: 0x9DE6,
	    0xEA5C: 0x9DED,
	    0xEA5D: 0x9DEF,
	    0xEA5E: 0x9DFD,
	    0xEA5F: 0x9E1A,
	    0xEA60: 0x9E1B,
	    0xEA61: 0x9E1E,
	    0xEA62: 0x9E75,
	    0xEA63: 0x9E79,
	    0xEA64: 0x9E7D,
	    0xEA65: 0x9E81,
	    0xEA66: 0x9E88,
	    0xEA67: 0x9E8B,
	    0xEA68: 0x9E8C,
	    0xEA69: 0x9E92,
	    0xEA6A: 0x9E95,
	    0xEA6B: 0x9E91,
	    0xEA6C: 0x9E9D,
	    0xEA6D: 0x9EA5,
	    0xEA6E: 0x9EA9,
	    0xEA6F: 0x9EB8,
	    0xEA70: 0x9EAA,
	    0xEA71: 0x9EAD,
	    0xEA72: 0x9761,
	    0xEA73: 0x9ECC,
	    0xEA74: 0x9ECE,
	    0xEA75: 0x9ECF,
	    0xEA76: 0x9ED0,
	    0xEA77: 0x9ED4,
	    0xEA78: 0x9EDC,
	    0xEA79: 0x9EDE,
	    0xEA7A: 0x9EDD,
	    0xEA7B: 0x9EE0,
	    0xEA7C: 0x9EE5,
	    0xEA7D: 0x9EE8,
	    0xEA7E: 0x9EEF,
	    0xEA80: 0x9EF4,
	    0xEA81: 0x9EF6,
	    0xEA82: 0x9EF7,
	    0xEA83: 0x9EF9,
	    0xEA84: 0x9EFB,
	    0xEA85: 0x9EFC,
	    0xEA86: 0x9EFD,
	    0xEA87: 0x9F07,
	    0xEA88: 0x9F08,
	    0xEA89: 0x76B7,
	    0xEA8A: 0x9F15,
	    0xEA8B: 0x9F21,
	    0xEA8C: 0x9F2C,
	    0xEA8D: 0x9F3E,
	    0xEA8E: 0x9F4A,
	    0xEA8F: 0x9F52,
	    0xEA90: 0x9F54,
	    0xEA91: 0x9F63,
	    0xEA92: 0x9F5F,
	    0xEA93: 0x9F60,
	    0xEA94: 0x9F61,
	    0xEA95: 0x9F66,
	    0xEA96: 0x9F67,
	    0xEA97: 0x9F6C,
	    0xEA98: 0x9F6A,
	    0xEA99: 0x9F77,
	    0xEA9A: 0x9F72,
	    0xEA9B: 0x9F76,
	    0xEA9C: 0x9F95,
	    0xEA9D: 0x9F9C,
	    0xEA9E: 0x9FA0,
	    0xEA9F: 0x582F,
	    0xEAA0: 0x69C7,
	    0xEAA1: 0x9059,
	    0xEAA2: 0x7464,
	    0xEAA3: 0x51DC,
	    0xEAA4: 0x7199,
	};


	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var GenericGF_1 = __webpack_require__(1);
	var GenericGFPoly_1 = __webpack_require__(2);
	function runEuclideanAlgorithm(field, a, b, R) {
	    var _a;
	    // Assume a's degree is >= b's
	    if (a.degree() < b.degree()) {
	        _a = [b, a], a = _a[0], b = _a[1];
	    }
	    var rLast = a;
	    var r = b;
	    var tLast = field.zero;
	    var t = field.one;
	    // Run Euclidean algorithm until r's degree is less than R/2
	    while (r.degree() >= R / 2) {
	        var rLastLast = rLast;
	        var tLastLast = tLast;
	        rLast = r;
	        tLast = t;
	        // Divide rLastLast by rLast, with quotient in q and remainder in r
	        if (rLast.isZero()) {
	            // Euclidean algorithm already terminated?
	            return null;
	        }
	        r = rLastLast;
	        var q = field.zero;
	        var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
	        var dltInverse = field.inverse(denominatorLeadingTerm);
	        while (r.degree() >= rLast.degree() && !r.isZero()) {
	            var degreeDiff = r.degree() - rLast.degree();
	            var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
	            q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
	            r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
	        }
	        t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);
	        if (r.degree() >= rLast.degree()) {
	            return null;
	        }
	    }
	    var sigmaTildeAtZero = t.getCoefficient(0);
	    if (sigmaTildeAtZero === 0) {
	        return null;
	    }
	    var inverse = field.inverse(sigmaTildeAtZero);
	    return [t.multiply(inverse), r.multiply(inverse)];
	}
	function findErrorLocations(field, errorLocator) {
	    // This is a direct application of Chien's search
	    var numErrors = errorLocator.degree();
	    if (numErrors === 1) {
	        return [errorLocator.getCoefficient(1)];
	    }
	    var result = new Array(numErrors);
	    var errorCount = 0;
	    for (var i = 1; i < field.size && errorCount < numErrors; i++) {
	        if (errorLocator.evaluateAt(i) === 0) {
	            result[errorCount] = field.inverse(i);
	            errorCount++;
	        }
	    }
	    if (errorCount !== numErrors) {
	        return null;
	    }
	    return result;
	}
	function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
	    // This is directly applying Forney's Formula
	    var s = errorLocations.length;
	    var result = new Array(s);
	    for (var i = 0; i < s; i++) {
	        var xiInverse = field.inverse(errorLocations[i]);
	        var denominator = 1;
	        for (var j = 0; j < s; j++) {
	            if (i !== j) {
	                denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
	            }
	        }
	        result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
	        if (field.generatorBase !== 0) {
	            result[i] = field.multiply(result[i], xiInverse);
	        }
	    }
	    return result;
	}
	function decode(bytes, twoS) {
	    var outputBytes = new Uint8ClampedArray(bytes.length);
	    outputBytes.set(bytes);
	    var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1
	    var poly = new GenericGFPoly_1.default(field, outputBytes);
	    var syndromeCoefficients = new Uint8ClampedArray(twoS);
	    var error = false;
	    for (var s = 0; s < twoS; s++) {
	        var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
	        syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;
	        if (evaluation !== 0) {
	            error = true;
	        }
	    }
	    if (!error) {
	        return outputBytes;
	    }
	    var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
	    var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);
	    if (sigmaOmega === null) {
	        return null;
	    }
	    var errorLocations = findErrorLocations(field, sigmaOmega[0]);
	    if (errorLocations == null) {
	        return null;
	    }
	    var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);
	    for (var i = 0; i < errorLocations.length; i++) {
	        var position = outputBytes.length - 1 - field.log(errorLocations[i]);
	        if (position < 0) {
	            return null;
	        }
	        outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
	    }
	    return outputBytes;
	}
	exports.decode = decode;


	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VERSIONS = [
	    {
	        infoBits: null,
	        versionNumber: 1,
	        alignmentPatternCenters: [],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 7,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],
	            },
	            {
	                ecCodewordsPerBlock: 10,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],
	            },
	            {
	                ecCodewordsPerBlock: 13,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],
	            },
	            {
	                ecCodewordsPerBlock: 17,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],
	            },
	        ],
	    },
	    {
	        infoBits: null,
	        versionNumber: 2,
	        alignmentPatternCenters: [6, 18],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 10,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],
	            },
	            {
	                ecCodewordsPerBlock: 16,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],
	            },
	        ],
	    },
	    {
	        infoBits: null,
	        versionNumber: 3,
	        alignmentPatternCenters: [6, 22],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 15,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],
	            },
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],
	            },
	        ],
	    },
	    {
	        infoBits: null,
	        versionNumber: 4,
	        alignmentPatternCenters: [6, 26],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 20,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],
	            },
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],
	            },
	            {
	                ecCodewordsPerBlock: 16,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],
	            },
	        ],
	    },
	    {
	        infoBits: null,
	        versionNumber: 5,
	        alignmentPatternCenters: [6, 30],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],
	            },
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 16 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 11 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 12 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: null,
	        versionNumber: 6,
	        alignmentPatternCenters: [6, 34],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],
	            },
	            {
	                ecCodewordsPerBlock: 16,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],
	            },
	        ],
	    },
	    {
	        infoBits: 0x07C94,
	        versionNumber: 7,
	        alignmentPatternCenters: [6, 22, 38],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 20,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],
	            },
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],
	            },
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 14 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 15 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 13 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 14 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x085BC,
	        versionNumber: 8,
	        alignmentPatternCenters: [6, 24, 42],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 38 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 39 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 18 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 19 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 14 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 15 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x09A99,
	        versionNumber: 9,
	        alignmentPatternCenters: [6, 26, 46],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 36 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 37 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 20,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 16 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 17 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 12 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 13 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x0A4D3,
	        versionNumber: 10,
	        alignmentPatternCenters: [6, 28, 50],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 18,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 68 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 69 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 43 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 44 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 19 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 20 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x0BBF6,
	        versionNumber: 11,
	        alignmentPatternCenters: [6, 30, 54],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 20,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 1, dataCodewordsPerBlock: 50 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 51 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 22 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 23 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 12 },
	                    { numBlocks: 8, dataCodewordsPerBlock: 13 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x0C762,
	        versionNumber: 12,
	        alignmentPatternCenters: [6, 32, 58],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 92 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 93 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 36 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 37 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 20 },
	                    { numBlocks: 6, dataCodewordsPerBlock: 21 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 7, dataCodewordsPerBlock: 14 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 15 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x0D847,
	        versionNumber: 13,
	        alignmentPatternCenters: [6, 34, 62],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 8, dataCodewordsPerBlock: 37 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 38 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 8, dataCodewordsPerBlock: 20 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 21 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 12, dataCodewordsPerBlock: 11 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 12 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x0E60D,
	        versionNumber: 14,
	        alignmentPatternCenters: [6, 26, 46, 66],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 115 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 116 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 40 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 41 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 20,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 16 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 17 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 12 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 13 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x0F928,
	        versionNumber: 15,
	        alignmentPatternCenters: [6, 26, 48, 70],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 22,
	                ecBlocks: [
	                    { numBlocks: 5, dataCodewordsPerBlock: 87 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 88 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 5, dataCodewordsPerBlock: 41 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 42 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 5, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 12 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 13 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x10B78,
	        versionNumber: 16,
	        alignmentPatternCenters: [6, 26, 50, 74],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 5, dataCodewordsPerBlock: 98 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 99 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 7, dataCodewordsPerBlock: 45 },
	                    { numBlocks: 3, dataCodewordsPerBlock: 46 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [
	                    { numBlocks: 15, dataCodewordsPerBlock: 19 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 20 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 13, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1145D,
	        versionNumber: 17,
	        alignmentPatternCenters: [6, 30, 54, 78],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 1, dataCodewordsPerBlock: 107 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 108 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 10, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 1, dataCodewordsPerBlock: 22 },
	                    { numBlocks: 15, dataCodewordsPerBlock: 23 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 14 },
	                    { numBlocks: 17, dataCodewordsPerBlock: 15 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x12A17,
	        versionNumber: 18,
	        alignmentPatternCenters: [6, 30, 56, 82],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 5, dataCodewordsPerBlock: 120 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 121 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 9, dataCodewordsPerBlock: 43 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 44 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 17, dataCodewordsPerBlock: 22 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 23 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 14 },
	                    { numBlocks: 19, dataCodewordsPerBlock: 15 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x13532,
	        versionNumber: 19,
	        alignmentPatternCenters: [6, 30, 58, 86],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 113 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 114 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 44 },
	                    { numBlocks: 11, dataCodewordsPerBlock: 45 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 17, dataCodewordsPerBlock: 21 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 22 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 9, dataCodewordsPerBlock: 13 },
	                    { numBlocks: 16, dataCodewordsPerBlock: 14 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x149A6,
	        versionNumber: 20,
	        alignmentPatternCenters: [6, 34, 62, 90],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 107 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 108 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 41 },
	                    { numBlocks: 13, dataCodewordsPerBlock: 42 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 15, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 15, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 10, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x15683,
	        versionNumber: 21,
	        alignmentPatternCenters: [6, 28, 50, 72, 94],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 116 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 117 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 17, dataCodewordsPerBlock: 22 },
	                    { numBlocks: 6, dataCodewordsPerBlock: 23 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 19, dataCodewordsPerBlock: 16 },
	                    { numBlocks: 6, dataCodewordsPerBlock: 17 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x168C9,
	        versionNumber: 22,
	        alignmentPatternCenters: [6, 26, 50, 74, 98],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 111 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 112 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 7, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 16, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 24,
	                ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],
	            },
	        ],
	    },
	    {
	        infoBits: 0x177EC,
	        versionNumber: 23,
	        alignmentPatternCenters: [6, 30, 54, 74, 102],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 121 },
	                    { numBlocks: 5, dataCodewordsPerBlock: 122 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 16, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x18EC4,
	        versionNumber: 24,
	        alignmentPatternCenters: [6, 28, 54, 80, 106],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 117 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 118 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 45 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 46 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 16, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 30, dataCodewordsPerBlock: 16 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 17 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x191E1,
	        versionNumber: 25,
	        alignmentPatternCenters: [6, 32, 58, 84, 110],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 26,
	                ecBlocks: [
	                    { numBlocks: 8, dataCodewordsPerBlock: 106 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 107 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 8, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 13, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 7, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 22, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 22, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 13, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1AFAB,
	        versionNumber: 26,
	        alignmentPatternCenters: [6, 30, 58, 86, 114],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 10, dataCodewordsPerBlock: 114 },
	                    { numBlocks: 2, dataCodewordsPerBlock: 115 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 19, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 28, dataCodewordsPerBlock: 22 },
	                    { numBlocks: 6, dataCodewordsPerBlock: 23 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 33, dataCodewordsPerBlock: 16 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 17 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1B08E,
	        versionNumber: 27,
	        alignmentPatternCenters: [6, 34, 62, 90, 118],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 8, dataCodewordsPerBlock: 122 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 123 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 22, dataCodewordsPerBlock: 45 },
	                    { numBlocks: 3, dataCodewordsPerBlock: 46 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 8, dataCodewordsPerBlock: 23 },
	                    { numBlocks: 26, dataCodewordsPerBlock: 24 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 12, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 28, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1CC1A,
	        versionNumber: 28,
	        alignmentPatternCenters: [6, 26, 50, 74, 98, 122],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 117 },
	                    { numBlocks: 10, dataCodewordsPerBlock: 118 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 3, dataCodewordsPerBlock: 45 },
	                    { numBlocks: 23, dataCodewordsPerBlock: 46 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 31, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 31, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1D33F,
	        versionNumber: 29,
	        alignmentPatternCenters: [6, 30, 54, 78, 102, 126],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 7, dataCodewordsPerBlock: 116 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 117 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 21, dataCodewordsPerBlock: 45 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 46 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 1, dataCodewordsPerBlock: 23 },
	                    { numBlocks: 37, dataCodewordsPerBlock: 24 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 19, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 26, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1ED75,
	        versionNumber: 30,
	        alignmentPatternCenters: [6, 26, 52, 78, 104, 130],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 5, dataCodewordsPerBlock: 115 },
	                    { numBlocks: 10, dataCodewordsPerBlock: 116 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 19, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 10, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 15, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 25, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 23, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 25, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x1F250,
	        versionNumber: 31,
	        alignmentPatternCenters: [6, 30, 56, 82, 108, 134],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 13, dataCodewordsPerBlock: 115 },
	                    { numBlocks: 3, dataCodewordsPerBlock: 116 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 29, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 42, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 23, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 28, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x209D5,
	        versionNumber: 32,
	        alignmentPatternCenters: [6, 34, 60, 86, 112, 138],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 10, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 23, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 10, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 35, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 19, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 35, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x216F0,
	        versionNumber: 33,
	        alignmentPatternCenters: [6, 30, 58, 86, 114, 142],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 17, dataCodewordsPerBlock: 115 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 116 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 14, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 21, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 29, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 19, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 11, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 46, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x228BA,
	        versionNumber: 34,
	        alignmentPatternCenters: [6, 34, 62, 90, 118, 146],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 13, dataCodewordsPerBlock: 115 },
	                    { numBlocks: 6, dataCodewordsPerBlock: 116 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 14, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 23, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 44, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 59, dataCodewordsPerBlock: 16 },
	                    { numBlocks: 1, dataCodewordsPerBlock: 17 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x2379F,
	        versionNumber: 35,
	        alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 12, dataCodewordsPerBlock: 121 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 122 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 12, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 26, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 39, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 22, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 41, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x24B0B,
	        versionNumber: 36,
	        alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 121 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 122 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 6, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 34, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 46, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 10, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 2, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 64, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x2542E,
	        versionNumber: 37,
	        alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 17, dataCodewordsPerBlock: 122 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 123 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 29, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 49, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 10, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 24, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 46, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x26A64,
	        versionNumber: 38,
	        alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 4, dataCodewordsPerBlock: 122 },
	                    { numBlocks: 18, dataCodewordsPerBlock: 123 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 13, dataCodewordsPerBlock: 46 },
	                    { numBlocks: 32, dataCodewordsPerBlock: 47 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 48, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 14, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 42, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 32, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x27541,
	        versionNumber: 39,
	        alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 20, dataCodewordsPerBlock: 117 },
	                    { numBlocks: 4, dataCodewordsPerBlock: 118 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 40, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 7, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 43, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 22, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 10, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 67, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	    {
	        infoBits: 0x28C69,
	        versionNumber: 40,
	        alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],
	        errorCorrectionLevels: [
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 19, dataCodewordsPerBlock: 118 },
	                    { numBlocks: 6, dataCodewordsPerBlock: 119 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 28,
	                ecBlocks: [
	                    { numBlocks: 18, dataCodewordsPerBlock: 47 },
	                    { numBlocks: 31, dataCodewordsPerBlock: 48 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 34, dataCodewordsPerBlock: 24 },
	                    { numBlocks: 34, dataCodewordsPerBlock: 25 },
	                ],
	            },
	            {
	                ecCodewordsPerBlock: 30,
	                ecBlocks: [
	                    { numBlocks: 20, dataCodewordsPerBlock: 15 },
	                    { numBlocks: 61, dataCodewordsPerBlock: 16 },
	                ],
	            },
	        ],
	    },
	];


	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var BitMatrix_1 = __webpack_require__(0);
	function squareToQuadrilateral(p1, p2, p3, p4) {
	    var dx3 = p1.x - p2.x + p3.x - p4.x;
	    var dy3 = p1.y - p2.y + p3.y - p4.y;
	    if (dx3 === 0 && dy3 === 0) { // Affine
	        return {
	            a11: p2.x - p1.x,
	            a12: p2.y - p1.y,
	            a13: 0,
	            a21: p3.x - p2.x,
	            a22: p3.y - p2.y,
	            a23: 0,
	            a31: p1.x,
	            a32: p1.y,
	            a33: 1,
	        };
	    }
	    else {
	        var dx1 = p2.x - p3.x;
	        var dx2 = p4.x - p3.x;
	        var dy1 = p2.y - p3.y;
	        var dy2 = p4.y - p3.y;
	        var denominator = dx1 * dy2 - dx2 * dy1;
	        var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
	        var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
	        return {
	            a11: p2.x - p1.x + a13 * p2.x,
	            a12: p2.y - p1.y + a13 * p2.y,
	            a13: a13,
	            a21: p4.x - p1.x + a23 * p4.x,
	            a22: p4.y - p1.y + a23 * p4.y,
	            a23: a23,
	            a31: p1.x,
	            a32: p1.y,
	            a33: 1,
	        };
	    }
	}
	function quadrilateralToSquare(p1, p2, p3, p4) {
	    // Here, the adjoint serves as the inverse:
	    var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
	    return {
	        a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
	        a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
	        a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
	        a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
	        a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
	        a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
	        a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
	        a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
	        a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,
	    };
	}
	function times(a, b) {
	    return {
	        a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
	        a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
	        a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
	        a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
	        a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
	        a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
	        a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
	        a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
	        a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,
	    };
	}
	function extract(image, location) {
	    var qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });
	    var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
	    var transform = times(sToQ, qToS);
	    var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);
	    var mappingFunction = function (x, y) {
	        var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
	        return {
	            x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
	            y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,
	        };
	    };
	    for (var y = 0; y < location.dimension; y++) {
	        for (var x = 0; x < location.dimension; x++) {
	            var xValue = x + 0.5;
	            var yValue = y + 0.5;
	            var sourcePixel = mappingFunction(xValue, yValue);
	            matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
	        }
	    }
	    return {
	        matrix: matrix,
	        mappingFunction: mappingFunction,
	    };
	}
	exports.extract = extract;


	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", { value: true });
	var MAX_FINDERPATTERNS_TO_SEARCH = 4;
	var MIN_QUAD_RATIO = 0.5;
	var MAX_QUAD_RATIO = 1.5;
	var distance = function (a, b) { return Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2)); };
	function sum(values) {
	    return values.reduce(function (a, b) { return a + b; });
	}
	// Takes three finder patterns and organizes them into topLeft, topRight, etc
	function reorderFinderPatterns(pattern1, pattern2, pattern3) {
	    var _a, _b, _c, _d;
	    // Find distances between pattern centers
	    var oneTwoDistance = distance(pattern1, pattern2);
	    var twoThreeDistance = distance(pattern2, pattern3);
	    var oneThreeDistance = distance(pattern1, pattern3);
	    var bottomLeft;
	    var topLeft;
	    var topRight;
	    // Assume one closest to other two is B; A and C will just be guesses at first
	    if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {
	        _a = [pattern2, pattern1, pattern3], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
	    }
	    else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {
	        _b = [pattern1, pattern2, pattern3], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
	    }
	    else {
	        _c = [pattern1, pattern3, pattern2], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
	    }
	    // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
	    // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
	    // we've got it flipped around and should swap topRight and bottomLeft.
	    if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {
	        _d = [topRight, bottomLeft], bottomLeft = _d[0], topRight = _d[1];
	    }
	    return { bottomLeft: bottomLeft, topLeft: topLeft, topRight: topRight };
	}
	// Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns
	function computeDimension(topLeft, topRight, bottomLeft, matrix) {
	    var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1
	        sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +
	        sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +
	        sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;
	    if (moduleSize < 1) {
	        throw new Error("Invalid module size");
	    }
	    var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
	    var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
	    var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;
	    switch (dimension % 4) {
	        case 0:
	            dimension++;
	            break;
	        case 2:
	            dimension--;
	            break;
	    }
	    return { dimension: dimension, moduleSize: moduleSize };
	}
	// Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
	// Returns an array of elements, representing the pixel size of the black white run.
	// Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
	function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
	    var switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];
	    var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
	    var fromX;
	    var fromY;
	    var toX;
	    var toY;
	    if (steep) {
	        fromX = Math.floor(origin.y);
	        fromY = Math.floor(origin.x);
	        toX = Math.floor(end.y);
	        toY = Math.floor(end.x);
	    }
	    else {
	        fromX = Math.floor(origin.x);
	        fromY = Math.floor(origin.y);
	        toX = Math.floor(end.x);
	        toY = Math.floor(end.y);
	    }
	    var dx = Math.abs(toX - fromX);
	    var dy = Math.abs(toY - fromY);
	    var error = Math.floor(-dx / 2);
	    var xStep = fromX < toX ? 1 : -1;
	    var yStep = fromY < toY ? 1 : -1;
	    var currentPixel = true;
	    // Loop up until x == toX, but not beyond
	    for (var x = fromX, y = fromY; x !== toX + xStep; x += xStep) {
	        // Does current pixel mean we have moved white to black or vice versa?
	        // Scanning black in state 0,2 and white in state 1, so if we find the wrong
	        // color, advance to next state or end if we are in state 2 already
	        var realX = steep ? y : x;
	        var realY = steep ? x : y;
	        if (matrix.get(realX, realY) !== currentPixel) {
	            currentPixel = !currentPixel;
	            switchPoints.push({ x: realX, y: realY });
	            if (switchPoints.length === length + 1) {
	                break;
	            }
	        }
	        error += dy;
	        if (error > 0) {
	            if (y === toY) {
	                break;
	            }
	            y += yStep;
	            error -= dx;
	        }
	    }
	    var distances = [];
	    for (var i = 0; i < length; i++) {
	        if (switchPoints[i] && switchPoints[i + 1]) {
	            distances.push(distance(switchPoints[i], switchPoints[i + 1]));
	        }
	        else {
	            distances.push(0);
	        }
	    }
	    return distances;
	}
	// Takes an origin point and an end point and counts the sizes of the black white run in the origin point
	// along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
	// of the black white run. Takes a length which represents the number of switches from black to white to look for.
	function countBlackWhiteRun(origin, end, matrix, length) {
	    var _a;
	    var rise = end.y - origin.y;
	    var run = end.x - origin.x;
	    var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
	    var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));
	    var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel
	    return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
	}
	// Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
	// that is the amount the run diverges from the expected ratio
	function scoreBlackWhiteRun(sequence, ratios) {
	    var averageSize = sum(sequence) / sum(ratios);
	    var error = 0;
	    ratios.forEach(function (ratio, i) {
	        error += Math.pow((sequence[i] - ratio * averageSize), 2);
	    });
	    return { averageSize: averageSize, error: error };
	}
	// Takes an X,Y point and an array of sizes and scores the point against those ratios.
	// For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
	// against that.
	function scorePattern(point, ratios, matrix) {
	    try {
	        var horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);
	        var verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);
	        var topLeftPoint = {
	            x: Math.max(0, point.x - point.y) - 1,
	            y: Math.max(0, point.y - point.x) - 1,
	        };
	        var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
	        var bottomLeftPoint = {
	            x: Math.min(matrix.width, point.x + point.y) + 1,
	            y: Math.min(matrix.height, point.y + point.x) + 1,
	        };
	        var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
	        var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
	        var vertError = scoreBlackWhiteRun(verticalRun, ratios);
	        var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
	        var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
	        var ratioError = Math.sqrt(horzError.error * horzError.error +
	            vertError.error * vertError.error +
	            diagDownError.error * diagDownError.error +
	            diagUpError.error * diagUpError.error);
	        var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
	        var sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +
	            Math.pow((vertError.averageSize - avgSize), 2) +
	            Math.pow((diagDownError.averageSize - avgSize), 2) +
	            Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;
	        return ratioError + sizeError;
	    }
	    catch (_a) {
	        return Infinity;
	    }
	}
	function recenterLocation(matrix, p) {
	    var leftX = Math.round(p.x);
	    while (matrix.get(leftX, Math.round(p.y))) {
	        leftX--;
	    }
	    var rightX = Math.round(p.x);
	    while (matrix.get(rightX, Math.round(p.y))) {
	        rightX++;
	    }
	    var x = (leftX + rightX) / 2;
	    var topY = Math.round(p.y);
	    while (matrix.get(Math.round(x), topY)) {
	        topY--;
	    }
	    var bottomY = Math.round(p.y);
	    while (matrix.get(Math.round(x), bottomY)) {
	        bottomY++;
	    }
	    var y = (topY + bottomY) / 2;
	    return { x: x, y: y };
	}
	function locate(matrix) {
	    var finderPatternQuads = [];
	    var activeFinderPatternQuads = [];
	    var alignmentPatternQuads = [];
	    var activeAlignmentPatternQuads = [];
	    var _loop_1 = function (y) {
	        var length_1 = 0;
	        var lastBit = false;
	        var scans = [0, 0, 0, 0, 0];
	        var _loop_2 = function (x) {
	            var v = matrix.get(x, y);
	            if (v === lastBit) {
	                length_1++;
	            }
	            else {
	                scans = [scans[1], scans[2], scans[3], scans[4], length_1];
	                length_1 = 1;
	                lastBit = v;
	                // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b
	                var averageFinderPatternBlocksize = sum(scans) / 7;
	                var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
	                    Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
	                    Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&
	                    Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
	                    Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
	                    !v; // And make sure the current pixel is white since finder patterns are bordered in white
	                // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w
	                var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
	                var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
	                    Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
	                    Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
	                    v; // Is the current pixel black since alignment patterns are bordered in black
	                if (validFinderPattern) {
	                    // Compute the start and end x values of the large center black square
	                    var endX_1 = x - scans[3] - scans[4];
	                    var startX_1 = endX_1 - scans[2];
	                    var line = { startX: startX_1, endX: endX_1, y: y };
	                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
	                    // that line as the starting point.
	                    var matchingQuads = activeFinderPatternQuads.filter(function (q) {
	                        return (startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX) ||
	                            (endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX) ||
	                            (startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&
	                                (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO));
	                    });
	                    if (matchingQuads.length > 0) {
	                        matchingQuads[0].bottom = line;
	                    }
	                    else {
	                        activeFinderPatternQuads.push({ top: line, bottom: line });
	                    }
	                }
	                if (validAlignmentPattern) {
	                    // Compute the start and end x values of the center black square
	                    var endX_2 = x - scans[4];
	                    var startX_2 = endX_2 - scans[3];
	                    var line = { startX: startX_2, y: y, endX: endX_2 };
	                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
	                    // that line as the starting point.
	                    var matchingQuads = activeAlignmentPatternQuads.filter(function (q) {
	                        return (startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX) ||
	                            (endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX) ||
	                            (startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&
	                                (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO));
	                    });
	                    if (matchingQuads.length > 0) {
	                        matchingQuads[0].bottom = line;
	                    }
	                    else {
	                        activeAlignmentPatternQuads.push({ top: line, bottom: line });
	                    }
	                }
	            }
	        };
	        for (var x = -1; x <= matrix.width; x++) {
	            _loop_2(x);
	        }
	        finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) { return q.bottom.y !== y && q.bottom.y - q.top.y >= 2; }));
	        activeFinderPatternQuads = activeFinderPatternQuads.filter(function (q) { return q.bottom.y === y; });
	        alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function (q) { return q.bottom.y !== y; }));
	        activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function (q) { return q.bottom.y === y; });
	    };
	    for (var y = 0; y <= matrix.height; y++) {
	        _loop_1(y);
	    }
	    finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) { return q.bottom.y - q.top.y >= 2; }));
	    alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
	    var finderPatternGroups = finderPatternQuads
	        .filter(function (q) { return q.bottom.y - q.top.y >= 2; }) // All quads must be at least 2px tall since the center square is larger than a block
	        .map(function (q) {
	        var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
	        var y = (q.top.y + q.bottom.y + 1) / 2;
	        if (!matrix.get(Math.round(x), Math.round(y))) {
	            return;
	        }
	        var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];
	        var size = sum(lengths) / lengths.length;
	        var score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);
	        return { score: score, x: x, y: y, size: size };
	    })
	        .filter(function (q) { return !!q; }) // Filter out any rejected quads from above
	        .sort(function (a, b) { return a.score - b.score; })
	        // Now take the top finder pattern options and try to find 2 other options with a similar size.
	        .map(function (point, i, finderPatterns) {
	        if (i > MAX_FINDERPATTERNS_TO_SEARCH) {
	            return null;
	        }
	        var otherPoints = finderPatterns
	            .filter(function (p, ii) { return i !== ii; })
	            .map(function (p) { return ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }); })
	            .sort(function (a, b) { return a.score - b.score; });
	        if (otherPoints.length < 2) {
	            return null;
	        }
	        var score = point.score + otherPoints[0].score + otherPoints[1].score;
	        return { points: [point].concat(otherPoints.slice(0, 2)), score: score };
	    })
	        .filter(function (q) { return !!q; }) // Filter out any rejected finder patterns from above
	        .sort(function (a, b) { return a.score - b.score; });
	    if (finderPatternGroups.length === 0) {
	        return null;
	    }
	    var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]), topRight = _a.topRight, topLeft = _a.topLeft, bottomLeft = _a.bottomLeft;
	    var alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);
	    var result = [];
	    if (alignment) {
	        result.push({
	            alignmentPattern: { x: alignment.alignmentPattern.x, y: alignment.alignmentPattern.y },
	            bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },
	            dimension: alignment.dimension,
	            topLeft: { x: topLeft.x, y: topLeft.y },
	            topRight: { x: topRight.x, y: topRight.y },
	        });
	    }
	    // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account
	    // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression
	    // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We
	    // compute and return the location data for the naively centered points as it is little additional work and allows for multiple
	    // attempts at decoding harder images.
	    var midTopRight = recenterLocation(matrix, topRight);
	    var midTopLeft = recenterLocation(matrix, topLeft);
	    var midBottomLeft = recenterLocation(matrix, bottomLeft);
	    var centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);
	    if (centeredAlignment) {
	        result.push({
	            alignmentPattern: { x: centeredAlignment.alignmentPattern.x, y: centeredAlignment.alignmentPattern.y },
	            bottomLeft: { x: midBottomLeft.x, y: midBottomLeft.y },
	            topLeft: { x: midTopLeft.x, y: midTopLeft.y },
	            topRight: { x: midTopRight.x, y: midTopRight.y },
	            dimension: centeredAlignment.dimension,
	        });
	    }
	    if (result.length === 0) {
	        return null;
	    }
	    return result;
	}
	exports.locate = locate;
	function findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {
	    var _a;
	    // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
	    // We'll use these to help find the alignment pattern but also later when we do the extraction.
	    var dimension;
	    var moduleSize;
	    try {
	        (_a = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _a.dimension, moduleSize = _a.moduleSize);
	    }
	    catch (e) {
	        return null;
	    }
	    // Now find the alignment pattern
	    var bottomRightFinderPattern = {
	        x: topRight.x - topLeft.x + bottomLeft.x,
	        y: topRight.y - topLeft.y + bottomLeft.y,
	    };
	    var modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);
	    var correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);
	    var expectedAlignmentPattern = {
	        x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
	        y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),
	    };
	    var alignmentPatterns = alignmentPatternQuads
	        .map(function (q) {
	        var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
	        var y = (q.top.y + q.bottom.y + 1) / 2;
	        if (!matrix.get(Math.floor(x), Math.floor(y))) {
	            return;
	        }
	        var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];
	        var size = sum(lengths) / lengths.length;
	        var sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);
	        var score = sizeScore + distance({ x: x, y: y }, expectedAlignmentPattern);
	        return { x: x, y: y, score: score };
	    })
	        .filter(function (v) { return !!v; })
	        .sort(function (a, b) { return a.score - b.score; });
	    // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
	    // so we can only use our best guess.
	    var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
	    return { alignmentPattern: alignmentPattern, dimension: dimension };
	}


	/***/ })
	/******/ ])["default"];
	});
	});

	var jsQR$1 = /*@__PURE__*/getDefaultExportFromCjs(jsQR);

	function _createSuper$H(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$H(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$H() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var console_1$2 = globals.console;
	var file$j = "src/components/CameraCapture.svelte"; // (133:0) {:else}

	function create_else_block$2(ctx) {
	  var canvas;
	  var t;
	  var video;
	  var video_hidden_value;
	  var block = {
	    c: function create() {
	      canvas = element("canvas");
	      t = space();
	      video = element("video");
	      attr_dev(canvas, "id", "canvas");
	      attr_dev(canvas, "height", 0);
	      attr_dev(canvas, "width", 0);
	      canvas.hidden =
	      /*showVideo*/
	      ctx[1];
	      attr_dev(canvas, "class", "video-el svelte-bqmzao");
	      add_location(canvas, file$j, 133, 4, 4735);
	      attr_dev(video, "id", "video");
	      video.autoplay = true;
	      video.hidden = video_hidden_value = !
	      /*showVideo*/
	      ctx[1];
	      attr_dev(video, "class", "video-el svelte-bqmzao");
	      add_location(video, file$j, 134, 4, 4826);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, canvas, anchor);
	      insert_dev(target, t, anchor);
	      insert_dev(target, video, anchor);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*showVideo*/
	      2) {
	        prop_dev(canvas, "hidden",
	        /*showVideo*/
	        ctx[1]);
	      }

	      if (dirty &
	      /*showVideo*/
	      2 && video_hidden_value !== (video_hidden_value = !
	      /*showVideo*/
	      ctx[1])) {
	        prop_dev(video, "hidden", video_hidden_value);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(canvas);
	      if (detaching) detach_dev(t);
	      if (detaching) detach_dev(video);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block$2.name,
	    type: "else",
	    source: "(133:0) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (130:0) {#if !cameraGranted}


	function create_if_block$b(ctx) {
	  var seperator;
	  var t;
	  var text_1;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "no-camera-access"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      languageId: "grant-camera-access"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t = space();
	      create_component(text_1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(text_1, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(text_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$b.name,
	    type: "if",
	    source: "(130:0) {#if !cameraGranted}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$G(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var if_block_anchor;
	  var current;
	  var if_block_creators = [create_if_block$b, create_else_block$2];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (!
	    /*cameraGranted*/
	    ctx[0]) return 0;
	    return 1;
	  }

	  current_block_type_index = select_block_type(ctx);
	  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  var block = {
	    c: function create() {
	      if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if_blocks[current_block_type_index].m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if_blocks[current_block_type_index].p(ctx, dirty);
	      } else {
	        group_outros();
	        transition_out(if_blocks[previous_block_index], 1, 1, function () {
	          if_blocks[previous_block_index] = null;
	        });
	        check_outros();
	        if_block = if_blocks[current_block_type_index];

	        if (!if_block) {
	          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	          if_block.c();
	        } else {
	          if_block.p(ctx, dirty);
	        }

	        transition_in(if_block, 1);
	        if_block.m(if_block_anchor.parentNode, if_block_anchor);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if_blocks[current_block_type_index].d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$G.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$G($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("CameraCapture", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var cameraGranted = $$props.cameraGranted;
	  var scannedAddress = $$props.scannedAddress;
	  var videoPreview;
	  var showVideo = true;

	  var setCaptureKeys = function setCaptureKeys() {
	    navigationReload({
	      middleKey: {
	        onClick: captureCameraImage,
	        languageId: "softkey-capture-camera"
	      }
	    });
	  };

	  var setLoadingKeys = function setLoadingKeys() {
	    navigationReload({
	      middleKey: {
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        },
	        languageId: "softkey-capture-scanning"
	      }
	    });
	  };

	  var startRecording = function startRecording() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
	      var video;
	      return regenerator.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.prev = 0;
	              _context3.next = 3;
	              return navigator.mediaDevices.getUserMedia({
	                video: true
	              });

	            case 3:
	              videoPreview = _context3.sent;
	              $$invalidate(1, showVideo = true);
	              video = document.querySelector("#video");
	              video.srcObject = videoPreview;
	              _context3.next = 9;
	              return video.play();

	            case 9:
	              setCaptureKeys();
	              _context3.next = 15;
	              break;

	            case 12:
	              _context3.prev = 12;
	              _context3.t0 = _context3["catch"](0);

	              if (_context3.t0.message === "Permission denied") {
	                $$invalidate(0, cameraGranted = false);
	                pushToast({
	                  languageId: "no-camera-access",
	                  type: "warn"
	                });
	                setSoftwareKeys({
	                  middleKey: {
	                    languageId: "onboard-disclaimer-ok",
	                    onClick: function onClick() {
	                      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	                        return regenerator.wrap(function _callee2$(_context2) {
	                          while (1) {
	                            switch (_context2.prev = _context2.next) {
	                              case 0:
	                                back();

	                              case 1:
	                              case "end":
	                                return _context2.stop();
	                            }
	                          }
	                        }, _callee2);
	                      }));
	                    }
	                  }
	                });
	              } else {
	                back();
	              }

	            case 15:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3, null, [[0, 12]]);
	    }));
	  };

	  var stopRecording = function stopRecording() {
	    var tracks = videoPreview === null || videoPreview === void 0 ? void 0 : videoPreview.getVideoTracks();

	    if (tracks) {
	      tracks.forEach(function (track) {
	        track.stop();
	      });
	    }

	    clearSoftwareKeys();
	  };

	  var captureCameraImage = function captureCameraImage() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
	      var track, imageCapture, frame, canvas, context, imageData;
	      return regenerator.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.prev = 0;
	              clearSoftwareKeys();
	              pushToast({
	                languageId: "softkey-capture-scanning"
	              });
	              $$invalidate(1, showVideo = false);
	              track = videoPreview.getVideoTracks()[0];
	              imageCapture = new ImageCapture(track);
	              _context4.next = 8;
	              return imageCapture.grabFrame();

	            case 8:
	              frame = _context4.sent;
	              canvas = document.querySelector("#canvas"); // set canvas dimensions to video ones to not truncate picture

	              canvas.width = frame.width;
	              canvas.height = frame.height; // copy full video frame into the canvas

	              context = canvas.getContext("2d");
	              context.drawImage(frame, 0, 0, frame.width, frame.height);
	              imageData = context.getImageData(0, 0, frame.width, frame.height);
	              _context4.next = 17;
	              return decodeImage(imageData);

	            case 17:
	              track.stop();
	              _context4.next = 23;
	              break;

	            case 20:
	              _context4.prev = 20;
	              _context4.t0 = _context4["catch"](0);
	              console.log(_context4.t0);

	            case 23:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4, null, [[0, 20]]);
	    }));
	  };

	  var decodeImage = function decodeImage(imageData) {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
	      var code;
	      return regenerator.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.prev = 0;
	              code = jsQR$1(imageData.data, imageData.width, imageData.height);

	              if (!(code && dist.tools.validateAddress(code.data))) {
	                _context5.next = 8;
	                break;
	              }

	              stopRecording();
	              scannedAddress(code.data);
	              pushToast({
	                languageId: "address-scanned",
	                type: "success"
	              });
	              _context5.next = 12;
	              break;

	            case 8:
	              pushToast({
	                languageId: "unable-to-scan"
	              });
	              setCaptureKeys();
	              _context5.next = 12;
	              return startRecording();

	            case 12:
	              _context5.next = 17;
	              break;

	            case 14:
	              _context5.prev = 14;
	              _context5.t0 = _context5["catch"](0);
	              console.log(_context5.t0);

	            case 17:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5, null, [[0, 14]]);
	    }));
	  };

	  onMount(function () {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee7() {
	      return regenerator.wrap(function _callee7$(_context7) {
	        while (1) {
	          switch (_context7.prev = _context7.next) {
	            case 0:
	              setTimeout(function () {
	                return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
	                  return regenerator.wrap(function _callee6$(_context6) {
	                    while (1) {
	                      switch (_context6.prev = _context6.next) {
	                        case 0:
	                          _context6.next = 2;
	                          return startRecording();

	                        case 2:
	                          return _context6.abrupt("return", _context6.sent);

	                        case 3:
	                        case "end":
	                          return _context6.stop();
	                      }
	                    }
	                  }, _callee6);
	                }));
	              }, 200);

	            case 1:
	            case "end":
	              return _context7.stop();
	          }
	        }
	      }, _callee7);
	    }));
	  });
	  onDestroy(function () {
	    stopRecording();
	  });
	  var writable_props = ["cameraGranted", "scannedAddress"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn("<CameraCapture> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("cameraGranted" in $$props) $$invalidate(0, cameraGranted = $$props.cameraGranted);
	    if ("scannedAddress" in $$props) $$invalidate(2, scannedAddress = $$props.scannedAddress);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      ImageCapture: ImageCapture,
	      onDestroy: onDestroy,
	      onMount: onMount,
	      jsQR: jsQR$1,
	      QRCode: jsQR.QRCode,
	      tools: dist.tools,
	      clearSoftwareKeys: clearSoftwareKeys,
	      setSoftwareKeys: setSoftwareKeys,
	      back: back,
	      navigationReload: navigationReload,
	      pushToast: pushToast,
	      Text: Text,
	      Seperator: Seperator,
	      cameraGranted: cameraGranted,
	      scannedAddress: scannedAddress,
	      videoPreview: videoPreview,
	      showVideo: showVideo,
	      setCaptureKeys: setCaptureKeys,
	      setLoadingKeys: setLoadingKeys,
	      startRecording: startRecording,
	      stopRecording: stopRecording,
	      captureCameraImage: captureCameraImage,
	      decodeImage: decodeImage
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("cameraGranted" in $$props) $$invalidate(0, cameraGranted = $$props.cameraGranted);
	    if ("scannedAddress" in $$props) $$invalidate(2, scannedAddress = $$props.scannedAddress);
	    if ("videoPreview" in $$props) videoPreview = $$props.videoPreview;
	    if ("showVideo" in $$props) $$invalidate(1, showVideo = $$props.showVideo);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [cameraGranted, showVideo, scannedAddress];
	}

	var CameraCapture = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(CameraCapture, _SvelteComponentDev);

	  var _super = _createSuper$H(CameraCapture);

	  function CameraCapture(options) {
	    var _this;

	    classCallCheck(this, CameraCapture);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$G, create_fragment$G, safe_not_equal, {
	      cameraGranted: 0,
	      scannedAddress: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "CameraCapture",
	      options: options,
	      id: create_fragment$G.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*cameraGranted*/
	    ctx[0] === undefined && !("cameraGranted" in props)) {
	      console_1$2.warn("<CameraCapture> was created without expected prop 'cameraGranted'");
	    }

	    if (
	    /*scannedAddress*/
	    ctx[2] === undefined && !("scannedAddress" in props)) {
	      console_1$2.warn("<CameraCapture> was created without expected prop 'scannedAddress'");
	    }

	    return _this;
	  }

	  createClass(CameraCapture, [{
	    key: "cameraGranted",
	    get: function get() {
	      throw new Error("<CameraCapture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CameraCapture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "scannedAddress",
	    get: function get() {
	      throw new Error("<CameraCapture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<CameraCapture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return CameraCapture;
	}(SvelteComponentDev);

	function _createSuper$I(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$I(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$I() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var Object_1$1 = globals.Object;

	function create_fragment$H(ctx) {
	  var seperator;
	  var t;
	  var text_1;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "about-project-donate"
	    },
	    $$inline: true
	  });
	  text_1 = new Text({
	    props: {
	      languageId: "about-project-donate-text"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t = space();
	      create_component(text_1.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(text_1, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(text_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(text_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(text_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$H.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$H($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Donate", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletState = $$props.walletState;
	  onMount(function () {
	    return navigationReload({
	      middleKey: {
	        languageId: "about-donate-button",
	        onClick: function onClick() {
	          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	            return regenerator.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    setWalletState(Object.assign(Object.assign({}, walletState), {
	                      sendToAddress: DEFAULT_REP
	                    }));
	                    pushAccountAction("send_address");

	                  case 2:
	                  case "end":
	                    return _context.stop();
	                }
	              }
	            }, _callee);
	          }));
	        }
	      }
	    });
	  });
	  var writable_props = ["walletState"];
	  Object_1$1.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Donate> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("walletState" in $$props) $$invalidate(0, walletState = $$props.walletState);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      Text: Text,
	      setWalletState: setWalletState,
	      DEFAULT_REP: DEFAULT_REP,
	      navigationReload: navigationReload,
	      pushAccountAction: pushAccountAction,
	      onMount: onMount,
	      walletState: walletState
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletState" in $$props) $$invalidate(0, walletState = $$props.walletState);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [walletState];
	}

	var Donate = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Donate, _SvelteComponentDev);

	  var _super = _createSuper$I(Donate);

	  function Donate(options) {
	    var _this;

	    classCallCheck(this, Donate);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$H, create_fragment$H, safe_not_equal, {
	      walletState: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Donate",
	      options: options,
	      id: create_fragment$H.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletState*/
	    ctx[0] === undefined && !("walletState" in props)) {
	      console.warn("<Donate> was created without expected prop 'walletState'");
	    }

	    return _this;
	  }

	  createClass(Donate, [{
	    key: "walletState",
	    get: function get() {
	      throw new Error("<Donate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Donate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Donate;
	}(SvelteComponentDev);

	function _createSuper$J(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$J(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$J() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var Object_1$2 = globals.Object;

	function create_if_block_9$1(ctx) {
	  var donate;
	  var current;
	  donate = new Donate({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(donate.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(donate, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var donate_changes = {};
	      if (dirty &
	      /*walletState*/
	      1) donate_changes.walletState =
	      /*walletState*/
	      ctx[0];
	      donate.$set(donate_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(donate.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(donate.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(donate, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_9$1.name,
	    type: "if",
	    source: "(127:34) ",
	    ctx: ctx
	  });
	  return block;
	} // (125:36) 


	function create_if_block_8$1(ctx) {
	  var settings;
	  var current;
	  settings = new Settings({
	    props: {
	      wallet:
	      /*wallet*/
	      ctx[4],
	      selectedAccount:
	      /*selectedAccount*/
	      ctx[5]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(settings.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(settings, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var settings_changes = {};
	      if (dirty &
	      /*wallet*/
	      16) settings_changes.wallet =
	      /*wallet*/
	      ctx[4];
	      if (dirty &
	      /*selectedAccount*/
	      32) settings_changes.selectedAccount =
	      /*selectedAccount*/
	      ctx[5];
	      settings.$set(settings_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(settings.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(settings.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(settings, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_8$1.name,
	    type: "if",
	    source: "(125:36) ",
	    ctx: ctx
	  });
	  return block;
	} // (123:35) 


	function create_if_block_7$1(ctx) {
	  var receive;
	  var current;
	  receive = new Receive({
	    props: {
	      account:
	      /*selectedAccount*/
	      ctx[5]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(receive.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(receive, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var receive_changes = {};
	      if (dirty &
	      /*selectedAccount*/
	      32) receive_changes.account =
	      /*selectedAccount*/
	      ctx[5];
	      receive.$set(receive_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(receive.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(receive.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(receive, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_7$1.name,
	    type: "if",
	    source: "(123:35) ",
	    ctx: ctx
	  });
	  return block;
	} // (121:46) 


	function create_if_block_6$1(ctx) {
	  var sendmobilenumber;
	  var current;
	  sendmobilenumber = new SendMobileNumber({
	    props: {
	      addressFoundCallback:
	      /*sendToAccount*/
	      ctx[11]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(sendmobilenumber.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(sendmobilenumber, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(sendmobilenumber.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(sendmobilenumber.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(sendmobilenumber, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_6$1.name,
	    type: "if",
	    source: "(121:46) ",
	    ctx: ctx
	  });
	  return block;
	} // (119:40) 


	function create_if_block_5$1(ctx) {
	  var sendbyaddress;
	  var current;
	  sendbyaddress = new Send({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(sendbyaddress.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(sendbyaddress, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var sendbyaddress_changes = {};
	      if (dirty &
	      /*walletState*/
	      1) sendbyaddress_changes.walletState =
	      /*walletState*/
	      ctx[0];
	      sendbyaddress.$set(sendbyaddress_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(sendbyaddress.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(sendbyaddress.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(sendbyaddress, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_5$1.name,
	    type: "if",
	    source: "(119:40) ",
	    ctx: ctx
	  });
	  return block;
	} // (117:35) 


	function create_if_block_4$1(ctx) {
	  var cameracapture;
	  var updating_cameraGranted;
	  var current;

	  function cameracapture_cameraGranted_binding(value) {
	    /*cameracapture_cameraGranted_binding*/
	    ctx[16].call(null, value);
	  }

	  var cameracapture_props = {
	    scannedAddress:
	    /*sendToAccount*/
	    ctx[11]
	  };

	  if (
	  /*cameraGranted*/
	  ctx[3] !== void 0) {
	    cameracapture_props.cameraGranted =
	    /*cameraGranted*/
	    ctx[3];
	  }

	  cameracapture = new CameraCapture({
	    props: cameracapture_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(cameracapture, "cameraGranted", cameracapture_cameraGranted_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(cameracapture.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(cameracapture, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var cameracapture_changes = {};

	      if (!updating_cameraGranted && dirty &
	      /*cameraGranted*/
	      8) {
	        updating_cameraGranted = true;
	        cameracapture_changes.cameraGranted =
	        /*cameraGranted*/
	        ctx[3];
	        add_flush_callback(function () {
	          return updating_cameraGranted = false;
	        });
	      }

	      cameracapture.$set(cameracapture_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(cameracapture.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(cameracapture.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(cameracapture, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4$1.name,
	    type: "if",
	    source: "(117:35) ",
	    ctx: ctx
	  });
	  return block;
	} // (115:32) 


	function create_if_block_3$1(ctx) {
	  var sendselector;
	  var current;
	  sendselector = new SendSelector({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(sendselector.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(sendselector, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(sendselector.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(sendselector.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(sendselector, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3$1.name,
	    type: "if",
	    source: "(115:32) ",
	    ctx: ctx
	  });
	  return block;
	} // (113:54) 


	function create_if_block_2$1(ctx) {
	  var transaction_1;
	  var current;
	  transaction_1 = new Transaction({
	    props: {
	      transaction:
	      /*transaction*/
	      ctx[7],
	      sendFunction:
	      /*sendToAccount*/
	      ctx[11]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(transaction_1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(transaction_1, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var transaction_1_changes = {};
	      if (dirty &
	      /*transaction*/
	      128) transaction_1_changes.transaction =
	      /*transaction*/
	      ctx[7];
	      transaction_1.$set(transaction_1_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(transaction_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(transaction_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(transaction_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2$1.name,
	    type: "if",
	    source: "(113:54) ",
	    ctx: ctx
	  });
	  return block;
	} // (110:56) 


	function create_if_block_1$2(ctx) {
	  var seperator;
	  var t;
	  var transactions_1;
	  var current;
	  seperator = new Seperator({
	    props: {
	      languageId: "transactions",
	      primaryText:
	      /*selectedAccount*/
	      ctx[5].alias
	    },
	    $$inline: true
	  });
	  transactions_1 = new Transactions({
	    props: {
	      transactions:
	      /*transactions*/
	      ctx[6]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t = space();
	      create_component(transactions_1.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(transactions_1, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var seperator_changes = {};
	      if (dirty &
	      /*selectedAccount*/
	      32) seperator_changes.primaryText =
	      /*selectedAccount*/
	      ctx[5].alias;
	      seperator.$set(seperator_changes);
	      var transactions_1_changes = {};
	      if (dirty &
	      /*transactions*/
	      64) transactions_1_changes.transactions =
	      /*transactions*/
	      ctx[6];
	      transactions_1.$set(transactions_1_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(transactions_1.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(transactions_1.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(transactions_1, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$2.name,
	    type: "if",
	    source: "(110:56) ",
	    ctx: ctx
	  });
	  return block;
	} // (101:4) {#if action === 'menu'}


	function create_if_block$c(ctx) {
	  var seperator;
	  var t;
	  var list;
	  var current;
	  seperator = new Seperator({
	    props: {
	      primaryText:
	      /*accountTitle*/
	      ctx[8](
	      /*selectedAccount*/
	      ctx[5])
	    },
	    $$inline: true
	  });
	  list = new List({
	    props: {
	      $$slots: {
	        "default": [create_default_slot_1$5]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(seperator.$$.fragment);
	      t = space();
	      create_component(list.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(seperator, target, anchor);
	      insert_dev(target, t, anchor);
	      mount_component(list, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var seperator_changes = {};
	      if (dirty &
	      /*selectedAccount*/
	      32) seperator_changes.primaryText =
	      /*accountTitle*/
	      ctx[8](
	      /*selectedAccount*/
	      ctx[5]);
	      seperator.$set(seperator_changes);
	      var list_changes = {};

	      if (dirty &
	      /*$$scope*/
	      1048576) {
	        list_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      list.$set(list_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(seperator.$$.fragment, local);
	      transition_in(list.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(seperator.$$.fragment, local);
	      transition_out(list.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(seperator, detaching);
	      if (detaching) detach_dev(t);
	      destroy_component(list, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$c.name,
	    type: "if",
	    source: "(101:4) {#if action === 'menu'}",
	    ctx: ctx
	  });
	  return block;
	} // (103:8) <List>


	function create_default_slot_1$5(ctx) {
	  var primary0;
	  var t0;
	  var primary1;
	  var t1;
	  var primary2;
	  var t2;
	  var primary3;
	  var t3;
	  var primary4;
	  var current;
	  primary0 = new Primary({
	    props: {
	      primaryLanguageId: "transactions"
	    },
	    $$inline: true
	  });
	  primary0.$on("click",
	  /*showTransactions*/
	  ctx[9]);
	  primary1 = new Primary({
	    props: {
	      primaryLanguageId: "send"
	    },
	    $$inline: true
	  });
	  primary1.$on("click",
	  /*click_handler*/
	  ctx[12]);
	  primary2 = new Primary({
	    props: {
	      primaryLanguageId: "receive"
	    },
	    $$inline: true
	  });
	  primary2.$on("click",
	  /*click_handler_1*/
	  ctx[13]);
	  primary3 = new Primary({
	    props: {
	      primaryLanguageId: "settings"
	    },
	    $$inline: true
	  });
	  primary3.$on("click",
	  /*click_handler_2*/
	  ctx[14]);
	  primary4 = new Primary({
	    props: {
	      primaryLanguageId: "about-donate-button"
	    },
	    $$inline: true
	  });
	  primary4.$on("click",
	  /*click_handler_3*/
	  ctx[15]);
	  var block = {
	    c: function create() {
	      create_component(primary0.$$.fragment);
	      t0 = space();
	      create_component(primary1.$$.fragment);
	      t1 = space();
	      create_component(primary2.$$.fragment);
	      t2 = space();
	      create_component(primary3.$$.fragment);
	      t3 = space();
	      create_component(primary4.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(primary0, target, anchor);
	      insert_dev(target, t0, anchor);
	      mount_component(primary1, target, anchor);
	      insert_dev(target, t1, anchor);
	      mount_component(primary2, target, anchor);
	      insert_dev(target, t2, anchor);
	      mount_component(primary3, target, anchor);
	      insert_dev(target, t3, anchor);
	      mount_component(primary4, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(primary0.$$.fragment, local);
	      transition_in(primary1.$$.fragment, local);
	      transition_in(primary2.$$.fragment, local);
	      transition_in(primary3.$$.fragment, local);
	      transition_in(primary4.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(primary0.$$.fragment, local);
	      transition_out(primary1.$$.fragment, local);
	      transition_out(primary2.$$.fragment, local);
	      transition_out(primary3.$$.fragment, local);
	      transition_out(primary4.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(primary0, detaching);
	      if (detaching) detach_dev(t0);
	      destroy_component(primary1, detaching);
	      if (detaching) detach_dev(t1);
	      destroy_component(primary2, detaching);
	      if (detaching) detach_dev(t2);
	      destroy_component(primary3, detaching);
	      if (detaching) detach_dev(t3);
	      destroy_component(primary4, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot_1$5.name,
	    type: "slot",
	    source: "(103:8) <List>",
	    ctx: ctx
	  });
	  return block;
	} // (100:0) <Content titleKey="account" fullscreen={fullscreen && cameraGranted}>


	function create_default_slot$j(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var if_block_anchor;
	  var current;
	  var if_block_creators = [create_if_block$c, create_if_block_1$2, create_if_block_2$1, create_if_block_3$1, create_if_block_4$1, create_if_block_5$1, create_if_block_6$1, create_if_block_7$1, create_if_block_8$1, create_if_block_9$1];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*action*/
	    ctx[1] === "menu") return 0;
	    if (
	    /*action*/
	    ctx[1] === "transactions" &&
	    /*transactions*/
	    ctx[6]) return 1;
	    if (
	    /*action*/
	    ctx[1] === "transaction" &&
	    /*transaction*/
	    ctx[7]) return 2;
	    if (
	    /*action*/
	    ctx[1] === "send") return 3;
	    if (
	    /*action*/
	    ctx[1] === "send_qr") return 4;
	    if (
	    /*action*/
	    ctx[1] === "send_address") return 5;
	    if (
	    /*action*/
	    ctx[1] === "send_mobile_number") return 6;
	    if (
	    /*action*/
	    ctx[1] === "receive") return 7;
	    if (
	    /*action*/
	    ctx[1] === "settings") return 8;
	    if (
	    /*action*/
	    ctx[1] === "donate") return 9;
	    return -1;
	  }

	  if (~(current_block_type_index = select_block_type(ctx))) {
	    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  }

	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    m: function mount(target, anchor) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].m(target, anchor);
	      }

	      insert_dev(target, if_block_anchor, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if (~current_block_type_index) {
	          if_blocks[current_block_type_index].p(ctx, dirty);
	        }
	      } else {
	        if (if_block) {
	          group_outros();
	          transition_out(if_blocks[previous_block_index], 1, 1, function () {
	            if_blocks[previous_block_index] = null;
	          });
	          check_outros();
	        }

	        if (~current_block_type_index) {
	          if_block = if_blocks[current_block_type_index];

	          if (!if_block) {
	            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	            if_block.c();
	          } else {
	            if_block.p(ctx, dirty);
	          }

	          transition_in(if_block, 1);
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        } else {
	          if_block = null;
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].d(detaching);
	      }

	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$j.name,
	    type: "slot",
	    source: "(100:0) <Content titleKey=\\\"account\\\" fullscreen={fullscreen && cameraGranted}>",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$I(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "account",
	      fullscreen:
	      /*fullscreen*/
	      ctx[2] &&
	      /*cameraGranted*/
	      ctx[3],
	      $$slots: {
	        "default": [create_default_slot$j]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};
	      if (dirty &
	      /*fullscreen, cameraGranted*/
	      12) content_changes.fullscreen =
	      /*fullscreen*/
	      ctx[2] &&
	      /*cameraGranted*/
	      ctx[3];

	      if (dirty &
	      /*$$scope, selectedAccount, action, transactions, transaction, cameraGranted, walletState, wallet*/
	      1048827) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$I.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$I($$self, $$props, $$invalidate) {
	  var wallet;
	  var selectedAccount;
	  var transactions;
	  var transaction;
	  var sendToAddress;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Account", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletState = $$props.walletState;
	  var action = $$props.action;
	  var _$$props$fullscreen = $$props.fullscreen,
	      fullscreen = _$$props$fullscreen === void 0 ? false : _$$props$fullscreen;
	  var cameraGranted = true;

	  var accountTitle = function accountTitle(account) {
	    if (account === undefined) {
	      return "";
	    } else if (account && account.balance) {
	      return "".concat(account.alias || "", " ").concat(rawToReadable(account.balance), " Nano");
	    } else {
	      return "".concat(account.alias || "");
	    }
	  };

	  var showTransactions = function showTransactions() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee2() {
	      return regenerator.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return load({
	                languageId: "loading-transactions",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	                    return regenerator.wrap(function _callee$(_context) {
	                      while (1) {
	                        switch (_context.prev = _context.next) {
	                          case 0:
	                            _context.next = 2;
	                            return updateWalletState(selectedAccount, wallet);

	                          case 2:
	                            pushAccountAction("transactions");

	                          case 3:
	                          case "end":
	                            return _context.stop();
	                        }
	                      }
	                    }, _callee);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));
	  };

	  var triggerRefresh = function triggerRefresh() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee4() {
	      return regenerator.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return load({
	                languageId: "loading-refresh",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee3() {
	                    return regenerator.wrap(function _callee3$(_context3) {
	                      while (1) {
	                        switch (_context3.prev = _context3.next) {
	                          case 0:
	                            return _context3.abrupt("return", updateWalletState(selectedAccount, wallet));

	                          case 1:
	                          case "end":
	                            return _context3.stop();
	                        }
	                      }
	                    }, _callee3);
	                  }));
	                }
	              });

	            case 2:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4);
	    }));
	  };

	  var showSettings = function showSettings() {
	    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee6() {
	      return regenerator.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return load({
	                languageId: "loading-settings",
	                load: function load() {
	                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee5() {
	                    return regenerator.wrap(function _callee5$(_context5) {
	                      while (1) {
	                        switch (_context5.prev = _context5.next) {
	                          case 0:
	                            pushAccountAction("settings");

	                          case 1:
	                          case "end":
	                            return _context5.stop();
	                        }
	                      }
	                    }, _callee5);
	                  }));
	                },
	                onError: function onError() {
	                  pushToast({
	                    languageId: "unable-to-load-representative"
	                  });
	                }
	              });

	            case 2:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6);
	    }));
	  };

	  var sendToAccount = function sendToAccount(address) {
	    setWalletState(Object.assign(Object.assign({}, walletState), {
	      sendToAddress: address
	    }));
	    pushAccountAction("send_address");
	  };

	  afterUpdate(function () {
	    if (action === "menu") {
	      navigationReload({
	        leftKey: {
	          languageId: "update-button",
	          onClick: triggerRefresh
	        },
	        middleKey: SOFT_KEY_SELECT,
	        rightKey: {
	          languageId: "menu",
	          onClick: function onClick() {
	            return __awaiter(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee7() {
	              return regenerator.wrap(function _callee7$(_context7) {
	                while (1) {
	                  switch (_context7.prev = _context7.next) {
	                    case 0:
	                      return _context7.abrupt("return", pushMenu("menu"));

	                    case 1:
	                    case "end":
	                      return _context7.stop();
	                  }
	                }
	              }, _callee7);
	            }));
	          }
	        }
	      });
	    }
	  });
	  var writable_props = ["walletState", "action", "fullscreen"];
	  Object_1$2.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Account> was created with unknown prop '".concat(key, "'"));
	  });

	  var click_handler = function click_handler() {
	    return pushAccountAction("send");
	  };

	  var click_handler_1 = function click_handler_1() {
	    return pushAccountAction("receive");
	  };

	  var click_handler_2 = function click_handler_2() {
	    return showSettings();
	  };

	  var click_handler_3 = function click_handler_3() {
	    return pushAccountAction("donate");
	  };

	  function cameracapture_cameraGranted_binding(value) {
	    cameraGranted = value;
	    $$invalidate(3, cameraGranted);
	  }

	  $$self.$$set = function ($$props) {
	    if ("walletState" in $$props) $$invalidate(0, walletState = $$props.walletState);
	    if ("action" in $$props) $$invalidate(1, action = $$props.action);
	    if ("fullscreen" in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      Seperator: Seperator,
	      List: List,
	      Primary: Primary,
	      Transactions: Transactions,
	      Receive: Receive,
	      navigationReload: navigationReload,
	      pushAccountAction: pushAccountAction,
	      pushToast: pushToast,
	      Settings: Settings,
	      SendByAddress: Send,
	      SendMobileNumber: SendMobileNumber,
	      afterUpdate: afterUpdate,
	      onMount: onMount,
	      load: load,
	      setWalletState: setWalletState,
	      updateWalletState: updateWalletState,
	      SendSelector: SendSelector,
	      Content: Content,
	      Transaction: Transaction,
	      CameraCapture: CameraCapture,
	      pushMenu: pushMenu,
	      Donate: Donate,
	      SOFT_KEY_SELECT: SOFT_KEY_SELECT,
	      rawToReadable: rawToReadable,
	      walletState: walletState,
	      action: action,
	      fullscreen: fullscreen,
	      cameraGranted: cameraGranted,
	      accountTitle: accountTitle,
	      showTransactions: showTransactions,
	      triggerRefresh: triggerRefresh,
	      showSettings: showSettings,
	      sendToAccount: sendToAccount,
	      wallet: wallet,
	      selectedAccount: selectedAccount,
	      transactions: transactions,
	      transaction: transaction,
	      sendToAddress: sendToAddress
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletState" in $$props) $$invalidate(0, walletState = $$props.walletState);
	    if ("action" in $$props) $$invalidate(1, action = $$props.action);
	    if ("fullscreen" in $$props) $$invalidate(2, fullscreen = $$props.fullscreen);
	    if ("cameraGranted" in $$props) $$invalidate(3, cameraGranted = $$props.cameraGranted);
	    if ("wallet" in $$props) $$invalidate(4, wallet = $$props.wallet);
	    if ("selectedAccount" in $$props) $$invalidate(5, selectedAccount = $$props.selectedAccount);
	    if ("transactions" in $$props) $$invalidate(6, transactions = $$props.transactions);
	    if ("transaction" in $$props) $$invalidate(7, transaction = $$props.transaction);
	    if ("sendToAddress" in $$props) sendToAddress = $$props.sendToAddress;
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*walletState*/
	    1) {
	       $$invalidate(4, wallet = walletState.wallet);
	    }

	    if ($$self.$$.dirty &
	    /*walletState*/
	    1) {
	       $$invalidate(5, selectedAccount = walletState.account);
	    }

	    if ($$self.$$.dirty &
	    /*walletState*/
	    1) {
	       $$invalidate(6, transactions = walletState.transactions);
	    }

	    if ($$self.$$.dirty &
	    /*walletState*/
	    1) {
	       $$invalidate(7, transaction = walletState.transaction);
	    }

	    if ($$self.$$.dirty &
	    /*walletState*/
	    1) {
	       sendToAddress = walletState.sendToAddress;
	    }
	  };

	  return [walletState, action, fullscreen, cameraGranted, wallet, selectedAccount, transactions, transaction, accountTitle, showTransactions, showSettings, sendToAccount, click_handler, click_handler_1, click_handler_2, click_handler_3, cameracapture_cameraGranted_binding];
	}

	var Account = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Account, _SvelteComponentDev);

	  var _super = _createSuper$J(Account);

	  function Account(options) {
	    var _this;

	    classCallCheck(this, Account);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$I, create_fragment$I, safe_not_equal, {
	      walletState: 0,
	      action: 1,
	      fullscreen: 2
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Account",
	      options: options,
	      id: create_fragment$I.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletState*/
	    ctx[0] === undefined && !("walletState" in props)) {
	      console.warn("<Account> was created without expected prop 'walletState'");
	    }

	    if (
	    /*action*/
	    ctx[1] === undefined && !("action" in props)) {
	      console.warn("<Account> was created without expected prop 'action'");
	    }

	    return _this;
	  }

	  createClass(Account, [{
	    key: "walletState",
	    get: function get() {
	      throw new Error("<Account>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Account>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "action",
	    get: function get() {
	      throw new Error("<Account>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Account>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "fullscreen",
	    get: function get() {
	      throw new Error("<Account>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<Account>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return Account;
	}(SvelteComponentDev);

	function _createSuper$K(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$K(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$K() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var file$k = "src/view/Splash.svelte";

	function create_fragment$J(ctx) {
	  var div;
	  var title;
	  var t;
	  var img;
	  var img_src_value;
	  var current;
	  title = new Title({
	    props: {
	      languageId: "title"
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      div = element("div");
	      create_component(title.$$.fragment);
	      t = space();
	      img = element("img");
	      if (img.src !== (img_src_value = "/assets/icons/kaiak_112.png")) attr_dev(img, "src", img_src_value);
	      add_location(img, file$k, 17, 4, 457);
	      attr_dev(div, "class", "image svelte-1dcqf4l");
	      add_location(div, file$k, 15, 0, 401);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      mount_component(title, div, null);
	      append_dev(div, t);
	      append_dev(div, img);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(title.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(title.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      destroy_component(title);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$J.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$J($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("Splash", slots, []);
	  onMount(function () {
	    return navigationReload();
	  });
	  var writable_props = [];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<Splash> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$capture_state = function () {
	    return {
	      Title: Title,
	      navigationReload: navigationReload,
	      onMount: onMount
	    };
	  };

	  return [];
	}

	var Splash = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(Splash, _SvelteComponentDev);

	  var _super = _createSuper$K(Splash);

	  function Splash(options) {
	    var _this;

	    classCallCheck(this, Splash);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$J, create_fragment$J, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Splash",
	      options: options,
	      id: create_fragment$J.name
	    });
	    return _this;
	  }

	  return Splash;
	}(SvelteComponentDev);

	function _createSuper$L(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$L(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$L() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var Object_1$3 = globals.Object;

	function create_default_slot$k(ctx) {
	  var numberinput;
	  var updating_value;
	  var current;

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[2].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "mobile-number-label",
	    placeholderLanguage: "mobile-number-label"
	  };

	  if (
	  /*inputMobileNumber*/
	  ctx[0] !== void 0) {
	    numberinput_props.value =
	    /*inputMobileNumber*/
	    ctx[0];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(numberinput.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(numberinput, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var numberinput_changes = {};

	      if (!updating_value && dirty &
	      /*inputMobileNumber*/
	      1) {
	        updating_value = true;
	        numberinput_changes.value =
	        /*inputMobileNumber*/
	        ctx[0];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(numberinput, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$k.name,
	    type: "slot",
	    source: "(53:0) <Content titleKey=\\\"set-mobile-number-text\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$K(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "set-mobile-number-text",
	      $$slots: {
	        "default": [create_default_slot$k]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, inputMobileNumber*/
	      65) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$K.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$K($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("SetMobileNumber", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletState = $$props.walletState;
	  var inputMobileNumber;

	  function sendOtp() {
	    return __awaiter(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      var verifyResponse;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.prev = 0;
	              _context.next = 3;
	              return verifyMobileNumber(inputMobileNumber);

	            case 3:
	              verifyResponse = _context.sent;

	              if (verifyResponse) {
	                setWalletState(Object.assign(Object.assign({}, walletState), {
	                  mobileNumberToVerify: inputMobileNumber
	                }));
	              } else {
	                pushToast({
	                  languageId: "otp-send-failed"
	                });
	              }

	              _context.next = 10;
	              break;

	            case 7:
	              _context.prev = 7;
	              _context.t0 = _context["catch"](0);
	              pushToast({
	                languageId: "otp-send-failed"
	              });

	            case 10:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[0, 7]]);
	    }));
	  }

	  var softwareKeys = function softwareKeys(disabledOtp) {
	    return {
	      middleKey: {
	        languageId: "send-otp",
	        onClick: sendOtp,
	        disabled: disabledOtp
	      }
	    };
	  };

	  onMount(function () {
	    return navigationReload(softwareKeys(true));
	  });
	  var writable_props = ["walletState"];
	  Object_1$3.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<SetMobileNumber> was created with unknown prop '".concat(key, "'"));
	  });

	  function numberinput_value_binding(value) {
	    inputMobileNumber = value;
	    $$invalidate(0, inputMobileNumber);
	  }

	  $$self.$$set = function ($$props) {
	    if ("walletState" in $$props) $$invalidate(1, walletState = $$props.walletState);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      phone: phone,
	      onMount: onMount,
	      Content: Content,
	      navigationReload: navigationReload,
	      pushToast: pushToast,
	      NumberInput: NumberInput,
	      verifyMobileNumber: verifyMobileNumber,
	      setSoftwareKeys: setSoftwareKeys,
	      setWalletState: setWalletState,
	      walletState: walletState,
	      inputMobileNumber: inputMobileNumber,
	      sendOtp: sendOtp,
	      softwareKeys: softwareKeys
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletState" in $$props) $$invalidate(1, walletState = $$props.walletState);
	    if ("inputMobileNumber" in $$props) $$invalidate(0, inputMobileNumber = $$props.inputMobileNumber);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*inputMobileNumber*/
	    1) {
	       {
	        var valid = phone(inputMobileNumber)[0] !== undefined;
	        setSoftwareKeys(softwareKeys(!valid));
	      }
	    }
	  };

	  return [inputMobileNumber, walletState, numberinput_value_binding];
	}

	var SetMobileNumber = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(SetMobileNumber, _SvelteComponentDev);

	  var _super = _createSuper$L(SetMobileNumber);

	  function SetMobileNumber(options) {
	    var _this;

	    classCallCheck(this, SetMobileNumber);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$K, create_fragment$K, safe_not_equal, {
	      walletState: 1
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "SetMobileNumber",
	      options: options,
	      id: create_fragment$K.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletState*/
	    ctx[1] === undefined && !("walletState" in props)) {
	      console.warn("<SetMobileNumber> was created without expected prop 'walletState'");
	    }

	    return _this;
	  }

	  createClass(SetMobileNumber, [{
	    key: "walletState",
	    get: function get() {
	      throw new Error("<SetMobileNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<SetMobileNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return SetMobileNumber;
	}(SvelteComponentDev);

	function _createSuper$M(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$M(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$M() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var Object_1$4 = globals.Object;
	var file$l = "src/view/VerifyOtp.svelte"; // (52:0) <Content titleKey="verify-otp-text" title="Number will be linked">

	function create_default_slot$l(ctx) {
	  var numberinput;
	  var updating_value;
	  var t0;
	  var br;
	  var t1;
	  var p;
	  var t2;
	  var t3;
	  var t4;
	  var t5;
	  var t6;
	  var t7_value =
	  /*walletState*/
	  ctx[0].mobileNumberToVerify + "";
	  var t7;
	  var current;

	  function numberinput_value_binding(value) {
	    /*numberinput_value_binding*/
	    ctx[4].call(null, value);
	  }

	  var numberinput_props = {
	    languageId: "otp-label",
	    placeholderLanguage: "otp-label"
	  };

	  if (
	  /*otp*/
	  ctx[1] !== void 0) {
	    numberinput_props.value =
	    /*otp*/
	    ctx[1];
	  }

	  numberinput = new NumberInput({
	    props: numberinput_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind(numberinput, "value", numberinput_value_binding);
	  });
	  var block = {
	    c: function create() {
	      create_component(numberinput.$$.fragment);
	      t0 = space();
	      br = element("br");
	      t1 = space();
	      p = element("p");
	      t2 = text("Account ");
	      t3 = text(
	      /*alias*/
	      ctx[2]);
	      t4 = text("(");
	      t5 = text(
	      /*address*/
	      ctx[3]);
	      t6 = text(") will be linked with ");
	      t7 = text(t7_value);
	      add_location(br, file$l, 53, 4, 2421);
	      add_location(p, file$l, 54, 4, 2432);
	    },
	    m: function mount(target, anchor) {
	      mount_component(numberinput, target, anchor);
	      insert_dev(target, t0, anchor);
	      insert_dev(target, br, anchor);
	      insert_dev(target, t1, anchor);
	      insert_dev(target, p, anchor);
	      append_dev(p, t2);
	      append_dev(p, t3);
	      append_dev(p, t4);
	      append_dev(p, t5);
	      append_dev(p, t6);
	      append_dev(p, t7);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var numberinput_changes = {};

	      if (!updating_value && dirty &
	      /*otp*/
	      2) {
	        updating_value = true;
	        numberinput_changes.value =
	        /*otp*/
	        ctx[1];
	        add_flush_callback(function () {
	          return updating_value = false;
	        });
	      }

	      numberinput.$set(numberinput_changes);
	      if ((!current || dirty &
	      /*walletState*/
	      1) && t7_value !== (t7_value =
	      /*walletState*/
	      ctx[0].mobileNumberToVerify + "")) set_data_dev(t7, t7_value);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(numberinput.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(numberinput.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(numberinput, detaching);
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(br);
	      if (detaching) detach_dev(t1);
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$l.name,
	    type: "slot",
	    source: "(52:0) <Content titleKey=\\\"verify-otp-text\\\" title=\\\"Number will be linked\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$L(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "verify-otp-text",
	      title: "Number will be linked",
	      $$slots: {
	        "default": [create_default_slot$l]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var content_changes = {};

	      if (dirty &
	      /*$$scope, walletState, otp*/
	      259) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$L.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$L($$self, $$props, $$invalidate) {
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("VerifyOtp", slots, []);

	  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }

	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }

	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }

	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };

	  var walletState = $$props.walletState;
	  var _walletState$wallet$a = walletState.wallet.accounts[0],
	      alias = _walletState$wallet$a.alias,
	      address = _walletState$wallet$a.address;
	  var otp;

	  function verifyOtp() {
	    return __awaiter(this, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
	      var saveNumberResp;
	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.prev = 0;
	              _context.next = 3;
	              return saveNumberAndAddress(walletState.mobileNumberToVerify, otp, address);

	            case 3:
	              saveNumberResp = _context.sent;

	              if (!saveNumberResp) {
	                _context.next = 10;
	                break;
	              }

	              _context.next = 7;
	              return setMobileNumber(walletState.mobileNumberToVerify);

	            case 7:
	              //  Update wallet state
	              setWalletState(Object.assign(Object.assign({}, walletState), {
	                mobileNumber: walletState.mobileNumberToVerify,
	                mobileNumberToVerify: undefined
	              }));
	              _context.next = 11;
	              break;

	            case 10:
	              pushToast({
	                languageId: "otp-verification-failed"
	              });

	            case 11:
	              _context.next = 16;
	              break;

	            case 13:
	              _context.prev = 13;
	              _context.t0 = _context["catch"](0);
	              pushToast({
	                languageId: "otp-verification-failed"
	              });

	            case 16:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[0, 13]]);
	    }));
	  }

	  var softwareKeys = function softwareKeys() {
	    return {
	      middleKey: {
	        languageId: "verify-otp",
	        onClick: verifyOtp
	      }
	    };
	  };

	  onMount(function () {
	    return navigationReload(softwareKeys());
	  });
	  var writable_props = ["walletState"];
	  Object_1$4.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<VerifyOtp> was created with unknown prop '".concat(key, "'"));
	  });

	  function numberinput_value_binding(value) {
	    otp = value;
	    $$invalidate(1, otp);
	  }

	  $$self.$$set = function ($$props) {
	    if ("walletState" in $$props) $$invalidate(0, walletState = $$props.walletState);
	  };

	  $$self.$capture_state = function () {
	    return {
	      __awaiter: __awaiter,
	      onMount: onMount,
	      Content: Content,
	      navigationReload: navigationReload,
	      pushToast: pushToast,
	      setWalletState: setWalletState,
	      setMobileNumber: setMobileNumber,
	      NumberInput: NumberInput,
	      saveNumberAndAddress: saveNumberAndAddress,
	      walletState: walletState,
	      alias: alias,
	      address: address,
	      otp: otp,
	      verifyOtp: verifyOtp,
	      softwareKeys: softwareKeys
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
	    if ("walletState" in $$props) $$invalidate(0, walletState = $$props.walletState);
	    if ("otp" in $$props) $$invalidate(1, otp = $$props.otp);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  return [walletState, otp, alias, address, numberinput_value_binding];
	}

	var VerifyOtp = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(VerifyOtp, _SvelteComponentDev);

	  var _super = _createSuper$M(VerifyOtp);

	  function VerifyOtp(options) {
	    var _this;

	    classCallCheck(this, VerifyOtp);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$L, create_fragment$L, safe_not_equal, {
	      walletState: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "VerifyOtp",
	      options: options,
	      id: create_fragment$L.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*walletState*/
	    ctx[0] === undefined && !("walletState" in props)) {
	      console.warn("<VerifyOtp> was created without expected prop 'walletState'");
	    }

	    return _this;
	  }

	  createClass(VerifyOtp, [{
	    key: "walletState",
	    get: function get() {
	      throw new Error("<VerifyOtp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<VerifyOtp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return VerifyOtp;
	}(SvelteComponentDev);

	function _createSuper$N(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$N(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$N() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var console_1$3 = globals.console;
	var file$m = "src/App.svelte"; // (73:2) {:else}

	function create_else_block$3(ctx) {
	  var current_block_type_index;
	  var if_block;
	  var t;
	  var softwarekeys;
	  var current;
	  var if_block_creators = [create_if_block_1$3, create_if_block_2$2, create_if_block_3$2, create_if_block_4$2, create_if_block_5$2, create_if_block_6$2, create_if_block_7$2, create_if_block_8$2, create_if_block_9$2, create_if_block_10];
	  var if_blocks = [];

	  function select_block_type_1(ctx, dirty) {
	    var _ctx$, _ctx$2, _ctx$3, _ctx$4, _ctx$5;

	    if (
	    /*state*/
	    ctx[1] === undefined ||
	    /*state*/
	    ctx[1].menu === "splash") return 0;
	    if (
	    /*state*/
	    ctx[1].menu === "unlock") return 1;
	    if (
	    /*walletState*/
	    (_ctx$ = ctx[3]) !== null && _ctx$ !== void 0 && _ctx$.mobileNumberToVerify) return 2;
	    if (
	    /*walletState*/
	    ((_ctx$2 = ctx[3]) === null || _ctx$2 === void 0 ? void 0 : _ctx$2.mobileNumber) === undefined) return 3;
	    if (
	    /*state*/
	    ctx[1].menu === "accounts" &&
	    /*walletState*/
	    (_ctx$3 = ctx[3]) !== null && _ctx$3 !== void 0 && _ctx$3.wallet) return 4;
	    if (
	    /*state*/
	    ctx[1].menu === "account" &&
	    /*walletState*/
	    (_ctx$4 = ctx[3]) !== null && _ctx$4 !== void 0 && _ctx$4.wallet &&
	    /*walletState*/
	    (_ctx$5 = ctx[3]) !== null && _ctx$5 !== void 0 && _ctx$5.account) return 5;
	    if (
	    /*state*/
	    ctx[1].menu === "onboard") return 6;
	    if (
	    /*state*/
	    ctx[1].menu === "setup" &&
	    /*state*/
	    ctx[1].setupAction) return 7;
	    if (
	    /*state*/
	    ctx[1].menu === "menu") return 8;
	    if (
	    /*state*/
	    ctx[1].menu === "about") return 9;
	    return -1;
	  }

	  if (~(current_block_type_index = select_block_type_1(ctx))) {
	    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  }

	  softwarekeys = new SoftwareKeys({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      t = space();
	      create_component(softwarekeys.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].m(target, anchor);
	      }

	      insert_dev(target, t, anchor);
	      mount_component(softwarekeys, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type_1(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if (~current_block_type_index) {
	          if_blocks[current_block_type_index].p(ctx, dirty);
	        }
	      } else {
	        if (if_block) {
	          group_outros();
	          transition_out(if_blocks[previous_block_index], 1, 1, function () {
	            if_blocks[previous_block_index] = null;
	          });
	          check_outros();
	        }

	        if (~current_block_type_index) {
	          if_block = if_blocks[current_block_type_index];

	          if (!if_block) {
	            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	            if_block.c();
	          } else {
	            if_block.p(ctx, dirty);
	          }

	          transition_in(if_block, 1);
	          if_block.m(t.parentNode, t);
	        } else {
	          if_block = null;
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      transition_in(softwarekeys.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      transition_out(softwarekeys.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (~current_block_type_index) {
	        if_blocks[current_block_type_index].d(detaching);
	      }

	      if (detaching) detach_dev(t);
	      destroy_component(softwarekeys, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block$3.name,
	    type: "else",
	    source: "(73:2) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (69:2) {#if loader}


	function create_if_block$d(ctx) {
	  var content;
	  var current;
	  content = new Content({
	    props: {
	      titleKey: "loading",
	      $$slots: {
	        "default": [create_default_slot$m]
	      },
	      $$scope: {
	        ctx: ctx
	      }
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(content.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(content, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var content_changes = {};

	      if (dirty &
	      /*$$scope, loader*/
	      1028) {
	        content_changes.$$scope = {
	          dirty: dirty,
	          ctx: ctx
	        };
	      }

	      content.$set(content_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(content.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(content.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(content, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$d.name,
	    type: "if",
	    source: "(69:2) {#if loader}",
	    ctx: ctx
	  });
	  return block;
	} // (92:36) 


	function create_if_block_10(ctx) {
	  var about;
	  var current;
	  about = new About({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[3],
	      version:
	      /*version*/
	      ctx[0]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(about.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(about, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var about_changes = {};
	      if (dirty &
	      /*walletState*/
	      8) about_changes.walletState =
	      /*walletState*/
	      ctx[3];
	      if (dirty &
	      /*version*/
	      1) about_changes.version =
	      /*version*/
	      ctx[0];
	      about.$set(about_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(about.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(about.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(about, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_10.name,
	    type: "if",
	    source: "(92:36) ",
	    ctx: ctx
	  });
	  return block;
	} // (90:35) 


	function create_if_block_9$2(ctx) {
	  var menu;
	  var current;
	  menu = new Menu({
	    props: {
	      wallet:
	      /*walletState*/
	      ctx[3]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(menu.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(menu, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var menu_changes = {};
	      if (dirty &
	      /*walletState*/
	      8) menu_changes.wallet =
	      /*walletState*/
	      ctx[3];
	      menu.$set(menu_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(menu.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(menu.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(menu, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_9$2.name,
	    type: "if",
	    source: "(90:35) ",
	    ctx: ctx
	  });
	  return block;
	} // (88:57) 


	function create_if_block_8$2(ctx) {
	  var setup;
	  var current;
	  setup = new Setup({
	    props: {
	      setupAction:
	      /*state*/
	      ctx[1].setupAction
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(setup.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(setup, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var setup_changes = {};
	      if (dirty &
	      /*state*/
	      2) setup_changes.setupAction =
	      /*state*/
	      ctx[1].setupAction;
	      setup.$set(setup_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(setup.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(setup.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(setup, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_8$2.name,
	    type: "if",
	    source: "(88:57) ",
	    ctx: ctx
	  });
	  return block;
	} // (86:38) 


	function create_if_block_7$2(ctx) {
	  var onboard;
	  var current;
	  onboard = new Onboard({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(onboard.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(onboard, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(onboard.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(onboard.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(onboard, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_7$2.name,
	    type: "if",
	    source: "(86:38) ",
	    ctx: ctx
	  });
	  return block;
	} // (84:85) 


	function create_if_block_6$2(ctx) {
	  var account;
	  var current;
	  account = new Account({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[3],
	      action:
	      /*state*/
	      ctx[1].accountAction,
	      fullscreen:
	      /*fullscreen*/
	      ctx[4]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(account.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(account, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var account_changes = {};
	      if (dirty &
	      /*walletState*/
	      8) account_changes.walletState =
	      /*walletState*/
	      ctx[3];
	      if (dirty &
	      /*state*/
	      2) account_changes.action =
	      /*state*/
	      ctx[1].accountAction;
	      if (dirty &
	      /*fullscreen*/
	      16) account_changes.fullscreen =
	      /*fullscreen*/
	      ctx[4];
	      account.$set(account_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(account.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(account.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(account, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_6$2.name,
	    type: "if",
	    source: "(84:85) ",
	    ctx: ctx
	  });
	  return block;
	} // (82:62) 


	function create_if_block_5$2(ctx) {
	  var accountlist;
	  var current;
	  accountlist = new AccountList({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[3]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(accountlist.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(accountlist, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var accountlist_changes = {};
	      if (dirty &
	      /*walletState*/
	      8) accountlist_changes.walletState =
	      /*walletState*/
	      ctx[3];
	      accountlist.$set(accountlist_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(accountlist.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(accountlist.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(accountlist, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_5$2.name,
	    type: "if",
	    source: "(82:62) ",
	    ctx: ctx
	  });
	  return block;
	} // (80:53) 


	function create_if_block_4$2(ctx) {
	  var setmobilenumber;
	  var current;
	  setmobilenumber = new SetMobileNumber({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[3]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(setmobilenumber.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(setmobilenumber, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var setmobilenumber_changes = {};
	      if (dirty &
	      /*walletState*/
	      8) setmobilenumber_changes.walletState =
	      /*walletState*/
	      ctx[3];
	      setmobilenumber.$set(setmobilenumber_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(setmobilenumber.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(setmobilenumber.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(setmobilenumber, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4$2.name,
	    type: "if",
	    source: "(80:53) ",
	    ctx: ctx
	  });
	  return block;
	} // (78:47) 


	function create_if_block_3$2(ctx) {
	  var verifyotp;
	  var current;
	  verifyotp = new VerifyOtp({
	    props: {
	      walletState:
	      /*walletState*/
	      ctx[3]
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(verifyotp.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(verifyotp, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var verifyotp_changes = {};
	      if (dirty &
	      /*walletState*/
	      8) verifyotp_changes.walletState =
	      /*walletState*/
	      ctx[3];
	      verifyotp.$set(verifyotp_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(verifyotp.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(verifyotp.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(verifyotp, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3$2.name,
	    type: "if",
	    source: "(78:47) ",
	    ctx: ctx
	  });
	  return block;
	} // (76:37) 


	function create_if_block_2$2(ctx) {
	  var unlockwallet;
	  var current;
	  unlockwallet = new UnlockWallet({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(unlockwallet.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(unlockwallet, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(unlockwallet.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(unlockwallet.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(unlockwallet, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2$2.name,
	    type: "if",
	    source: "(76:37) ",
	    ctx: ctx
	  });
	  return block;
	} // (74:3) {#if state === undefined || state.menu === 'splash'}


	function create_if_block_1$3(ctx) {
	  var splash;
	  var current;
	  splash = new Splash({
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(splash.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(splash, target, anchor);
	      current = true;
	    },
	    p: noop,
	    i: function intro(local) {
	      if (current) return;
	      transition_in(splash.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(splash.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(splash, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$3.name,
	    type: "if",
	    source: "(74:3) {#if state === undefined || state.menu === 'splash'}",
	    ctx: ctx
	  });
	  return block;
	} // (70:3) <Content titleKey="loading">


	function create_default_slot$m(ctx) {
	  var labelledloader;
	  var current;
	  labelledloader = new LabelledLoader({
	    props: {
	      languageId:
	      /*loader*/
	      ctx[2].languageId
	    },
	    $$inline: true
	  });
	  var block = {
	    c: function create() {
	      create_component(labelledloader.$$.fragment);
	    },
	    m: function mount(target, anchor) {
	      mount_component(labelledloader, target, anchor);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      var labelledloader_changes = {};
	      if (dirty &
	      /*loader*/
	      4) labelledloader_changes.languageId =
	      /*loader*/
	      ctx[2].languageId;
	      labelledloader.$set(labelledloader_changes);
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(labelledloader.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(labelledloader.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      destroy_component(labelledloader, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_default_slot$m.name,
	    type: "slot",
	    source: "(70:3) <Content titleKey=\\\"loading\\\">",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$M(ctx) {
	  var style;
	  var t1;
	  var main;
	  var toast;
	  var t2;
	  var div;
	  var current_block_type_index;
	  var if_block;
	  var current;
	  toast = new Toast({
	    $$inline: true
	  });
	  var if_block_creators = [create_if_block$d, create_else_block$3];
	  var if_blocks = [];

	  function select_block_type(ctx, dirty) {
	    if (
	    /*loader*/
	    ctx[2]) return 0;
	    return 1;
	  }

	  current_block_type_index = select_block_type(ctx);
	  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	  var block = {
	    c: function create() {
	      style = element("style");
	      style.textContent = "body {\n\t\t\tfont-family: 'Open Sans', sans-serif;\n\t\t}";
	      t1 = space();
	      main = element("main");
	      create_component(toast.$$.fragment);
	      t2 = space();
	      div = element("div");
	      if_block.c();
	      add_location(style, file$m, 48, 1, 1797);
	      attr_dev(div, "class", "kui-app svelte-1b0pwrh");
	      add_location(div, file$m, 67, 1, 2046);
	      add_location(main, file$m, 65, 0, 2028);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      append_dev(document.head, style);
	      insert_dev(target, t1, anchor);
	      insert_dev(target, main, anchor);
	      mount_component(toast, main, null);
	      append_dev(main, t2);
	      append_dev(main, div);
	      if_blocks[current_block_type_index].m(div, null);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var previous_block_index = current_block_type_index;
	      current_block_type_index = select_block_type(ctx);

	      if (current_block_type_index === previous_block_index) {
	        if_blocks[current_block_type_index].p(ctx, dirty);
	      } else {
	        group_outros();
	        transition_out(if_blocks[previous_block_index], 1, 1, function () {
	          if_blocks[previous_block_index] = null;
	        });
	        check_outros();
	        if_block = if_blocks[current_block_type_index];

	        if (!if_block) {
	          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	          if_block.c();
	        } else {
	          if_block.p(ctx, dirty);
	        }

	        transition_in(if_block, 1);
	        if_block.m(div, null);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(toast.$$.fragment, local);
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(toast.$$.fragment, local);
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      detach_dev(style);
	      if (detaching) detach_dev(t1);
	      if (detaching) detach_dev(main);
	      destroy_component(toast);
	      if_blocks[current_block_type_index].d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$M.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$M($$self, $$props, $$invalidate) {
	  var fullscreen;
	  var _$$props$$$slots = $$props.$$slots,
	      slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots,
	      $$scope = $$props.$$scope;
	  validate_slots("App", slots, []);
	  var version = $$props.version;
	  var header = undefined;
	  var view = undefined;
	  var state;
	  var loader;
	  var walletState;
	  var unsubscribeLoader = loaderStore.subscribe(function (value) {
	    return $$invalidate(2, loader = value);
	  });
	  var unsubscribeNavigation = navigationStore.subscribe(function (value) {
	    return $$invalidate(1, state = value);
	  });
	  var unsubscribeWalletStore = walletStore.subscribe(function (value) {
	    console.log("Wallet state changed to", value);
	    $$invalidate(3, walletState = value);
	  });
	  onDestroy(function () {
	    unsubscribeLoader();
	    unsubscribeNavigation();
	    unsubscribeWalletStore();
	  });
	  var writable_props = ["version"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn("<App> was created with unknown prop '".concat(key, "'"));
	  });

	  $$self.$$set = function ($$props) {
	    if ("version" in $$props) $$invalidate(0, version = $$props.version);
	  };

	  $$self.$capture_state = function () {
	    return {
	      navigationStore: navigationStore,
	      Menu: Menu,
	      Setup: Setup,
	      About: About,
	      UnlockWallet: UnlockWallet,
	      SoftwareKeys: SoftwareKeys,
	      Toast: Toast,
	      Onboard: Onboard,
	      onDestroy: onDestroy,
	      loaderStore: loaderStore,
	      LabelledLoader: LabelledLoader,
	      Content: Content,
	      AccountList: AccountList,
	      Account: Account,
	      setWalletState: setWalletState,
	      walletStore: walletStore,
	      Splash: Splash,
	      SetMobileNumber: SetMobileNumber,
	      VerifyOtp: VerifyOtp,
	      version: version,
	      header: header,
	      view: view,
	      state: state,
	      loader: loader,
	      walletState: walletState,
	      unsubscribeLoader: unsubscribeLoader,
	      unsubscribeNavigation: unsubscribeNavigation,
	      unsubscribeWalletStore: unsubscribeWalletStore,
	      fullscreen: fullscreen
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("version" in $$props) $$invalidate(0, version = $$props.version);
	    if ("header" in $$props) header = $$props.header;
	    if ("view" in $$props) view = $$props.view;
	    if ("state" in $$props) $$invalidate(1, state = $$props.state);
	    if ("loader" in $$props) $$invalidate(2, loader = $$props.loader);
	    if ("walletState" in $$props) $$invalidate(3, walletState = $$props.walletState);
	    if ("fullscreen" in $$props) $$invalidate(4, fullscreen = $$props.fullscreen);
	  };

	  if ($$props && "$$inject" in $$props) {
	    $$self.$inject_state($$props.$$inject);
	  }

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*state*/
	    2) {
	       $$invalidate(4, fullscreen = (state === null || state === void 0 ? void 0 : state.menu) === "account" && (state === null || state === void 0 ? void 0 : state.accountAction) === "send_qr");
	    }

	    if ($$self.$$.dirty &
	    /*state*/
	    2) {
	       {
	        var clearState = state === undefined || state.menu === "unlock";

	        if (clearState) {
	          setWalletState({});
	        }
	      }
	    }
	  };

	  return [version, state, loader, walletState, fullscreen];
	}

	var App = /*#__PURE__*/function (_SvelteComponentDev) {
	  inherits(App, _SvelteComponentDev);

	  var _super = _createSuper$N(App);

	  function App(options) {
	    var _this;

	    classCallCheck(this, App);

	    _this = _super.call(this, options);
	    init(assertThisInitialized(_this), options, instance$M, create_fragment$M, safe_not_equal, {
	      version: 0
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "App",
	      options: options,
	      id: create_fragment$M.name
	    });
	    var ctx = _this.$$.ctx;
	    var props = options.props || {};

	    if (
	    /*version*/
	    ctx[0] === undefined && !("version" in props)) {
	      console_1$3.warn("<App> was created without expected prop 'version'");
	    }

	    return _this;
	  }

	  createClass(App, [{
	    key: "version",
	    get: function get() {
	      throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return App;
	}(SvelteComponentDev);

	(function(window, undefined$1) {

	  /* jshint validthis:true */
	  function L10nError(message, id, loc) {
	    this.name = 'L10nError';
	    this.message = message;
	    this.id = id;
	    this.loc = loc;
	  }
	  L10nError.prototype = Object.create(Error.prototype);
	  L10nError.prototype.constructor = L10nError;


	  /* jshint browser:true */

	  var io = {

	    _load: function(type, url, callback, sync) {
	      var xhr = new XMLHttpRequest();
	      var needParse;

	      if (xhr.overrideMimeType) {
	        xhr.overrideMimeType(type);
	      }

	      xhr.open('GET', url, !sync);

	      if (type === 'application/json') {
	        //  Gecko 11.0+ forbids the use of the responseType attribute when
	        //  performing sync requests (NS_ERROR_DOM_INVALID_ACCESS_ERR).
	        //  We'll need to JSON.parse manually.
	        if (sync) {
	          needParse = true;
	        } else {
	          xhr.responseType = 'json';
	        }
	      }

	      xhr.addEventListener('load', function io_onload(e) {
	        if (e.target.status === 200 || e.target.status === 0) {
	          // Sinon.JS's FakeXHR doesn't have the response property
	          var res = e.target.response || e.target.responseText;
	          callback(null, needParse ? JSON.parse(res) : res);
	        } else {
	          callback(new L10nError('Not found: ' + url));
	        }
	      });
	      xhr.addEventListener('error', callback);
	      xhr.addEventListener('timeout', callback);

	      // the app: protocol throws on 404, see https://bugzil.la/827243
	      try {
	        xhr.send(null);
	      } catch (e) {
	        if (e.name === 'NS_ERROR_FILE_NOT_FOUND') {
	          // the app: protocol throws on 404, see https://bugzil.la/827243
	          callback(new L10nError('Not found: ' + url));
	        } else {
	          throw e;
	        }
	      }
	    },

	    load: function(url, callback, sync) {
	      return io._load('text/plain', url, callback, sync);
	    },

	    loadJSON: function(url, callback, sync) {
	      return io._load('application/json', url, callback, sync);
	    }

	  };

	  function EventEmitter() {}

	  EventEmitter.prototype.emit = function ee_emit() {
	    if (!this._listeners) {
	      return;
	    }

	    var args = Array.prototype.slice.call(arguments);
	    var type = args.shift();
	    if (!this._listeners[type]) {
	      return;
	    }

	    var typeListeners = this._listeners[type].slice();
	    for (var i = 0; i < typeListeners.length; i++) {
	      typeListeners[i].apply(this, args);
	    }
	  };

	  EventEmitter.prototype.addEventListener = function ee_add(type, listener) {
	    if (!this._listeners) {
	      this._listeners = {};
	    }
	    if (!(type in this._listeners)) {
	      this._listeners[type] = [];
	    }
	    this._listeners[type].push(listener);
	  };

	  EventEmitter.prototype.removeEventListener = function ee_rm(type, listener) {
	    if (!this._listeners) {
	      return;
	    }

	    var typeListeners = this._listeners[type];
	    var pos = typeListeners.indexOf(listener);
	    if (pos === -1) {
	      return;
	    }

	    typeListeners.splice(pos, 1);
	  };


	  function getPluralRule(lang) {
	    var locales2rules = {
	      'af': 3,
	      'ak': 4,
	      'am': 4,
	      'ar': 1,
	      'asa': 3,
	      'az': 0,
	      'be': 11,
	      'bem': 3,
	      'bez': 3,
	      'bg': 3,
	      'bh': 4,
	      'bm': 0,
	      'bn': 3,
	      'bo': 0,
	      'br': 20,
	      'brx': 3,
	      'bs': 11,
	      'ca': 3,
	      'cgg': 3,
	      'chr': 3,
	      'cs': 12,
	      'cy': 17,
	      'da': 3,
	      'de': 3,
	      'dv': 3,
	      'dz': 0,
	      'ee': 3,
	      'el': 3,
	      'en': 3,
	      'eo': 3,
	      'es': 3,
	      'et': 3,
	      'eu': 3,
	      'fa': 0,
	      'ff': 5,
	      'fi': 3,
	      'fil': 4,
	      'fo': 3,
	      'fr': 5,
	      'fur': 3,
	      'fy': 3,
	      'ga': 8,
	      'gd': 24,
	      'gl': 3,
	      'gsw': 3,
	      'gu': 3,
	      'guw': 4,
	      'gv': 23,
	      'ha': 3,
	      'haw': 3,
	      'he': 2,
	      'hi': 4,
	      'hr': 11,
	      'hu': 0,
	      'id': 0,
	      'ig': 0,
	      'ii': 0,
	      'is': 3,
	      'it': 3,
	      'iu': 7,
	      'ja': 0,
	      'jmc': 3,
	      'jv': 0,
	      'ka': 0,
	      'kab': 5,
	      'kaj': 3,
	      'kcg': 3,
	      'kde': 0,
	      'kea': 0,
	      'kk': 3,
	      'kl': 3,
	      'km': 0,
	      'kn': 0,
	      'ko': 0,
	      'ksb': 3,
	      'ksh': 21,
	      'ku': 3,
	      'kw': 7,
	      'lag': 18,
	      'lb': 3,
	      'lg': 3,
	      'ln': 4,
	      'lo': 0,
	      'lt': 10,
	      'lv': 6,
	      'mas': 3,
	      'mg': 4,
	      'mk': 16,
	      'ml': 3,
	      'mn': 3,
	      'mo': 9,
	      'mr': 3,
	      'ms': 0,
	      'mt': 15,
	      'my': 0,
	      'nah': 3,
	      'naq': 7,
	      'nb': 3,
	      'nd': 3,
	      'ne': 3,
	      'nl': 3,
	      'nn': 3,
	      'no': 3,
	      'nr': 3,
	      'nso': 4,
	      'ny': 3,
	      'nyn': 3,
	      'om': 3,
	      'or': 3,
	      'pa': 3,
	      'pap': 3,
	      'pl': 13,
	      'ps': 3,
	      'pt': 3,
	      'rm': 3,
	      'ro': 9,
	      'rof': 3,
	      'ru': 11,
	      'rwk': 3,
	      'sah': 0,
	      'saq': 3,
	      'se': 7,
	      'seh': 3,
	      'ses': 0,
	      'sg': 0,
	      'sh': 11,
	      'shi': 19,
	      'sk': 12,
	      'sl': 14,
	      'sma': 7,
	      'smi': 7,
	      'smj': 7,
	      'smn': 7,
	      'sms': 7,
	      'sn': 3,
	      'so': 3,
	      'sq': 3,
	      'sr': 11,
	      'ss': 3,
	      'ssy': 3,
	      'st': 3,
	      'sv': 3,
	      'sw': 3,
	      'syr': 3,
	      'ta': 3,
	      'te': 3,
	      'teo': 3,
	      'th': 0,
	      'ti': 4,
	      'tig': 3,
	      'tk': 3,
	      'tl': 4,
	      'tn': 3,
	      'to': 0,
	      'tr': 0,
	      'ts': 3,
	      'tzm': 22,
	      'uk': 11,
	      'ur': 3,
	      've': 3,
	      'vi': 0,
	      'vun': 3,
	      'wa': 4,
	      'wae': 3,
	      'wo': 0,
	      'xh': 3,
	      'xog': 3,
	      'yo': 0,
	      'zh': 0,
	      'zu': 3
	    };

	    // utility functions for plural rules methods
	    function isIn(n, list) {
	      return list.indexOf(n) !== -1;
	    }
	    function isBetween(n, start, end) {
	      return typeof n === typeof start && start <= n && n <= end;
	    }

	    // list of all plural rules methods:
	    // map an integer to the plural form name to use
	    var pluralRules = {
	      '0': function() {
	        return 'other';
	      },
	      '1': function(n) {
	        if ((isBetween((n % 100), 3, 10))) {
	          return 'few';
	        }
	        if (n === 0) {
	          return 'zero';
	        }
	        if ((isBetween((n % 100), 11, 99))) {
	          return 'many';
	        }
	        if (n === 2) {
	          return 'two';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '2': function(n) {
	        if (n !== 0 && (n % 10) === 0) {
	          return 'many';
	        }
	        if (n === 2) {
	          return 'two';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '3': function(n) {
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '4': function(n) {
	        if ((isBetween(n, 0, 1))) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '5': function(n) {
	        if ((isBetween(n, 0, 2)) && n !== 2) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '6': function(n) {
	        if (n === 0) {
	          return 'zero';
	        }
	        if ((n % 10) === 1 && (n % 100) !== 11) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '7': function(n) {
	        if (n === 2) {
	          return 'two';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '8': function(n) {
	        if ((isBetween(n, 3, 6))) {
	          return 'few';
	        }
	        if ((isBetween(n, 7, 10))) {
	          return 'many';
	        }
	        if (n === 2) {
	          return 'two';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '9': function(n) {
	        if (n === 0 || n !== 1 && (isBetween((n % 100), 1, 19))) {
	          return 'few';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '10': function(n) {
	        if ((isBetween((n % 10), 2, 9)) && !(isBetween((n % 100), 11, 19))) {
	          return 'few';
	        }
	        if ((n % 10) === 1 && !(isBetween((n % 100), 11, 19))) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '11': function(n) {
	        if ((isBetween((n % 10), 2, 4)) && !(isBetween((n % 100), 12, 14))) {
	          return 'few';
	        }
	        if ((n % 10) === 0 ||
	            (isBetween((n % 10), 5, 9)) ||
	            (isBetween((n % 100), 11, 14))) {
	          return 'many';
	        }
	        if ((n % 10) === 1 && (n % 100) !== 11) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '12': function(n) {
	        if ((isBetween(n, 2, 4))) {
	          return 'few';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '13': function(n) {
	        if ((isBetween((n % 10), 2, 4)) && !(isBetween((n % 100), 12, 14))) {
	          return 'few';
	        }
	        if (n !== 1 && (isBetween((n % 10), 0, 1)) ||
	            (isBetween((n % 10), 5, 9)) ||
	            (isBetween((n % 100), 12, 14))) {
	          return 'many';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '14': function(n) {
	        if ((isBetween((n % 100), 3, 4))) {
	          return 'few';
	        }
	        if ((n % 100) === 2) {
	          return 'two';
	        }
	        if ((n % 100) === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '15': function(n) {
	        if (n === 0 || (isBetween((n % 100), 2, 10))) {
	          return 'few';
	        }
	        if ((isBetween((n % 100), 11, 19))) {
	          return 'many';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '16': function(n) {
	        if ((n % 10) === 1 && n !== 11) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '17': function(n) {
	        if (n === 3) {
	          return 'few';
	        }
	        if (n === 0) {
	          return 'zero';
	        }
	        if (n === 6) {
	          return 'many';
	        }
	        if (n === 2) {
	          return 'two';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '18': function(n) {
	        if (n === 0) {
	          return 'zero';
	        }
	        if ((isBetween(n, 0, 2)) && n !== 0 && n !== 2) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '19': function(n) {
	        if ((isBetween(n, 2, 10))) {
	          return 'few';
	        }
	        if ((isBetween(n, 0, 1))) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '20': function(n) {
	        if ((isBetween((n % 10), 3, 4) || ((n % 10) === 9)) && !(
	            isBetween((n % 100), 10, 19) ||
	            isBetween((n % 100), 70, 79) ||
	            isBetween((n % 100), 90, 99)
	            )) {
	          return 'few';
	        }
	        if ((n % 1000000) === 0 && n !== 0) {
	          return 'many';
	        }
	        if ((n % 10) === 2 && !isIn((n % 100), [12, 72, 92])) {
	          return 'two';
	        }
	        if ((n % 10) === 1 && !isIn((n % 100), [11, 71, 91])) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '21': function(n) {
	        if (n === 0) {
	          return 'zero';
	        }
	        if (n === 1) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '22': function(n) {
	        if ((isBetween(n, 0, 1)) || (isBetween(n, 11, 99))) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '23': function(n) {
	        if ((isBetween((n % 10), 1, 2)) || (n % 20) === 0) {
	          return 'one';
	        }
	        return 'other';
	      },
	      '24': function(n) {
	        if ((isBetween(n, 3, 10) || isBetween(n, 13, 19))) {
	          return 'few';
	        }
	        if (isIn(n, [2, 12])) {
	          return 'two';
	        }
	        if (isIn(n, [1, 11])) {
	          return 'one';
	        }
	        return 'other';
	      }
	    };

	    // return a function that gives the plural form name for a given integer
	    var index = locales2rules[lang.replace(/-.*$/, '')];
	    if (!(index in pluralRules)) {
	      return function() { return 'other'; };
	    }
	    return pluralRules[index];
	  }




	  var MAX_PLACEABLES = 100;

	  var PropertiesParser = {
	    patterns: null,
	    entryIds: null,

	    init: function() {
	      this.patterns = {
	        comment: /^\s*#|^\s*$/,
	        entity: /^([^=\s]+)\s*=\s*(.*)$/,
	        multiline: /[^\\]\\$/,
	        index: /\{\[\s*(\w+)(?:\(([^\)]*)\))?\s*\]\}/i,
	        unicode: /\\u([0-9a-fA-F]{1,4})/g,
	        entries: /[^\r\n]+/g,
	        controlChars: /\\([\\\n\r\t\b\f\{\}\"\'])/g,
	        placeables: /\{\{\s*([^\s]*?)\s*\}\}/,
	      };
	    },

	    parse: function(ctx, source) {
	      if (!this.patterns) {
	        this.init();
	      }

	      var ast = [];
	      this.entryIds = Object.create(null);

	      var entries = source.match(this.patterns.entries);
	      if (!entries) {
	        return ast;
	      }
	      for (var i = 0; i < entries.length; i++) {
	        var line = entries[i];

	        if (this.patterns.comment.test(line)) {
	          continue;
	        }

	        while (this.patterns.multiline.test(line) && i < entries.length) {
	          line = line.slice(0, -1) + entries[++i].trim();
	        }

	        var entityMatch = line.match(this.patterns.entity);
	        if (entityMatch) {
	          try {
	            this.parseEntity(entityMatch[1], entityMatch[2], ast);
	          } catch (e) {
	            if (ctx) {
	              ctx._emitter.emit('parseerror', e);
	            } else {
	              throw e;
	            }
	          }
	        }
	      }
	      return ast;
	    },

	    parseEntity: function(id, value, ast) {
	      var name, key;

	      var pos = id.indexOf('[');
	      if (pos !== -1) {
	        name = id.substr(0, pos);
	        key = id.substring(pos + 1, id.length - 1);
	      } else {
	        name = id;
	        key = null;
	      }

	      var nameElements = name.split('.');

	      if (nameElements.length > 2) {
	        throw new L10nError('Error in ID: "' + name + '".' +
	            ' Nested attributes are not supported.');
	      }

	      var attr;
	      if (nameElements.length > 1) {
	        name = nameElements[0];
	        attr = nameElements[1];

	        if (attr[0] === '$') {
	          throw new L10nError('Attribute can\'t start with "$"', id);
	        }
	      } else {
	        attr = null;
	      }

	      this.setEntityValue(name, attr, key, this.unescapeString(value), ast);
	    },

	    setEntityValue: function(id, attr, key, rawValue, ast) {
	      var pos, v;

	      var value = rawValue.indexOf('{{') > -1 ?
	        this.parseString(rawValue) : rawValue;

	      if (attr) {
	        pos = this.entryIds[id];
	        if (pos === undefined$1) {
	          v = {$i: id};
	          if (key) {
	            v[attr] = {};
	            v[attr][key] = value;
	          } else {
	            v[attr] = value;
	          }
	          ast.push(v);
	          this.entryIds[id] = ast.length - 1;
	          return;
	        }
	        if (key) {
	          if (typeof(ast[pos][attr]) === 'string') {
	            ast[pos][attr] = {
	              $x: this.parseIndex(ast[pos][attr]),
	              $v: {}
	            };
	          }
	          ast[pos][attr].$v[key] = value;
	          return;
	        }
	        ast[pos][attr] = value;
	        return;
	      }

	      // Hash value
	      if (key) {
	        pos = this.entryIds[id];
	        if (pos === undefined$1) {
	          v = {};
	          v[key] = value;
	          ast.push({$i: id, $v: v});
	          this.entryIds[id] = ast.length - 1;
	          return;
	        }
	        if (typeof(ast[pos].$v) === 'string') {
	          ast[pos].$x = this.parseIndex(ast[pos].$v);
	          ast[pos].$v = {};
	        }
	        ast[pos].$v[key] = value;
	        return;
	      }

	      // simple value
	      ast.push({$i: id, $v: value});
	      this.entryIds[id] = ast.length - 1;
	    },

	    parseString: function(str) {
	      var chunks = str.split(this.patterns.placeables);
	      var complexStr = [];

	      var len = chunks.length;
	      var placeablesCount = (len - 1) / 2;

	      if (placeablesCount >= MAX_PLACEABLES) {
	        throw new L10nError('Too many placeables (' + placeablesCount +
	                            ', max allowed is ' + MAX_PLACEABLES + ')');
	      }

	      for (var i = 0; i < chunks.length; i++) {
	        if (chunks[i].length === 0) {
	          continue;
	        }
	        if (i % 2 === 1) {
	          complexStr.push({t: 'idOrVar', v: chunks[i]});
	        } else {
	          complexStr.push(chunks[i]);
	        }
	      }
	      return complexStr;
	    },

	    unescapeString: function(str) {
	      if (str.lastIndexOf('\\') !== -1) {
	        str = str.replace(this.patterns.controlChars, '$1');
	      }
	      return str.replace(this.patterns.unicode, function(match, token) {
	        return unescape('%u' + '0000'.slice(token.length) + token);
	      });
	    },

	    parseIndex: function(str) {
	      var match = str.match(this.patterns.index);
	      if (!match) {
	        throw new L10nError('Malformed index');
	      }
	      if (match[2]) {
	        return [{t: 'idOrVar', v: match[1]}, match[2]];
	      } else {
	        return [{t: 'idOrVar', v: match[1]}];
	      }
	    }
	  };



	  var KNOWN_MACROS = ['plural'];

	  var MAX_PLACEABLE_LENGTH = 2500;
	  var rePlaceables = /\{\{\s*(.+?)\s*\}\}/g;

	  // Matches characters outside of the Latin-1 character set
	  var nonLatin1 = /[^\x01-\xFF]/;

	  // Unicode bidi isolation characters
	  var FSI = '\u2068';
	  var PDI = '\u2069';

	  function createEntry(node, env) {
	    var keys = Object.keys(node);

	    // the most common scenario: a simple string with no arguments
	    if (typeof node.$v === 'string' && keys.length === 2) {
	      return node.$v;
	    }

	    var attrs;

	    /* jshint -W084 */
	    for (var i = 0, key; key = keys[i]; i++) {
	      // skip $i (id), $v (value), $x (index)
	      if (key[0] === '$') {
	        continue;
	      }

	      if (!attrs) {
	        attrs = Object.create(null);
	      }
	      attrs[key] = createAttribute(node[key], env, node.$i + '.' + key);
	    }

	    return {
	      id: node.$i,
	      value: node.$v !== undefined$1 ? node.$v : null,
	      index: node.$x || null,
	      attrs: attrs || null,
	      env: env,
	      // the dirty guard prevents cyclic or recursive references
	      dirty: false
	    };
	  }

	  function createAttribute(node, env, id) {
	    if (typeof node === 'string') {
	      return node;
	    }

	    return {
	      id: id,
	      value: node.$v || (node !== undefined$1 ? node : null),
	      index: node.$x || null,
	      env: env,
	      dirty: false
	    };
	  }


	  function format(args, entity) {
	    if (typeof entity === 'string') {
	      return [{}, entity];
	    }

	    if (entity.dirty) {
	      throw new L10nError('Cyclic reference detected: ' + entity.id);
	    }

	    entity.dirty = true;

	    var rv;

	    // if format fails, we want the exception to bubble up and stop the whole
	    // resolving process;  however, we still need to clean up the dirty flag
	    try {
	      rv = resolveValue({}, args, entity.env, entity.value, entity.index);
	    } finally {
	      entity.dirty = false;
	    }
	    return rv;
	  }

	  function resolveIdentifier(args, env, id) {
	    if (KNOWN_MACROS.indexOf(id) > -1) {
	      return [{}, env['__' + id]];
	    }

	    if (args && args.hasOwnProperty(id)) {
	      if (typeof args[id] === 'string' || (typeof args[id] === 'number' &&
	          !isNaN(args[id]))) {
	        return [{}, args[id]];
	      } else {
	        throw new L10nError('Arg must be a string or a number: ' + id);
	      }
	    }

	    // XXX: special case for Node.js where still:
	    // '__proto__' in Object.create(null) => true
	    if (id in env && id !== '__proto__') {
	      return format(args, env[id]);
	    }

	    throw new L10nError('Unknown reference: ' + id);
	  }

	  function subPlaceable(locals, args, env, id) {
	    var res;

	    try {
	      res = resolveIdentifier(args, env, id);
	    } catch (err) {
	      return [{ error: err }, '{{ ' + id + ' }}'];
	    }

	    var value = res[1];

	    if (typeof value === 'number') {
	      return res;
	    }

	    if (typeof value === 'string') {
	      // prevent Billion Laughs attacks
	      if (value.length >= MAX_PLACEABLE_LENGTH) {
	        throw new L10nError('Too many characters in placeable (' +
	                            value.length + ', max allowed is ' +
	                            MAX_PLACEABLE_LENGTH + ')');
	      }

	      if (locals.contextIsNonLatin1 || value.match(nonLatin1)) {
	        // When dealing with non-Latin-1 text
	        // we wrap substitutions in bidi isolate characters
	        // to avoid bidi issues.
	        res[1] = FSI + value + PDI;
	      }

	      return res;
	    }

	    return [{}, '{{ ' + id + ' }}'];
	  }

	  function interpolate(locals, args, env, arr) {
	    return arr.reduce(function(prev, cur) {
	      if (typeof cur === 'string') {
	        return [prev[0], prev[1] + cur];
	      } else if (cur.t === 'idOrVar'){
	        var placeable = subPlaceable(locals, args, env, cur.v);
	        return [prev[0], prev[1] + placeable[1]];
	      }
	    }, [locals, '']);
	  }

	  function resolveSelector(args, env, expr, index) {
	      var selectorName = index[0].v;
	      var selector = resolveIdentifier(args, env, selectorName)[1];

	      if (typeof selector !== 'function') {
	        // selector is a simple reference to an entity or args
	        return selector;
	      }

	      var argValue = index[1] ?
	        resolveIdentifier(args, env, index[1])[1] : undefined$1;

	      if (selector === env.__plural) {
	        // special cases for zero, one, two if they are defined on the hash
	        if (argValue === 0 && 'zero' in expr) {
	          return 'zero';
	        }
	        if (argValue === 1 && 'one' in expr) {
	          return 'one';
	        }
	        if (argValue === 2 && 'two' in expr) {
	          return 'two';
	        }
	      }

	      return selector(argValue);
	  }

	  function resolveValue(locals, args, env, expr, index) {
	    if (!expr) {
	      return [locals, expr];
	    }

	    if (typeof expr === 'string' ||
	        typeof expr === 'boolean' ||
	        typeof expr === 'number') {
	      return [locals, expr];
	    }

	    if (Array.isArray(expr)) {
	      locals.contextIsNonLatin1 = expr.some(function($_) {
	        return typeof($_) === 'string' && $_.match(nonLatin1);
	      });
	      return interpolate(locals, args, env, expr);
	    }

	    // otherwise, it's a dict
	    if (index) {
	      // try to use the index in order to select the right dict member
	      var selector = resolveSelector(args, env, expr, index);
	      if (expr.hasOwnProperty(selector)) {
	        return resolveValue(locals, args, env, expr[selector]);
	      }
	    }

	    // if there was no index or no selector was found, try 'other'
	    if ('other' in expr) {
	      return resolveValue(locals, args, env, expr.other);
	    }

	    // XXX Specify entity id
	    throw new L10nError('Unresolvable value');
	  }

	  var Resolver = {
	    createEntry: createEntry,
	    format: format,
	    rePlaceables: rePlaceables
	  };



	  /* Utility functions */

	  // Recursively walk an AST node searching for content leaves
	  function walkContent(node, fn) {
	    if (typeof node === 'string') {
	      return fn(node);
	    }

	    if (node.t === 'idOrVar') {
	      return node;
	    }

	    var rv = Array.isArray(node) ? [] : {};
	    var keys = Object.keys(node);

	    for (var i = 0, key; (key = keys[i]); i++) {
	      // don't change identifier ($i) nor indices ($x)
	      if (key === '$i' || key === '$x') {
	        rv[key] = node[key];
	      } else {
	        rv[key] = walkContent(node[key], fn);
	      }
	    }
	    return rv;
	  }


	  /* Pseudolocalizations
	   *
	   * PSEUDO is a dict of strategies to be used to modify the English
	   * context in order to create pseudolocalizations.  These can be used by
	   * developers to test the localizability of their code without having to
	   * actually speak a foreign language.
	   *
	   * Currently, the following pseudolocales are supported:
	   *
	   *   fr-x-psaccent - Ȧȧƈƈḗḗƞŧḗḗḓ Ḗḗƞɠŀīīşħ
	   *
	   *     In Accented English all English letters are replaced by accented
	   *     Unicode counterparts which don't impair the readability of the content.
	   *     This allows developers to quickly test if any given string is being
	   *     correctly displayed in its 'translated' form.  Additionally, simple
	   *     heuristics are used to make certain words longer to better simulate the
	   *     experience of international users.
	   *
	   *   ar-x-psbidi - ɥsıʅƃuƎ ıpıԐ
	   *
	   *     Bidi English is a fake RTL locale.  All words are surrounded by
	   *     Unicode formatting marks forcing the RTL directionality of characters.
	   *     In addition, to make the reversed text easier to read, individual
	   *     letters are flipped.
	   *
	   *     Note: The name above is hardcoded to be RTL in case code editors have
	   *     trouble with the RLO and PDF Unicode marks.  In reality, it should be
	   *     surrounded by those marks as well.
	   *
	   * See https://bugzil.la/900182 for more information.
	   *
	   */

	  var reAlphas = /[a-zA-Z]/g;
	  var reVowels = /[aeiouAEIOU]/g;

	  // ȦƁƇḒḖƑƓĦĪĴĶĿḾȠǾƤɊŘŞŦŬṼẆẊẎẐ + [\\]^_` + ȧƀƈḓḗƒɠħīĵķŀḿƞǿƥɋřşŧŭṽẇẋẏẑ
	  var ACCENTED_MAP = '\u0226\u0181\u0187\u1E12\u1E16\u0191\u0193\u0126\u012A' +
	                     '\u0134\u0136\u013F\u1E3E\u0220\u01FE\u01A4\u024A\u0158' +
	                     '\u015E\u0166\u016C\u1E7C\u1E86\u1E8A\u1E8E\u1E90' +
	                     '[\\]^_`' +
	                     '\u0227\u0180\u0188\u1E13\u1E17\u0192\u0260\u0127\u012B' +
	                     '\u0135\u0137\u0140\u1E3F\u019E\u01FF\u01A5\u024B\u0159' +
	                     '\u015F\u0167\u016D\u1E7D\u1E87\u1E8B\u1E8F\u1E91';

	  // XXX Until https://bugzil.la/1007340 is fixed, ᗡℲ⅁⅂⅄ don't render correctly
	  // on the devices.  For now, use the following replacements: pɟפ˥ʎ
	  // ∀ԐↃpƎɟפHIſӼ˥WNOԀÒᴚS⊥∩ɅＭXʎZ + [\\]ᵥ_, + ɐqɔpǝɟƃɥıɾʞʅɯuodbɹsʇnʌʍxʎz
	  var FLIPPED_MAP = '\u2200\u0510\u2183p\u018E\u025F\u05E4HI\u017F' +
	                    '\u04FC\u02E5WNO\u0500\xD2\u1D1AS\u22A5\u2229\u0245' +
	                    '\uFF2DX\u028EZ' +
	                    '[\\]\u1D65_,' +
	                    '\u0250q\u0254p\u01DD\u025F\u0183\u0265\u0131\u027E' +
	                    '\u029E\u0285\u026Fuodb\u0279s\u0287n\u028C\u028Dx\u028Ez';

	  function makeLonger(val) {
	    return val.replace(reVowels, function(match) {
	      return match + match.toLowerCase();
	    });
	  }

	  function replaceChars(map, val) {
	    // Replace each Latin letter with a Unicode character from map
	    return val.replace(reAlphas, function(match) {
	      return map.charAt(match.charCodeAt(0) - 65);
	    });
	  }

	  var reWords = /[^\W0-9_]+/g;

	  function makeRTL(val) {
	    // Surround each word with Unicode formatting codes, RLO and PDF:
	    //   U+202E:   RIGHT-TO-LEFT OVERRIDE (RLO)
	    //   U+202C:   POP DIRECTIONAL FORMATTING (PDF)
	    // See http://www.w3.org/International/questions/qa-bidi-controls
	    return val.replace(reWords, function(match) {
	      return '\u202e' + match + '\u202c';
	    });
	  }

	  // strftime tokens (%a, %Eb), template {vars}, HTML entities (&#x202a;)
	  // and HTML tags.
	  var reExcluded = /(%[EO]?\w|\{\s*.+?\s*\}|&[#\w]+;|<\s*.+?\s*>)/;

	  function mapContent(fn, val) {
	    if (!val) {
	      return val;
	    }
	    var parts = val.split(reExcluded);
	    var modified = parts.map(function(part) {
	      if (reExcluded.test(part)) {
	        return part;
	      }
	      return fn(part);
	    });
	    return modified.join('');
	  }

	  function Pseudo(id, name, charMap, modFn) {
	    this.id = id;
	    this.translate = mapContent.bind(null, function(val) {
	      return replaceChars(charMap, modFn(val));
	    });
	    this.name = this.translate(name);
	  }

	  var PSEUDO = {
	    'fr-x-psaccent': new Pseudo('fr-x-psaccent', 'Runtime Accented',
	                           ACCENTED_MAP, makeLonger),
	    'ar-x-psbidi': new Pseudo('ar-x-psbidi', 'Runtime Bidi',
	                            FLIPPED_MAP, makeRTL)
	  };



	  function Locale(id, ctx) {
	    this.id = id;
	    this.ctx = ctx;
	    this.isReady = false;
	    this.entries = Object.create(null);
	    this.entries.__plural = getPluralRule(this.isPseudo() ?
	                                          this.ctx.defaultLocale : id);
	  }

	  Locale.prototype.isPseudo = function() {
	    return this.ctx.qps.indexOf(this.id) !== -1;
	  };

	  var bindingsIO = {
	    extra: function(id, ver, path, type, callback, errback) {
	      if (type === 'properties') {
	        type = 'text';
	      }
	      navigator.mozApps.getLocalizationResource(id, ver, path, type).
	        then(callback.bind(null, null), errback);
	    },
	    app: function(id, ver, path, type, callback, errback, sync) {
	      switch (type) {
	        case 'properties':
	          io.load(path, callback, sync);
	          break;
	        case 'json':
	          io.loadJSON(path, callback, sync);
	          break;
	      }
	    },
	  };

	  Locale.prototype.build = function L_build(callback) {
	    var sync = !callback;
	    var ctx = this.ctx;
	    var self = this;

	    var l10nLoads = ctx.resLinks.length;

	    function onL10nLoaded(err) {
	      if (err) {
	        ctx._emitter.emit('fetcherror', err);
	      }
	      if (--l10nLoads <= 0) {
	        self.isReady = true;
	        if (callback) {
	          callback();
	        }
	      }
	    }

	    if (l10nLoads === 0) {
	      onL10nLoaded();
	      return;
	    }

	    function onJSONLoaded(err, json) {
	      if (!err && json) {
	        self.addAST(json);
	      }
	      onL10nLoaded(err);
	    }

	    function onPropLoaded(err, source) {
	      if (!err && source) {
	        var ast = PropertiesParser.parse(ctx, source);
	        self.addAST(ast);
	      }
	      onL10nLoaded(err);
	    }

	    var idToFetch = this.isPseudo() ? ctx.defaultLocale : this.id;
	    var appVersion = null;
	    var source = 'app';
	    if (typeof(navigator) !== 'undefined') {
	      source = navigator.mozL10n._config.localeSources[this.id] || 'app';
	      appVersion = navigator.mozL10n._config.appVersion;
	    }

	    for (var i = 0; i < ctx.resLinks.length; i++) {
	      var resLink = decodeURI(ctx.resLinks[i]);
	      var path = resLink.replace('{locale}', idToFetch);
	      var type = path.substr(path.lastIndexOf('.') + 1);

	      var cb;
	      switch (type) {
	        case 'json':
	          cb = onJSONLoaded;
	          break;
	        case 'properties':
	          cb = onPropLoaded;
	          break;
	      }
	      bindingsIO[source](this.id,
	        appVersion, path, type, cb, onL10nLoaded, sync);
	    }
	  };

	  function createPseudoEntry(node, entries) {
	    return Resolver.createEntry(
	      walkContent(node, PSEUDO[this.id].translate),
	      entries);
	  }

	  Locale.prototype.addAST = function(ast) {
	    /* jshint -W084 */

	    var createEntry = this.isPseudo() ?
	      createPseudoEntry.bind(this) : Resolver.createEntry;

	    for (var i = 0; i < ast.length; i++) {
	      this.entries[ast[i].$i] = createEntry(ast[i], this.entries);
	    }
	  };




	  function Context(id) {
	    this.id = id;
	    this.isReady = false;
	    this.isLoading = false;

	    this.defaultLocale = 'en-US';
	    this.availableLocales = [];
	    this.supportedLocales = [];
	    this.qps = [];

	    this.resLinks = [];
	    this.locales = {};

	    this._emitter = new EventEmitter();
	    this._ready = new Promise(this.once.bind(this));
	  }


	  // Getting translations

	  function reportMissing(id, err) {
	    this._emitter.emit('notfounderror', err);
	    return id;
	  }

	  function getWithFallback(id) {
	    /* jshint -W084 */
	    var cur = 0;
	    var loc;
	    var locale;
	    while (loc = this.supportedLocales[cur]) {
	      locale = this.getLocale(loc);
	      if (!locale.isReady) {
	        // build without callback, synchronously
	        locale.build(null);
	      }
	      var entry = locale.entries[id];
	      if (entry === undefined$1) {
	        cur++;
	        reportMissing.call(this, id, new L10nError(
	          '"' + id + '"' + ' not found in ' + loc + ' in ' + this.id,
	          id, loc));
	        continue;
	      }
	      return entry;
	    }

	    throw new L10nError(
	      '"' + id + '"' + ' missing from all supported locales in ' + this.id, id);
	  }

	  function formatTuple(args, entity) {
	    try {
	      return Resolver.format(args, entity);
	    } catch (err) {
	      this._emitter.emit('resolveerror', err);
	      var locals = {
	        error: err
	      };
	      return [locals, entity.id];
	    }
	  }

	  function formatValue(args, entity) {
	    if (typeof entity === 'string') {
	      return entity;
	    }

	    // take the string value only
	    return formatTuple.call(this, args, entity)[1];
	  }

	  function formatEntity(args, entity) {
	    var entityTuple = formatTuple.call(this, args, entity);
	    var value = entityTuple[1];

	    var formatted = {
	      value: value,
	      attrs: null,
	    };

	    if (entity.attrs) {
	      formatted.attrs = Object.create(null);
	    }

	    for (var key in entity.attrs) {
	      /* jshint -W089 */
	      var attrTuple = formatTuple.call(this, args, entity.attrs[key]);
	      formatted.attrs[key] = attrTuple[1];
	    }

	    return formatted;
	  }

	  function formatAsync(fn, id, args) {
	    return this._ready.then(
	      getWithFallback.bind(this, id)).then(
	        fn.bind(this, args),
	        reportMissing.bind(this, id));
	  }

	  Context.prototype.formatValue = function(id, args) {
	    return formatAsync.call(this, formatValue, id, args);
	  };

	  Context.prototype.formatEntity = function(id, args) {
	    return formatAsync.call(this, formatEntity, id, args);
	  };

	  function legacyGet(fn, id, args) {
	    if (!this.isReady) {
	      throw new L10nError('Context not ready');
	    }

	    var entry;
	    try {
	      entry = getWithFallback.call(this, id);
	    } catch (err) {
	      // Don't handle notfounderrors in individual locales in any special way
	      if (err.loc) {
	        throw err;
	      }
	      // For general notfounderrors, report them and return legacy fallback
	      reportMissing.call(this, id, err);
	      // XXX legacy compat;  some Gaia code checks if returned value is falsy or
	      // an empty string to know if a translation is available;  this is bad and
	      // will be fixed eventually in https://bugzil.la/1020138
	      return '';
	    }

	    // If translation is broken use regular fallback-on-id approach
	    return fn.call(this, args, entry);
	  }

	  Context.prototype.get = function(id, args) {
	    return legacyGet.call(this, formatValue, id, args);
	  };

	  Context.prototype.getEntity = function(id, args) {
	    return legacyGet.call(this, formatEntity, id, args);
	  };

	  Context.prototype.getLocale = function getLocale(code) {
	    /* jshint -W093 */

	    var locales = this.locales;
	    if (locales[code]) {
	      return locales[code];
	    }

	    return locales[code] = new Locale(code, this);
	  };


	  // Getting ready

	  function negotiate(available, requested, defaultLocale) {
	    var supportedLocale;
	    // Find the first locale in the requested list that is supported.
	    for (var i = 0; i < requested.length; i++) {
	      var locale = requested[i];
	      if (available.indexOf(locale) !== -1) {
	        supportedLocale = locale;
	        break;
	      }
	    }
	    if (!supportedLocale ||
	        supportedLocale === defaultLocale) {
	      return [defaultLocale];
	    }

	    return [supportedLocale, defaultLocale];
	  }

	  function freeze(supported) {
	    var locale = this.getLocale(supported[0]);
	    if (locale.isReady) {
	      setReady.call(this, supported);
	    } else {
	      locale.build(setReady.bind(this, supported));
	    }
	  }

	  function setReady(supported) {
	    this.supportedLocales = supported;
	    this.isReady = true;
	    this._emitter.emit('ready');
	  }

	  Context.prototype.registerLocales = function(defLocale, available) {

	    if (defLocale) {
	      this.defaultLocale = defLocale;
	    }
	    /* jshint boss:true */
	    this.availableLocales = [this.defaultLocale];
	    this.qps = Object.keys(PSEUDO);

	    if (available) {
	      for (var i = 0, loc; loc = available[i]; i++) {
	        if (this.availableLocales.indexOf(loc) === -1) {
	          this.availableLocales.push(loc);
	          var pos = this.qps.indexOf(loc);
	          if (pos !== -1) {
	            // remove from this context's runtime pseudolocales
	            this.qps.splice(pos, 1);
	          }
	        }
	      }
	    }
	  };

	  Context.prototype.requestLocales = function requestLocales() {
	    if (this.isLoading && !this.isReady) {
	      throw new L10nError('Context not ready');
	    }

	    this.isLoading = true;
	    var requested = Array.prototype.slice.call(arguments);
	    if (requested.length === 0) {
	      throw new L10nError('No locales requested');
	    }

	    var supported = negotiate(
	      this.availableLocales.concat(this.qps),
	      requested,
	      this.defaultLocale);

	    // freeze only if the first language in the fallback chain is new
	    if (this.supportedLocales[0] !== supported[0]) {
	      freeze.call(this, supported);
	    }
	  };


	  // Events

	  Context.prototype.addEventListener = function(type, listener) {
	    this._emitter.addEventListener(type, listener);
	  };

	  Context.prototype.removeEventListener = function(type, listener) {
	    this._emitter.removeEventListener(type, listener);
	  };

	  Context.prototype.ready = function(callback) {
	    if (this.isReady) {
	      setTimeout(callback);
	    }
	    this.addEventListener('ready', callback);
	  };

	  Context.prototype.once = function(callback) {
	    /* jshint -W068 */
	    if (this.isReady) {
	      setTimeout(callback);
	      return;
	    }

	    var callAndRemove = (function() {
	      this.removeEventListener('ready', callAndRemove);
	      callback();
	    }).bind(this);
	    this.addEventListener('ready', callAndRemove);
	  };



	  var allowed = {
	    elements: [
	      'a', 'em', 'strong', 'small', 's', 'cite', 'q', 'dfn', 'abbr', 'data',
	      'time', 'code', 'var', 'samp', 'kbd', 'sub', 'sup', 'i', 'b', 'u',
	      'mark', 'ruby', 'rt', 'rp', 'bdi', 'bdo', 'span', 'br', 'wbr'
	    ],
	    attributes: {
	      global: [ 'title', 'aria-label', 'aria-valuetext', 'aria-moz-hint' ],
	      a: [ 'download' ],
	      area: [ 'download', 'alt' ],
	      // value is special-cased in isAttrAllowed
	      input: [ 'alt', 'placeholder' ],
	      menuitem: [ 'label' ],
	      menu: [ 'label' ],
	      optgroup: [ 'label' ],
	      option: [ 'label' ],
	      track: [ 'label' ],
	      img: [ 'alt' ],
	      textarea: [ 'placeholder' ],
	      th: [ 'abbr']
	    }
	  };



	  var rtlList = ['ar', 'he', 'fa', 'ps', 'ar-x-psbidi', 'ur', 'ks'];
	  var nodeObserver = null;
	  var pendingElements = null;

	  var moConfig = {
	    attributes: true,
	    characterData: false,
	    childList: true,
	    subtree: true,
	    attributeFilter: ['data-l10n-id', 'data-l10n-args']
	  };

	  // Public API

	  navigator.mozL10n = {
	    ctx: null,
	    get: function get(id, ctxdata) {
	      return navigator.mozL10n.ctx.get(id, ctxdata);
	    },
	    formatValue: function(id, ctxdata) {
	      return navigator.mozL10n.ctx.formatValue(id, ctxdata);
	    },
	    formatEntity: function(id, ctxdata) {
	      return navigator.mozL10n.ctx.formatEntity(id, ctxdata);
	    },
	    translateFragment: function (fragment) {
	      return translateFragment.call(navigator.mozL10n, fragment);
	    },
	    setAttributes: setL10nAttributes,
	    getAttributes: getL10nAttributes,
	    ready: function ready(callback) {
	      return navigator.mozL10n.ctx.ready(callback);
	    },
	    once: function once(callback) {
	      return navigator.mozL10n.ctx.once(callback);
	    },
	    get readyState() {
	      return navigator.mozL10n.ctx.isReady ? 'complete' : 'loading';
	    },
	    language: {
	      set code(lang) {
	        navigator.mozL10n.ctx.requestLocales(lang);
	      },
	      get code() {
	        return navigator.mozL10n.ctx.supportedLocales[0];
	      },
	      get direction() {
	        return getDirection(navigator.mozL10n.ctx.supportedLocales[0]);
	      }
	    },
	    qps: PSEUDO,
	    _config: {
	      appVersion: null,
	      localeSources: Object.create(null),
	      isPretranslated: false,
	    },
	    _getInternalAPI: function() {
	      return {
	        Error: L10nError,
	        Context: Context,
	        Locale: Locale,
	        Resolver: Resolver,
	        getPluralRule: getPluralRule,
	        rePlaceables: rePlaceables,
	        translateDocument: translateDocument,
	        onMetaInjected: onMetaInjected,
	        PropertiesParser: PropertiesParser,
	        walkContent: walkContent,
	        buildLocaleList: buildLocaleList
	      };
	    }
	  };

	  function getDirection(lang) {
	    return (rtlList.indexOf(lang) >= 0) ? 'rtl' : 'ltr';
	  }

	  var readyStates = {
	    loading: 0,
	    interactive: 1,
	    complete: 2
	  };

	  function whenInteractive(callback) {
	    if (readyStates[document.readyState] >= readyStates.interactive) {
	      callback();
	      return;
	    }

	    document.addEventListener('readystatechange', function l10n_onrsc() {
	      if (readyStates[document.readyState] >= readyStates.interactive) {
	        document.removeEventListener('readystatechange', l10n_onrsc);
	        callback();
	      }
	    });
	  }

	  function initObserver() {
	    nodeObserver = new MutationObserver(onMutations.bind(navigator.mozL10n));
	    nodeObserver.observe(document, moConfig);
	  }

	  function init(pretranslate) {
	    if (!pretranslate) {
	      // initialize MO early to collect nodes injected between now and when
	      // resources are loaded because we're not going to translate the whole
	      // document once l10n resources are ready
	      initObserver();
	    }
	    initResources.call(navigator.mozL10n);
	  }

	  function initResources() {
	    /* jshint boss:true */

	    var meta = {};
	    var nodes = document.head
	                        .querySelectorAll('link[rel="localization"],' +
	                                          'meta[name="availableLanguages"],' +
	                                          'meta[name="defaultLanguage"],' +
	                                          'meta[name="appVersion"],' +
	                                          'script[type="application/l10n"]');
	    for (var i = 0, node; node = nodes[i]; i++) {
	      var type = node.getAttribute('rel') || node.nodeName.toLowerCase();
	      switch (type) {
	        case 'localization':
	          this.ctx.resLinks.push(node.getAttribute('href'));
	          break;
	        case 'meta':
	          onMetaInjected.call(this, node, meta);
	          break;
	        case 'script':
	          onScriptInjected.call(this, node);
	          break;
	      }
	    }

	    var additionalLanguagesPromise;

	    if (navigator.mozApps && navigator.mozApps.getAdditionalLanguages) {
	      // if the environment supports langpacks, register extra languages…
	      additionalLanguagesPromise =
	        navigator.mozApps.getAdditionalLanguages().catch(function(e) {
	          console.error('Error while loading getAdditionalLanguages', e);
	        });

	      // …and listen to langpacks being added and removed
	      document.addEventListener('additionallanguageschange', function(evt) {
	        registerLocales.call(this, meta, evt.detail);
	        this.ctx.requestLocales.apply(
	          this.ctx, navigator.languages || [navigator.language]);
	      }.bind(this));
	    } else {
	      additionalLanguagesPromise = Promise.resolve();
	    }

	    additionalLanguagesPromise.then(function(extraLangs) {
	      registerLocales.call(this, meta, extraLangs);
	      initLocale.call(this);
	    }.bind(this));
	  }

	  function registerLocales(meta, extraLangs) {
	    var locales = buildLocaleList.call(this, meta, extraLangs);
	    navigator.mozL10n._config.localeSources = locales[1];
	    this.ctx.registerLocales(locales[0], Object.keys(locales[1]));
	  }

	  function getMatchingLangpack(appVersion, langpacks) {
	    for (var i = 0, langpack; (langpack = langpacks[i]); i++) {
	      if (langpack.target === appVersion) {
	        return langpack;
	      }
	    }
	    return null;
	  }

	  function buildLocaleList(meta, extraLangs) {
	    var loc, lp;
	    var localeSources = Object.create(null);
	    var defaultLocale = meta.defaultLanguage || this.ctx.defaultLocale;

	    if (meta.availableLanguages) {
	      for (loc in meta.availableLanguages) {
	        localeSources[loc] = 'app';
	      }
	    }

	    if (extraLangs) {
	      for (loc in extraLangs) {
	        lp = getMatchingLangpack(this._config.appVersion, extraLangs[loc]);

	        if (!lp) {
	          continue;
	        }
	        if (!(loc in localeSources) ||
	            !meta.availableLanguages[loc] ||
	            parseInt(lp.revision) > meta.availableLanguages[loc]) {
	          localeSources[loc] = 'extra';
	        }
	      }
	    }

	    if (!(defaultLocale in localeSources)) {
	      localeSources[defaultLocale] = 'app';
	    }
	    return [defaultLocale, localeSources];
	  }

	  function splitAvailableLanguagesString(str) {
	    var langs = {};

	    str.split(',').forEach(function(lang) {
	      // code:revision
	      lang = lang.trim().split(':');
	      // if revision is missing, use NaN
	      langs[lang[0]] = parseInt(lang[1]);
	    });
	    return langs;
	  }

	  function onMetaInjected(node, meta) {
	    switch (node.getAttribute('name')) {
	      case 'availableLanguages':
	        meta.availableLanguages =
	          splitAvailableLanguagesString(node.getAttribute('content'));
	        break;
	      case 'defaultLanguage':
	        meta.defaultLanguage = node.getAttribute('content');
	        break;
	      case 'appVersion':
	        navigator.mozL10n._config.appVersion = node.getAttribute('content');
	        break;
	    }
	  }

	  function onScriptInjected(node) {
	    var lang = node.getAttribute('lang');
	    var locale = this.ctx.getLocale(lang);
	    locale.addAST(JSON.parse(node.textContent));
	  }

	  function initLocale() {
	    this.ctx.requestLocales.apply(
	      this.ctx, navigator.languages || [navigator.language]);
	    window.addEventListener('languagechange', function l10n_langchange() {
	      this.ctx.requestLocales.apply(
	        this.ctx, navigator.languages || [navigator.language]);
	    }.bind(this));
	  }

	  function localizeMutations(mutations) {
	    var mutation;
	    var targets = new Set();

	    for (var i = 0; i < mutations.length; i++) {
	      mutation = mutations[i];
	      if (mutation.type === 'childList') {
	        var addedNode;

	        for (var j = 0; j < mutation.addedNodes.length; j++) {
	          addedNode = mutation.addedNodes[j];
	          if (addedNode.nodeType !== Node.ELEMENT_NODE) {
	            continue;
	          }
	          targets.add(addedNode);
	        }
	      }

	      if (mutation.type === 'attributes') {
	        targets.add(mutation.target);
	      }
	    }

	    targets.forEach(function(target) {
	      if (target.childElementCount) {
	        translateFragment.call(this, target);
	      } else if (target.hasAttribute('data-l10n-id')) {
	        translateElement.call(this, target);
	      }
	    }, this);
	  }

	  function onMutations(mutations, self) {
	    self.disconnect();
	    localizeMutations.call(this, mutations);
	    self.observe(document, moConfig);
	  }

	  function onReady() {
	    if (!navigator.mozL10n._config.isPretranslated) {
	      translateDocument.call(this);
	    }
	    navigator.mozL10n._config.isPretranslated = false;

	    if (pendingElements) {
	      /* jshint boss:true */
	      for (var i = 0, element; element = pendingElements[i]; i++) {
	        translateElement.call(this, element);
	      }
	      pendingElements = null;
	    }

	    if (!nodeObserver) {
	      initObserver();
	    }
	    fireLocalizedEvent.call(this);
	  }

	  function fireLocalizedEvent() {
	    var event = new CustomEvent('localized', {
	      'bubbles': false,
	      'cancelable': false,
	      'detail': {
	        'language': this.ctx.supportedLocales[0]
	      }
	    });
	    window.dispatchEvent(event);
	  }


	  // match the opening angle bracket (<) in HTML tags, and HTML entities like
	  // &amp;, &#0038;, &#x0026;.
	  var reOverlay = /<|&#?\w+;/;
	  var reHtml = /[&<>]/g;
	  var htmlEntities = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	  };

	  function translateDocument() {
	    document.documentElement.lang = this.language.code;
	    document.documentElement.dir = this.language.direction;
	    translateFragment.call(this, document.documentElement);
	  }

	  function translateFragment(element) {
	    if (typeof element.hasAttribute === 'function' &&
	        element.hasAttribute('data-l10n-id')) {
	      translateElement.call(this, element);
	    }

	    var nodes = getTranslatableChildren(element);
	    for (var i = 0; i < nodes.length; i++ ) {
	      translateElement.call(this, nodes[i]);
	    }
	  }

	  function setL10nAttributes(element, id, args) {
	    element.setAttribute('data-l10n-id', id);
	    if (args) {
	      element.setAttribute('data-l10n-args', JSON.stringify(args));
	    }
	  }

	  function getL10nAttributes(element) {
	    return {
	      id: element.getAttribute('data-l10n-id'),
	      args: JSON.parse(element.getAttribute('data-l10n-args'))
	    };
	  }

	  function getTranslatableChildren(element) {
	    return element ? element.querySelectorAll('*[data-l10n-id]') : [];
	  }

	  function camelCaseToDashed(string) {
	    // XXX workaround for https://bugzil.la/1141934
	    if (string === 'ariaValueText') {
	      return 'aria-valuetext';
	    }

	    return string
	      .replace(/[A-Z]/g, function (match) {
	        return '-' + match.toLowerCase();
	      })
	      .replace(/^-/, '');
	  }

	  function escapeL10nArgs(match) {
	    return htmlEntities[match];
	  }

	  function translateElement(element) {
	    if (!this.ctx.isReady) {
	      if (!pendingElements) {
	        pendingElements = [];
	      }
	      pendingElements.push(element);
	      return;
	    }

	    var l10nId = element.getAttribute('data-l10n-id');

	    if (!l10nId) {
	      return false;
	    }

	    var l10nArgs = element.getAttribute('data-l10n-args');

	    var entity = this.ctx.getEntity(
	      l10nId,
	      l10nArgs ?
	        JSON.parse(l10nArgs.replace(reHtml, escapeL10nArgs)) :
	        undefined$1
	    );

	    var value = entity.value;

	    if (typeof value === 'string') {
	      if (!reOverlay.test(value)) {
	        element.textContent = value;
	      } else {
	        // start with an inert template element and move its children into
	        // `element` but such that `element`'s own children are not replaced
	        var translation = element.ownerDocument.createElement('template');
	        translation.innerHTML = value;
	        // overlay the node with the DocumentFragment
	        overlayElement(element, translation.content);
	      }
	    }

	    for (var key in entity.attrs) {
	      var attrName = camelCaseToDashed(key);
	      if (isAttrAllowed({ name: attrName }, element)) {
	        element.setAttribute(attrName, entity.attrs[key]);
	      }
	    }
	  }

	  // The goal of overlayElement is to move the children of `translationElement`
	  // into `sourceElement` such that `sourceElement`'s own children are not
	  // replaced, but onle have their text nodes and their attributes modified.
	  //
	  // We want to make it possible for localizers to apply text-level semantics to
	  // the translations and make use of HTML entities. At the same time, we
	  // don't trust translations so we need to filter unsafe elements and
	  // attribtues out and we don't want to break the Web by replacing elements to
	  // which third-party code might have created references (e.g. two-way
	  // bindings in MVC frameworks).
	  function overlayElement(sourceElement, translationElement) {
	    var result = translationElement.ownerDocument.createDocumentFragment();
	    var k, attr;

	    // take one node from translationElement at a time and check it against
	    // the allowed list or try to match it with a corresponding element
	    // in the source
	    var childElement;
	    while ((childElement = translationElement.childNodes[0])) {
	      translationElement.removeChild(childElement);

	      if (childElement.nodeType === Node.TEXT_NODE) {
	        result.appendChild(childElement);
	        continue;
	      }

	      var index = getIndexOfType(childElement);
	      var sourceChild = getNthElementOfType(sourceElement, childElement, index);
	      if (sourceChild) {
	        // there is a corresponding element in the source, let's use it
	        overlayElement(sourceChild, childElement);
	        result.appendChild(sourceChild);
	        continue;
	      }

	      if (isElementAllowed(childElement)) {
	        var sanitizedChild = childElement.ownerDocument.createElement(
	          childElement.nodeName);
	        overlayElement(sanitizedChild, childElement);
	        result.appendChild(sanitizedChild);
	        continue;
	      }

	      // otherwise just take this child's textContent
	      result.appendChild(
	        document.createTextNode(childElement.textContent));
	    }

	    // clear `sourceElement` and append `result` which by this time contains
	    // `sourceElement`'s original children, overlayed with translation
	    sourceElement.textContent = '';
	    sourceElement.appendChild(result);

	    // if we're overlaying a nested element, translate the allowed
	    // attributes; top-level attributes are handled in `translateElement`
	    // XXX attributes previously set here for another language should be
	    // cleared if a new language doesn't use them; https://bugzil.la/922577
	    if (translationElement.attributes) {
	      for (k = 0, attr; (attr = translationElement.attributes[k]); k++) {
	        if (isAttrAllowed(attr, sourceElement)) {
	          sourceElement.setAttribute(attr.name, attr.value);
	        }
	      }
	    }
	  }

	  // XXX the allowed list should be amendable; https://bugzil.la/922573
	  function isElementAllowed(element) {
	    return allowed.elements.indexOf(element.tagName.toLowerCase()) !== -1;
	  }

	  function isAttrAllowed(attr, element) {
	    var attrName = attr.name.toLowerCase();
	    var tagName = element.tagName.toLowerCase();
	    // is it a globally safe attribute?
	    if (allowed.attributes.global.indexOf(attrName) !== -1) {
	      return true;
	    }
	    // are there no allowed attributes for this element?
	    if (!allowed.attributes[tagName]) {
	      return false;
	    }
	    // is it allowed on this element?
	    // XXX the allowed list should be amendable; https://bugzil.la/922573
	    if (allowed.attributes[tagName].indexOf(attrName) !== -1) {
	      return true;
	    }
	    // special case for value on inputs with type button, reset, submit
	    if (tagName === 'input' && attrName === 'value') {
	      var type = element.type.toLowerCase();
	      if (type === 'submit' || type === 'button' || type === 'reset') {
	        return true;
	      }
	    }
	    return false;
	  }

	  // Get n-th immediate child of context that is of the same type as element.
	  // XXX Use querySelector(':scope > ELEMENT:nth-of-type(index)'), when:
	  // 1) :scope is widely supported in more browsers and 2) it works with
	  // DocumentFragments.
	  function getNthElementOfType(context, element, index) {
	    /* jshint boss:true */
	    var nthOfType = 0;
	    for (var i = 0, child; child = context.children[i]; i++) {
	      if (child.nodeType === Node.ELEMENT_NODE &&
	          child.tagName === element.tagName) {
	        if (nthOfType === index) {
	          return child;
	        }
	        nthOfType++;
	      }
	    }
	    return null;
	  }

	  // Get the index of the element among siblings of the same type.
	  function getIndexOfType(element) {
	    var index = 0;
	    var child;
	    while ((child = element.previousElementSibling)) {
	      if (child.tagName === element.tagName) {
	        index++;
	      }
	    }
	    return index;
	  }

	  navigator.mozL10n.ctx = new Context(window.document ? document.URL : null);
	  navigator.mozL10n.ctx.ready(onReady.bind(navigator.mozL10n));

	  navigator.mozL10n.ctx.addEventListener('notfounderror',
	    function reportMissingEntity(e) {
	      if ( e.loc === 'en-US') {
	        console.warn(e.toString());
	      }
	  });

	  if (window.document) {
	    navigator.mozL10n._config.isPretranslated =
	      document.documentElement.lang === navigator.language;

	    var forcePretranslate = !navigator.mozL10n._config.isPretranslated;
	    whenInteractive(init.bind(navigator.mozL10n, forcePretranslate));
	  }

	  document.l10n = {
	    setAttributes: navigator.mozL10n.setAttributes,
	    getAttributes: navigator.mozL10n.getAttributes,
	    formatValue: function(id, args) {
	      return navigator.mozL10n.formatValue(id, args);
	    },
	    translateFragment: function (frag) {
	      return Promise.resolve(navigator.mozL10n.translateFragment(frag));
	    },
	    ready: new Promise(function(resolve) {
	      navigator.mozL10n.once(resolve);
	    }),
	    formatValues: function() {
	      var keys = arguments;
	      var resp = keys.map(function(key) {
	        if (Array.isArray(key)) {
	          return navigator.mozL10n.formatValue(key[0], key[1]);
	        }
	        return navigator.mozL10n.formatValue(key);
	      });

	      return Promise.all(resp);
	    },
	    requestLanguages: function(langs) {
	      // XXX real l20n returns a promise
	      navigator.mozL10n.ctx.requestLocales.apply(
	        navigator.mozL10n.ctx, langs);
	    },
	    get pseudo() {
	      var result = {};
	      /*jshint -W083 */
	      for (var code in navigator.mozL10n.qps) {
	        result[code] = {
	          getName: function() {
	            return Promise.resolve(navigator.mozL10n.qps[code].name);
	          },
	          processString: function(s) {
	           return Promise.resolve(
	            navigator.mozL10n.qps[code].translate(s));
	          }
	        };
	      }
	      return result;
	    }
	  };

	  navigator.mozL10n.ready(function() {
	    document.documentElement.setAttribute(
	      'langs', navigator.mozL10n.ctx.supportedLocales.join(' '));
	  });

	  navigator.mozL10n.once(function() {
	    window.addEventListener('localized', function() {
	      document.dispatchEvent(new CustomEvent('DOMRetranslated', {
	        bubbles: false,
	        cancelable: false
	      }));
	    });
	  });

	})(window);

	var appNode = document.getElementById('app');
	var addKaiosEvents = appNode.getAttribute('kaios') === 'true';

	if (addKaiosEvents) {
	  window.addEventListener('focus', /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            if (!ignoreOnCameraBlur()) {
	              _context2.next = 2;
	              break;
	            }

	            return _context2.abrupt("return");

	          case 2:
	            setTimeout( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	              return regenerator.wrap(function _callee$(_context) {
	                while (1) {
	                  switch (_context.prev = _context.next) {
	                    case 0:
	                      _context.next = 2;
	                      return loadStartScreen();

	                    case 2:
	                    case "end":
	                      return _context.stop();
	                  }
	                }
	              }, _callee);
	            })), 300);

	          case 3:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  })));
	  window.addEventListener('blur', function () {
	    if (ignoreOnCameraBlur()) {
	      return;
	    }

	    reset();
	  });
	} else {
	  window.addEventListener('load', function () {
	    setTimeout( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
	      return regenerator.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return loadStartScreen();

	            case 2:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    })), 300);
	  });
	} // @ts-ignore


	navigator.mozL10n.ready(function () {
	  // @ts-ignore
	  languageStore.set(navigator.mozL10n.get);
	});
	var app = new App({
	  target: appNode,
	  props: {
	    version: function version() {
	      return '1.0.1';
	    }
	  }
	});

}());
//# sourceMappingURL=bundle.js.map
